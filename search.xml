<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTTP 缓存之 no-cache 和 no-store 的区别</title>
    <url>/2021/07/06/browser/http-cache/</url>
    <content><![CDATA[<blockquote>
<p><code>no-cache</code> 和 <code>no-store</code> 都是 HTTP 协议头 <code>Cache-Control</code> 的值。</p>
</blockquote>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="no-store"><a href="#no-store" class="headerlink" title="no-store"></a>no-store</h2><p>响应不被缓存<br>彻底禁用缓冲，所有内容都不会被缓存到缓存或临时文件中。</p>
<h2 id="no-cache"><a href="#no-cache" class="headerlink" title="no-cache"></a>no-cache</h2><p>每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存响应的有效性<br>在浏览器使用缓存前，会往返对比 ETag，如果 ETag 没变，返回 304，则使用缓存</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><blockquote>
<p>除了 <code>no-cache</code> 和 <code>no-store</code>，<code>Cache-Control</code> 头的取值还有：</p>
</blockquote>
<h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><p>所有内容都将被缓存（客户端和代理服务器都可缓存）</p>
<h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><p>内容只缓存到私有缓存中（仅客户端可以缓存，代理服务器不可缓存）</p>
<h2 id="max-age-xxx"><a href="#max-age-xxx" class="headerlink" title="max-age=xxx"></a>max-age=xxx</h2><p>缓存的内容将在 xxx 秒后失效，这个选项只在 HTTP1.1 可用，并如果和 <code>Last-Modified</code> 一起使用时，优先级较高。</p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>输入url到展示页面过程发生了什么？</title>
    <url>/2021/07/06/browser/input-url/</url>
    <content><![CDATA[<p><strong>1. 输入网址，首先在书签或者历史记录里面去搜索相关的网址推荐给你</strong></p>
<p><strong>2. 浏览器查找域名的 IP 的地址</strong><br>在 hosts 文件有没有对应 IP -&gt; 浏览器发出一个 DNS 请求到本地 DNS 服务器，本地服务器一般是网络接入服务商提供，如电信、移动 -&gt; 本地服务器查询缓存记录，有则直接返回结果，没有则向 DNS 根服务器查询，此过程递归 -&gt; DNS 根服务器返回域服务器给本地服务器 -&gt; 本地服务器向域服务器发送请求，域服务器返回域名和解析服务器地址 -&gt; 本地服务器向域名的解析服务器发出请求，域名的解析服务器返回一个域名和 IP 地址对应关系，本地服务器把 IP 返回给用户电脑，并把这个对应关系存在缓存中</p>
<p><strong>3. 建立 TCP 连接</strong><br>即 TCP 的 3 次握手（客服端发送一个带有 SYN 标志的数据包给服务端，服务端收到后，回一个带有 SYN/ACK 标志的数据包以示传达确认信息，最后客服端再传回一个带 ACK 标志的数据包，代表握手结束，连接成功。）<br><img src="/images/source-img/input-url1.png" style="margin-left: 0"></p>
<p><strong>4. 浏览器向 web 服务器发起 HTTP 请求</strong></p>
<p><strong>5. 服务端处理</strong></p>
<p><strong>6. 关闭 TCP 连接，（有 4 次握手）</strong><br>为了避免服务器和客服端双方的资源占用和损耗，当双方没有请求或响应传递时，任意一方都可以发起关闭请求，与创建 TCP 连接类似<br><img src="/images/source-img/input-url2.png" style="margin-left: 0"></p>
<p><strong>7. 浏览器解析资源（解析得到的 html、css、js 等）</strong></p>
<ol>
<li>渲染进程将 HTML 内容转换为能够读懂的 DOM 树结构。</li>
<li>渲染引擎将 CSS 样式表转化为浏览器可以理解的 styleSheets，计算出 DOM 节点的样式。</li>
<li>创建布局树，并计算元素的布局信息。</li>
<li>对布局树进行分层，并生成分层树。为</li>
<li>每个图层生成绘制列表，并将其提交到合成线程。</li>
<li>合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。</li>
<li>合成线程发送绘制图块命令 DrawQuad 给浏览器进程。</li>
<li>浏览器进程根据 DrawQuad 消息生成页面，并显示到显示器上。</li>
</ol>
<p><strong>8. 浏览器布局渲染</strong></p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码</title>
    <url>/2021/07/06/browser/http-code/</url>
    <content><![CDATA[<h1 id="分类描述"><a href="#分类描述" class="headerlink" title="分类描述"></a>分类描述</h1><ul>
<li><code>1**</code>信息，服务器收到请求，需要请求者继续执行操作</li>
<li><code>2**</code>成功，操作被成功接收并处理</li>
<li><code>3**</code>重定向，需要进一步的操作以完成请求</li>
<li><code>4**</code>客户端错误，请求包含语法错误或无法完成请求</li>
<li><code>5**</code>服务器错误，服务器在处理请求的过程中发生了错误</li>
</ul>
<h1 id="1-开头的状态码"><a href="#1-开头的状态码" class="headerlink" title="1 开头的状态码"></a>1 开头的状态码</h1><ul>
<li><code>100</code> Continue 继续。客户端应继续其请求</li>
<li><code>101</code> Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议</li>
</ul>
<h1 id="2-开头的状态码"><a href="#2-开头的状态码" class="headerlink" title="2 开头的状态码"></a>2 开头的状态码</h1><ul>
<li><code>200</code> OK 请求成功。一般用于 GET 与 POST 请求</li>
<li><code>201</code> Created 已创建。成功请求并创建了新的资源</li>
<li><code>202</code> Accepted 已接受。已经接受请求，但未处理完成</li>
</ul>
<h1 id="3-开头的状态码"><a href="#3-开头的状态码" class="headerlink" title="3 开头的状态码"></a>3 开头的状态码</h1><ul>
<li><code>300</code> Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端(例如：浏览器)选择</li>
<li><code>301</code> Moved Permanently 永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI 代替</li>
<li><code>302</code> Found 临时移动。与 301 类似。但资源只是临时被移动。客户端应继续使用原有 URI</li>
<li><code>303</code> See Other 查看其它地址。与 301 类似。使用 GET 和 POST 请求查看</li>
<li><code>304</code> Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</li>
<li><code>305</code> Use Proxy 使用代理。所请求的资源必须通过代理访问</li>
<li><code>306</code> Unused 已经被废弃的 HTTP 状态码</li>
<li><code>307</code> Temporary Redirect 临时重定向。与 302 类似。使用 GET 请求重定向</li>
</ul>
<h1 id="4-开头的状态码"><a href="#4-开头的状态码" class="headerlink" title="4 开头的状态码"></a>4 开头的状态码</h1><ul>
<li><code>400</code> Bad Request 客户端请求的语法错误，服务器无法理解</li>
<li><code>401</code> Unauthorized 请求要求用户的身份认证</li>
<li><code>402</code> Payment Required 保留，将来使用</li>
<li><code>403</code> Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求</li>
<li><code>404</code> Not Found 服务器无法根据客户端的请求找到资源(网页)。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</li>
</ul>
<h1 id="5-开头的状态码"><a href="#5-开头的状态码" class="headerlink" title="5 开头的状态码"></a>5 开头的状态码</h1><ul>
<li><code>500</code> Internal Server Error 服务器内部错误，无法完成请求</li>
</ul>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>重绘与回流</title>
    <url>/2020/09/03/browser/repaint-reflow/</url>
    <content><![CDATA[<h1 id="重绘-repaint"><a href="#重绘-repaint" class="headerlink" title="重绘(repaint)"></a>重绘(repaint)</h1><p>当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要 UI 层面的重新像素绘制，因此 损耗较少。</p>
<h1 id="回流-reflow"><a href="#回流-reflow" class="headerlink" title="回流(reflow)"></a>回流(reflow)</h1><p>当元素的尺寸、结构或触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。</p>
<h1 id="会触发回流的操作"><a href="#会触发回流的操作" class="headerlink" title="会触发回流的操作"></a>会触发回流的操作</h1><ul>
<li>页面初次渲染</li>
<li>浏览器窗口大小改变</li>
<li>元素尺寸、位置、内容发生改变</li>
<li>元素字体大小变化</li>
<li>添加或者删除可见的 dom 元素</li>
<li>激活 CSS 伪类（例如：:hover）</li>
<li>查询某些属性或调用某些方法</li>
<li>clientWidth、clientHeight、clientTop、clientLeft</li>
<li>offsetWidth、offsetHeight、offsetTop、offsetLeft</li>
<li>scrollWidth、scrollHeight、scrollTop、scrollLeft</li>
<li>getComputedStyle()</li>
<li>getBoundingClientRect()</li>
<li>scrollTo()</li>
</ul>
<p><strong>回流必定触发重绘，重绘不一定触发回流。重绘的开销较小，回流的代价较高。</strong></p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈浏览器垃圾回收机制</title>
    <url>/2021/07/06/browser/trash-recycling/</url>
    <content><![CDATA[<h1 id="垃圾回收机制原理"><a href="#垃圾回收机制原理" class="headerlink" title="垃圾回收机制原理"></a>垃圾回收机制原理</h1><p>由于字符串、对象和数组没有固定大小，所有当他们的大小已知时，才能对他们进行动态的存储分配。JavaScript 程序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript 的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。</p>
<h1 id="垃圾回收原理浅析"><a href="#垃圾回收原理浅析" class="headerlink" title="垃圾回收原理浅析"></a>垃圾回收原理浅析</h1><p>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。</p>
<h2 id="标记清除（mark-and-sweep）"><a href="#标记清除（mark-and-sweep）" class="headerlink" title="标记清除（mark and sweep）"></a>标记清除（mark and sweep）</h2><p>大部分浏览器以此方式进行垃圾回收，当变量进入执行环境（函数中声明变量,执行时）的时候，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”，在离开环境之后还有的变量则是需要被删除的变量。标记方式不定，可以是某个特殊位的反转或维护一个列表等。<br>   垃圾收集器给内存中的所有变量都加上标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记。在此之后再被加上的标记的变量即为需要回收的变量，因为环境中的变量已经无法访问到这些变量。</p>
<h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>另一种不太常见的垃圾回收策略是引用计数。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减 1。当这个引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为 0 的值所占的内存。<br>该方式会引起内存泄漏的原因是它不能解决循环引用的问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line">  a.prop = b;</span><br><span class="line">  b.prop = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情况下每次调用 sample()函数，a 和 b 的引用计数都是 2，会使这部分内存永远不会被释放，即内存泄漏。</p>
<p>低版本 IE 中有一部分对象并不是原生 JS 对象。例如，其 BOM 和 DOM 中的对象就是使用 C++以 COM(Component Object Model)对象的形式实现的，而 COM 对象的垃圾收集机制采用的就是引用计数策略。</p>
<p>因此即使 IE 的 js 引擎是用的标记清除来实现的，但是 js 访问 COM 对象如 BOM,DOM 还是基于引用计数的策略的，也就是说只要在 IE 中设计到 COM 对象，也就会存在循环引用的问题。</p>
<p>当一个 DOM 元素和一个原生的 js 对象之间的循环引用时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">&quot;eleId&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.property = ele;</span><br><span class="line">ele.property = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加 */</span></span><br><span class="line">obj.property = <span class="literal">null</span>;</span><br><span class="line">ele.property = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">/* 即可解除原生JS对象与DOM元素之间的连接 */</span></span><br></pre></td></tr></table></figure>

<p>当闭包中创建循环引用时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> <span class="title">outerFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;eleId&quot;</span>);</span><br><span class="line">  obj.onclick = <span class="function"><span class="keyword">function</span> <span class="title">innerfunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.id);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面这个代码创建了一个作为 obj 元素处理程序的闭包，而这个闭包则又创建了一个循环引用。obj 引用了 <code>document.getElementById(&quot;element&quot;)</code>，而 <code>document.getElementById(&quot;eleId&quot;)</code>的 onclick 方法会引用包括 obj 以内的外部环境中的变量，所谓“外部环境”包括了包含函数的整个活动对象，所以一定会包括 obj（即使闭包没有对 obj 进行直接的引用，例如上文程序中没有 obj.id 出现，包含函数的活动对象（obj）中也依旧会保存一个引用）。</p>
<p>可以改成下面这个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> <span class="title">outerFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;element&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> id = obj.id; <span class="comment">//将obj副本保存于变量id中，则不会使obj元素处理程序的闭包创建循环引用</span></span><br><span class="line">  obj.onclick = <span class="function"><span class="keyword">function</span> <span class="title">innerfunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">  &#125;;</span><br><span class="line">  ele = <span class="literal">null</span>; <span class="comment">//手动断开 obj 对 document.getElemengById(&quot;element&quot;)的引用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>介于 js 的垃圾回收机制，则建议如果当引用完大的对象后将其置为 <code>null</code>。</p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua</title>
    <url>/2020/08/14/cocos2d/lua/</url>
    <content><![CDATA[<blockquote>
<p>参考资料： <a href="http://www.lua.org/start.html">http://www.lua.org/start.html</a></p>
</blockquote>
<h1 id="LUA-的值与类型"><a href="#LUA-的值与类型" class="headerlink" title="LUA 的值与类型"></a>LUA 的值与类型</h1><blockquote>
<p>Lua 中有八种基本类型： nil、boolean、number、string、function、userdata、 thread 和 table。</p>
</blockquote>
<h1 id="LUA-的特点之-TALBE"><a href="#LUA-的特点之-TALBE" class="headerlink" title="LUA 的特点之 TALBE"></a>LUA 的特点之 TALBE</h1><ol>
<li><p>Table = 数组 + 映射 <br></p>
</li>
<li><p>程序猿从 0 开始，大众习惯从 1 开始</p>
</li>
</ol>
<p>数组下标从 1 开始，连续使用，自动扩展</p>
<h1 id="LUA-的函数"><a href="#LUA-的函数" class="headerlink" title="LUA 的函数"></a>LUA 的函数</h1><ol>
<li>万物皆值</li>
</ol>
<p>函数也是一种值</p>
<ol start="2">
<li>凭什么 C 语言只能返回 1 个</li>
</ol>
<p>函数支持多返回参数</p>
<h1 id="LUA-的函数表达式"><a href="#LUA-的函数表达式" class="headerlink" title="LUA 的函数表达式"></a>LUA 的函数表达式</h1><h2 id="逻辑运算就是说英文"><a href="#逻辑运算就是说英文" class="headerlink" title="逻辑运算就是说英文"></a>逻辑运算就是说英文</h2><p>– and or not<br>例：print(true and false);</p>
<h2 id="字符串连接用"><a href="#字符串连接用" class="headerlink" title="字符串连接用 .."></a>字符串连接用 ..</h2><p>例：print(“hello”..”world”);</p>
<h2 id="local-大法好"><a href="#local-大法好" class="headerlink" title="local 大法好"></a>local 大法好</h2><p>优化代码，作用域控制</p>
<h1 id="LUA-的迭代器遍历"><a href="#LUA-的迭代器遍历" class="headerlink" title="LUA 的迭代器遍历"></a>LUA 的迭代器遍历</h1><h2 id="迭代器之数组遍历"><a href="#迭代器之数组遍历" class="headerlink" title="迭代器之数组遍历"></a>迭代器之数组遍历</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">table</span>) <span class="keyword">do</span></span><br><span class="line"><span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="迭代器之-Table-遍历"><a href="#迭代器之-Table-遍历" class="headerlink" title="迭代器之 Table 遍历"></a>迭代器之 Table 遍历</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">pairs</span>(<span class="built_in">table</span>) <span class="keyword">do</span></span><br><span class="line"><span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h1 id="LUA-的表处理"><a href="#LUA-的表处理" class="headerlink" title="LUA 的表处理"></a>LUA 的表处理</h1><blockquote>
<p>这个库提供了表处理的通用函数。 所有函数都放在表 table 中。</p>
<p>记住，无论何时，若一个操作需要取表的长度， 这张表必须是一个真序列，或是拥有 __len 元方法 （参见 §3.4.7 ）。 所有的函数都忽略传入参数的那张表中的非数字键。</p>
</blockquote>
<h2 id="table-concat-list-sep-i-j"><a href="#table-concat-list-sep-i-j" class="headerlink" title="table.concat(list [, sep [, i [, j]]])"></a>table.concat(list [, sep [, i [, j]]])</h2><blockquote>
<p>提供一个列表，其所有元素都是字符串或数字，返回字符串 list[i]..sep..list[i+1] ··· sep..list[j]。 sep 的默认值是空串， i 的默认值是 1 ， j 的默认值是 #list 。 如果 i 比 j 大，返回空串。</p>
<p><strong>表连接 返回值：字符串</strong></p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 例子：</span></span><br><span class="line">fruits = &#123;<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line"><span class="comment">-- 返回 table 连接后的字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接后的字符串 &quot;</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits))</span><br><span class="line"><span class="comment">--连接后的字符串 bananaorangeapple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定连接字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接后的字符串 &quot;</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits,<span class="string">&quot;, &quot;</span>))</span><br><span class="line"><span class="comment">--连接后的字符串 banana, orange, apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定索引来连接 table</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接后的字符串 &quot;</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits,<span class="string">&quot;, &quot;</span>, <span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">--连接后的字符串 orange, apple</span></span><br></pre></td></tr></table></figure>

<h2 id="table-insert-list-pos-value"><a href="#table-insert-list-pos-value" class="headerlink" title="table.insert (list, [pos,] value)"></a>table.insert (list, [pos,] value)</h2><blockquote>
<p>在 list 的位置 pos 处插入元素 value ， 并后移元素 list[pos], list[pos+1], ···, list[#list] 。 pos 的默认值为 #list+1 ， 因此调用 table.insert(t,x) 会将 x 插在列表 t 的末尾。</p>
<p><strong>添加 table 参数 返回值：table</strong></p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 例子：</span></span><br><span class="line">fruits = &#123;<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在末尾插入</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(fruits,<span class="string">&quot;mango&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;索引为 4 的元素为 &quot;</span>,fruits[<span class="number">4</span>])</span><br><span class="line"><span class="comment">--索引为 4 的元素为 mango</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在索引为 2 的键处插入</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(fruits,<span class="number">2</span>,<span class="string">&quot;grapes&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;索引为 2 的元素为 &quot;</span>,fruits[<span class="number">2</span>])</span><br><span class="line"><span class="comment">--索引为 2 的元素为 grapes</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最后一个元素为 &quot;</span>,fruits[<span class="number">5</span>])</span><br><span class="line"><span class="comment">--最后一个元素为 mango</span></span><br></pre></td></tr></table></figure>

<h2 id="table-move-a1-f-e-t-a2"><a href="#table-move-a1-f-e-t-a2" class="headerlink" title="table.move (a1, f, e, t [,a2])"></a>table.move (a1, f, e, t [,a2])</h2><blockquote>
<p>将元素从表 a1 移到表 a2。 这个函数做了次等价于后面这个多重赋值的等价操作： a2[t],··· = a1[f],···,a1[e]。 a2 的默认值为 a1。 目标区间可以和源区间重叠。 索引 f 必须是正数。</p>
</blockquote>
<h2 id="table-pack-···"><a href="#table-pack-···" class="headerlink" title="table.pack (···)"></a>table.pack (···)</h2><blockquote>
<p>返回用所有参数以键 1,2, 等填充的新表， 并将 “n” 这个域设为参数的总数。 注意这张返回的表不一定是一个序列。</p>
</blockquote>
<h2 id="table-remove-list-pos"><a href="#table-remove-list-pos" class="headerlink" title="table.remove (list [, pos])"></a>table.remove (list [, pos])</h2><blockquote>
<p>移除 list 中 pos 位置上的元素，并返回这个被移除的值。</p>
<p>移除 table 参数 返回值：table</p>
</blockquote>
<p>当 pos 是在 1 到 #list 之间的整数时， 它向前移动元素　 list[pos+1], list[pos+2], ···, list[#list] 并删除元素 list[#list]；<br>索引 pos 可以是 #list + 1 ，或在 #list 为 0 时可以是 0 ；<br>在这些情况下，函数删除元素 list[pos]。<br>pos 默认为 #list， 因此调用 table.remove(l) 将移除表 l 的最后一个元素。</p>
<h2 id="table-sort-list-comp"><a href="#table-sort-list-comp" class="headerlink" title="table.sort (list [, comp])"></a>table.sort (list [, comp])</h2><p>在表内从 list[1] 到 list[#list] 原地 对其间元素按指定次序排序。 如果提供了 comp ， 它必须是一个可以接收两个列表内元素为参数的函数。<br>当第一个元素需要排在第二个元素之前时，返回真 （因此 not comp(list[i+1],list[i]) 在排序结束后将为真）。<br>如果没有提供 comp， 将使用标准 Lua 操作 &lt; 作为替代品。</p>
<p>排序算法并不稳定； 即当两个元素次序相等时，它们在排序后的相对位置可能会改变。</p>
<h2 id="table-unpack-list-i-j"><a href="#table-unpack-list-i-j" class="headerlink" title="table.unpack (list [, i [, j]])"></a>table.unpack (list [, i [, j]])</h2><p>返回列表中的元素。 这个函数等价于<br>return list[i], list[i+1], ···, list[j]<br>i 默认为 1 ，j 默认为 #list。</p>
]]></content>
      <categories>
        <category>cocos2d</category>
      </categories>
      <tags>
        <tag>cocos2d</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>cordova入门</title>
    <url>/2020/05/21/cordova/intro/</url>
    <content><![CDATA[<h2 id="一、什么是-Cordova"><a href="#一、什么是-Cordova" class="headerlink" title="一、什么是 Cordova"></a>一、什么是 Cordova</h2><ul>
<li>一个移动应用开发框架</li>
<li>本质是在 html，css，js 外面包装个原生的壳</li>
<li>出自于 Adobe 11 年收购的 PhoneGap,是驱动 PhoneGap 的核心引擎</li>
<li>是 apache 的顶级开源项目</li>
</ul>
<blockquote>
<p>Cordova 提供了一系列设备相关的 API, 通过这组 API，移动应用能够以 JavaScript 访问原生的设备功能， 如摄像头、麦克风等。</p>
</blockquote>
<h2 id="二、常见的移动端开发的三大分类"><a href="#二、常见的移动端开发的三大分类" class="headerlink" title="二、常见的移动端开发的三大分类"></a>二、常见的移动端开发的三大分类</h2><ol>
<li>原生 App</li>
<li>web App</li>
<li>混合 App (Hybrid App)</li>
</ol>
<h2 id="三、cordova-的优缺点"><a href="#三、cordova-的优缺点" class="headerlink" title="三、cordova 的优缺点"></a>三、cordova 的优缺点</h2><ul>
<li>优点：跨平台，便于移植，开发快速，成本低</li>
<li>缺点：执行速度相对原生会慢一些，一次编写，要处处调试</li>
</ul>
<h2 id="四、预装环境"><a href="#四、预装环境" class="headerlink" title="四、预装环境"></a>四、预装环境</h2><ol>
<li>下载并安装 Node.js。 在安装时，您应该能够在命令行上调用节点和 npm。</li>
<li>nodejs 的安装<br>nodejs 官网：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a> <br/><br>查看版本：<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></table></figure></li>
<li>安装 Cordova CLI，下载并安装 Cordova 全局模块<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g cordova</span><br></pre></td></tr></table></figure>
查看版本：<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cordova -v</span></span><br></pre></td></tr></table></figure></li>
<li>安装 Java JDK <br/><br>下载地址：<a href="https://www.oracle.com/java/technologies/javase-jdk14-downloads.html">https://www.oracle.com/java/technologies/javase-jdk14-downloads.html</a> <br/><br>查看版本：<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br><span class="line">javac -<span class="built_in">version</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="五、创建第一个-APP"><a href="#五、创建第一个-APP" class="headerlink" title="五、创建第一个 APP"></a>五、创建第一个 APP</h2><ol>
<li><p>创建 App</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cordova</span> <span class="selector-tag">create</span> <span class="selector-attr">[projectName]</span> <span class="selector-attr">[packageName]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">eg</span>: <span class="selector-tag">cordova</span> <span class="selector-tag">create</span> <span class="selector-tag">hello</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.hello</span> <span class="selector-tag">HelloWorld</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">hello</span>：<span class="selector-tag">cordova</span>目录名</span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.hello</span>： 包名</span><br><span class="line"><span class="selector-tag">HelloWorld</span>： 项目名（在<span class="selector-tag">config</span><span class="selector-class">.xml</span>中查看）</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello</span><br></pre></td></tr></table></figure></li>
<li><p>添加平台</p>
<ol>
<li><p>给你的 App 添加目标平台</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">cordova <span class="built_in">platform</span> <span class="built_in">add</span> ios <span class="comment">--save</span></span><br><span class="line">cordova <span class="built_in">platform</span> <span class="built_in">add</span> android <span class="comment">--save</span></span><br><span class="line">cordova <span class="built_in">platform</span> <span class="built_in">add</span> browser <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li>
<li><p>检查你当前平台设置状况</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">cordova <span class="keyword">platform</span> ls</span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Installed</span> platforms:</span><br><span class="line">  <span class="attribute">android</span> <span class="number">8</span>.<span class="number">1</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">ios</span> <span class="number">5</span>.<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Available</span> platforms:</span><br><span class="line">  <span class="attribute">browser</span> ^<span class="number">6</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">electron</span> ^<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">osx</span> ^<span class="number">5</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">windows</span> ^<span class="number">7</span>.<span class="number">0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>移除 android 平台</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">cordova <span class="keyword">platform</span> rm android</span><br></pre></td></tr></table></figure></li>
<li><p>检查打包条件</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cordova requirements</span></span><br></pre></td></tr></table></figure></li>
<li><p>编译 App，打包 app</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cordova build android</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试 App，打包 cordova 项目到 Android/iOS 平台</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cordova <span class="keyword">run</span><span class="bash"> android</span></span><br></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Could <span class="keyword">not</span> find an installed <span class="keyword">version</span> <span class="keyword">of</span> Gradle either <span class="keyword">in</span> Android Studio,</span><br><span class="line"><span class="keyword">or</span> <span class="keyword">on</span> your <span class="keyword">system</span> <span class="keyword">to</span> install the gradle <span class="keyword">wrapper</span>. Please <span class="keyword">include</span> gradle</span><br><span class="line"><span class="keyword">in</span> your <span class="type">path</span>, <span class="keyword">or</span> install Android Studio</span><br></pre></td></tr></table></figure></li>
<li><p>安装 gradle</br></br><br><a href="https://gradle.org/releases/">点击下载 gradle：https://gradle.org/releases/</a></br></br><br>配置环境变量：系统变量–Path–编辑</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gradle -v</span></span><br></pre></td></tr></table></figure></li>
<li><p>指定模拟器</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">cordova emulate ios --<span class="keyword">target</span>=<span class="string">&#x27;iPhone-11&#x27;</span></span><br><span class="line">cordova emulate ios --<span class="keyword">target</span> iPhone<span class="number">-6</span>s</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="六、cordova-应用启动流程"><a href="#六、cordova-应用启动流程" class="headerlink" title="六、cordova 应用启动流程"></a>六、cordova 应用启动流程</h2><p>Html 页面加载流程</p>
<ol>
<li>原生代码启动</li>
<li>splashscreen</li>
<li>load html</li>
<li>顺序执行 javascript =&gt; cordova.js 也执行</li>
<li>$(document).ready()执行，cordova 中的事件不一定可用 6.注册 deviceready 事件</li>
</ol>
<h2 id="七、插件"><a href="#七、插件" class="headerlink" title="七、插件"></a>七、插件</h2><ol>
<li>添加插件<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">cordova plugin <span class="keyword">add</span> [plugin-<span class="keyword">full</span>-<span class="type">name</span>]</span><br></pre></td></tr></table></figure></li>
<li>删除插件<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">cordova <span class="keyword">plugin</span> <span class="keyword">rm</span> [<span class="keyword">plugin</span>-full-name]</span><br></pre></td></tr></table></figure></li>
<li>查看已添加的插件<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">cordova <span class="keyword">plugin</span> <span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">插件列表：</span><br><span class="line">cordova <span class="keyword">plugin</span> add cordova-<span class="keyword">plugin</span>-device 基本设备信息</span><br><span class="line">cordova-<span class="keyword">plugin</span>-device 基本设备信息</span><br><span class="line">cordova-<span class="keyword">plugin</span>-network-information 网络连接信息</span><br><span class="line">cordova-<span class="keyword">plugin</span>-battery-status 电池状态信息</span><br><span class="line">cordova-<span class="keyword">plugin</span>-device-motion 加速度信息</span><br><span class="line">cordova-<span class="keyword">plugin</span>-device-orientation 指南针信息</span><br><span class="line">cordova-<span class="keyword">plugin</span>-geolocation 定位数据</span><br><span class="line">cordova-<span class="keyword">plugin</span>-camera 相机</span><br><span class="line">cordova-<span class="keyword">plugin</span>-media-<span class="keyword">capture</span> 媒体捕获</span><br><span class="line">cordova-<span class="keyword">plugin</span>-media 媒体播放器</span><br><span class="line">cordova-<span class="keyword">plugin</span>-<span class="keyword">file</span> 访问文件</span><br><span class="line">cordova-<span class="keyword">plugin</span>-<span class="keyword">file</span>-transfer 文件传递</span><br><span class="line">cordova-<span class="keyword">plugin</span>-dialogs 消息提示对话框</span><br><span class="line">cordova-<span class="keyword">plugin</span>-vibration 振动提醒</span><br><span class="line">cordova-<span class="keyword">plugin</span>-contacts 联系人</span><br><span class="line">cordova-<span class="keyword">plugin</span>-globalization 全球化</span><br><span class="line">cordova-<span class="keyword">plugin</span>-splashscreen 闪屏(启动画面)</span><br><span class="line">cordova-<span class="keyword">plugin</span>-inappbrower 浏览器</span><br><span class="line">cordova-<span class="keyword">plugin</span>-console 控制台</span><br><span class="line">cordova-<span class="keyword">plugin</span>-statusbar 状态栏</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="插件一：手机电池状态"><a href="#插件一：手机电池状态" class="headerlink" title="插件一：手机电池状态"></a>插件一：手机电池状态</h3><blockquote>
<p>该插件可以用于监视设备电池的变化，全局提供了三个事件</p>
</blockquote>
<ol>
<li><p>安装电池插件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cordova plugin <span class="keyword">add</span><span class="bash"> cordova-plugin-battery-status</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加事件监听</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">document.add<span class="constructor">EventListener(<span class="string">&quot;deviceready&quot;</span>, <span class="params">function</span> ()</span> &#123;</span><br><span class="line">    window.add<span class="constructor">EventListener(<span class="string">&quot;batterystatus&quot;</span>, <span class="params">onBatterystatus</span>, <span class="params">false</span>)</span>;</span><br><span class="line">    window.add<span class="constructor">EventListener(<span class="string">&quot;batterycritical&quot;</span>, <span class="params">onBatterycritical</span>, <span class="params">false</span>)</span>;</span><br><span class="line">    window.add<span class="constructor">EventListener(<span class="string">&quot;batterylow&quot;</span>, <span class="params">onBatterylow</span>, <span class="params">false</span>)</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>回调函数性</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>状态</th>
</tr>
</thead>
<tbody><tr>
<td>batterystatus</td>
<td>表示电池状态发生改变（至少 1%电量变化） 或者 充电状态改变 触发</td>
</tr>
<tr>
<td>batterycritical</td>
<td>表示电池电量进入临界值，快关机了</td>
</tr>
<tr>
<td>batterylow</td>
<td>表示电池电量比较低，触发</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBatterystatus</span><span class="params">(status)</span></span> &#123;</span><br><span class="line">  <span class="built_in">log</span>(<span class="string">&quot;当前电量：Level: &quot;</span> + <span class="built_in">status</span>.level + <span class="string">&quot;是否充电中：isPlugged: &quot;</span> + <span class="built_in">status</span>.isPlugged);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBatterycritical</span><span class="params">(status)</span></span> &#123;</span><br><span class="line">  <span class="built_in">log</span>(<span class="string">&quot;当前电量已经进入临界值，当前电量：Level: &quot;</span> + <span class="built_in">status</span>.level + <span class="string">&quot;是否充电中： isPlugged: &quot;</span> + <span class="built_in">status</span>.isPlugged);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBatterylow</span><span class="params">(status)</span></span> &#123;</span><br><span class="line">  <span class="built_in">log</span>(<span class="string">&quot;当前电量已经比较低了，当前电量：Level: &quot;</span> + <span class="built_in">status</span>.level + <span class="string">&quot; isPlugged: &quot;</span> + <span class="built_in">status</span>.isPlugged);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个事件都会返回一个 status 对象，有两个属性</p>
<ul>
<li>level: 当前电量的百分比值，范围(0-100). (Number 数值类型)</li>
<li>isPlugged: 标记当前手机是否在充电 (Boolean 类型)</li>
</ul>
</li>
</ol>
<h3 id="插件二：照相机"><a href="#插件二：照相机" class="headerlink" title="插件二：照相机"></a>插件二：照相机</h3><blockquote>
<p>该插件提供了一个全局对象 navigator.camera，提供了一系列的 api，这些 api，可以帮助我们拍照，或者从相册中读取图片 <br/><br>注意：需要在 deviceready 完成后，才能获取 navigator.camera 对象</p>
</blockquote>
<ol>
<li><p>安装照相机插件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cordova plugin <span class="keyword">add</span><span class="bash"> cordova-plugin-camera</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加事件监听</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">window</span>.addEventListener(<span class="string">&quot;batterystatus&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(navigator.camera);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在 navigator.camera 对象中，提供了一个方法，getPicture(success, error, options); <br /><br /><br>getPicture 可以用于拍照 或者 从相册中读取图片</p>
<ol>
<li>quality: 表示图片质量</li>
<li>destinationType: 表示返回的图片格式（路径/base64 格式的字符串）<br>默认值：FILE_URL 返回文件路径</li>
<li>sourceType: 设置使用摄像头还是从相册读取</li>
</ol>
</li>
<li><p>常用参数说明:</p>
<ol>
<li><p>Camera.DestinationType</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DATA_URL</td>
<td>返回 base64 编码的字符串。DATA URL 可能占用大量内存，并导致应用程序崩溃或内存不足错误。尽可能使用 FILE URI 或 NATIVE_URI</td>
</tr>
<tr>
<td>FILE_URI</td>
<td>返回文件 uri（适用于 Android 的 content：//media/external/images/media /2）</td>
</tr>
<tr>
<td>NATIVE_URI</td>
<td>返回本地 uri（例如，iOS 的 asset-library：//…）</td>
</tr>
</tbody></table>
</li>
<li><p>Camera.PictureSourceType</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>CAMERA</td>
<td>从图片库中选择图片（与 Android 的 SAVEDPHOTOALBUM 相同）</td>
</tr>
<tr>
<td>PHOTOLIBRARY</td>
<td>配置图片源为相册</td>
</tr>
<tr>
<td>SAVEDPHOTOALBUM</td>
<td>从图片库中选择图像（与 Android 的 PHOTOLIBRARY 相同）（配置相机拍照保存的照片为相册）</td>
</tr>
</tbody></table>
</li>
<li><p>Camera.Direction</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>BACK</td>
<td>使用后置摄像头</td>
</tr>
<tr>
<td>FRONT</td>
<td>使用前置摄像头</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><p>示例：</p>
<ol>
<li><p>拍照–返回图片 url</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点击拍照--返回图片url<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;display: block; max-width: 100%;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">      .getElementById(<span class="string">&quot;btn1&quot;</span>)</span></span><br><span class="line"><span class="javascript">      .addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        navigator.camera.getPicture(success, error, &#123;</span><br><span class="line"><span class="javascript">          quality: <span class="number">50</span>, <span class="comment">// 表示图片的质量，默认值50  范围 0-100</span></span></span><br><span class="line"><span class="javascript">          destinationType: Camera.DestinationType.FILE_URL, <span class="comment">// 表示显示时，返回图片url</span></span></span><br><span class="line"><span class="javascript">          sourceType: Camera.PictureSourceType.CAMERA <span class="comment">// 默认值表示通过相机进行拍照</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">fileUrl</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 默认success返回的是文件路径</span></span></span><br><span class="line">          img.src = fileUrl;</span><br><span class="line"><span class="javascript">          log(<span class="string">&quot;拍照成功&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          log(<span class="string">&quot;拍照失败&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拍照–返回 base64 编码的字符串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>点击拍照--返回base64编码的字符串<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;display: block; max-width: 100%;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">      .getElementById(<span class="string">&quot;btn2&quot;</span>)</span></span><br><span class="line"><span class="javascript">      .addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        navigator.camera.getPicture(success, error, &#123;</span><br><span class="line"><span class="javascript">          quality: <span class="number">50</span>, <span class="comment">// 表示图片的质量，默认值50  范围 0-100</span></span></span><br><span class="line"><span class="javascript">          destinationType: Camera.DestinationType.DATA_URL, <span class="comment">// 表示显示时，返回base64编码的字符串</span></span></span><br><span class="line"><span class="javascript">          sourceType: Camera.PictureSourceType.CAMERA <span class="comment">// 默认值表示通过相机进行拍照</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">base64Str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 默认读取的base64编码后的图片，是没有前面的格式说明的</span></span></span><br><span class="line"><span class="javascript">          img.src = <span class="string">&quot;data:image/jpeg;base64,&quot;</span> + base64Str;</span></span><br><span class="line"><span class="javascript">          log(<span class="string">&quot;拍照成功&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          log(<span class="string">&quot;拍照失败&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>从相册中获取图片，并显示在页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>从相册中获取图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;display: block; max-width: 100%;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">      .getElementById(<span class="string">&quot;btn2&quot;</span>)</span></span><br><span class="line"><span class="javascript">      .addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        navigator.camera.getPicture(success, error, &#123;</span><br><span class="line"><span class="javascript">          quality: <span class="number">50</span>, <span class="comment">// 表示图片的质量，默认值50  范围 0-100</span></span></span><br><span class="line"><span class="javascript">          destinationType: Camera.DestinationType.FILE_URL, <span class="comment">// 表示显示时，返回图片路径</span></span></span><br><span class="line"><span class="javascript">          sourceType: Camera.PictureSourceType.PHOTOLIBRARY <span class="comment">// 配置图片源为相册</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">fileurl</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 默认读取的base64编码后的图片，是没有前面的格式说明的</span></span></span><br><span class="line">          img.src = fileurl;</span><br><span class="line"><span class="javascript">          log(<span class="string">&quot;从相册中读取成功&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          log(<span class="string">&quot;从相册中读取失败&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h3 id="插件三：震动插件"><a href="#插件三：震动插件" class="headerlink" title="插件三：震动插件"></a>插件三：震动插件</h3><blockquote>
<p>该插件符合 W3C 振动规范<a href="http://www.w3.org/TR/vibration/">http://www.w3.org/TR/vibration/</a><br/><br>该插件提供了一种振动设备的方法。<br/><br>该插件定义了包括的全局对象 navigator.vibrate。<br/><br>尽管是全局的方法，但直到 deviceready 事件发生后才可用。</p>
</blockquote>
<ol>
<li><p>安装震动插件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cordova plugin <span class="keyword">add</span><span class="bash"> cordova-plugin-vibration</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加事件监听<br/><br/><br><strong>navigator.vibrate 有两种调用方式</strong> <br/><br/></p>
<ol>
<li>navigator.vibrate(3000); 表示震动一次，震动 3s</li>
<li>navigator.vibrate([3000, 1000, 3000, 1000]); 表示震动 3s，停顿 1s，再震动 3s，再停 1s</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;vibrate1&quot;</span>&gt;点击震动<span class="number">3</span>s&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;vibrate1&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    navigator.vibrate(<span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;vibrate2&quot;</span>&gt;</span>表示震动3s，停顿1s，再震动3s，再停1s<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">      .getElementById(<span class="string">&quot;vibrate2&quot;</span>)</span></span><br><span class="line"><span class="javascript">      .addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        navigator.vibrate([3000, 1000, 3000, 1000]);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>停止震动<br/><br/><br><strong>让震动停止，给方法传 0 即可</strong> <br/><br/></p>
<ol>
<li>navigator.vibrate(0);</li>
<li>navigator.vibrate([]);</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;stopVibrate&quot;</span>&gt;</span>停止震动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;deviceready&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">      .getElementById(<span class="string">&quot;stopVibrate&quot;</span>)</span></span><br><span class="line"><span class="javascript">      .addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        navigator.vibrate(0);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="八、使用-plugman-开发-Cordova-插件"><a href="#八、使用-plugman-开发-Cordova-插件" class="headerlink" title="八、使用 plugman 开发 Cordova 插件"></a>八、使用 plugman 开发 Cordova 插件</h2><ol>
<li><p>首先安装 plumam 命令行工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g plugman</span><br></pre></td></tr></table></figure></li>
<li><p>安装完之后，创建 plugin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugman create --name pluginName --plugin_id pluginID --plugin_version version [--path path] [--variable NAME=VALUE]</span><br></pre></td></tr></table></figure>

<p>参数说明:<br/></p>
<blockquote>
<p>pluginName：插件名称，如 MyToast；<br/><br/><br>pluginID：插件 id, 如:cordova-plugin-mytoast；<br/><br/><br>version：版本号, 如:0.0.1；<br/><br/><br>path：插件存放的绝对或相对路径；<br/><br/><br>variable NAME=VALUE：扩展参数，如说明或作者，如 woodstream</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">eg</span>: plugman create --name MyToast --plugin_id cordova-plugin-mytoast --plugin_version <span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="九、从签名到发布流程"><a href="#九、从签名到发布流程" class="headerlink" title="九、从签名到发布流程"></a>九、从签名到发布流程</h2><blockquote>
<p>尽量不使用命令行发布，与 app 端沟通后完善<br/> &gt; <strong>使用 ==android studio== 可以快捷生成签名文件</strong></p>
</blockquote>
<h3 id="命令行生成-keystore"><a href="#命令行生成-keystore" class="headerlink" title="命令行生成 keystore"></a>命令行生成 keystore</h3><ol>
<li><p>cmd 进入项目里面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cordova build --release android</span><br></pre></td></tr></table></figure>

<blockquote>
<p>会在 hello\platforms\android\build\outputs\apk 目录下生成一个 android-release-unsigned.apk(这是一个测试版本，要是想测试，无需下面步骤，可直接安装手机测试即可)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">What went wrong:</span><br><span class="line">Execution failed <span class="keyword">for</span> task <span class="string">&#x27;:app:lintVitalRelease&#x27;</span>.</span><br><span class="line">&gt; Could not resolve all files <span class="keyword">for</span> configuration <span class="string">&#x27;:app:lintClassPath&#x27;</span>.</span><br><span class="line">   &gt; Could not download groovy-all.jar (org.codehaus.groovy:groovy-all:2.4.15)</span><br><span class="line">      &gt; Could not get resource <span class="string">&#x27;https://jcenter.bintray.com/org/codehaus/groovy/groovy-all/2.4.15/groovy-all-2.4.15.jar&#x27;</span>.</span><br><span class="line">         &gt; Read timed out</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">进入目录：[path]\hello\platforms\android\app\build.gradle</span><br><span class="line">Android &#123;</span><br><span class="line">    lintOptions &#123;</span><br><span class="line">      checkReleaseBuilds <span class="literal">false</span></span><br><span class="line">      abortOnError <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>cordova</category>
      </categories>
      <tags>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>对于 BFC 的理解</title>
    <url>/2021/07/02/css/BFC/</url>
    <content><![CDATA[<p>块格式化上下文是 Web 页面的可视化 CSS 渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。<br>通俗来讲，BFC 是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。<br>如果一个元素符合触发 BFC 的条件，则 BFC 中的元素布局不受外部影响。<br>一般来说根元素是一个 BFC 区域，浮动和绝对定位的元素也会形成 BFC，display 属性的值为 inline-block、flex 这些属性时也会创建 BFC。还有就是元素的 overflow 的值不为 visible 时都会创建 BFC。</p>
<h1 id="BFC-布局规则"><a href="#BFC-布局规则" class="headerlink" title="BFC 布局规则"></a>BFC 布局规则</h1><ol>
<li>在 BFC 下，内部的 Box 会在垂直方向，一个接一个地放置。</li>
<li>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li>
<li>在 BFC 中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘），即使存在浮动也是如此。</li>
<li>BFC 的区域不会与 float box 重叠。</li>
<li>计算 BFC 的高度时，浮动元素也参与计算</li>
</ol>
<h1 id="触发-BFC"><a href="#触发-BFC" class="headerlink" title="触发 BFC"></a>触发 BFC</h1><ul>
<li>浮动元素，float 除 none 以外的值</li>
<li>绝对定位元素，position（absolute，fixed）</li>
<li>display 为以下其中之一的值 inline-block, table-cell, table-caption, flex,inline-flex</li>
<li>overflow 除了 visible 以外的值（hidden，auto，scroll）</li>
</ul>
<h1 id="BFC-的应用"><a href="#BFC-的应用" class="headerlink" title="BFC 的应用"></a>BFC 的应用</h1><ol>
<li>解决浮动塌陷问题</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#428bca</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    float: left;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#3bd49e</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果父元素只包含浮动元素，且父元素未设置高度和宽度的时候，那么它的高度就会塌缩为零。解决这种问题，可以为其父元素创建 BFC。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#428bca</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>自适应两栏布局</li>
</ol>
<p>我们还可以运用 BFC 可以阻止元素被浮动元素覆盖的特性来实现自适应两栏布局。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.aside</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 150px;</span><br><span class="line">    float: left;</span><br><span class="line">    background: black;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果我们需要将黑色区域撑到红色的左边，就需要利用规范的第四条：<br>BFC 的区域不会与 float 重叠：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候左栏宽度固定，右栏宽度会随着浏览器宽度的调整而调整，从而实现一个自适应两栏布局。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端1px边框</title>
    <url>/2021/07/02/css/border/</url>
    <content><![CDATA[<h1 id="viewport-rem-实现"><a href="#viewport-rem-实现" class="headerlink" title="viewport+rem 实现"></a>viewport+rem 实现</h1><p>同时通过设置对应 viewport 的 rem 基准值，这种方式就可以像以前一样轻松愉快的写 1px 了。</p>
<p>在 <code>devicePixelRatio = 2</code> 时，输出 viewport：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>devicePixelRatio = 3</code> 时，输出 viewport：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="多背景渐变实现"><a href="#多背景渐变实现" class="headerlink" title="多背景渐变实现"></a>多背景渐变实现</h1><p>与 background-image 方案类似，只是将图片替换为 css3 渐变。设置 1px 的渐变背景，50%有颜色，50%透明。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.background-gradient-1px</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(#<span class="number">000</span>, #<span class="number">000</span> <span class="number">100%</span>, transparent <span class="number">100%</span>) left / <span class="number">1px</span> <span class="number">100%</span></span><br><span class="line">      no-repeat, <span class="built_in">linear-gradient</span>(#<span class="number">000</span>, #<span class="number">000</span> <span class="number">100%</span>, transparent <span class="number">100%</span>) right / <span class="number">1px</span> <span class="number">100%</span></span><br><span class="line">      no-repeat,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(#<span class="number">000</span>, #<span class="number">000</span> <span class="number">100%</span>, transparent <span class="number">100%</span>) top / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(#<span class="number">000</span>, #<span class="number">000</span> <span class="number">100%</span>, transparent <span class="number">100%</span>) bottom / <span class="number">100%</span> <span class="number">1px</span> no-repeat;</span><br><span class="line">&#125; <span class="comment">/* 或者 */</span></span><br><span class="line"><span class="selector-class">.background-gradient-1px</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(</span><br><span class="line">        linear,</span><br><span class="line">        left top,</span><br><span class="line">        right bottom,</span><br><span class="line">        color-stop(<span class="number">0</span>, transparent),</span><br><span class="line">        <span class="built_in">color-stop</span>(<span class="number">0</span>, #<span class="number">000</span>),</span><br><span class="line">        <span class="built_in">to</span>(#<span class="number">000</span>)</span><br><span class="line">      ) left / <span class="number">1px</span> <span class="number">100%</span> no-repeat, <span class="built_in">-webkit-gradient</span>(</span><br><span class="line">        linear,</span><br><span class="line">        left top,</span><br><span class="line">        right bottom,</span><br><span class="line">        color-stop(<span class="number">0</span>, transparent),</span><br><span class="line">        <span class="built_in">color-stop</span>(<span class="number">0</span>, #<span class="number">000</span>),</span><br><span class="line">        <span class="built_in">to</span>(#<span class="number">000</span>)</span><br><span class="line">      ) right / <span class="number">1px</span> <span class="number">100%</span> no-repeat,</span><br><span class="line">    <span class="built_in">-webkit-gradient</span>(</span><br><span class="line">        linear,</span><br><span class="line">        left top,</span><br><span class="line">        right bottom,</span><br><span class="line">        color-stop(<span class="number">0</span>, transparent),</span><br><span class="line">        <span class="built_in">color-stop</span>(<span class="number">0</span>, #<span class="number">000</span>),</span><br><span class="line">        <span class="built_in">to</span>(#<span class="number">000</span>)</span><br><span class="line">      ) top / <span class="number">100%</span> <span class="number">1px</span> no-repeat, <span class="built_in">-webkit-gradient</span>(</span><br><span class="line">        linear,</span><br><span class="line">        left top,</span><br><span class="line">        right bottom,</span><br><span class="line">        color-stop(<span class="number">0</span>, transparent),</span><br><span class="line">        <span class="built_in">color-stop</span>(<span class="number">0</span>, #<span class="number">000</span>),</span><br><span class="line">        <span class="built_in">to</span>(#<span class="number">000</span>)</span><br><span class="line">      ) bottom / <span class="number">100%</span> <span class="number">1px</span> no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="伪类-transform-实现"><a href="#伪类-transform-实现" class="headerlink" title="伪类 + transform 实现"></a>伪类 + transform 实现</h1><p>个人认为伪类+transform 是比较完美的方法。利用 :before 或者 :after 实现 border ，并 transform 的 scale 缩小一半，将 border 绝对定位。</p>
<p>单条 border 样式设置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scale-1px</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scale-1px</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">-webkit-transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4 条 border 的实现：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scale-1px</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scale-1px</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">-webkit-transform-origin</span>: left top;</span><br><span class="line">  <span class="attribute">transform-origin</span>: left top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 或者：  */</span></span><br><span class="line"><span class="selector-class">.scale-1px</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css3-呼吸灯</title>
    <url>/2019/09/03/css/breath/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;breathe-btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.breathe-btn</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#2b92d4</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-gradient</span>(</span><br><span class="line">    linear,</span><br><span class="line">    left top,</span><br><span class="line">    left bottom,</span><br><span class="line">    from(#<span class="number">6</span>cc3fe),</span><br><span class="line">    <span class="built_in">to</span>(#<span class="number">21</span>a1d0)</span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">-webkit-animation-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="attribute">-webkit-animation-name</span>: breathe;</span><br><span class="line">  <span class="attribute">-webkit-animation-duration</span>: <span class="number">2700ms</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">-webkit-animation-direction</span>: alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> breathe &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.2</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">59</span>, <span class="number">235</span>, <span class="number">235</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">59</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>calc()函数的使用</title>
    <url>/2019/12/04/css/calc/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.calc</span> &#123;</span><br><span class="line">  <span class="comment">/*calc 函数接受的值必须是一个数学表达式（expression）*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>calc() 函数用于动态计算长度值。</p>
<ul>
<li>需要注意的是，运算符前后都需要保留一个空格；</li>
<li>任何长度值都可以使用 calc()函数进行计算；</li>
<li>calc()函数支持 “+”, “-“, “*”, “/“ 运算；</li>
<li>calc()函数使用标准的数学运算优先级规则；</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>元素居中</title>
    <url>/2019/12/04/css/centered/</url>
    <content><![CDATA[<h1 id="flex-布局使元素居中"><a href="#flex-布局使元素居中" class="headerlink" title="flex 布局使元素居中"></a>flex 布局使元素居中</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a>绝对定位居中</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="固定-绝对定位"><a href="#固定-绝对定位" class="headerlink" title="固定/绝对定位"></a>固定/绝对定位</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute/fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动</title>
    <url>/2019/12/04/css/clear/</url>
    <content><![CDATA[<ol>
<li>css 伪元素清除浮动</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在父元素上添加 <code>overflow: hidden</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent-clear</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>rgba()和 opacity 的透明效果有什么不同</title>
    <url>/2019/09/16/css/com-rgba-opacity/</url>
    <content><![CDATA[<p>rgba()和 opacity <code>都能实现透明效果</code><br>但<code>最大的不同</code>是 opacity 作用于元素，以及元素内的所有内容的透明度，<br>而 rgba()只作用于元素的颜色或其背景色。设置 rgba 透明的元素的子元素不会继承透明效果！</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css设置多列等高布局</title>
    <url>/2021/05/08/css/equal-height/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>BOX FIRST<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>BOX SECOND<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>BOX THIRD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="等高布局-flex"><a href="#等高布局-flex" class="headerlink" title="等高布局 flex"></a>等高布局 flex</h1><blockquote>
<p>技术点：弹性盒子布局 flex，默认值就是自带等高布局的特点。<br>弊端：低版本 ie 浏览器不兼容</p>
</blockquote>
<p>定义 flex 布局的时候，有一些默认值。</p>
<p><code>flex-direction</code> 属性定义主轴的方向。默认值为 row，一般是水平显示。flex 容器的主轴被定义为与文本方向相同。 主轴起点和主轴终点与内容方向相同。</p>
<p><code>align-item</code> 属性定义 flex 子项在 flex 容器的当前行的侧轴（纵轴 或者说 交叉轴）方向上的对齐方式。默认值为 stretch，元素被拉伸以适应容器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="等高布局-table-cell"><a href="#等高布局-table-cell" class="headerlink" title="等高布局 table-cell"></a>等高布局 table-cell</h1><blockquote>
<p>技术点：table 布局天然就具有等高的特性。</p>
</blockquote>
<p>display 设置为 <code>table-cell</code>，则此元素会作为一个表格单元格显示。类似于使用标签<code>&lt;td&gt;</code>或者<code>&lt;th&gt;</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.layout</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33%</span>;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之Flex布局</title>
    <url>/2020/12/16/css/flex/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>采用 Flex 布局的元素，称为 Flex 容器，简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。<br>容器默认存在两根轴：水平的主轴和垂直的交叉轴，项目默认沿主轴排列。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">display</span>: flex | <span class="keyword">inline</span>-flex;</span><br></pre></td></tr></table></figure>

<h1 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h1><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p>flex-direction 属性决定主轴的方向（即子元素的排列方向）。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">flex-direction: <span class="keyword">row</span> | <span class="keyword">row</span>-<span class="keyword">reverse</span> | <span class="keyword">column</span> | <span class="keyword">column</span>-<span class="keyword">reverse</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>row（默认值）</td>
<td>主轴为水平方向，起点在左端。</td>
</tr>
<tr>
<td>row-reverse</td>
<td>主轴为水平方向，起点在右端。</td>
</tr>
<tr>
<td>column</td>
<td>主轴为垂直方向，起点在上沿。</td>
</tr>
<tr>
<td>column-reverse</td>
<td>主轴为垂直方向，起点在下沿。</td>
</tr>
</tbody></table>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>flex-wrap 属性决定子元素的换行方式。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">flex-<span class="built_in">wrap</span>: nowrap | <span class="built_in">wrap</span> | <span class="built_in">wrap</span>-<span class="built_in">reverse</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap（默认）</td>
<td>不换行。</td>
</tr>
<tr>
<td>wrap</td>
<td>换行，第一行在上方。</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>换行，第一行在下方。</td>
</tr>
</tbody></table>
<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">flex-flow: <span class="tag">&lt;<span class="name">flex-direction</span>&gt;</span>|| <span class="tag">&lt;<span class="name">flex-wrap</span>&gt;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p>justify-content 属性决定子元素在主轴上的对齐方式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">justify-content: flex-<span class="keyword">start</span> | flex-<span class="keyword">end</span> | center | <span class="keyword">space</span>-<span class="keyword">between</span> | <span class="keyword">space</span>-around;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start（默认值）</td>
<td>左对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>右对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中</td>
</tr>
<tr>
<td>space-between</td>
<td>两端对齐，项目之间的间隔都相等。</td>
</tr>
<tr>
<td>space-around</td>
<td>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</td>
</tr>
</tbody></table>
<h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p>align-items 属性决定子元素在交叉轴上的对齐方式。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">align-items: flex-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">baseline</span> | <span class="type">stretch</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>交叉轴的起点对齐。</td>
</tr>
<tr>
<td>flex-end</td>
<td>交叉轴的终点对齐。</td>
</tr>
<tr>
<td>center</td>
<td>交叉轴的中点对齐。</td>
</tr>
<tr>
<td>baseline</td>
<td>项目的第一行文字的基线对齐。</td>
</tr>
<tr>
<td>stretch</td>
<td>（默认值） 如果项目未设置高度或设为 auto，将占满整个容器的高度。</td>
</tr>
</tbody></table>
<h1 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h1><h2 id="flex-direction-1"><a href="#flex-direction-1" class="headerlink" title="flex-direction"></a>flex-direction</h2><p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">order:</span> <span class="params">&lt;integer&gt;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p>flex-grow 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-shrink</span>: &lt;number&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。它可以设为跟 width 或 height 属性一样的值（比如 350px），则项目将占据固定空间。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">flex-basis: <span class="variable">&lt;length&gt;</span>|<span class="string"> auto;</span></span><br></pre></td></tr></table></figure>

<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: none | [ &lt; <span class="string">&quot;flex-grow&quot;</span> &gt;&lt; <span class="string">&quot;flex-shrink&quot;</span> &gt;? || &lt; <span class="string">&quot;flex-basis&quot;</span> &gt;];</span><br></pre></td></tr></table></figure>

<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。该属性可能取 6 个值，除了 auto，其他都与 align-items 属性完全一致。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">align-self: <span class="built_in">auto</span> | <span class="type">flex</span>-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">baseline</span> | <span class="type">stretch</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css3-闪烁</title>
    <url>/2019/09/03/css/flicker/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;slidebox headerBox&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;display: flex; margin-top: 20px; height: 100px;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> fade &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> fade &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.headerBox</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: fade <span class="number">600ms</span> infinite;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: fade <span class="number">600ms</span> infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>去除input输入框默认在ie或者edge下出现删除按钮</title>
    <url>/2019/12/31/css/input-del-icon/</url>
    <content><![CDATA[<p>当使用 input 输入框的时候，默认情况下在后面会出现删除按钮，这个时候需要代码去去除，去除 ie 下的删除按钮代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::-ms-clear</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-ms-reveal</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">去除 <span class="selector-tag">edge</span> 下的删除按钮代码如下 <span class="selector-pseudo">::-o-clear</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>外边距溢出</title>
    <url>/2019/12/04/css/margin-overflow/</url>
    <content><![CDATA[<h1 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h1><p>父元素 div 未设置边框<br>第一个子元素设置了上外边距（margin-top: 10rem;）或者 最后一个子元素设置了下外边距（margin-bottom: 10rem;）<br>导致父元素与子元素一起发生相应的偏移的现象，即为：外边距溢出现象</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>为父元素增加伪元素（推荐）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置外边距的元素不与父元素直接接触既不会一起发生偏移 */</span></span><br><span class="line"><span class="comment">/* 而父元素前或后添加的伪元素子元素 content 为空，所以不会出现不希望看到的效果 */</span></span><br><span class="line"><span class="comment">/* 上外边距溢出 */</span></span><br><span class="line"><span class="selector-class">.parent-clear</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 下外边距溢出 */</span></span><br><span class="line"><span class="selector-class">.parent-clear</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>点击穿透</title>
    <url>/2019/09/26/css/pointer/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.forbid-events</span> &#123;</span><br><span class="line">  pointer-events: none; //禁止元素成为鼠标事件的 target</span><br><span class="line">  pointer-events: auto; //与 pointer-events 属性未指定时的表现效果相同</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">visiblePainted</span>; <span class="comment">/* SVG only */</span></span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">visibleFill</span>; <span class="comment">/* SVG only */</span></span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">visibleStroke</span>; <span class="comment">/* SVG only */</span></span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">visible</span>; <span class="comment">/* SVG only */</span></span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">painted</span>; <span class="comment">/* SVG only */</span></span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">fill</span>; <span class="comment">/* SVG only */</span></span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">stroke</span>; <span class="comment">/* SVG only */</span></span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">all</span>; <span class="comment">/* SVG only */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">pointer-events</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>auto——效果和没有定义 pointer-events 属性相同，鼠标不会穿透当前层。在 SVG 中，该值和 visiblePainted 的效果相同。</p>
</li>
<li><p>none——元素不再是鼠标事件的目标，鼠标不再监听当前层而去监听下面的层中的元素。但是如果它的子元素设置了 pointer-events 为其它值，比如 auto，鼠标还是会监听这个子元素的。</p>
</li>
<li><p>使用 pointer-events 来阻止元素成为鼠标事件目标不一定意味着元素上的事件侦听器永不会触发</p>
</li>
<li><p>如果元素后代明确指定了 pointer-events 属性并允许其成为鼠标事件的目标，那么指向该元素的任何事件在事件传播过程中都将通过父元素，并以适当的方式触发其上的事件侦听器</p>
</li>
<li><p>当然位于屏幕上在父元素上但不在后代元素上的鼠标活动都不会被父元素和后代元素捕获（将会穿过父元素而指向位于其下面的元素）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css样式初始化</title>
    <url>/2020/12/30/css/reset/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">abbr</span>,</span><br><span class="line"><span class="selector-tag">address</span>,</span><br><span class="line"><span class="selector-tag">article</span>,</span><br><span class="line"><span class="selector-tag">aside</span>,</span><br><span class="line"><span class="selector-tag">audio</span>,</span><br><span class="line"><span class="selector-tag">b</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">canvas</span>,</span><br><span class="line"><span class="selector-tag">caption</span>,</span><br><span class="line"><span class="selector-tag">cite</span>,</span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">del</span>,</span><br><span class="line"><span class="selector-tag">details</span>,</span><br><span class="line"><span class="selector-tag">dfn</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">figcaption</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">footer</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">hgroup</span>,</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">ins</span>,</span><br><span class="line"><span class="selector-tag">kbd</span>,</span><br><span class="line"><span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">mark</span>,</span><br><span class="line"><span class="selector-tag">menu</span>,</span><br><span class="line"><span class="selector-tag">nav</span>,</span><br><span class="line"><span class="selector-tag">object</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">q</span>,</span><br><span class="line"><span class="selector-tag">samp</span>,</span><br><span class="line"><span class="selector-tag">section</span>,</span><br><span class="line"><span class="selector-tag">small</span>,</span><br><span class="line"><span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-tag">strong</span>,</span><br><span class="line"><span class="selector-tag">sub</span>,</span><br><span class="line"><span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">sup</span>,</span><br><span class="line"><span class="selector-tag">table</span>,</span><br><span class="line"><span class="selector-tag">tbody</span>,</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">tfoot</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">thead</span>,</span><br><span class="line"><span class="selector-tag">time</span>,</span><br><span class="line"><span class="selector-tag">tr</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 加*号会导致ios光标不显示 */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.env1</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.env2</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica Neue, Helvetica, PingFang SC, Hiragino Sans GB, STHeitiSC-Light,</span><br><span class="line">    Microsoft YaHei, <span class="string">&quot;\5FAE\8F6F\96C5\9ED1&quot;</span>, SimSun, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-overflow-scrolling</span>: touch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span>,</span><br><span class="line"><span class="selector-tag">aside</span>,</span><br><span class="line"><span class="selector-tag">canvas</span>,</span><br><span class="line"><span class="selector-tag">details</span>,</span><br><span class="line"><span class="selector-tag">figcaption</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">footer</span>,</span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">hgroup</span>,</span><br><span class="line"><span class="selector-tag">menu</span>,</span><br><span class="line"><span class="selector-tag">nav</span>,</span><br><span class="line"><span class="selector-tag">section</span>,</span><br><span class="line"><span class="selector-tag">summary</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">q</span> &#123;</span><br><span class="line">  <span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ins</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff9</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">mark</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff9</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">del</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">abbr</span><span class="selector-attr">[title]</span>,</span><br><span class="line"><span class="selector-tag">dfn</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: help;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">hr</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">select</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#bfbfbf</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#bfbfbf</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-ms-input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#bfbfbf</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css布局两边固定中间自适应的五种方法</title>
    <url>/2019/08/13/css/self-adaption/</url>
    <content><![CDATA[<h1 id="利用自身浮动"><a href="#利用自身浮动" class="headerlink" title="利用自身浮动"></a>利用自身浮动</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>1、利用自身浮动<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  左右浮动两块div元素，脱离标准流，中间那块元素就会上去，跟他们一行，利用margin留出左右宽度</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxLeft&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxRight&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意这个div一定要放最下面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxCenter&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1、利用自身浮动 */</span></span><br><span class="line"><span class="selector-class">.boxLeft</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#987</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxRight</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#369</span>;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxCenter</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#192</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="利用绝对定位"><a href="#利用绝对定位" class="headerlink" title="利用绝对定位"></a>利用绝对定位</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2、利用绝对定位<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  左右绝对定位的两块div元素,脱离标准流，中间那块元素就会上去，跟他们一行，利用margin留出左右宽度</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxLeft2&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxRight2&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxCenter2&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 2、利用绝对定位 */</span></span><br><span class="line"><span class="selector-class">.boxLeft2</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#987</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxRight2</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#369</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxCenter2</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#192</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="利用弹性布局"><a href="#利用弹性布局" class="headerlink" title="利用弹性布局"></a>利用弹性布局</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>3、利用弹性布局<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>设置flex:1;可以自适应剩余空间<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxLeft3&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意这个div一定要放中间 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxCenter3&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxRight3&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 3、利用弹性布局 */</span></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxLeft3</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#987</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxRight3</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#369</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxCenter3</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#192</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="利用负-margin"><a href="#利用负-margin" class="headerlink" title="利用负 margin"></a>利用负 margin</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>4、利用负margin<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  中间部分浮动，设置宽度100%，充满整个屏幕宽，内部一个div放置内容，利用margin设置留出左右两块的宽度</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意这个div一定要放最上面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxCenter4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxLeft4&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxRight4&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 4、利用负margin */</span></span><br><span class="line"><span class="selector-class">.boxCenter4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#192</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxLeft4</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#987</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxRight4</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#369</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="利用-display-table"><a href="#利用-display-table" class="headerlink" title="利用 display:table"></a>利用 display:table</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>5、利用display:table;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxLeft5&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意这个div一定要放中间 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxCenter5&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxRight5&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 5、利用display */</span></span><br><span class="line"><span class="selector-class">.box5</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxLeft5</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#987</span>;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxCenter5</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#192</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxRight5</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#369</span>;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>卡片式四周阴影</title>
    <url>/2019/12/04/css/shadow/</url>
    <content><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">h-shadow</span> <span class="selector-tag">v-shadow</span> <span class="selector-tag">blur</span> <span class="selector-tag">spread</span> <span class="selector-tag">color</span> <span class="selector-tag">inset</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：boxShadow 属性把一个或多个下拉阴影添加到框上。该属性是一个用逗号分隔阴影的列表，每个阴影由 2-4 个长度值、一个可选的颜色值和一个可选的 inset 关键字来规定。省略长度的值是 0。</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>h-shadow</td>
<td>必需的。水平阴影的位置。允许负值</td>
</tr>
<tr>
<td>v-shadow</td>
<td>必需的。垂直阴影的位置。允许负值</td>
</tr>
<tr>
<td>blur</td>
<td>可选。模糊距离</td>
</tr>
<tr>
<td>spread</td>
<td>可选。阴影的大小</td>
</tr>
<tr>
<td>color</td>
<td>可选。阴影的颜色。在 CSS 颜色值寻找颜色值的完整列表</td>
</tr>
<tr>
<td>inset</td>
<td>可选。从外层的阴影（开始时）改变阴影内侧阴影</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css3-抖动</title>
    <url>/2019/09/03/css/shake/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">&quot;shake&quot;</span>&gt;</span>抖动<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shake</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">66px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#00ff00</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* shake 按钮抖动 */</span></span><br><span class="line"><span class="selector-class">.shake</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-animation-name</span>: shake-slow;</span><br><span class="line">  <span class="attribute">-ms-animation-name</span>: shake-slow;</span><br><span class="line">  <span class="attribute">animation-name</span>: shake-slow;</span><br><span class="line">  <span class="attribute">-webkit-animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">-ms-animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">-ms-animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">-webkit-animation-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="attribute">-ms-animation-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="attribute">-webkit-animation-delay</span>: <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">-ms-animation-delay</span>: <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation-play-state</span>: running;</span><br><span class="line">  <span class="attribute">-ms-animation-play-state</span>: running;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> shake-slow &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  2% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">1px</span>, <span class="number">8px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  4% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  6% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, <span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  8% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">4px</span>, -<span class="number">3px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  10% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">5px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  12% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">3px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  14% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">5px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  16% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, -<span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  18% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">9px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">3px</span>, <span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  22% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">6px</span>, <span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  24% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  26% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, -<span class="number">10px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  28% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  30% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">2px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  32% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">1px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  34% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">6px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  36% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">2px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  38% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">2px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  40% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  42% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  44% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">4px</span>, <span class="number">3px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  46% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">2px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  48% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">1px</span>, <span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">6px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  52% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, <span class="number">4px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  54% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">6px</span>, -<span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  56% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">2px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  58% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">2px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  60% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">2px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  62% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  64% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">9px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  66% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">6px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  68% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">7px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  70% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, <span class="number">1px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  72% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">7px</span>, <span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  74% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">2px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  76% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">5px</span>, <span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  78% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">1px</span>, <span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">3px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  82% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">6px</span>, -<span class="number">7px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  84% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, <span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  86% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, <span class="number">3px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  88% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, <span class="number">3px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  90% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">7px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  92% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, <span class="number">4px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  94% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">6px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  96% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-<span class="number">3px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  98% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(<span class="number">2px</span>, <span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-ms-keyframes</span> shake-slow &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  2% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">9px</span>, <span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  4% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  6% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">6px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  8% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">3px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  10% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">3px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  12% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, <span class="number">6px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  14% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, <span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  16% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">2px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  18% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, -<span class="number">2px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">9px</span>, <span class="number">3px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  22% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  24% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">1px</span>, -<span class="number">7px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  26% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">9px</span>, <span class="number">9px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  28% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">9px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  30% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">6px</span>, -<span class="number">7px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  32% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">9px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  34% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">3px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  36% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">6px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  38% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  40% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">6px</span>, <span class="number">9px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  42% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">5px</span>, -<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  44% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, <span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  46% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">2px</span>, <span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  48% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  52% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, -<span class="number">7px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  54% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  56% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  58% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  60% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  62% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">9px</span>, <span class="number">8px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  64% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">4px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  66% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">1px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  68% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">6px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  70% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">6px</span>, -<span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  72% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">2px</span>, -<span class="number">3px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  74% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, <span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  76% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">7px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  78% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  82% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">2px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  84% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">3px</span>, <span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  86% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">5px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  88% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  90% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-<span class="number">1px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  92% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  94% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  96% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">4px</span>, -<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  98% &#123;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> shake-slow &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  2% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">6px</span>, -<span class="number">8px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  4% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">3px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  6% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">3px</span>, -<span class="number">8px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  8% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, <span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  10% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">3px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  12% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  14% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">4px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  16% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">4px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  18% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1px</span>, <span class="number">3px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  22% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">5px</span>, <span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  24% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">9px</span>, -<span class="number">10px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  26% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  28% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  30% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, -<span class="number">7px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  32% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  34% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">9px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  36% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">7px</span>, <span class="number">6px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  38% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, -<span class="number">10px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  40% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, <span class="number">0px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  42% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">2px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  44% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">5px</span>, -<span class="number">2px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  46% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1px</span>, -<span class="number">10px</span>) <span class="built_in">rotate</span>(-<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  48% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">4px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  52% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">3px</span>, <span class="number">2px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  54% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  56% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">3px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  58% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">10px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  60% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, <span class="number">7px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  62% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">9px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  64% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, <span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  66% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1px</span>, -<span class="number">3px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  68% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">6px</span>, <span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  70% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, <span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  72% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">2px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  74% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  76% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">2px</span>, -<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  78% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">2px</span>, <span class="number">9px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, <span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">3.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  82% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">1px</span>, -<span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  84% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">3px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  86% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, -<span class="number">8px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  88% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">4px</span>, -<span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  90% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">1px</span>, -<span class="number">6px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  92% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">8px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  94% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">4px</span>, -<span class="number">1px</span>) <span class="built_in">rotate</span>(<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  96% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">6px</span>, <span class="number">9px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  98% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">7px</span>, <span class="number">4px</span>) <span class="built_in">rotate</span>(-<span class="number">0.5deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css解决文字单行两端对齐</title>
    <url>/2020/09/11/css/text-align/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">justify</span>;</span><br><span class="line"><span class="selector-tag">text-align-last</span>: <span class="selector-tag">justify</span>;</span><br><span class="line"><span class="selector-tag">text-justify</span>: <span class="selector-tag">distribute</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css3-弹簧</title>
    <url>/2019/09/03/css/spring/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">60deg</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">15px</span> solid <span class="number">#ccd7d9</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccd7d9</span> <span class="number">#d2dbde</span> <span class="number">#d7e0e2</span> <span class="number">#d2dbde</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#fff</span>, <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">#abbdc1</span> inset, <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">#abbdc1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.tan</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">340px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">340px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">340px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">340px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">animation</span>: play1 <span class="number">2s</span> <span class="number">2400ms</span> ease-in-out infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.tan</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">280px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">280px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">280px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">280px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: play1 <span class="number">2s</span> <span class="number">2000ms</span> ease-in-out infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.tan</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">220px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">220px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: play1 <span class="number">2s</span> <span class="number">1600ms</span> ease-in-out infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.tan</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">160px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">160px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: play1 <span class="number">2s</span> <span class="number">1200ms</span> ease-in-out infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.tan</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">100px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">100px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: play1 <span class="number">2s</span> <span class="number">800ms</span> ease-in-out infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.tan</span><span class="selector-pseudo">:nth-child(6)</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">40px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">400px</span> / <span class="number">2</span> - <span class="number">40px</span> / <span class="number">2</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: play1 <span class="number">2s</span> <span class="number">400ms</span> ease-in-out infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> play1 &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">50px</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>文本溢出</title>
    <url>/2019/11/26/css/text-overflow/</url>
    <content><![CDATA[<h1 id="单行文本溢出"><a href="#单行文本溢出" class="headerlink" title="单行文本溢出"></a>单行文本溢出</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.overflow-text</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.overflow-text</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box; <span class="comment">/*将对象作为弹性伸缩盒子模型显示*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical; <span class="comment">/*设置或检索伸缩盒对象的子元素的排列方式*/</span></span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>; <span class="comment">/*用来限制在一个块元素显示的文本的行数*/</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/*溢出隐藏*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="多行文本溢出兼容-IE"><a href="#多行文本溢出兼容-IE" class="headerlink" title="多行文本溢出兼容 IE"></a>多行文本溢出兼容 IE</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.overflow-text</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">38px</span>; <span class="comment">/* 溢出行数*行高 */</span></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">24px</span>; <span class="comment">/* ...覆盖内容宽度 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">19px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JS-解决文本溢出"><a href="#JS-解决文本溢出" class="headerlink" title="JS 解决文本溢出"></a>JS 解决文本溢出</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.$refs.textHeight.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="built_in">this</span>.$refs.textHeight[i];</span><br><span class="line">    <span class="keyword">if</span> (list.offsetHeight &gt; <span class="number">70</span>) &#123;</span><br><span class="line">      list.className = <span class="string">&quot;sub-title overflow-text&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      list.className = <span class="string">&quot;sub-title&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>禁止文本被选中</title>
    <url>/2019/12/04/css/user-select/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS多行文本垂直居中</title>
    <url>/2019/11/25/css/vertical-middle/</url>
    <content><![CDATA[<h1 id="方法一：display-table"><a href="#方法一：display-table" class="headerlink" title="方法一：display:table"></a>方法一：display:table</h1><p>父元素使用 <code>display:table</code> 和子元素使用 <code>display:table-cell</code> 属性来模拟表格，子元素设置 <code>vertical-align:middle</code> 即可垂直居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;span_box bg_box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;words_span&quot;</span>&gt;</span></span><br><span class="line">    方法一：父元素使用display:table和子元素使用display:table-cell属性来模拟表格，子元素设置vertical-align:middle即可垂直居中</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bg_box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bbbbbb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法一*/</span></span><br><span class="line"><span class="selector-class">.span_box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.words_span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法二：display-inline-block"><a href="#方法二：display-inline-block" class="headerlink" title="方法二：display:inline-block"></a>方法二：display:inline-block</h1><p>对子元素设置 <code>display:inline-block</code> 属性，使其转化成行内块元素，模拟成单行文本。父元素设置对应的 <code>height</code> 和 <code>line-height</code>。对子元素设置 <code>vertical-align:middle</code> 属性，使其基线对齐。添加 <code>line-height</code> 属性，覆盖继承自父元素的行高。缺点：文本的高度不能超过外部盒子的高度。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p_box bg_box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;words_p&quot;</span>&gt;</span></span><br><span class="line">    方法二：对子元素设置display:inline-block属性，使其转化成行内块元素，模拟成单行文本。父元素设置对应的height和line-height。对子元素设置vertical-align:middle属性，使其基线对齐。添加line-height属性，覆盖继承自父元素的行高。缺点：文本的高度不能超过外部盒子的高度。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bg_box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bbbbbb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法二*/</span></span><br><span class="line"><span class="selector-class">.p_box</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.words_p</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>; <span class="comment">/*单独给子元素设置行高，覆盖父级元素的行高*/</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: middle; <span class="comment">/*基线居中对齐*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法三：绝对定位"><a href="#方法三：绝对定位" class="headerlink" title="方法三：绝对定位"></a>方法三：绝对定位</h1><h2 id="margin-top-height-2"><a href="#margin-top-height-2" class="headerlink" title="margin-top: -[height/2];"></a>margin-top: -[height/2];</h2><blockquote>
<p>脱离文档流的居中方式，把内部 div 设置宽高之后，再设置 <code>top 为 50%</code>，使用负边距调整，将 <code>margin-top</code> 设置为<code>负的高度的一半</code>就可以垂直居中了。缺点：需要计算出多行文字固定的高度。高度一旦改变，负边距也要调整。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper bg_box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content_box&quot;</span>&gt;</span></span><br><span class="line">    方法三：脱离文档流的居中方式，把内部div设置宽高之后，再设置top为50%，使用负边距调整，将margin-top设置为负的高度的一半就可以垂直居中了。缺点：需要计算出多行文字固定的高度。高度一旦改变，负边距也要调整。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bg_box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bbbbbb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法三*/</span></span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content_box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">127px</span>; <span class="comment">/*本页面中这么多文字的高度，文本篇幅改变，高度也会变*/</span></span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">63.5px</span>; <span class="comment">/*height的一半*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="transfrom-translateY-50"><a href="#transfrom-translateY-50" class="headerlink" title="transfrom: translateY(-50%)"></a>transfrom: translateY(-50%)</h2><blockquote>
<p>脱离文档流的居中方式，把内部 div 设置宽高之后，再设置 <code>top 为 50%</code>，使用负边距调整，将 <code>margin-top</code> 设置为<code>负的高度的一半</code>就可以垂直居中了。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper bg_box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content_box&quot;</span>&gt;</span></span><br><span class="line">    方法三：脱离文档流的居中方式，把内部 div 设置宽高之后，再设置 top 为</span><br><span class="line">    50%，使用负边距调整，将 margin-top 设置为负的高度的一半就可以垂直居中了。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bg_box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bbbbbb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法三*/</span></span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content_box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>vw和vh单位的使用</title>
    <url>/2019/12/04/css/vw-vh/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.vh</span> &#123;</span><br><span class="line">  width: 50vw; //元素宽度为视窗宽度的 50%</span><br><span class="line">  height: 80vh; //元素高度为视窗高度的 80%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相对于视口的宽度，视口被均分为 100 单位的 vw<br>相对于视口的高度。视口被均分为 100 单位的 vh<br>vw 和 vh 可以理解为相对于视窗宽高的百分比单位而不是相对于父元素</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>属性的操作</title>
    <url>/2021/01/14/dom/attribute/</url>
    <content><![CDATA[<p>HTML 元素包括标签名和若干个键值对，这个键值对就称为“属性”（attribute）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.example.com&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>a</code>元素包括两个属性：<code>id</code>属性和<code>href</code>属性。</p>
<p>属性本身是一个对象（<code>Attr</code>对象），但是实际上，这个对象极少使用。一般都是通过元素节点对象（<code>HTMlElement</code>对象）来操作属性。本章介绍如何操作这些属性。</p>
<h1 id="Element-attributes-属性"><a href="#Element-attributes-属性" class="headerlink" title="Element.attributes 属性"></a>Element.attributes 属性</h1><p>元素对象有一个<code>attributes</code>属性，返回一个类似数组的动态对象，成员是该元素标签的所有属性节点对象，属性的实时变化都会反映在这个节点对象上。其他类型的节点对象，虽然也有<code>attributes</code>属性，但返回的都是<code>null</code>，因此可以把这个属性视为元素对象独有的。</p>
<p>单个属性可以通过序号引用，也可以通过属性名引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;body bgcolor=&quot;yellow&quot; onload=&quot;&quot;&gt;</span></span><br><span class="line"><span class="built_in">document</span>.body.attributes[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">document</span>.body.attributes.bgcolor;</span><br><span class="line"><span class="built_in">document</span>.body.attributes[<span class="string">&quot;ONLOAD&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>注意，上面代码的三种方法，返回的都是属性节点对象，而不是属性值。</p>
<p>属性节点对象有<code>name</code>和<code>value</code>属性，对应该属性的属性名和属性值，等同于<code>nodeName</code>属性和<code>nodeValue</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;mydiv&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>);</span><br><span class="line"></span><br><span class="line">n.attributes[<span class="number">0</span>].name; <span class="comment">// &quot;id&quot;</span></span><br><span class="line">n.attributes[<span class="number">0</span>].nodeName; <span class="comment">// &quot;id&quot;</span></span><br><span class="line"></span><br><span class="line">n.attributes[<span class="number">0</span>].value; <span class="comment">// &quot;mydiv&quot;</span></span><br><span class="line">n.attributes[<span class="number">0</span>].nodeValue; <span class="comment">// &quot;mydiv&quot;</span></span><br></pre></td></tr></table></figure>

<p>下面代码可以遍历一个元素节点的所有属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> para = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&quot;result&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (para.hasAttributes()) &#123;</span><br><span class="line">  <span class="keyword">var</span> attrs = para.attributes;</span><br><span class="line">  <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = attrs.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    output += attrs[i].name + <span class="string">&quot;-&gt;&quot;</span> + attrs[i].value;</span><br><span class="line">  &#125;</span><br><span class="line">  result.textContent = output;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  result.textContent = <span class="string">&quot;No attributes to show&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="元素的标准属性"><a href="#元素的标准属性" class="headerlink" title="元素的标准属性"></a>元素的标准属性</h1><p>HTML 元素的标准属性（即在标准中定义的属性），会自动成为元素节点对象的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">a.id; <span class="comment">// &quot;test&quot;</span></span><br><span class="line">a.href; <span class="comment">// &quot;http://www.example.com/&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>a</code>元素标签的属性<code>id</code>和<code>href</code>，自动成为节点对象的属性。</p>
<p>这些属性都是可写的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myImage&quot;</span>);</span><br><span class="line">img.src = <span class="string">&quot;http://www.example.com/image.jpg&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>上面的写法，会立刻替换掉<code>img</code>对象的<code>src</code>属性，即会显示另外一张图片。</p>
<p>这种修改属性的方法，常常用于添加表单的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="built_in">document</span>.forms[<span class="number">0</span>];</span><br><span class="line">f.action = <span class="string">&quot;submit.php&quot;</span>;</span><br><span class="line">f.method = <span class="string">&quot;POST&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码为表单添加提交网址和提交方法。</p>
<p>注意，这种用法虽然可以读写属性，但是无法删除属性，<code>delete</code>运算符在这里不会生效。</p>
<p>HTML 元素的属性名是大小写不敏感的，但是 JavaScript 对象的属性名是大小写敏感的。转换规则是，转为 JavaScript 属性名时，一律采用小写。如果属性名包括多个单词，则采用骆驼拼写法，即从第二个单词开始，每个单词的首字母采用大写，比如<code>onClick</code>。</p>
<p>有些 HTML 属性名是 JavaScript 的保留字，转为 JavaScript 属性时，必须改名。主要是以下两个。</p>
<ul>
<li><code>for</code>属性改为<code>htmlFor</code></li>
<li><code>class</code>属性改为<code>className</code></li>
</ul>
<p>另外，HTML 属性值一般都是字符串，但是 JavaScript 属性会自动转换类型。比如，将字符串<code>true</code>转为布尔值，将<code>onClick</code>的值转为一个函数，将<code>style</code>属性的值转为一个<code>CSSStyleDeclaration</code>对象。因此，可以对这些属性赋予各种类型的值。</p>
<h1 id="属性操作的标准方法"><a href="#属性操作的标准方法" class="headerlink" title="属性操作的标准方法"></a>属性操作的标准方法</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>元素节点提供四个方法，用来操作属性。</p>
<ul>
<li><code>getAttribute()</code></li>
<li><code>setAttribute()</code></li>
<li><code>hasAttribute()</code></li>
<li><code>removeAttribute()</code></li>
</ul>
<p>这有几点注意。</p>
<p>（1）适用性</p>
<p>这四个方法对所有属性（包括用户自定义的属性）都适用。</p>
<p>（2）返回值</p>
<p><code>getAttribute()</code>只返回字符串，不会返回其他类型的值。</p>
<p>（3）属性名</p>
<p>这些方法只接受属性的标准名称，不用改写保留字，比如<code>for</code>和<code>class</code>都可以直接使用。另外，这些方法对于属性名是大小写不敏感的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="built_in">document</span>.images[<span class="number">0</span>];</span><br><span class="line">image.setAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;myImage&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>setAttribute</code>方法直接使用<code>class</code>作为属性名，不用写成<code>className</code>。</p>
<h2 id="Element-getAttribute"><a href="#Element-getAttribute" class="headerlink" title="Element.getAttribute()"></a>Element.getAttribute()</h2><p><code>Element.getAttribute</code>方法返回当前元素节点的指定属性。如果指定属性不存在，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;div1&quot; align=&quot;left&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">div.getAttribute(<span class="string">&quot;align&quot;</span>); <span class="comment">// &quot;left&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Element-setAttribute"><a href="#Element-setAttribute" class="headerlink" title="Element.setAttribute()"></a>Element.setAttribute()</h2><p><code>Element.setAttribute</code>方法用于为当前元素节点新增属性。如果同名属性已存在，则相当于编辑已存在的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>);</span><br><span class="line">d.setAttribute(<span class="string">&quot;align&quot;</span>, <span class="string">&quot;center&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>下面是对<code>img</code>元素的<code>src</code>属性赋值的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = <span class="built_in">document</span>.querySelector(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">myImage.setAttribute(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;path/to/example.png&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Element-hasAttribute"><a href="#Element-hasAttribute" class="headerlink" title="Element.hasAttribute()"></a>Element.hasAttribute()</h2><p><code>Element.hasAttribute</code>方法返回一个布尔值，表示当前元素节点是否包含指定属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (d.hasAttribute(<span class="string">&quot;align&quot;</span>)) &#123;</span><br><span class="line">  d.setAttribute(<span class="string">&quot;align&quot;</span>, <span class="string">&quot;center&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码检查<code>div</code>节点是否含有<code>align</code>属性。如果有，则设置为居中对齐。</p>
<h2 id="Element-removeAttribute"><a href="#Element-removeAttribute" class="headerlink" title="Element.removeAttribute()"></a>Element.removeAttribute()</h2><p><code>Element.removeAttribute</code>方法用于从当前元素节点移除属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;div1&quot; align=&quot;left&quot; width=&quot;200px&quot;&gt;</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>).removeAttribute(<span class="string">&quot;align&quot;</span>);</span><br><span class="line"><span class="comment">// 现在的HTML代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;div1&quot; width=&quot;200px&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="dataset-属性"><a href="#dataset-属性" class="headerlink" title="dataset 属性"></a>dataset 属性</h1><p>有时，需要在 HTML 元素上附加数据，供 JavaScript 脚本使用。一种解决方法是自定义属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span> <span class="attr">foo</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码为<code>div</code>元素自定义了<code>foo</code>属性，然后可以用<code>getAttribute()</code>和<code>setAttribute()</code>读写这个属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>);</span><br><span class="line">n.getAttribute(<span class="string">&quot;foo&quot;</span>); <span class="comment">// bar</span></span><br><span class="line">n.setAttribute(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;baz&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这种方法虽然可以达到目的，但是会使得 HTML 元素的属性不符合标准，导致网页代码通不过校验。</p>
<p>更好的解决方法是，使用标准提供的<code>data-*</code>属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span> <span class="attr">data-foo</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，使用元素节点对象的<code>dataset</code>属性，它指向一个对象，可以用来操作 HTML 元素标签的<code>data-*</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>);</span><br><span class="line">n.dataset.foo; <span class="comment">// bar</span></span><br><span class="line">n.dataset.foo = <span class="string">&quot;baz&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码中，通过<code>dataset.foo</code>读写<code>data-foo</code>属性。</p>
<p>删除一个<code>data-*</code>属性，可以直接使用<code>delete</code>命令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).dataset.foo;</span><br></pre></td></tr></table></figure>

<p>除了<code>dataset</code>属性，也可以用<code>getAttribute(&#39;data-foo&#39;)</code>、<code>removeAttribute(&#39;data-foo&#39;)</code>、<code>setAttribute(&#39;data-foo&#39;)</code>、<code>hasAttribute(&#39;data-foo&#39;)</code>等方法操作<code>data-*</code>属性。</p>
<p>注意，<code>data-</code>后面的属性名有限制，只能包含字母、数字、连词线（<code>-</code>）、点（<code>.</code>）、冒号（<code>:</code>）和下划线（<code>_</code>)。而且，属性名不应该使用<code>A</code>到<code>Z</code>的大写字母，比如不能有<code>data-helloWorld</code>这样的属性名，而要写成<code>data-hello-world</code>。</p>
<p>转成<code>dataset</code>的键名时，连词线后面如果跟着一个小写字母，那么连词线会被移除，该小写字母转为大写字母，其他字符不变。反过来，<code>dataset</code>的键名转成属性名时，所有大写字母都会被转成连词线+该字母的小写形式，其他字符不变。比如，<code>dataset.helloWorld</code>会转成<code>data-hello-world</code>。</p>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>事件种类</title>
    <url>/2019/08/13/dom/event-level/</url>
    <content><![CDATA[<h1 id="DOM-事件级别"><a href="#DOM-事件级别" class="headerlink" title="DOM 事件级别"></a>DOM 事件级别</h1><table>
<thead>
<tr>
<th>DOM</th>
<th>EVENT</th>
</tr>
</thead>
<tbody><tr>
<td>DOM 0</td>
<td>element.onclick = function(){}</td>
</tr>
<tr>
<td>DOM 2</td>
<td>element.addEventListener(‘click’,function(){},false}</td>
</tr>
<tr>
<td>DOM 3</td>
<td>element.addEventListener(‘keyup’,function(){},false}</td>
</tr>
</tbody></table>
<p>因为 DOM 1 一般只有设计规范没有具体实现,所以一般跳过. 其中 IE 浏览器的 addEventListener 函数对就是 attachEvent 函数</p>
<h1 id="EVENT-对象"><a href="#EVENT-对象" class="headerlink" title="EVENT 对象"></a>EVENT 对象</h1><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>preventDefault</td>
<td>阻止默认行为</td>
</tr>
<tr>
<td>stopPropagation</td>
<td>停止事件传递</td>
</tr>
<tr>
<td>stopImmediatePropagation</td>
<td>阻止其它绑定事件执行</td>
</tr>
<tr>
<td>currentTarget</td>
<td>当前发生事件的元素</td>
</tr>
<tr>
<td>target</td>
<td>触发事件的节点</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>Image对象</title>
    <url>/2021/01/14/dom/image/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>&lt;img&gt;</code>元素用于插入图片，主要继承了 HTMLImageElement 接口。</p>
<p>浏览器提供一个原生构造函数<code>Image</code>，用于生成<code>HTMLImageElement</code>实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img <span class="keyword">instanceof</span> Image; <span class="comment">// true</span></span><br><span class="line">img <span class="keyword">instanceof</span> HTMLImageElement; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>Image</code>构造函数可以接受两个整数作为参数，分别表示<code>&lt;img&gt;</code>元素的宽度和长度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">Image(width, height);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">var</span> myImage = <span class="keyword">new</span> Image(<span class="number">100</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<p><code>&lt;img&gt;</code>实例的<code>src</code>属性可以定义图像的网址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">&quot;picture.jpg&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>新生成的<code>&lt;img&gt;</code>实例并不属于文档的一部分。如果想让它显示在文档中，必须手动插入文档。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">&quot;image1.png&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img);</span><br></pre></td></tr></table></figure>

<p>除了使用<code>Image</code>构造，下面的方法也可以得到<code>HTMLImageElement</code>实例。</p>
<ul>
<li><code>document.images</code>的成员</li>
<li>节点选取方法（比如<code>document.getElementById</code>）得到的<code>&lt;img&gt;</code>节点</li>
<li><code>document.createElement(&#39;img&#39;)</code>生成的<code>&lt;img&gt;</code>节点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.images[<span class="number">0</span>] <span class="keyword">instanceof</span> HTMLImageElement;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myImg&quot;</span>);</span><br><span class="line">img <span class="keyword">instanceof</span> HTMLImageElement;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img <span class="keyword">instanceof</span> HTMLImageElement;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>HTMLImageElement</code>实例除了具有 Node、Element、HTMLElement 接口以外，还拥有一些独有的属性。这个接口没有定义自己的方法。</p>
<h1 id="特性相关的属性"><a href="#特性相关的属性" class="headerlink" title="特性相关的属性"></a>特性相关的属性</h1><p><strong>（1）HTMLImageElement.src</strong></p>
<p><code>HTMLImageElement.src</code>属性返回图像的完整网址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;img width=&quot;300&quot; height=&quot;400&quot; id=&quot;myImg&quot; src=&quot;http://example.com/pic.jpg&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.src; <span class="comment">// http://example.com/pic.jpg</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）HTMLImageElement.currentSrc</strong></p>
<p><code>HTMLImageElement.currentSrc</code>属性返回当前正在展示的图像的网址。JavaScript 和 CSS 的 mediaQuery 都可能改变正在展示的图像。</p>
<p><strong>（3）HTMLImageElement.alt</strong></p>
<p><code>HTMLImageElement.alt</code>属性可以读写<code>&lt;img&gt;</code>的 HTML 属性<code>alt</code>，表示对图片的文字说明。</p>
<p><strong>（4）HTMLImageElement.isMap，HTMLImageElement.useMap</strong></p>
<p><code>HTMLImageElement.isMap</code>属性对应<code>&lt;img&gt;</code>元素的 HTML 属性<code>ismap</code>，返回一个布尔值，表示图像是否为服务器端的图像映射的一部分。</p>
<p><code>HTMLImageElement.useMap</code>属性对应<code>&lt;img&gt;</code>元素的 HTML 属性<code>usemap</code>，表示当前图像对应的<code>&lt;map&gt;</code>元素。</p>
<p><strong>（5）HTMLImageElement.srcset，HTMLImageElement.sizes</strong></p>
<p><code>HTMLImageElement.srcset</code>属性和<code>HTMLImageElement.sizes</code>属性，分别用于读写<code>&lt;img&gt;</code>元素的<code>srcset</code>属性和<code>sizes</code>属性。它们用于<code>&lt;img&gt;</code>元素的响应式加载。<code>srcset</code>属性可以单独使用，但是<code>sizes</code>属性必须与<code>srcset</code>属性同时使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;img srcset=&quot;example-320w.jpg 320w,</span></span><br><span class="line"><span class="comment">//              example-480w.jpg 480w,</span></span><br><span class="line"><span class="comment">//              example-800w.jpg 800w&quot;</span></span><br><span class="line"><span class="comment">//      sizes=&quot;(max-width: 320px) 280px,</span></span><br><span class="line"><span class="comment">//             (max-width: 480px) 440px,</span></span><br><span class="line"><span class="comment">//             800px&quot;</span></span><br><span class="line"><span class="comment">//      id=&quot;myImg&quot;</span></span><br><span class="line"><span class="comment">//      src=&quot;example-800w.jpg&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myImg&quot;</span>);</span><br><span class="line">img.srcset;</span><br><span class="line"><span class="comment">// &quot;example-320w.jpg 320w,</span></span><br><span class="line"><span class="comment">//  example-480w.jpg 480w,</span></span><br><span class="line"><span class="comment">//  example-800w.jpg 800w&quot;</span></span><br><span class="line"></span><br><span class="line">img.sizes;</span><br><span class="line"><span class="comment">// &quot;(max-width: 320px) 280px,</span></span><br><span class="line"><span class="comment">//  (max-width: 480px) 440px,</span></span><br><span class="line"><span class="comment">//  800px&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>sizes</code>属性指定，对于小于<code>320px</code>的屏幕，图像的宽度为<code>280px</code>；对于小于<code>480px</code>的屏幕，图像宽度为<code>440px</code>；其他情况下，图像宽度为<code>800px</code>。然后，浏览器会根据当前屏幕下的图像宽度，到<code>srcset</code>属性加载宽度最接近的图像。</p>
<h1 id="HTMLImageElement-width，HTMLImageElement-height"><a href="#HTMLImageElement-width，HTMLImageElement-height" class="headerlink" title="HTMLImageElement.width，HTMLImageElement.height"></a>HTMLImageElement.width，HTMLImageElement.height</h1><p><code>width</code>属性表示<code>&lt;img&gt;</code>的 HTML 宽度，<code>height</code>属性表示高度。这两个属性返回的都是整数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;img width=&quot;300&quot; height=&quot;400&quot; id=&quot;myImg&quot; src=&quot;pic.jpg&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.width; <span class="comment">// 300</span></span><br><span class="line">img.height; <span class="comment">// 400</span></span><br></pre></td></tr></table></figure>

<p>如果图像还没有加载，这两个属性返回的都是<code>0</code>。</p>
<p>如果 HTML 代码没有设置<code>width</code>和<code>height</code>属性，则它们返回的是图像的实际宽度和高度，即<code>HTMLImageElement.naturalWidth</code>属性和<code>HTMLImageElement.naturalHeight</code>属性。</p>
<h1 id="HTMLImageElement-naturalWidth，HTMLImageElement-naturalHeight"><a href="#HTMLImageElement-naturalWidth，HTMLImageElement-naturalHeight" class="headerlink" title="HTMLImageElement.naturalWidth，HTMLImageElement.naturalHeight"></a>HTMLImageElement.naturalWidth，HTMLImageElement.naturalHeight</h1><p><code>HTMLImageElement.naturalWidth</code>属性表示图像的实际宽度（单位像素），<code>HTMLImageElement.naturalHeight</code>属性表示实际高度。这两个属性返回的都是整数。</p>
<p>如果图像还没有指定或不可得，这两个属性都等于<code>0</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (img.naturalHeight &gt; img.naturalWidth) &#123;</span><br><span class="line">  img.classList.add(<span class="string">&quot;portrait&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果图片的高度大于宽度，则设为<code>portrait</code>模式。</p>
<h1 id="HTMLImageElement-complete"><a href="#HTMLImageElement-complete" class="headerlink" title="HTMLImageElement.complete"></a>HTMLImageElement.complete</h1><p><code>HTMLImageElement.complete</code>属性返回一个布尔值，表示图表是否已经加载完成。如果<code>&lt;img&gt;</code>元素没有<code>src</code>属性，也会返回<code>true</code>。</p>
<h1 id="HTMLImageElement-crossOrigin"><a href="#HTMLImageElement-crossOrigin" class="headerlink" title="HTMLImageElement.crossOrigin"></a>HTMLImageElement.crossOrigin</h1><p><code>HTMLImageElement.crossOrigin</code>属性用于读写<code>&lt;img&gt;</code>元素的<code>crossorigin</code>属性，表示跨域设置。</p>
<p>这个属性有两个可能的值。</p>
<ul>
<li><code>anonymous</code>：跨域请求不要求用户身份（credentials），这是默认值。</li>
<li><code>use-credentials</code>：跨域请求要求用户身份。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;img crossorigin=&quot;anonymous&quot; id=&quot;myImg&quot; src=&quot;pic.jpg&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.crossOrigin; <span class="comment">// &quot;anonymous&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="HTMLImageElement-referrerPolicy"><a href="#HTMLImageElement-referrerPolicy" class="headerlink" title="HTMLImageElement.referrerPolicy"></a>HTMLImageElement.referrerPolicy</h1><p><code>HTMLImageElement.referrerPolicy</code>用来读写<code>&lt;img&gt;</code>元素的 HTML 属性<code>referrerpolicy</code>，表示请求图像资源时，如何处理 HTTP 请求的<code>referrer</code>字段。</p>
<p>它有五个可能的值。</p>
<ul>
<li><code>no-referrer</code>：不带有<code>referrer</code>字段。</li>
<li><code>no-referrer-when-downgrade</code>：如果请求的地址不是 HTTPS 协议，就不带有<code>referrer</code>字段，这是默认值。</li>
<li><code>origin</code>：<code>referrer</code>字段是当前网页的地址，包含协议、域名和端口。</li>
<li><code>origin-when-cross-origin</code>：如果请求的地址与当前网页是同源关系，那么<code>referrer</code>字段将带有完整路径，否则将只包含协议、域名和端口。</li>
<li><code>unsafe-url</code>：<code>referrer</code>字段包含当前网页的地址，除了协议、域名和端口以外，还包括路径。这个设置是不安全的，因为会泄漏路径信息。</li>
</ul>
<h1 id="HTMLImageElement-x，HTMLImageElement-y"><a href="#HTMLImageElement-x，HTMLImageElement-y" class="headerlink" title="HTMLImageElement.x，HTMLImageElement.y"></a>HTMLImageElement.x，HTMLImageElement.y</h1><p><code>HTMLImageElement.x</code>属性返回图像左上角相对于页面左上角的横坐标，<code>HTMLImageElement.y</code>属性返回纵坐标。</p>
<h1 id="事件属性"><a href="#事件属性" class="headerlink" title="事件属性"></a>事件属性</h1><p>图像加载完成，会触发<code>onload</code>属性指定的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为 &lt;img src=&quot;example.jpg&quot; onload=&quot;loadImage()&quot;&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Image is loaded&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图像加载完成，会触发<code>onerror</code>属性指定的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为 &lt;img src=&quot;image.gif&quot; onerror=&quot;myFunction()&quot;&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;There is something wrong&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>Mutation Observer API</title>
    <url>/2021/01/14/dom/mutationobserver/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Mutation Observer API 用来监视 DOM 变动。DOM 的任何变动，比如节点的增减、属性的变动、文本内容的变动，这个 API 都可以得到通知。</p>
<p>概念上，它很接近事件，可以理解为 DOM 发生变动就会触发 Mutation Observer 事件。但是，它与事件有一个本质不同：事件是同步触发，也就是说，DOM 的变动立刻会触发相应的事件；Mutation Observer 则是异步触发，DOM 的变动并不会马上触发，而是要等到当前所有 DOM 操作都结束才触发。</p>
<p>这样设计是为了应付 DOM 变动频繁的特点。举例来说，如果文档中连续插入 1000 个<code>&lt;p&gt;</code>元素，就会连续触发 1000 个插入事件，执行每个事件的回调函数，这很可能造成浏览器的卡顿；而 Mutation Observer 完全不同，只在 1000 个段落都插入结束后才会触发，而且只触发一次。</p>
<p>Mutation Observer 有以下特点。</p>
<ul>
<li>它等待所有脚本任务完成后，才会运行（即异步触发方式）。</li>
<li>它把 DOM 变动记录封装成一个数组进行处理，而不是一条条个别处理 DOM 变动。</li>
<li>它既可以观察 DOM 的所有类型变动，也可以指定只观察某一类变动。</li>
</ul>
<h1 id="MutationObserver-构造函数"><a href="#MutationObserver-构造函数" class="headerlink" title="MutationObserver 构造函数"></a>MutationObserver 构造函数</h1><p>使用时，首先使用<code>MutationObserver</code>构造函数，新建一个观察器实例，同时指定这个实例的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver(callback);</span><br></pre></td></tr></table></figure>

<p>上面代码中的回调函数，会在每次 DOM 变动后调用。该回调函数接受两个参数，第一个是变动数组，第二个是观察器实例，下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span> (<span class="params">mutations, observer</span>) </span>&#123;</span><br><span class="line">  mutations.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">mutation</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mutation);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="MutationObserver-的实例方法"><a href="#MutationObserver-的实例方法" class="headerlink" title="MutationObserver 的实例方法"></a>MutationObserver 的实例方法</h1><h2 id="observe"><a href="#observe" class="headerlink" title="observe()"></a>observe()</h2><p><code>observe</code>方法用来启动监听，它接受两个参数。</p>
<ul>
<li>第一个参数：所要观察的 DOM 节点</li>
<li>第二个参数：一个配置对象，指定所要观察的特定变动</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> article = <span class="built_in">document</span>.querySelector(<span class="string">&quot;article&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  childList: <span class="literal">true</span>,</span><br><span class="line">  attributes: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">observer.observe(article, options);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>observe</code>方法接受两个参数，第一个是所要观察的 DOM 元素是<code>article</code>，第二个是所要观察的变动类型（子节点变动和属性变动）。</p>
<p>观察器所能观察的 DOM 变动类型（即上面代码的<code>options</code>对象），有以下几种。</p>
<ul>
<li><strong>childList</strong>：子节点的变动（指新增，删除或者更改）。</li>
<li><strong>attributes</strong>：属性的变动。</li>
<li><strong>characterData</strong>：节点内容或节点文本的变动。</li>
</ul>
<p>想要观察哪一种变动类型，就在<code>option</code>对象中指定它的值为<code>true</code>。需要注意的是，必须同时指定<code>childList</code>、<code>attributes</code>和<code>characterData</code>中的一种或多种，若未均指定将报错。</p>
<p>除了变动类型，<code>options</code>对象还可以设定以下属性：</p>
<ul>
<li><code>subtree</code>：布尔值，表示是否将该观察器应用于该节点的所有后代节点。</li>
<li><code>attributeOldValue</code>：布尔值，表示观察<code>attributes</code>变动时，是否需要记录变动前的属性值。</li>
<li><code>characterDataOldValue</code>：布尔值，表示观察<code>characterData</code>变动时，是否需要记录变动前的值。</li>
<li><code>attributeFilter</code>：数组，表示需要观察的特定属性（比如<code>[&#39;class&#39;,&#39;src&#39;]</code>）。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始监听文档根节点（即&lt;html&gt;标签）的变动</span></span><br><span class="line">mutationObserver.observe(<span class="built_in">document</span>.documentElement, &#123;</span><br><span class="line">  attributes: <span class="literal">true</span>,</span><br><span class="line">  characterData: <span class="literal">true</span>,</span><br><span class="line">  childList: <span class="literal">true</span>,</span><br><span class="line">  subtree: <span class="literal">true</span>,</span><br><span class="line">  attributeOldValue: <span class="literal">true</span>,</span><br><span class="line">  characterDataOldValue: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>对一个节点添加观察器，就像使用<code>addEventListener</code>方法一样，多次添加同一个观察器是无效的，回调函数依然只会触发一次。但是，如果指定不同的<code>options</code>对象，就会被当作两个不同的观察器。</p>
<p>下面的例子是观察新增的子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> insertedNodes = [];</span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span> (<span class="params">mutations</span>) </span>&#123;</span><br><span class="line">  mutations.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">mutation</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; mutation.addedNodes.length; i++)</span><br><span class="line">      insertedNodes.push(mutation.addedNodes[i]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">observer.observe(<span class="built_in">document</span>, &#123; <span class="attr">childList</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(insertedNodes);</span><br></pre></td></tr></table></figure>

<h2 id="disconnect-，takeRecords（）"><a href="#disconnect-，takeRecords（）" class="headerlink" title="disconnect()，takeRecords（）"></a>disconnect()，takeRecords（）</h2><p><code>disconnect</code>方法用来停止观察。调用该方法后，DOM 再发生变动，也不会触发观察器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">observer.disconnect();</span><br></pre></td></tr></table></figure>

<p><code>takeRecords</code>方法用来清除变动记录，即不再处理未处理的变动。该方法返回变动记录的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">observer.takeRecords();</span><br></pre></td></tr></table></figure>

<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存所有没有被观察器处理的变动</span></span><br><span class="line"><span class="keyword">var</span> changes = mutationObserver.takeRecords();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止观察</span></span><br><span class="line">mutationObserver.disconnect();</span><br></pre></td></tr></table></figure>

<h1 id="MutationRecord-对象"><a href="#MutationRecord-对象" class="headerlink" title="MutationRecord 对象"></a>MutationRecord 对象</h1><p>DOM 每次发生变化，就会生成一条变动记录（MutationRecord 实例）。该实例包含了与变动相关的所有信息。Mutation Observer 处理的就是一个个<code>MutationRecord</code>实例所组成的数组。</p>
<p><code>MutationRecord</code>对象包含了 DOM 的相关信息，有如下属性：</p>
<ul>
<li><code>type</code>：观察的变动类型（<code>attribute</code>、<code>characterData</code>或者<code>childList</code>）。</li>
<li><code>target</code>：发生变动的 DOM 节点。</li>
<li><code>addedNodes</code>：新增的 DOM 节点。</li>
<li><code>removedNodes</code>：删除的 DOM 节点。</li>
<li><code>previousSibling</code>：前一个同级节点，如果没有则返回<code>null</code>。</li>
<li><code>nextSibling</code>：下一个同级节点，如果没有则返回<code>null</code>。</li>
<li><code>attributeName</code>：发生变动的属性。如果设置了<code>attributeFilter</code>，则只返回预先指定的属性。</li>
<li><code>oldValue</code>：变动前的值。这个属性只对<code>attribute</code>和<code>characterData</code>变动有效，如果发生<code>childList</code>变动，则返回<code>null</code>。</li>
</ul>
<h1 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h1><h2 id="子元素的变动"><a href="#子元素的变动" class="headerlink" title="子元素的变动"></a>子元素的变动</h2><p>下面的例子说明如何读取变动记录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span> (<span class="params">records</span>) </span>&#123;</span><br><span class="line">  records.map(<span class="function"><span class="keyword">function</span> (<span class="params">record</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Mutation type: &quot;</span> + record.type);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Mutation target: &quot;</span> + record.target);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mo = <span class="keyword">new</span> MutationObserver(callback);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  childList: <span class="literal">true</span>,</span><br><span class="line">  subtree: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mo.observe(<span class="built_in">document</span>.body, option);</span><br></pre></td></tr></table></figure>

<p>上面代码的观察器，观察<code>&lt;body&gt;</code>的所有下级节点（<code>childList</code>表示观察子节点，<code>subtree</code>表示观察后代节点）的变动。回调函数会在控制台显示所有变动的类型和目标节点。</p>
<h2 id="属性的变动"><a href="#属性的变动" class="headerlink" title="属性的变动"></a>属性的变动</h2><p>下面的例子说明如何追踪属性的变动。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span> (<span class="params">records</span>) </span>&#123;</span><br><span class="line">  records.map(<span class="function"><span class="keyword">function</span> (<span class="params">record</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Previous attribute value: &quot;</span> + record.oldValue);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mo = <span class="keyword">new</span> MutationObserver(callback);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;#my_element&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  attributes: <span class="literal">true</span>,</span><br><span class="line">  attributeOldValue: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mo.observe(element, options);</span><br></pre></td></tr></table></figure>

<p>上面代码先设定追踪属性变动（<code>&#39;attributes&#39;: true</code>），然后设定记录变动前的值。实际发生变动时，会将变动前的值显示在控制台。</p>
<h2 id="取代-DOMContentLoaded-事件"><a href="#取代-DOMContentLoaded-事件" class="headerlink" title="取代 DOMContentLoaded 事件"></a>取代 DOMContentLoaded 事件</h2><p>网页加载的时候，DOM 节点的生成会产生变动记录，因此只要观察 DOM 的变动，就能在第一时间触发相关事件，因此也就没有必要使用<code>DOMContentLoaded</code>事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver(callback);</span><br><span class="line">observer.observe(<span class="built_in">document</span>.documentElement, &#123;</span><br><span class="line">  childList: <span class="literal">true</span>,</span><br><span class="line">  subtree: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，监听<code>document.documentElement</code>（即 HTML 节点）的子节点的变动，<code>subtree</code>属性指定监听还包括后代节点。因此，任意一个网页元素一旦生成，就能立刻被监听到。</p>
<p>下面的代码，使用<code>MutationObserver</code>对象封装一个监听 DOM 生成的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">win</span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> listeners = [];</span><br><span class="line">  <span class="keyword">var</span> doc = win.document;</span><br><span class="line">  <span class="keyword">var</span> MutationObserver = win.MutationObserver || win.WebKitMutationObserver;</span><br><span class="line">  <span class="keyword">var</span> observer;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">selector, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 储存选择器和回调函数</span></span><br><span class="line">    listeners.push(&#123;</span><br><span class="line">      selector: selector,</span><br><span class="line">      fn: fn</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!observer) &#123;</span><br><span class="line">      <span class="comment">// 监听document变化</span></span><br><span class="line">      observer = <span class="keyword">new</span> MutationObserver(check);</span><br><span class="line">      observer.observe(doc.documentElement, &#123;</span><br><span class="line">        childList: <span class="literal">true</span>,</span><br><span class="line">        subtree: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查该节点是否已经在DOM中</span></span><br><span class="line">    check();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 检查是否匹配已储存的节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> listener = listeners[i];</span><br><span class="line">      <span class="comment">// 检查指定节点是否有匹配</span></span><br><span class="line">      <span class="keyword">var</span> elements = doc.querySelectorAll(listener.selector);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; elements.length; j++) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = elements[j];</span><br><span class="line">        <span class="comment">// 确保回调函数只会对该元素调用一次</span></span><br><span class="line">        <span class="keyword">if</span> (!element.ready) &#123;</span><br><span class="line">          element.ready = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">// 对该节点调用回调函数</span></span><br><span class="line">          listener.fn.call(element, element);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对外暴露ready</span></span><br><span class="line">  win.ready = ready;</span><br><span class="line">&#125;)(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">ready(<span class="string">&quot;.foo&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>按钮</title>
    <url>/2020/01/20/flutter/button/</url>
    <content><![CDATA[<ol>
<li>按下时都会有“水波动画”（又称“涟漪动画”，就是点击时按钮上会出现水波荡漾的动画）。</li>
<li>有一个 onPressed 属性来设置点击回调，当按钮按下时会执行该回调，如果不提供该回调则按钮会处于禁用状态，禁用状态不响应用户点击。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;漂浮&quot;按钮，它默认带有阴影和灰色背景。按下后，阴影会变大</span></span><br><span class="line">RaisedButton(</span><br><span class="line">  child: Text(<span class="string">&quot;normal&quot;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;, <span class="comment">// 按钮点击回调@required(回调为空时按钮禁用)</span></span><br><span class="line">  textColor: Colors.blue, <span class="comment">// 按钮点击回调</span></span><br><span class="line">  disabledTextColor: Colors.grey, <span class="comment">// 按钮禁用时的文字颜色</span></span><br><span class="line">  color: Colors.red, <span class="comment">// 按钮背景颜色</span></span><br><span class="line">  highlightColor: Colors.yellow, <span class="comment">// 按钮按下时的背景颜色</span></span><br><span class="line">  splashColor: Colors.green, <span class="comment">// 点击时，水波动画中水波的颜色</span></span><br><span class="line">  colorBrightness: Brightness.dark, <span class="comment">// 按钮主题，默认是浅色主题</span></span><br><span class="line">  padding: EdgeInsets.all(<span class="number">3.0</span>), <span class="comment">//按钮的填充</span></span><br><span class="line">  shape: RoundedRectangleBorder(</span><br><span class="line">    borderRadius: BorderRadius.circular(<span class="number">20.0</span>),</span><br><span class="line">  ), <span class="comment">//外形</span></span><br><span class="line">  elevation: <span class="number">6.0</span>, <span class="comment">// 正常状态下的阴影</span></span><br><span class="line">  highlightElevation: <span class="number">20.0</span>, <span class="comment">// 按下时的阴影</span></span><br><span class="line">  disabledElevation: <span class="number">0.0</span>, <span class="comment">// 禁用时的阴影</span></span><br><span class="line">),</span><br><span class="line"><span class="comment">// 扁平按钮，默认背景透明并不带阴影。按下后，会有背景色</span></span><br><span class="line">FlatButton(</span><br><span class="line">  child: Text(<span class="string">&quot;normal&quot;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br><span class="line"><span class="comment">// 默认有一个边框，不带阴影且背景透明。按下后，边框颜色会变亮、同时出现背景和阴影(较弱)</span></span><br><span class="line">OutlineButton(</span><br><span class="line">  child: Text(<span class="string">&quot;normal&quot;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br><span class="line"><span class="comment">// 一个可点击的Icon，不包括文字，默认没有背景，点击后会出现背景</span></span><br><span class="line">IconButton(</span><br><span class="line">  icon: Icon(Icons.thumb_up),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br><span class="line"><span class="comment">// 带图标的按钮RaisedButton、FlatButton、OutlineButton都有一个icon 构造函数，通过它可以轻松创建带图标的按钮</span></span><br><span class="line">RaisedButton.icon(</span><br><span class="line">  icon: Icon(Icons.send),</span><br><span class="line">  label: Text(<span class="string">&quot;发送&quot;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br><span class="line">OutlineButton.icon(</span><br><span class="line">  icon: Icon(Icons.add),</span><br><span class="line">  label: Text(<span class="string">&quot;添加&quot;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br><span class="line">FlatButton.icon(</span><br><span class="line">  icon: Icon(Icons.info),</span><br><span class="line">  label: Text(<span class="string">&quot;详情&quot;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Text 节点和 DocumentFragment 节点</title>
    <url>/2021/01/14/dom/text/</url>
    <content><![CDATA[<h1 id="Text-节点的概念"><a href="#Text-节点的概念" class="headerlink" title="Text 节点的概念"></a>Text 节点的概念</h1><p>文本节点（<code>Text</code>）代表元素节点（<code>Element</code>）和属性节点（<code>Attribute</code>）的文本内容。如果一个节点只包含一段文本，那么它就有一个文本子节点，代表该节点的文本内容。</p>
<p>通常我们使用父节点的<code>firstChild</code>、<code>nextSibling</code>等属性获取文本节点，或者使用<code>Document</code>节点的<code>createTextNode</code>方法创造一个文本节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文本节点</span></span><br><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>).firstChild;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创造文本节点</span></span><br><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>).appendChild(textNode);</span><br></pre></td></tr></table></figure>

<p>浏览器原生提供一个<code>Text</code>构造函数。它返回一个文本节点实例。它的参数就是该文本节点的文本内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空字符串</span></span><br><span class="line"><span class="keyword">var</span> text1 = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非空字符串</span></span><br><span class="line"><span class="keyword">var</span> text2 = <span class="keyword">new</span> Text(<span class="string">&quot;This is a text node&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意，由于空格也是一个字符，所以哪怕只有一个空格，也会形成文本节点。比如，<code>&lt;p&gt; &lt;/p&gt;</code>包含一个空格，它的子节点就是一个文本节点。</p>
<p>文本节点除了继承<code>Node</code>接口，还继承了<code>CharacterData</code>接口。<code>Node</code>接口的属性和方法请参考《Node 接口》一章，这里不再重复介绍了，以下的属性和方法大部分来自<code>CharacterData</code>接口。</p>
<h1 id="Text-节点的属性"><a href="#Text-节点的属性" class="headerlink" title="Text 节点的属性"></a>Text 节点的属性</h1><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p><code>data</code>属性等同于<code>nodeValue</code>属性，用来设置或读取文本节点的内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取文本内容</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>).firstChild.data;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>).firstChild.nodeValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置文本内容</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>).firstChild.data = <span class="string">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="wholeText"><a href="#wholeText" class="headerlink" title="wholeText"></a>wholeText</h2><p><code>wholeText</code>属性将当前文本节点与毗邻的文本节点，作为一个整体返回。大多数情况下，<code>wholeText</code>属性的返回值，与<code>data</code>属性和<code>textContent</code>属性相同。但是，某些特殊情况会有差异。</p>
<p>举例来说，HTML 代码如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;para&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line">  <span class="tag">&lt;<span class="name">em</span>&gt;</span>B<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时，文本节点的<code>wholeText</code>属性和<code>data</code>属性，返回值相同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;para&quot;</span>);</span><br><span class="line">el.firstChild.wholeText; <span class="comment">// &quot;A &quot;</span></span><br><span class="line">el.firstChild.data; <span class="comment">// &quot;A &quot;</span></span><br></pre></td></tr></table></figure>

<p>但是，一旦移除<code>&lt;em&gt;</code>节点，<code>wholeText</code>属性与<code>data</code>属性就会有差异，因为这时其实<code>&lt;p&gt;</code>节点下面包含了两个毗邻的文本节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">el.removeChild(para.childNodes[<span class="number">1</span>]);</span><br><span class="line">el.firstChild.wholeText; <span class="comment">// &quot;A C&quot;</span></span><br><span class="line">el.firstChild.data; <span class="comment">// &quot;A &quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><p><code>length</code>属性返回当前文本节点的文本长度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Text(<span class="string">&quot;Hello&quot;</span>).length; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h2 id="nextElementSibling，previousElementSibling"><a href="#nextElementSibling，previousElementSibling" class="headerlink" title="nextElementSibling，previousElementSibling"></a>nextElementSibling，previousElementSibling</h2><p><code>nextElementSibling</code>属性返回紧跟在当前文本节点后面的那个同级元素节点。如果取不到元素节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 为</span></span><br><span class="line"><span class="comment">// &lt;div&gt;Hello &lt;em&gt;World&lt;/em&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> tn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>).firstChild;</span><br><span class="line">tn.nextElementSibling;</span><br><span class="line"><span class="comment">// &lt;em&gt;World&lt;/em&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>previousElementSibling</code>属性返回当前文本节点前面最近的同级元素节点。如果取不到元素节点，则返回<code>null：</code>。</p>
<h1 id="Text-节点的方法"><a href="#Text-节点的方法" class="headerlink" title="Text 节点的方法"></a>Text 节点的方法</h1><h2 id="appendData-，deleteData-，insertData-，replaceData-，subStringData"><a href="#appendData-，deleteData-，insertData-，replaceData-，subStringData" class="headerlink" title="appendData()，deleteData()，insertData()，replaceData()，subStringData()"></a>appendData()，deleteData()，insertData()，replaceData()，subStringData()</h2><p>以下 5 个方法都是编辑<code>Text</code>节点文本内容的方法。</p>
<ul>
<li><code>appendData()</code>：在<code>Text</code>节点尾部追加字符串。</li>
<li><code>deleteData()</code>：删除<code>Text</code>节点内部的子字符串，第一个参数为子字符串开始位置，第二个参数为子字符串长度。</li>
<li><code>insertData()</code>：在<code>Text</code>节点插入字符串，第一个参数为插入位置，第二个参数为插入的子字符串。</li>
<li><code>replaceData()</code>：用于替换文本，第一个参数为替换开始位置，第二个参数为需要被替换掉的长度，第三个参数为新加入的字符串。</li>
<li><code>subStringData()</code>：用于获取子字符串，第一个参数为子字符串在<code>Text</code>节点中的开始位置，第二个参数为子字符串长度。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;p&gt;Hello World&lt;/p&gt;</span></span><br><span class="line"><span class="keyword">var</span> pElementText = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>).firstChild;</span><br><span class="line"></span><br><span class="line">pElementText.appendData(<span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="comment">// 页面显示 Hello World!</span></span><br><span class="line">pElementText.deleteData(<span class="number">7</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 页面显示 Hello W</span></span><br><span class="line">pElementText.insertData(<span class="number">7</span>, <span class="string">&quot;Hello &quot;</span>);</span><br><span class="line"><span class="comment">// 页面显示 Hello WHello</span></span><br><span class="line">pElementText.replaceData(<span class="number">7</span>, <span class="number">5</span>, <span class="string">&quot;World&quot;</span>);</span><br><span class="line"><span class="comment">// 页面显示 Hello WWorld</span></span><br><span class="line">pElementText.substringData(<span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 页面显示不变，返回&quot;World &quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p><code>remove</code>方法用于移除当前<code>Text</code>节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;p&gt;Hello World&lt;/p&gt;</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>).firstChild.remove();</span><br><span class="line"><span class="comment">// 现在 HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;p&gt;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="splitText"><a href="#splitText" class="headerlink" title="splitText()"></a>splitText()</h2><p><code>splitText</code>方法将<code>Text</code>节点一分为二，变成两个毗邻的<code>Text</code>节点。它的参数就是分割位置（从零开始），分割到该位置的字符前结束。如果分割位置不存在，将报错。</p>
<p>分割后，该方法返回分割位置后方的字符串，而原<code>Text</code>节点变成只包含分割位置前方的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html 代码为 &lt;p id=&quot;p&quot;&gt;foobar&lt;/p&gt;</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> textnode = p.firstChild;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newText = textnode.splitText(<span class="number">3</span>);</span><br><span class="line">newText; <span class="comment">// &quot;bar&quot;</span></span><br><span class="line">textnode; <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>

<p>父节点的<code>normalize</code>方法可以将毗邻的两个<code>Text</code>节点合并。</p>
<p>接上面的例子，文本节点的<code>splitText</code>方法将一个<code>Text</code>节点分割成两个，父元素的<code>normalize</code>方法可以实现逆操作，将它们合并。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p.childNodes.length; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将毗邻的两个 Text 节点合并</span></span><br><span class="line">p.normalize();</span><br><span class="line">p.childNodes.length; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h1 id="DocumentFragment-节点"><a href="#DocumentFragment-节点" class="headerlink" title="DocumentFragment 节点"></a>DocumentFragment 节点</h1><p><code>DocumentFragment</code>节点代表一个文档的片段，本身就是一个完整的 DOM 树形结构。它没有父节点，<code>parentNode</code>返回<code>null</code>，但是可以插入任意数量的子节点。它不属于当前文档，操作<code>DocumentFragment</code>节点，要比直接操作 DOM 树快得多。</p>
<p>它一般用于构建一个 DOM 结构，然后插入当前文档。<code>document.createDocumentFragment</code>方法，以及浏览器原生的<code>DocumentFragment</code>构造函数，可以创建一个空的<code>DocumentFragment</code>节点。然后再使用其他 DOM 方法，向其添加子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> docFrag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> docFrag = <span class="keyword">new</span> DocumentFragment();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">li.textContent = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">docFrag.appendChild(li);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&quot;</span>).appendChild(docFrag);</span><br></pre></td></tr></table></figure>

<p>上面代码创建了一个<code>DocumentFragment</code>节点，然后将一个<code>li</code>节点添加在它里面，最后将<code>DocumentFragment</code>节点移动到原文档。</p>
<p>注意，<code>DocumentFragment</code>节点本身不能被插入当前文档。当它作为<code>appendChild()</code>、<code>insertBefore()</code>、<code>replaceChild()</code>等方法的参数时，是它的所有子节点插入当前文档，而不是它自身。一旦<code>DocumentFragment</code>节点被添加进当前文档，它自身就变成了空节点（<code>textContent</code>属性为空字符串），可以被再次使用。如果想要保存<code>DocumentFragment</code>节点的内容，可以使用<code>cloneNode</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.queryselector(<span class="string">&quot;ul&quot;</span>).appendChild(docFrag.cloneNode(<span class="literal">true</span>));</span><br></pre></td></tr></table></figure>

<p>上面这样添加<code>DocumentFragment</code>节点进入当前文档，不会清空<code>DocumentFragment</code>节点。</p>
<p>下面是一个例子，使用<code>DocumentFragment</code>反转一个指定节点的所有子节点的顺序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> f = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">  <span class="keyword">while</span> (n.lastChild) f.appendChild(n.lastChild);</span><br><span class="line">  n.appendChild(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>DocumentFragment</code>节点对象没有自己的属性和方法，全部继承自<code>Node</code>节点和<code>ParentNode</code>接口。也就是说，<code>DocumentFragment</code>节点比<code>Node</code>节点多出以下四个属性。</p>
<ul>
<li><code>children</code>：返回一个动态的<code>HTMLCollection</code>集合对象，包括当前<code>DocumentFragment</code>对象的所有子元素节点。</li>
<li><code>firstElementChild</code>：返回当前<code>DocumentFragment</code>对象的第一个子元素节点，如果没有则返回<code>null</code>。</li>
<li><code>lastElementChild</code>：返回当前<code>DocumentFragment</code>对象的最后一个子元素节点，如果没有则返回<code>null</code>。</li>
<li><code>childElementCount</code>：返回当前<code>DocumentFragment</code>对象的所有子元素数量。</li>
</ul>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>十六进制颜色</title>
    <url>/2020/01/20/flutter/colors/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorsUtil</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// 十六进制颜色，</span></span><br><span class="line">  <span class="comment">/// hex, 十六进制值，例如：0xffffff,</span></span><br><span class="line">  <span class="comment">/// alpha, 透明度 [0.0,1.0]</span></span><br><span class="line">  <span class="keyword">static</span> Color hexColor(int hex, &#123;double alpha = <span class="number">1</span>&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (alpha &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      alpha = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (alpha &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      alpha = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Color.fromRGBO((hex &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span>, (hex &amp; <span class="number">0x00FF00</span>) &gt;&gt; <span class="number">8</span>,</span><br><span class="line">        (hex &amp; <span class="number">0x0000FF</span>) &gt;&gt; <span class="number">0</span>, alpha);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextStyle title16Bold = <span class="keyword">new</span> TextStyle(</span><br><span class="line">  color: Colors.white,</span><br><span class="line">  fontSize: <span class="number">16.0</span>,</span><br><span class="line">  fontWeight: FontWeight.w900,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>调用：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ColorsUtil.hexColor(<span class="number">0x072057</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>移动开发中三种跨平台技术对比</title>
    <url>/2020/01/17/flutter/compare/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>技术类型</th>
<th>UI 渲染方式</th>
<th>性能</th>
<th>开发效率</th>
<th>动态化</th>
<th>框架代表</th>
</tr>
</thead>
<tbody><tr>
<td>H5+原生</td>
<td>WebView 渲染</td>
<td>一般</td>
<td>高</td>
<td>支持</td>
<td>Cordova、Ionic</td>
</tr>
<tr>
<td>JavaScript+原生渲染</td>
<td>原生控件渲染</td>
<td>好</td>
<td>中</td>
<td>支持</td>
<td>RN、Weex</td>
</tr>
<tr>
<td>自绘</td>
<td>UI+原生</td>
<td>调用系统 API 渲染</td>
<td>好</td>
<td>Flutter 高, QT 低</td>
<td>默认不支持 QT、Flutter</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 中的按钮--FlatButton</title>
    <url>/2020/01/20/flutter/flatButton/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitFlatButton</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  final _buttonTitle;</span><br><span class="line">  final _buttonRoute;</span><br><span class="line"></span><br><span class="line">  InitFlatButton(<span class="built_in">this</span>._buttonTitle, <span class="built_in">this</span>._buttonRoute);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _InitFlatButtonState createState() =&gt; _InitFlatButtonState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InitFlatButtonState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">InitFlatButton</span>&gt; </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  Wid<span class="keyword">get</span> <span class="title">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> FlatButton(</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        Navigator.pushNamed(context, widget._buttonRoute);</span><br><span class="line">      &#125;,</span><br><span class="line">      highlightColor: Colors.transparent,</span><br><span class="line">      splashColor: Colors.transparent,</span><br><span class="line">      child: Flex(</span><br><span class="line">        direction: Axis.horizontal,</span><br><span class="line">        children: <span class="xml"><span class="tag">&lt;<span class="name">Widget</span>&gt;</span>[</span></span><br><span class="line"><span class="xml">          Expanded(</span></span><br><span class="line"><span class="xml">            flex: 1,</span></span><br><span class="line"><span class="xml">            child: Text(</span></span><br><span class="line"><span class="xml">              widget._buttonTitle,</span></span><br><span class="line"><span class="xml">              style: TextStyle(color: Colors.white),</span></span><br><span class="line"><span class="xml">            ),</span></span><br><span class="line"><span class="xml">          ),</span></span><br><span class="line"><span class="xml">          Icon(Icons.keyboard_arrow_right, color: Colors.white),</span></span><br><span class="line"><span class="xml">        ],</span></span><br><span class="line"><span class="xml">      ),</span></span><br><span class="line"><span class="xml">    );</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>手势检测(点击、双击、长按)</title>
    <url>/2020/01/20/flutter/gesture/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GestureDetectorTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  _GestureDetectorTestRouteState createState() =&gt;</span><br><span class="line">      <span class="keyword">new</span> _GestureDetectorTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_GestureDetectorTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">GestureDetectorTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _operation = <span class="string">&quot;No Gesture detected!&quot;</span>; <span class="comment">//保存事件名</span></span><br><span class="line">  @override</span><br><span class="line">  Wid<span class="keyword">get</span> <span class="title">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;手势检测(点击、双击、长按)&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: GestureDetector(</span><br><span class="line">          child: Container(</span><br><span class="line">            alignment: Alignment.center,</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            width: <span class="number">200.0</span>,</span><br><span class="line">            height: <span class="number">100.0</span>,</span><br><span class="line">            child: Text(</span><br><span class="line">              _operation,</span><br><span class="line">              style: TextStyle(color: Colors.white),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          onTap: <span class="function">() =&gt;</span> updateText(<span class="string">&quot;Tap点击&quot;</span>), <span class="comment">//点击</span></span><br><span class="line">          onDoubleTap: <span class="function">() =&gt;</span> updateText(<span class="string">&quot;DoubleTap双击&quot;</span>), <span class="comment">//双击</span></span><br><span class="line">          onLongPress: <span class="function">() =&gt;</span> updateText(<span class="string">&quot;LongPress长按&quot;</span>), <span class="comment">//长按</span></span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> updateText(<span class="built_in">String</span> text) &#123;</span><br><span class="line">    <span class="comment">//更新显示的事件名</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _operation = text;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>http请求-Dio</title>
    <url>/2020/01/25/flutter/httpDio/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpDio</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  HttpDio(&#123;Key key&#125;) : <span class="built_in">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _HttpDioState createState() =&gt; _HttpDioState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HttpDioState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HttpDio</span>&gt; </span>&#123;</span><br><span class="line">  Dio _dio = <span class="keyword">new</span> Dio();</span><br><span class="line">  @override</span><br><span class="line">  Wid<span class="keyword">get</span> <span class="title">build</span>(<span class="params">BuildContext context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;http请求--HttpClient&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: FutureBuilder(</span><br><span class="line">            future: _dio.get(<span class="string">&quot;https://api.github.com/orgs/flutterchina/repos&quot;</span>),</span><br><span class="line">            builder: (BuildContext context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">              <span class="comment">//请求完成</span></span><br><span class="line">              <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.done) &#123;</span><br><span class="line">                Response response = snapshot.data;</span><br><span class="line">                <span class="comment">//发生错误</span></span><br><span class="line">                <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Text(snapshot.error.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//请求成功，通过项目信息构建用于显示项目名称的ListView</span></span><br><span class="line">                <span class="keyword">return</span> ListView(</span><br><span class="line">                  children: response.data</span><br><span class="line">                      .map&lt;Widget&gt;(<span class="function">(<span class="params">e</span>) =&gt;</span> ListTile(title: Text(e[<span class="string">&quot;full_name&quot;</span>])))</span><br><span class="line">                      .toList(),</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//请求未完成时弹出loading</span></span><br><span class="line">              <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter 中接口请求的封装</title>
    <url>/2020/01/24/flutter/httpUtil/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseUrl</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 配置默认请求地址</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> url = <span class="string">&#x27;http://127.0.0.1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> get(<span class="built_in">String</span> url,</span><br><span class="line">      &#123;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, dynamic&gt; data,</span><br><span class="line">      <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, dynamic&gt; headers,</span><br><span class="line">      <span class="built_in">Function</span> success,</span><br><span class="line">      <span class="built_in">Function</span> error&#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 数据拼接</span></span><br><span class="line">    <span class="keyword">if</span> (data != <span class="literal">null</span> &amp;&amp; data.isNotEmpty) &#123;</span><br><span class="line">      StringBuffer options = <span class="keyword">new</span> StringBuffer(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">      data.forEach((key, value) &#123;</span><br><span class="line">        options.write(<span class="string">&#x27;$key=$value&amp;&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">String</span> optionsStr = options.toString();</span><br><span class="line">      optionsStr = optionsStr.substring(<span class="number">0</span>, optionsStr.length - <span class="number">1</span>);</span><br><span class="line">      url += optionsStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送get请求</span></span><br><span class="line">    <span class="keyword">await</span> _sendRequest(url, <span class="string">&#x27;get&#x27;</span>, success, <span class="attr">headers</span>: headers, <span class="attr">error</span>: error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> post(<span class="built_in">String</span> url,</span><br><span class="line">      &#123;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, dynamic&gt; data,</span><br><span class="line">      <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, dynamic&gt; headers,</span><br><span class="line">      <span class="built_in">Function</span> success,</span><br><span class="line">      <span class="built_in">Function</span> error&#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 发送post请求</span></span><br><span class="line">    _sendRequest(url, <span class="string">&#x27;post&#x27;</span>, success,</span><br><span class="line">        data: data, <span class="attr">headers</span>: headers, <span class="attr">error</span>: error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求处理</span></span><br><span class="line">  <span class="keyword">static</span> Future _sendRequest(<span class="built_in">String</span> url, <span class="built_in">String</span> method, <span class="built_in">Function</span> success,</span><br><span class="line">      &#123;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, dynamic&gt; data,</span><br><span class="line">      <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, dynamic&gt; headers,</span><br><span class="line">      <span class="built_in">Function</span> error&#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    int _code;</span><br><span class="line">    <span class="built_in">String</span> _msg;</span><br><span class="line">    <span class="keyword">var</span> _backData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测请求地址是否是完整地址</span></span><br><span class="line">    <span class="keyword">if</span> (!url.startsWith(<span class="string">&#x27;http&#x27;</span>)) &#123;</span><br><span class="line">      url = BaseUrl.url + url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, dynamic&gt; dataMap = data == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="built_in">Map</span>() : data;</span><br><span class="line">      <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, dynamic&gt; headersMap = headers == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="built_in">Map</span>() : headers;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 配置dio请求信息</span></span><br><span class="line">      Response response;</span><br><span class="line">      Dio dio = <span class="keyword">new</span> Dio();</span><br><span class="line">      dio.options.connectTimeout = <span class="number">10000</span>; <span class="comment">// 服务器链接超时，毫秒</span></span><br><span class="line">      dio.options.receiveTimeout = <span class="number">3000</span>; <span class="comment">// 响应流上前后两次接受到数据的间隔，毫秒</span></span><br><span class="line">      dio.options.headers</span><br><span class="line">          .addAll(headersMap); <span class="comment">// 添加headers,如需设置统一的headers信息也可在此添加</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (method == <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">        response = <span class="keyword">await</span> dio.get(url);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response = <span class="keyword">await</span> dio.post(url, <span class="attr">data</span>: dataMap);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (response.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">        _msg = <span class="string">&#x27;网络请求错误,状态码:&#x27;</span> + response.statusCode.toString();</span><br><span class="line">        _handError(error, _msg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 返回结果处理</span></span><br><span class="line">      <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, dynamic&gt; resCallbackMap = response.data;</span><br><span class="line">      _code = resCallbackMap[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">      _msg = resCallbackMap[<span class="string">&#x27;msg&#x27;</span>];</span><br><span class="line">      _backData = resCallbackMap[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (success != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_code == <span class="number">0</span>) &#123;</span><br><span class="line">          success(_backData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">String</span> errorMsg = _code.toString() + <span class="string">&#x27;:&#x27;</span> + _msg;</span><br><span class="line">          _handError(error, errorMsg);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">      _handError(error, <span class="string">&#x27;数据请求错误：&#x27;</span> + exception.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回错误信息</span></span><br><span class="line">  <span class="keyword">static</span> Future _handError(<span class="built_in">Function</span> errorCallback, <span class="built_in">String</span> errorMsg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (errorCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">      errorCallback(errorMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>图片</title>
    <url>/2020/01/20/flutter/image/</url>
    <content><![CDATA[<blockquote>
<p>Image widget 有一个必选的 image 参数，它对应一个 ImageProvider。下面我们分别演示一下如何从 asset 和网络加载图片。</p>
</blockquote>
<h1 id="从-asset-中加载图片"><a href="#从-asset-中加载图片" class="headerlink" title="从 asset 中加载图片"></a>从 asset 中加载图片</h1><ol>
<li>在工程根目录下创建一个 images 目录，并将图片 avatar.png 拷贝到该目录。</li>
<li>在 pubspec.yaml 中的 flutter 部分添加如下内容：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">assets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">images/avatar.png</span></span><br></pre></td></tr></table></figure>
<strong>注意: 由于 yaml 文件对缩进严格，所以必须严格按照每一层两个空格的方式进行缩进，此处 assets 前面应有两个空格。</strong></li>
<li>加载该图片<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Image(</span><br><span class="line">  image: AssetImage(<span class="string">&quot;images/avatar.png&quot;</span>),</span><br><span class="line">  width: <span class="number">100.0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
Image 也提供了一个快捷的构造函数 Image.asset 用于从 asset 中加载、显示图片：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Image.asset(<span class="string">&quot;images/avatar.png&quot;</span>, (width: <span class="number">100.0</span>));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="从网络加载图片"><a href="#从网络加载图片" class="headerlink" title="从网络加载图片"></a>从网络加载图片</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Image(</span><br><span class="line">  image: NetworkImage(</span><br><span class="line">    <span class="string">&quot;https://avatars2.githubusercontent.com/u/20411648?s=460&amp;v=4&quot;</span>),</span><br><span class="line">  width: <span class="number">100.0</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Image 也提供了一个快捷的构造函数 Image.network 用于从网络加载、显示图片：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Image.network(</span><br><span class="line">  <span class="string">&quot;https://avatars2.githubusercontent.com/u/20411648?s=460&amp;v=4&quot;</span>,</span><br><span class="line">  (width: <span class="number">100.0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter初步入门</title>
    <url>/2020/01/16/flutter/intro/</url>
    <content><![CDATA[<blockquote>
<p>Flutter 使用了 Dart 语言。它的整体的 UI 构建思想和前端和原生移动端是有极大差别的。</p>
</blockquote>
<h1 id="一切皆是-Widgets。"><a href="#一切皆是-Widgets。" class="headerlink" title="一切皆是 Widgets。"></a>一切皆是 Widgets。</h1><p>整个页面其实就是由 Widgets 嵌套组成的控件树，而所有的基础控件，全部继承自 Widgets。而且 Flutter 控件的概念和前端，移动端也有差别。例如一个按钮，移动端一个按钮，会给它设置宽高，位置，颜色，文字。这些属性共同构成了一个按钮。但是在 Flutter 中并不是这样，颜色本身，就是一个控件，位置本身也是一个控件。当你需要一个按钮出现在正确的位置，长得正确，并且做正确的事，你就需要嵌套 4,5 层的不同控件，每一层的控件，都会将界面效果本身以 child:Widgets()的形式传递下去。</p>
<h1 id="控件本身分为-StatelessWidget-和-StatefulWidget-两种状态。"><a href="#控件本身分为-StatelessWidget-和-StatefulWidget-两种状态。" class="headerlink" title="控件本身分为 StatelessWidget 和 StatefulWidget 两种状态。"></a>控件本身分为 StatelessWidget 和 StatefulWidget 两种状态。</h1><ul>
<li>从下图中我们也能看到，StatefulWidget 的功能是帮助界面进行动态展示，而 StatelessWidget</li>
<li>则是一个静态展示的效果。因此我们也就可以简单的理解，StatefulWidget 的控件可以改变自身的状态，而 StatelessWidget 不能改变自身的状态，类似一个 final 的效果。但是不同的是，StatelessWidget 的控件可以通过嵌套，让包裹着它的父 Widget 控件来改变它的状态。<img src="/images/source-img/flutter-widgets.png">

</li>
</ul>
<h1 id="Flutter-工程结构"><a href="#Flutter-工程结构" class="headerlink" title="Flutter 工程结构"></a>Flutter 工程结构</h1><p>Flutter 本身使用了 androidStudio 进行开发，lib 为工程代码，pubspec.yaml 为配置文件，android 及 ios 为原生代码，images 里为图片内容。</p>
<h1 id="目前已经使用-Flutter-的团队"><a href="#目前已经使用-Flutter-的团队" class="headerlink" title="目前已经使用 Flutter 的团队"></a>目前已经使用 Flutter 的团队</h1><p>美团，闲鱼，腾讯直播，github 等。</p>
<h1 id="Flutter-for-Web-原理"><a href="#Flutter-for-Web-原理" class="headerlink" title="Flutter for Web 原理"></a>Flutter for Web 原理</h1><p>Flutter for Web 和 Flutter 在上层都是 Dart 环境，两者不同的是，Flutter 的 Dart 代码运行在 Dart 虚拟机中，界面由 Flutter 引擎处理，通过 Skia 绘图引擎经由 GPU 绘制到屏幕上。而 Flutter for Web 的 Dart 代码编译成 JavaScript，界面上部分转换成标准的 html 标签，部分转换成通过 Canvas 绘制的自定义标签，最终构成一个 dom 树。</p>
<h1 id="目前发现的问题"><a href="#目前发现的问题" class="headerlink" title="目前发现的问题"></a>目前发现的问题</h1><ul>
<li>使用了 Flutter 后的应用，应用包大小会明显高于原生 app。</li>
<li>Dart 语言及 Flutter 上手成本较高，需要逐渐熟练。目前本人初学 Flutter 绘制一个简单体验中心页面，所需要时间大致是原生的三倍。</li>
<li>键盘点击挡住输入框的问题。这个问题在初步开发时遇到，目前未解决。（隐射出目前非大厂使用人数较少，一些原生的简单小问题需要花费时间解决。）</li>
<li>第三方库较少，很多需要自己造轮子。</li>
<li>Dart 语言反射极不友好，目前没有成熟的数据库 ORM 框架。</li>
<li>目前一些原生的功能性 sdk 并没有 flutter 端，因此存在被动需要混合界面栈的可能性。</li>
<li>虽然官方说 Flutter 的开发工具可以是轻量级的，但是由于 Dart 代码和 Widgets 控件树有大量括号，阅读依赖 AndroidStudio 的自动注释功能来知晓应该把 Widgets 括号括在哪</li>
</ul>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>路由</title>
    <url>/2020/01/22/flutter/routes/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_sea/pages/home.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_sea/pages/mine.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, WidgetBuilder&gt; routes() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">&quot;home&quot;</span>: <span class="function">(<span class="params">context</span>) =&gt;</span> Home(),</span><br><span class="line">    <span class="string">&quot;mine&quot;</span>: <span class="function">(<span class="params">context</span>) =&gt;</span> Mine(),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Navigator.pushNamed(context, widget._buttonRoute);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>文本</title>
    <url>/2020/01/20/flutter/text/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Text(</span><br><span class="line">  <span class="string">&quot;Hello World!&quot;</span> * <span class="number">12</span>, <span class="comment">// 文本重复次数</span></span><br><span class="line">  textAlign: TextAlign.center, <span class="comment">// 文本的对齐方式</span></span><br><span class="line">  maxLines: <span class="number">1</span>, <span class="comment">// 指定文本显示的最大行数</span></span><br><span class="line">  overflow: TextOverflow.ellipsis, <span class="comment">// 指定截断方式，默认是直接截断</span></span><br><span class="line">  textScaleFactor: <span class="number">0.8</span>, <span class="comment">// 文本相对于当前字体大小的缩放因子</span></span><br><span class="line">  style: TextStyle(</span><br><span class="line">    height: <span class="number">2</span>, <span class="comment">// 行高 具体的行高等于fontSize*height</span></span><br><span class="line">    color: Colors.blue, <span class="comment">// 字体颜色</span></span><br><span class="line">    fontSize: <span class="number">18.0</span>, <span class="comment">// 精确指定字体大小</span></span><br><span class="line">    fontFamily: <span class="string">&quot;Courier&quot;</span>, <span class="comment">// 字体系列</span></span><br><span class="line">    background: <span class="keyword">new</span> Paint()..color = Colors.yellow, <span class="comment">// 文本背景</span></span><br><span class="line">    decoration: TextDecoration.underline, <span class="comment">// 文本下划线</span></span><br><span class="line">    decorationStyle: TextDecorationStyle.dashed, <span class="comment">// 下划线样式</span></span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>修改git分支名名称</title>
    <url>/2020/12/16/git/branch-rename/</url>
    <content><![CDATA[<h1 id="修改本地-git-分支名称指令"><a href="#修改本地-git-分支名称指令" class="headerlink" title="修改本地 git 分支名称指令"></a>修改本地 git 分支名称指令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m oldBranchName newBranchName</span><br></pre></td></tr></table></figure>

<h1 id="修改远程仓库-github-上的分支名称"><a href="#修改远程仓库-github-上的分支名称" class="headerlink" title="修改远程仓库(github)上的分支名称"></a>修改远程仓库(github)上的分支名称</h1><p>git 本地分支名已修改，只需推送到远程仓库上，即可更换掉远程仓库的分支名称</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter 中 toast 的封装</title>
    <url>/2020/01/22/flutter/toast/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/cupertino.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toast</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> OverlayEntry _overlayEntry; <span class="comment">// toast靠它加到屏幕上</span></span><br><span class="line">  <span class="keyword">static</span> bool _showing = <span class="literal">false</span>; <span class="comment">// toast是否正在showing</span></span><br><span class="line">  <span class="keyword">static</span> DateTime _startedTime; <span class="comment">// 开启一个新toast的当前时间，用于对比是否已经展示了足够时间</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> _msg; <span class="comment">// 提示内容</span></span><br><span class="line">  <span class="keyword">static</span> int _showTime; <span class="comment">// toast显示时间</span></span><br><span class="line">  <span class="keyword">static</span> Color _bgColor; <span class="comment">// 背景颜色</span></span><br><span class="line">  <span class="keyword">static</span> Color _textColor; <span class="comment">// 文本颜色</span></span><br><span class="line">  <span class="keyword">static</span> double _textSize; <span class="comment">// 文字大小</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> _toastPosition; <span class="comment">// 显示位置</span></span><br><span class="line">  <span class="keyword">static</span> double _pdHorizontal; <span class="comment">// 左右边距</span></span><br><span class="line">  <span class="keyword">static</span> double _pdVertical; <span class="comment">// 上下边距</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> toast(</span><br><span class="line">    BuildContext context, &#123;</span><br><span class="line">    <span class="built_in">String</span> msg,</span><br><span class="line">    int showTime = <span class="number">2000</span>,</span><br><span class="line">    Color bgColor = Colors.black,</span><br><span class="line">    Color textColor = Colors.white,</span><br><span class="line">    double textSize = <span class="number">14.0</span>,</span><br><span class="line">    <span class="built_in">String</span> position = <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    double pdHorizontal = <span class="number">20.0</span>,</span><br><span class="line">    double pdVertical = <span class="number">10.0</span>,</span><br><span class="line">  &#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    assert(msg != <span class="literal">null</span>);</span><br><span class="line">    _msg = msg;</span><br><span class="line">    _startedTime = DateTime.now();</span><br><span class="line">    _showTime = showTime;</span><br><span class="line">    _bgColor = bgColor;</span><br><span class="line">    _textColor = textColor;</span><br><span class="line">    _textSize = textSize;</span><br><span class="line">    _toastPosition = position;</span><br><span class="line">    _pdHorizontal = pdHorizontal;</span><br><span class="line">    _pdVertical = pdVertical;</span><br><span class="line">    <span class="comment">//获取OverlayState</span></span><br><span class="line">    OverlayState overlayState = Overlay.of(context);</span><br><span class="line">    _showing = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (_overlayEntry == <span class="literal">null</span>) &#123;</span><br><span class="line">      _overlayEntry = OverlayEntry(</span><br><span class="line">          builder: <span class="function">(<span class="params">BuildContext context</span>) =&gt;</span> Positioned(</span><br><span class="line">                <span class="comment">//top值，可以改变这个值来改变toast在屏幕中的位置</span></span><br><span class="line">                top: _calToastPosition(context),</span><br><span class="line">                child: Container(</span><br><span class="line">                    alignment: Alignment.center,</span><br><span class="line">                    width: MediaQuery.of(context).size.width,</span><br><span class="line">                    child: Padding(</span><br><span class="line">                      padding: EdgeInsets.symmetric(horizontal: <span class="number">40.0</span>),</span><br><span class="line">                      child: AnimatedOpacity(</span><br><span class="line">                        opacity: _showing ? <span class="number">1.0</span> : <span class="number">0.0</span>, <span class="comment">//目标透明度</span></span><br><span class="line">                        duration: _showing</span><br><span class="line">                            ? Duration(milliseconds: <span class="number">100</span>)</span><br><span class="line">                            : Duration(milliseconds: <span class="number">400</span>),</span><br><span class="line">                        child: _buildToastWidget(),</span><br><span class="line">                      ),</span><br><span class="line">                    )),</span><br><span class="line">              ));</span><br><span class="line">      overlayState.insert(_overlayEntry);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//重新绘制UI，类似setState</span></span><br><span class="line">      _overlayEntry.markNeedsBuild();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(Duration(milliseconds: _showTime)); <span class="comment">// 等待时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2秒后 到底消失不消失</span></span><br><span class="line">    <span class="keyword">if</span> (DateTime.now().difference(_startedTime).inMilliseconds &gt;= _showTime) &#123;</span><br><span class="line">      _showing = <span class="literal">false</span>;</span><br><span class="line">      _overlayEntry.markNeedsBuild();</span><br><span class="line">      <span class="keyword">await</span> Future.delayed(Duration(milliseconds: <span class="number">400</span>));</span><br><span class="line">      _overlayEntry.remove();</span><br><span class="line">      _overlayEntry = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//toast绘制</span></span><br><span class="line">  <span class="keyword">static</span> _buildToastWidget() &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Card(</span><br><span class="line">        color: _bgColor,</span><br><span class="line">        child: Padding(</span><br><span class="line">          padding: EdgeInsets.symmetric(</span><br><span class="line">              horizontal: _pdHorizontal, <span class="attr">vertical</span>: _pdVertical),</span><br><span class="line">          child: Text(</span><br><span class="line">            _msg,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              fontSize: _textSize,</span><br><span class="line">              color: _textColor,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  设置toast位置</span></span><br><span class="line">  <span class="keyword">static</span> _calToastPosition(context) &#123;</span><br><span class="line">    <span class="keyword">var</span> backResult;</span><br><span class="line">    <span class="keyword">if</span> (_toastPosition == <span class="string">&#x27;top&#x27;</span>) &#123;</span><br><span class="line">      backResult = MediaQuery.of(context).size.height * <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_toastPosition == <span class="string">&#x27;center&#x27;</span>) &#123;</span><br><span class="line">      backResult = MediaQuery.of(context).size.height * <span class="number">2</span> / <span class="number">5</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      backResult = MediaQuery.of(context).size.height * <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> backResult;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Toast.toast(context, (msg: <span class="string">&quot;吐司文案&quot;</span>));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>git代码迁移</title>
    <url>/2020/12/16/git/code-move/</url>
    <content><![CDATA[<blockquote>
<p>相信很多朋友遇到过提交代码时发现分支错了，但苦于对 git 命令的不熟悉，只是机械的复制迁移，本文讲述如何通过 git 命令迁移代码</p>
</blockquote>
<h1 id="添加当前目录的所有文件到暂存区"><a href="#添加当前目录的所有文件到暂存区" class="headerlink" title="添加当前目录的所有文件到暂存区"></a>添加当前目录的所有文件到暂存区</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h1 id="暂时将未提交的变化移除到堆栈中，并命名为【name】"><a href="#暂时将未提交的变化移除到堆栈中，并命名为【name】" class="headerlink" title="暂时将未提交的变化移除到堆栈中，并命名为【name】"></a>暂时将未提交的变化移除到堆栈中，并命名为【name】</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash save [name]</span><br></pre></td></tr></table></figure>

<h1 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout<span class="meta"> [branchName]</span></span><br></pre></td></tr></table></figure>

<h1 id="从堆栈中将之前未提交的变化再移入"><a href="#从堆栈中将之前未提交的变化再移入" class="headerlink" title="从堆栈中将之前未提交的变化再移入"></a>从堆栈中将之前未提交的变化再移入</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash pop // 从堆栈中将之前未提交的变化再移入，并删除堆栈中暂存</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐使用</span></span><br><span class="line">git stash apply stash@&#123;[number]&#125; // 从堆栈中将之前未提交的变化再移入，不删除堆栈中暂存</span><br></pre></td></tr></table></figure>

<h1 id="重置暂存区与工作区（将添加当前目录的所有文件到暂存区还原，这样就可以继续开发了）"><a href="#重置暂存区与工作区（将添加当前目录的所有文件到暂存区还原，这样就可以继续开发了）" class="headerlink" title="重置暂存区与工作区（将添加当前目录的所有文件到暂存区还原，这样就可以继续开发了）"></a>重置暂存区与工作区（将添加当前目录的所有文件到暂存区还原，这样就可以继续开发了）</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset .</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令大全</title>
    <url>/2020/12/08/git/command/</url>
    <content><![CDATA[<h1 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init // 在当前目录新建一个Git代码库</span><br><span class="line">git init [project-name] // 新建一个目录，将其初始化为Git代码库</span><br></pre></td></tr></table></figure>

<h1 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url] // 克隆一个项目和它的整个代码历史</span><br></pre></td></tr></table></figure>

<h1 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . // 添加当前目录的所有文件到暂存区</span><br><span class="line">git add [file1] [file2] ... // 添加指定文件到暂存区</span><br><span class="line">git add [dir] // 添加指定目录到暂存区，包括子目录</span><br><span class="line">git add -p // 对于同一个文件的多处变化，可以实现分次提交</span><br></pre></td></tr></table></figure>

<h1 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm [file1] [file2] ... // 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">git rm --cached [file] // 停止追踪指定文件，但该文件会保留在工作区</span><br></pre></td></tr></table></figure>

<h1 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mv [file-original] [file-renamed] // 修改名文件，并且将这个修改名放入暂存区</span><br></pre></td></tr></table></figure>

<h1 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m [message] // 提交暂存区到仓库区</span><br><span class="line">git commit [file1] [file2] ... -m [message] // 提交暂存区的指定文件到仓库区</span><br><span class="line">git commit -a // 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">git commit -v[message] // 提交时显示所有diff信息</span><br><span class="line">git commit --amend -m [message] // 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">git commit --amend [file1] [file2] ... // 重做上一次commit，并包括指定文件的新变化</span><br></pre></td></tr></table></figure>

<h1 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch // 列出所有本地分支</span><br><span class="line">git branch -r // 列出所有远程分支</span><br><span class="line">git branch -a // 列出所有本地分支和远程分支</span><br><span class="line">git branch [branch-name] // 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch] [commit] // 新建一个分支，指向指定commit</span><br><span class="line">git branch --track [branch] [remote-branch] // 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">git branch --set-upstream [branch] [remote-branch] // 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">git branch -d [branch-name] // 删除分支</span><br><span class="line">git branch -dr [remote/branch] // 删除远程分支</span><br><span class="line">git push origin --delete &lt;remote-branchname&gt; // 删除远程分支</span><br></pre></td></tr></table></figure>

<h1 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch] // 新建一个分支，并切换到该分支</span><br><span class="line">git checkout [branch-name] // 切换到指定分支，并更新工作区</span><br><span class="line">git checkout - // 切换到上一个分支</span><br><span class="line">git checkout -b [branch] [tag] // 新建一个分支，指向某个tag</span><br><span class="line">git checkout [file] // 恢复暂存区的指定文件到工作区</span><br><span class="line">git checkout [commit] [file] // 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">git checkout . // 恢复暂存区的所有文件到工作区</span><br></pre></td></tr></table></figure>

<h1 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge [branch] // 合并指定分支到当前分支</span><br></pre></td></tr></table></figure>

<h1 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick [commit] // 选择一个commit，合并进当前分支</span><br></pre></td></tr></table></figure>

<h1 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull [remote] [branch] // 取回远程仓库的变化，并与本地分支合并</span><br></pre></td></tr></table></figure>

<h1 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --delete [branch-name] // 删除远程分支</span><br><span class="line">git push origin :refs/tags/[tagName] // 删除远程tag</span><br><span class="line">git push [remote] [tag] // 提交指定tag</span><br><span class="line">git push [remote] --tags // 提交所有tag</span><br><span class="line">git push [remote] [branch] // 上传本地指定分支到远程仓库</span><br><span class="line">git push [remote] --force // 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">git push [remote] --all // 推送所有分支到远程仓库</span><br></pre></td></tr></table></figure>

<h1 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag // 列出所有tag</span><br><span class="line">git tag [tag] // 新建一个tag在当前commit</span><br><span class="line">git tag [tag] [commit] // 新建一个tag在指定commit</span><br><span class="line">git tag -d [tag] // 删除本地tag</span><br></pre></td></tr></table></figure>

<h1 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show [commit] // 显示某次提交的元数据和内容变化</span><br><span class="line">git show --name-only [commit] // 显示某次提交发生变化的文件</span><br><span class="line">git show [commit]:[filename] // 显示某次提交时，某个文件的内容</span><br><span class="line">git show [tag] // 查看tag信息</span><br></pre></td></tr></table></figure>

<h1 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status // 显示有变更的文件</span><br></pre></td></tr></table></figure>

<h1 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch [remote] // 下载远程仓库的所有变动</span><br></pre></td></tr></table></figure>

<h1 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v // 显示所有远程仓库</span><br><span class="line">git remote show [remote] // 显示某个远程仓库的信息</span><br><span class="line">git remote add [shortname] [url] // 增加一个新的远程仓库，并命名</span><br><span class="line">git remote set-url origin [url] // 切换git源</span><br></pre></td></tr></table></figure>

<h1 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard // 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">git reset [commit] // 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">git reset --hard [commit] // 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">git reset --hard HEAD^ / 重置当前分支的HEAD为上一次commit，同时重置暂存区和工作区，与上一次commit一致</span><br><span class="line">git reset --keep [commit] // 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br></pre></td></tr></table></figure>

<h1 id="git-reset-1"><a href="#git-reset-1" class="headerlink" title="git reset"></a>git reset</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert [commit] // 新建一个commit，用来撤销指定commit，后者的所有变化都将被前者抵消，并且应用到当前分支</span><br></pre></td></tr></table></figure>

<h1 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash // 暂时将未提交的变化移除到堆栈中</span><br><span class="line">git stash save [name] // 暂时将未提交的变化移除到堆栈中，并命名为【name】</span><br><span class="line">git stash pop // 从堆栈中将之前未提交的变化再移入，并删除堆栈中暂存</span><br><span class="line">git stash apply stash@&#123;[number]&#125; // 从堆栈中将之前未提交的变化再移入，不删除堆栈中暂存</span><br><span class="line">git stash clear // 清除堆栈中的所有内容</span><br></pre></td></tr></table></figure>

<h1 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> // 显示当前分支的版本历史</span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span> // 显示commit历史，以及每次commit发生变更的文件</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 提交代码流程</title>
    <url>/2021/04/07/git/git-push/</url>
    <content><![CDATA[<blockquote>
<p>因使用了 git/svn 等代码版本工具，对于<strong>无用代码</strong>必须及时删除，例如：一些调试的 <code>console</code> 语句、无用的弃用功能代码。</p>
</blockquote>
<ol>
<li>add -&gt; commit -&gt; pull -&gt; merge -&gt; push</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . // 添加当前目录的所有文件到暂存区</span><br><span class="line">git commit -m [message] // 提交暂存区到仓库区</span><br><span class="line">git pull [remote] [branch] // 取回远程仓库的变化，并与本地分支合并</span><br><span class="line"></span><br><span class="line">... MERGING</span><br><span class="line"></span><br><span class="line">git push [remote] [branch]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>add -&gt; stash -&gt; pull -&gt; stash apply/pop -&gt; merge -&gt; commit -&gt; push</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . // 添加当前目录的所有文件到暂存区</span><br><span class="line"></span><br><span class="line">git stash save [name] // 暂时将未提交的变化移除到堆栈中，并命名为【name】</span><br><span class="line"></span><br><span class="line">git pull [remote] [branch] // 取回远程仓库的变化，并与本地分支合并</span><br><span class="line"></span><br><span class="line">git stash pop // 从堆栈中将之前未提交的变化再移入，并删除堆栈中暂存</span><br><span class="line">git stash apply stash@&#123;[number]&#125; // 从堆栈中将之前未提交的变化再移入，不删除堆栈中暂存</span><br><span class="line"></span><br><span class="line">... MERGING</span><br><span class="line"></span><br><span class="line">git commit -m [message] // 提交暂存区到仓库区</span><br><span class="line"></span><br><span class="line">git push [remote] [branch]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次git push -f 后的回滚操作</title>
    <url>/2020/12/08/git/reset/</url>
    <content><![CDATA[<h1 id="如何回退远程库-gitlab-github-上已经-push-的版本"><a href="#如何回退远程库-gitlab-github-上已经-push-的版本" class="headerlink" title="如何回退远程库 gitlab/github 上已经 push 的版本"></a>如何回退远程库 gitlab/github 上已经 push 的版本</h1><h4 id="gitlab-上同事的提交记录还在，找到对应的-commit-id"><a href="#gitlab-上同事的提交记录还在，找到对应的-commit-id" class="headerlink" title="gitlab 上同事的提交记录还在，找到对应的 commit id"></a>gitlab 上同事的提交记录还在，找到对应的 commit id</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft(或者--hard) commit id</span><br></pre></td></tr></table></figure>

<h4 id="使用强制-push-的方法，git-push-f-表示将目前自己本机的代码库推送到远端，并覆盖"><a href="#使用强制-push-的方法，git-push-f-表示将目前自己本机的代码库推送到远端，并覆盖" class="headerlink" title="使用强制 push 的方法，git push -f 表示将目前自己本机的代码库推送到远端，并覆盖"></a>使用强制 push 的方法，git push -f 表示将目前自己本机的代码库推送到远端，并覆盖</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git push -u origin <span class="keyword">master</span> <span class="title">-f</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git高级之配置多个SSH key</title>
    <url>/2021/02/07/git/ssh-key-multi/</url>
    <content><![CDATA[<blockquote>
<p>最近我们在代码托管平台上使用 SSH 的方式下拉代码，通常是用一个 ssh key 来拉取所有托管平台的代码，如码云，GitHub、GitLab 等，但是总用一个不是太好。会有安全风险，这就需要为每个托管平台设置单独的 SSH-key</p>
</blockquote>
<p>下面我们下简单介绍一下如何创建多个 SSH Key 并且使用下拉代码。</p>
<h1 id="第一步、生成-SSH-Key"><a href="#第一步、生成-SSH-Key" class="headerlink" title="第一步、生成 SSH-Key"></a>第一步、生成 SSH-Key</h1><p><code>Windows</code> 建议使用 <code>Git bash</code> 操作</p>
<p><code>Linux、mac</code> 用户使用<code>默认终端</code>即可</p>
<p>生成第一个 SSH-Key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span> -f ~/.ssh/id_rsa_one</span><br></pre></td></tr></table></figure>

<p>生成第二个 SSH-Key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span> -f ~/.ssh/id_rsa_two</span><br></pre></td></tr></table></figure>

<p>创建完成之后 我们在.ssh 的根目录下可以看到文件</p>
<ul>
<li><p>WindowsSSH 目录</p>
<pre><code>C:\Users\Administrator\.ssh</code></pre>
</li>
<li><p>Linux、macSSH 目录<br>直接 <code>cd ~/.ssh</code> 即可进入<br>此时，<code>.ssh</code> 目录下应该有 4 个文件：<code>id_rsa_one</code> 和 <code>id_rsa_one.pub</code>，<code>id_rsa_two</code> 和 <code>id_rsa_two.pub</code></p>
</li>
</ul>
<h1 id="第二步、添加私钥"><a href="#第二步、添加私钥" class="headerlink" title="第二步、添加私钥"></a>第二步、添加私钥</h1><p>在终端中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_one</span><br><span class="line">ssh-add ~/.ssh/id_rsa_two</span><br></pre></td></tr></table></figure>

<p><code>如果执行 ssh-add 时提示 Could not open a connection to your authentication agent</code></p>
<p>可以先执行命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-agent bash</span><br></pre></td></tr></table></figure>

<p>然后再重新运行 <code>ssh-add</code> 命令即可</p>
<p><strong>添加成功</strong>会出现提示：</p>
<p><code>Identity added</code> 等字样</p>
<h1 id="第三步、查看私钥列表是否存在"><a href="#第三步、查看私钥列表是否存在" class="headerlink" title="第三步、查看私钥列表是否存在"></a>第三步、查看私钥列表是否存在</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure>

<p>当我们可以看到 2 条私钥的时候就证明安装成功了，别急还没有完</p>
<h1 id="第四步、修改配置文件-config"><a href="#第四步、修改配置文件-config" class="headerlink" title="第四步、修改配置文件 config"></a>第四步、修改配置文件 config</h1><p>若.ssh 目录(就是私钥所在的文件夹)下无 config 文件，那么创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch config</span><br></pre></td></tr></table></figure>

<p>打开 config 文件 配置如下格式 这里要注意 IdentityFile 后面对应的是 本地 <code>ssh key 文件路径</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_one</span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_two</span><br></pre></td></tr></table></figure>

<h1 id="第五步、用-ssh-命令测试验证"><a href="#第五步、用-ssh-命令测试验证" class="headerlink" title="第五步、用 ssh 命令测试验证"></a>第五步、用 ssh 命令测试验证</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>验证通过后即可愉快的 clone 代码了</p>
<p>附：<code>清空私钥列表</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add -D</span><br></pre></td></tr></table></figure>

<h1 id="第六步、配置项目使用的-ssh-key"><a href="#第六步、配置项目使用的-ssh-key" class="headerlink" title="第六步、配置项目使用的 ssh-key"></a>第六步、配置项目使用的 ssh-key</h1><blockquote>
<p>如果项目使用的 ssh-key 不同， 我们不能重复设置 <code>git config --global</code>，这时我们只需要去掉 <code>--global</code> 修饰符，只为当前项目添加 git 配置就可以了<br>注意 <code>git config</code> 命令的 <code>--global</code> 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址。</p>
</blockquote>
<h2 id="一般情况下为所有项目全局设置默认的用户名和邮箱"><a href="#一般情况下为所有项目全局设置默认的用户名和邮箱" class="headerlink" title="一般情况下为所有项目全局设置默认的用户名和邮箱"></a>一般情况下为所有项目全局设置默认的用户名和邮箱</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xx.com&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="git-为不同的项目设置不同的用户名和邮箱"><a href="#git-为不同的项目设置不同的用户名和邮箱" class="headerlink" title="git 为不同的项目设置不同的用户名和邮箱"></a>git 为不同的项目设置不同的用户名和邮箱</h2><h3 id="找到项目所在目录下的-git-文件夹，进入-git-文件夹，然后执行如下命令分别设置用户名和邮箱"><a href="#找到项目所在目录下的-git-文件夹，进入-git-文件夹，然后执行如下命令分别设置用户名和邮箱" class="headerlink" title="找到项目所在目录下的 .git/文件夹，进入.git/文件夹，然后执行如下命令分别设置用户名和邮箱"></a>找到项目所在目录下的 .git/文件夹，进入.git/文件夹，然后执行如下命令分别设置用户名和邮箱</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.email <span class="string">&quot;xxx@xx.com&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="然后执行命令查看-config-文件：cat-config"><a href="#然后执行命令查看-config-文件：cat-config" class="headerlink" title="然后执行命令查看 config 文件：cat config"></a>然后执行命令查看 config 文件：<code>cat config</code></h3><p>发现里面多了刚才配置的用户名和邮箱信息，即成功为该项目单独设置了用户名和邮箱</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[core]</span></span><br><span class="line">	<span class="attr">repositoryformatversion</span> = <span class="number">0</span></span><br><span class="line">	<span class="attr">filemode</span> = <span class="literal">true</span></span><br><span class="line">	<span class="attr">bare</span> = <span class="literal">false</span></span><br><span class="line">	<span class="attr">logallrefupdates</span> = <span class="literal">true</span></span><br><span class="line">	<span class="attr">ignorecase</span> = <span class="literal">true</span></span><br><span class="line">	<span class="attr">precomposeunicode</span> = <span class="literal">true</span></span><br><span class="line"><span class="section">[remote &quot;origin&quot;]</span></span><br><span class="line">	<span class="attr">url</span> = https://github.com/<span class="number">552277</span>/calendar.git</span><br><span class="line">	<span class="attr">fetch</span> = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line"><span class="section">[branch &quot;master&quot;]</span></span><br><span class="line">	<span class="attr">remote</span> = origin</span><br><span class="line">	<span class="attr">merge</span> = refs/heads/master</span><br><span class="line"><span class="section">[user]</span></span><br><span class="line">	<span class="attr">name</span> = xxx</span><br><span class="line">	<span class="attr">email</span> = xxx@xx.com</span><br></pre></td></tr></table></figure>

<h2 id="如果-git-pull-每次都要求输入用户名和密码，则可以执行如下配置"><a href="#如果-git-pull-每次都要求输入用户名和密码，则可以执行如下配置" class="headerlink" title="如果 git pull 每次都要求输入用户名和密码，则可以执行如下配置"></a>如果 git pull 每次都要求输入用户名和密码，则可以执行如下配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>

<p>执行后， cat config 查看，则多了下面的内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[credential]</span></span><br><span class="line">        <span class="attr">helper</span> = store</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[user]</span></span><br><span class="line">        <span class="attr">name</span> = xxx</span><br><span class="line">        <span class="attr">email</span> = xxx@xx.com</span><br><span class="line"><span class="section">[credential]</span></span><br><span class="line">        <span class="attr">helper</span> = store</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Git存在SSh key 仍报错 Permission denied (publickey)的问题</title>
    <url>/2021/01/13/git/ssh-key/</url>
    <content><![CDATA[<blockquote>
<p>大概率是秘钥设置不对的问题</p>
</blockquote>
<h1 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h1><p><strong>首先检查</strong>有没有在 GitHub 上添加你本机的 SSH key <a href="https://github.com/settings/keys">(添加 SSH key)</a></p>
<p>在用户主目录下，看看有没有 <code>.ssh</code> 目录，如果有，再看看这个目录下有没有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 这两个文件。如果已经有了，可直接跳到下一步。如果没有，打开 Shell（Windows 下打开 Git Bash），<strong>创建</strong> SSH Key。</p>
<h1 id="创建-SSH-Key"><a href="#创建-SSH-Key" class="headerlink" title="创建 SSH Key"></a>创建 SSH Key</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可。</p>
<p><strong>注意：</strong>如果需要配置多个 ssh-key<br>当终端出现<code>Enter file in which to save the key (C:\Users\renyi/.ssh/id_rsa):</code>时，在后面输入其他的文件，如： <code>C:\Users\用户名/.ssh/gitlab</code>。如果不配置，默认覆盖原来的 ssh-key，这样会使得使用原先配置 ssh-key 的项目失去权限，在操作时，报错<code>Permission denied (publickey)</code></p>
<p>如果一切顺利的话，可以在用户主目录里找到.ssh 目录，里面有 <code>gitlab</code> 和 <code>gitlab.pub</code> 两个文件，这两个就是 <code>SSH Key</code> 的秘钥对，<code>gitlab</code> 是私钥，不能泄露出去，<code>gitlab.pub</code> 是公钥，可以放心地告诉任何人。</p>
<h1 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h1><p>如果添加了还是出现这个问题，那么问题大概率就定位在了你本机的这个 git 仓库并没有和这个 <code>SSH key</code> 关联上。用下述方法解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add <span class="string">&quot;C:\Users\用户名/.ssh/gitlab&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这里 <code>ssh-add</code> 后面填的是<code>私钥地址</code>，如 <code>mac</code> 电脑是 <code>/Users/用户名/.ssh/gitlab</code></p>
<p>若执行 ssh-add /path 出现这个错误: <code>Could not open a connection to your authentication agent</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add <span class="string">&quot;C:\Users\用户名\.ssh\gitlab&quot;</span></span><br><span class="line">Could not open a connection to your authentication agent.</span><br></pre></td></tr></table></figure>

<p>则先执行如下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-agent bash</span><br></pre></td></tr></table></figure>

<p>最后将本次关联 ssh-key 关联到远程 master</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p><strong>完整关联命令如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add <span class="string">&quot;C:\Users\用户名\.ssh\gitlab&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git配置SSH</title>
    <url>/2020/12/09/git/ssh/</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍 windows 环境下使用 git 配置 SSH，方便将代码提交到 github 上<br>注册 github 账号，下文中 <strong>yourName==注册用户名</strong>，<strong>yourEmail==注册邮箱</strong><br>下载 git 到指定目录，Run git，选择一个防止本地仓库的目录</p>
</blockquote>
<p><strong>执行如下代码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourName&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;yourEmail&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;yourEmail&quot;</span></span><br></pre></td></tr></table></figure>

<p>连续按三次回车，这里设置的密码就为空了，并且创建了 key<br>打开.ssh 文件夹，复制 id_rsa.pub 里面的文本，在 github 上点开添加秘钥，复制过去</p>
<p>OK，大工告成，我们来测试一下</p>
<p><strong>执行如下代码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>

<p>出现:You’ve successfully authenticated, but GitHub does not provide shell access.添加成功</p>
<p><strong>几个常用 git 命令:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> xxx.com //根据地址克隆项目</span><br><span class="line">git add . //跟踪所有修改过的文件</span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span> //提交跟踪到的文件</span><br><span class="line">git pull //下载代码</span><br><span class="line">git push //上传代码</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git中submodule子模块的添加、使用和删除</title>
    <url>/2020/09/26/git/submodule/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>项目中经常使用别人维护的模块，在 git 中使用子模块的功能能够大大提高开发效率。<br><br>使用子模块后，不必负责子模块的维护，只需要在必要的时候同步更新子模块即可。<br><br>本文主要讲解子模块相关的基础命令，详细使用请参考 man page。</p>
</blockquote>
<h2 id="子模块的添加"><a href="#子模块的添加" class="headerlink" title="子模块的添加"></a>子模块的添加</h2><p>添加子模块非常简单，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;url&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure>

<p>其中，url 为子模块的路径，path 为该子模块存储的目录路径。<br>执行成功后，<code>git status</code>会看到项目中修改了.gitmodules，并增加了一个新文件（为刚刚添加的路径）</p>
<p><code>git diff --cached</code>查看修改内容可以看到增加了子模块，并且新文件下为子模块的提交 hash 摘要</p>
<p><code>git commit</code>提交即完成子模块的添加<br>子模块的使用<br>克隆项目后，默认子模块目录下无任何内容。需要在项目根目录执行如下命令完成子模块的下载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br><span class="line">或：</span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>

<p>执行后，子模块目录下就有了源码，再执行相应的 makefile 即可。</p>
<h2 id="子模块的更新"><a href="#子模块的更新" class="headerlink" title="子模块的更新"></a>子模块的更新</h2><p>子模块的维护者提交了更新后，使用子模块的项目必须手动更新才能包含最新的提交。</p>
<p>在项目中，进入到子模块目录下，执行 <code>git pull</code>更新，查看<code>git log</code>查看相应提交。</p>
<p>完成后返回到项目目录，可以看到子模块有待提交的更新，使用<code>git add</code>，提交即可。</p>
<h2 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h2><p>有时子模块的项目维护地址发生了变化，或者需要替换子模块，就需要删除原有的子模块。</p>
<p>删除子模块较复杂，步骤如下：</p>
<p><code>rm -rf 子模块目录</code> 删除子模块目录及源码</p>
<p><code>vi .gitmodules</code> 删除项目目录下.gitmodules 文件中子模块相关条目</p>
<p><code>vi .git/config</code> 删除配置项中子模块相关条目</p>
<p><code>rm -rf .git/modules/*</code> 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可</p>
<p>执行完成后，再执行添加子模块命令即可，如果仍然报错，执行如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached 子模块名称</span><br></pre></td></tr></table></figure>

<p>完成删除后，提交到仓库即可。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>error setting certificate verify locations解决办法</title>
    <url>/2021/01/26/git/verify-locations/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当从远程 url 拉取项目时，报出如下错误信息：</p>
<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false fetch origin
fatal: unable to access &#39;https://github.com/552277/MyCalendar.git/&#39;: error setting certificate verify locations:
  CAfile: D:/******/Git/mingw64/ssl/certs/ca-bundle.crt
  CApath: none
完成时带有错误，见上文。</code></pre>
<p>意思是证书位置出现错误</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>因为证书原位于：</p>
<pre><code>D:/****01****/Git/mingw64/ssl/certs/ca-bundle.crt</code></pre>
<p>只是后来将 git 的上级目录修改了名字，所以证书位置就变成了：</p>
<pre><code>D:/****02****/Git/mingw64/ssl/certs/ca-bundle.crt</code></pre>
<p>而 git 的配置并没有更新证书的位置，所以去原来的位置没有找到而报错</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p><strong>方法一：</strong></p>
<p>执行命令,关闭证书校验：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --system http.sslverify <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong></p>
<p>更新 git 配置文件中证书存放位置信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --system http.sslcainfo <span class="string">&quot;D:/****02****/Git/mingw64/ssl/certs/ca-bundle.crt&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后重新拉取项目，上述错误将不再出现，得到成功解决</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>利用github提供的Webhooks实现自动化部署</title>
    <url>/2020/12/09/git/webhooks/</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍利用 github 提供的 Webhooks 实现自动化部署</p>
</blockquote>
<h1 id="配置-git-SSH-公钥和私钥"><a href="#配置-git-SSH-公钥和私钥" class="headerlink" title="配置 git SSH 公钥和私钥"></a>配置 git SSH 公钥和私钥</h1><p>可参考：<a href="/2020/12/09/git/ssh/" title="git配置SSH">git配置SSH</a>，配置成功之后，服务就能拉取 github 的代码了</p>
<h1 id="配置-Webhooks"><a href="#配置-Webhooks" class="headerlink" title="配置 Webhooks"></a>配置 Webhooks</h1><p>新建项目=&gt;Settings=&gt;Webhooks<br>配置项如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Payload URL <span class="regexp">//</span> hook 触发的接口地址</span><br><span class="line">Content type <span class="regexp">//</span> request 类型(这里以 application/json 为例)</span><br><span class="line">Secret <span class="regexp">//</span> 加密的秘钥</span><br><span class="line">Which events would you like to trigger this webhook <span class="regexp">//</span> 想要触发的时间，默认选择第一个(push 事件)</span><br><span class="line">Active <span class="regexp">//</span> 是否提供详细信息</span><br></pre></td></tr></table></figure>

<h1 id="创建自动化部署-Shell-脚本-也可以是其他脚本或手段，这里以-Shell-为例"><a href="#创建自动化部署-Shell-脚本-也可以是其他脚本或手段，这里以-Shell-为例" class="headerlink" title="创建自动化部署 Shell 脚本(也可以是其他脚本或手段，这里以 Shell 为例)"></a>创建自动化部署 Shell 脚本(也可以是其他脚本或手段，这里以 Shell 为例)</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /opt/...</span><br><span class="line">git pull</span><br><span class="line">...</span><br><span class="line">启动命令</span><br></pre></td></tr></table></figure>

<h1 id="编写调用自动化部署-Shell-的接口"><a href="#编写调用自动化部署-Shell-的接口" class="headerlink" title="编写调用自动化部署 Shell 的接口"></a>编写调用自动化部署 Shell 的接口</h1><blockquote>
<p>这里以 node 服务 koa2 为例，也可以是其他语言服务</p>
</blockquote>
<p>将创建 Webhooks 时填写的 Secret 存出在服务器环境变量中(这里以 contos7 为例)<br><strong>临时生效：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> SECRET_TOKEN=创建 Webhooks 时填写的 Secret</span><br><span class="line"></span><br><span class="line">echo $SECRET_TOKEN <span class="comment">// 验证是否成功</span></span><br></pre></td></tr></table></figure>

<p><strong>永久生效：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">在最后，添加:</span><br><span class="line"></span><br><span class="line">SECRET_TOKEN=创建 Webhooks 时填写的 Secret</span><br><span class="line"><span class="keyword">export</span> SECRET_TOKEN</span><br><span class="line"></span><br><span class="line">保存，退出</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">echo $SECRET_TOKEN <span class="comment">// 验证是否成功</span></span><br></pre></td></tr></table></figure>

<p><strong>创建 koa2 项目并编写调用自动化部署 Shell 的接口</strong><br>创建 koa2 项目，对项目进行常规配置(此处省略 500 字，这里不属于本文重点介绍的内容，有兴趣请自行 Google)</p>
<p>关键代码性代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)();</span><br><span class="line"><span class="keyword">const</span> childProcess = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>); <span class="comment">// 创建子进程</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>); <span class="comment">// 加密解密工具</span></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/url&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里的/url 必须与配置 Webhooks 时填写的接口路径相同</span></span><br><span class="line">  <span class="keyword">const</span> hubSignatureKV = ctx.header[<span class="string">&quot;x-hub-signature&quot;</span>];</span><br><span class="line">  <span class="keyword">if</span> (hubSignatureKV) &#123;</span><br><span class="line">    <span class="comment">// 获取 github 签名</span></span><br><span class="line">    <span class="keyword">const</span> hubSignature = hubSignatureKV.slice(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 获取系统环境变量 SECRET_TOKEN</span></span><br><span class="line">    <span class="keyword">const</span> secret = process.env.SECRET_TOKEN;</span><br><span class="line">    <span class="comment">// 创建一个 hmac 对象(必须是 sha1 算法，secret 作为加密秘钥)</span></span><br><span class="line">    <span class="keyword">const</span> hmac = crypto.createHmac(<span class="string">&quot;sha1&quot;</span>, secret);</span><br><span class="line">    <span class="comment">// 往 hmac 对象中添加摘要内容(必须是请求主体，因为 Content type 配置为 application/json，所有此处需要转为 json 字符串)</span></span><br><span class="line">    <span class="keyword">const</span> up = hmac.update(<span class="built_in">JSON</span>.stringify(ctx.request.body));</span><br><span class="line">    <span class="comment">// 使用 digest 方法生成加密内容(必须是 hex 格式)</span></span><br><span class="line">    <span class="keyword">const</span> signature = up.digest(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hubSignature === signature) &#123;</span><br><span class="line">      <span class="comment">// 相同则验证成功</span></span><br><span class="line">      childProcess.exec(<span class="string">&quot;/opt/shell/hexo.sh&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 利用子进程执行系统命令</span></span><br><span class="line">        <span class="built_in">console</span>.log(err); <span class="comment">//当成功是 error 是 null</span></span><br><span class="line">      &#125;);</span><br><span class="line">      ctx.body = <span class="string">&quot;执行成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ctx.body = <span class="string">&quot;服务器已积极拒绝你的请求&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">&quot;服务器已积极拒绝你的请求&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>

<h1 id="部署接口服务并验证"><a href="#部署接口服务并验证" class="headerlink" title="部署接口服务并验证"></a>部署接口服务并验证</h1><p>将服务部署到服务器(这里案例为 node 服务，推荐使用 pm2 守护进程部署)<br>部署成功之后推送代码验证即可</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo发生error：spawn failed错误的解决方法</title>
    <url>/2021/02/01/hexo/error/</url>
    <content><![CDATA[<h1 id="在本地没有生成-ssh-密钥"><a href="#在本地没有生成-ssh-密钥" class="headerlink" title="在本地没有生成 ssh 密钥"></a>在本地没有生成 ssh 密钥</h1><p>指路<a href="/2020/12/09/git/ssh/" title="git配置SSH">git配置SSH</a></p>
<h1 id="问题大多是因为-git-进行-push-或者-hexo-d-的时候改变了一些-deploy-git-文件下的内容"><a href="#问题大多是因为-git-进行-push-或者-hexo-d-的时候改变了一些-deploy-git-文件下的内容" class="headerlink" title="问题大多是因为 git 进行 push 或者 hexo d 的时候改变了一些.deploy_git 文件下的内容"></a>问题大多是因为 git 进行 push 或者 hexo d 的时候改变了一些.deploy_git 文件下的内容</h1><ul>
<li>删除.deploy_git 文件夹;</li>
<li>输入 <code>git config --global core.autocrlf false</code></li>
<li>然后，依次执行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="error-key-does-not-contain-a-section-global"><a href="#error-key-does-not-contain-a-section-global" class="headerlink" title="error: key does not contain a section: --global"></a>error: key does not contain a section: <code>--global</code></h1><blockquote>
<p>git config 配置用户名和邮箱的时候经常会报这个错</p>
</blockquote>
<p><strong>关键问题</strong><br>输入 <code>--global</code> 的时候, 用自己的键盘敲出来！<br><code>**不要直接复制粘贴**</code>，直接复制粘贴就会报 error。<br>真是一言难尽…</p>
<h1 id="RPC-failed；-curl-92-HTTP-2-stream-0-was-not-closed-cleanly-PROTOCOL-ERROR-err-1"><a href="#RPC-failed；-curl-92-HTTP-2-stream-0-was-not-closed-cleanly-PROTOCOL-ERROR-err-1" class="headerlink" title="RPC failed； curl 92 HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)"></a>RPC failed； curl 92 HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)</h1><blockquote>
<p>如题 git 提交出错，之前重启之后，或者将提交分多次后推送 OK，因为项目忙也没时间去搞，是不是给你来一下子，真是受不了。在网上搜来搜去的，都是些治标不治本的，要不你把 HTTP 换成 SSH。一切就舒坦了。由于其他原因换不了。最后还是狠心换掉了 HTTP 版本</p>
</blockquote>
<p><strong>(推荐)直接换掉 Git 的 http 版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.version HTTP/1.1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建个人博客</title>
    <url>/2019/06/03/hexo/init/</url>
    <content><![CDATA[<h1 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h1><blockquote>
<p>准备工具:git,nodejs</p>
</blockquote>
<p>Run git<br>选择进入一个博客放置目录</p>
<p>执行如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">hexo init</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>打开浏览器输入:localhost:4000，就可以看到自己的本地博客</p>
<h1 id="引用模板"><a href="#引用模板" class="headerlink" title="引用模板"></a>引用模板</h1><p>如果不喜欢默认模板，可以引入其他主题模板<br>在 hexo 官网上选择喜欢的<a href="https://hexo.io/themes/">主题</a> ，克隆自己喜欢的模板<br>这里以 ayer 为例</p>
<p>执行如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>

<p>删除主题文件中的<code>.git</code><br>修改<code>\_config.yml</code> 配置文件 <code>theme: ayer</code><br>模板配置，请 Google。</p>
<h1 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h1><p>注册 github 账号<br>创建一个新项目，Repository name:你的 github 账号名.github.io(这里不区分大小写)<br>修改_config.yml 配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span> <span class="string">你的项目地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>执行如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>成功之输入后，在浏览器上输入:你的 github 账号名.github.io，就可以看到自己的博客</p>
<h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>如果想要绑定自己的专属域名，可以去阿里云申请一个域名(申请域名是收费的)<br>地址解析:<br>记录类型:CNAME<br>主机记录:@<br>记录值:你的 github 账号名.github.io<br>然后在 source 目录下新建一个文件命名为:CNAME(不带后缀)，内容为:你的域名(xxx.com)</p>
<p>执行如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>成功之后输入，在浏览器上输入:你的域名(xxx.com)，就可以看到自己的博客</p>
<h1 id="创建分类和标签"><a href="#创建分类和标签" class="headerlink" title="创建分类和标签"></a>创建分类和标签</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories //创建分类</span><br><span class="line">hexo new page tags //创建标签</span><br></pre></td></tr></table></figure>

<p>找到 categories 下的 index.md，编辑内容为:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>找到 tags 下的 index.md，编辑内容为:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>新文章页面都创建在_posts 目录下，使用 markdown 语法编辑<br>设置分类 categories: xxx<br>设置标签 tags: xxx<br>多个标签则用 JS 数组表示:[xxx,xxx]</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 使用指南</title>
    <url>/2019/06/03/hexo/markdown/</url>
    <content><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>总共有六级标题，分别为：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>编写时最后一个<code>#</code>和标题名称之间有一个空格</p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>以<code>- + *</code>开头的文字</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 列表内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 列表内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 列表内容</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>编写时<code>- + *</code>和列表内容之间有一个空格</p>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p><code>数字. 列表内容</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 列表内容</span><br><span class="line"><span class="bullet">2.</span> 列表内容</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>编写时<code>.</code>和列表内容之间有一个空格</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用的内容</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>编写时<code>&gt;</code>和引用内容之间有一个空格</p>
<h1 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">粗体： <span class="strong">**需要加粗的文字**</span></span><br><span class="line">斜体： <span class="emphasis">_需要斜体的文字_</span></span><br><span class="line">加粗并斜体： <span class="strong">**<span class="emphasis">_需要加粗和斜体的文字_</span>**</span></span><br></pre></td></tr></table></figure>

<h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">++下划线文字++</span><br></pre></td></tr></table></figure>

<h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~删除线文字~~</span><br></pre></td></tr></table></figure>

<h1 id="文本高亮"><a href="#文本高亮" class="headerlink" title="文本高亮"></a>文本高亮</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">==文本高亮==</span><br></pre></td></tr></table></figure>

<h1 id="图片和链接"><a href="#图片和链接" class="headerlink" title="图片和链接"></a>图片和链接</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">图片： ![<span class="string">图片名称</span>](<span class="link">图片地址</span>)</span><br><span class="line">链接： [<span class="string">链接名称</span>](<span class="link">链接地址</span>)</span><br></pre></td></tr></table></figure>

<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">***或<span class="comment">--- 代表分割线</span></span><br></pre></td></tr></table></figure>

<h1 id="代码框和代码块"><a href="#代码框和代码块" class="headerlink" title="代码框和代码块"></a>代码框和代码块</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 代码框： <span class="code">`代码框的内容`</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 代码块：</span><br><span class="line"></span><br><span class="line"><span class="code">```代码块所用编辑的语言名称</span></span><br><span class="line"><span class="code">代码块内容</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<h1 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h1><p>此处以一个三行两列的表格为例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| header 1    | header 2    |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| row 1 col 1 | row 1 col 2 |</span><br><span class="line">| row 2 col 1 | row 2 col 2 |</span><br></pre></td></tr></table></figure>

<h1 id="可选框"><a href="#可选框" class="headerlink" title="可选框"></a>可选框</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">未被选中的可选框：- [ ] 可选框后的内容</span><br><span class="line">已被选中的可选框：- [x] 可选框后的内容</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><code>-</code>和<code>]</code>之后都有一个空格，且未被选中的可选框格式中的<code>[]</code>之间有一个空格</p>
<h1 id="添加目录"><a href="#添加目录" class="headerlink" title="添加目录"></a>添加目录</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">格式：在[]中添加 TOC 来自动添加目录</span><br></pre></td></tr></table></figure>

<h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```math</span></span><br><span class="line"><span class="code">E = mc^3</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p><strong>指路：</strong><a href="/2021/05/21/hexo/mermaid/" title="Mermaid绘图工具">Mermaid绘图工具</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mermaid绘图工具</title>
    <url>/2021/05/21/hexo/mermaid/</url>
    <content><![CDATA[<h1 id="hexo-next-渲染-markdown-mermaid-流程图"><a href="#hexo-next-渲染-markdown-mermaid-流程图" class="headerlink" title="hexo next 渲染 markdown mermaid 流程图"></a>hexo next 渲染 markdown mermaid 流程图</h1><ol>
<li>打开主题的配置文件 <code>_config.next.yml</code></li>
<li>搜索关键字 mermaid，可看到如下配置，如果是 false，就把它改成 true，如果是，就可以不用修改了</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">forest</span></span><br></pre></td></tr></table></figure>

<h1 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h1><table>
<thead>
<tr>
<th>方向</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>TB</td>
<td>从上到下</td>
</tr>
<tr>
<td>BT</td>
<td>从下到上</td>
</tr>
<tr>
<td>RL</td>
<td>从右到左</td>
</tr>
<tr>
<td>LR</td>
<td>从左到右</td>
</tr>
<tr>
<td>TD</td>
<td>与 TB 相同</td>
</tr>
</tbody></table>
<h1 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h1><blockquote>
<p>流程图的节点形状有矩形、圆角、圆柱、圆形、菱形、梯形、六边形、平行四边形等等，通过&lt;&gt;[]{}()等符号进行控制</p>
</blockquote>
<p>语法结构如下：<code>A[名称] --&gt; B(名称)</code><br>其中，A、B 均代表形状名称，–&gt;表示箭头指向，形状样式用后面的括号来表示，括号里面的内容是形状中要显示的文本内容。其中有以下几种形状：</p>
<table>
<thead>
<tr>
<th>括号形式</th>
<th>形状样式</th>
</tr>
</thead>
<tbody><tr>
<td>[ ]</td>
<td>矩形框</td>
</tr>
<tr>
<td>( )</td>
<td>圆角矩形框</td>
</tr>
<tr>
<td>{ }</td>
<td>菱形</td>
</tr>
<tr>
<td>(( ))</td>
<td>圆形</td>
</tr>
</tbody></table>
<pre class="mermaid">
graph TD
A[矩形] --&gt; B(圆角) --&gt; C{菱形}
D([This is the text in the box]) --&gt; E[[带边框的矩形]] --&gt; F[\平行四边形\]
G --&gt; H((圆形)) --&gt; I[&#x2F;平行四边形&#x2F;]
J&gt;非对称图形] --&gt; K[&#x2F;梯形\] --&gt; L[\梯形&#x2F;]
M[(圆柱形)]
</pre>

<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid graph TD %&#125;</span><br><span class="line">A[矩形]<span class="function"> --&gt;</span> B<span class="function"><span class="params">(圆角)</span> --&gt;</span> C&#123;菱形&#125;</span><br><span class="line">D<span class="function"><span class="params">([This <span class="keyword">is</span> the text <span class="keyword">in</span> the box])</span> --&gt;</span> E[[带边框的矩形]]<span class="function"> --&gt;</span> F[<span class="string">\平行四边形\]</span></span><br><span class="line">G&#123;&#123;六边形&#125;&#125;<span class="function"> --&gt;</span> H<span class="function"><span class="params">((圆形))</span> --&gt;</span> I[<span class="regexp">/平行四边形/</span>]</span><br><span class="line">J&gt;非对称图形]<span class="function"> --&gt;</span> K[<span class="regexp">/梯形\] --&gt; L[\梯形/</span>]</span><br><span class="line">M[(圆柱形)]</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="连接线"><a href="#连接线" class="headerlink" title="连接线"></a>连接线</h1><table>
<thead>
<tr>
<th>符号</th>
<th>箭头</th>
</tr>
</thead>
<tbody><tr>
<td>–&gt;</td>
<td>箭头</td>
</tr>
<tr>
<td>—</td>
<td>没有箭头</td>
</tr>
<tr>
<td>–文字—/—|文字|</td>
<td>带文字的连接线</td>
</tr>
<tr>
<td>-–&gt;|文字|/-–文字–&gt;</td>
<td>带箭头和文字的连接</td>
</tr>
<tr>
<td>-.-&gt;</td>
<td>虚线</td>
</tr>
<tr>
<td>-.文字.-&gt;</td>
<td>带文字的虚线连接</td>
</tr>
<tr>
<td>==&gt;</td>
<td>粗连接线</td>
</tr>
<tr>
<td>==文本==&gt;</td>
<td>带文本的粗连接</td>
</tr>
<tr>
<td>–o</td>
<td>o 箭头类型（需 flowchart 支持）</td>
</tr>
<tr>
<td>–x</td>
<td>x 箭头类型（需 flowchart 支持）</td>
</tr>
<tr>
<td>&lt;–&gt;</td>
<td>多向箭头（需 flowchart 支持）</td>
</tr>
</tbody></table>
<h1 id="Mermaid-用法"><a href="#Mermaid-用法" class="headerlink" title="Mermaid 用法"></a>Mermaid 用法</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mermaid.js</span><br><span class="line">&#123;% mermaid<span class="built_in"> type </span>%&#125;</span><br><span class="line">&#123;% endmermaid %&#125;</span><br><span class="line"><span class="comment"># type : type of the mermaid chart, visit https://github.com/knsv/mermaid for more information.</span></span><br></pre></td></tr></table></figure>

<h1 id="Mermaid-案例"><a href="#Mermaid-案例" class="headerlink" title="Mermaid 案例"></a>Mermaid 案例</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><ol>
<li>graph</li>
</ol>
<pre class="mermaid">
graph LR
A --&gt; B
B ---|text| C
D -.- E
E -.text.-F
G &#x3D;&#x3D;&gt; H
</pre>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#123;%</span> <span class="string">mermaid graph LR %&#125;</span></span><br><span class="line"><span class="attr">A</span> <span class="string">--&gt; B</span></span><br><span class="line"><span class="attr">B</span> <span class="string">---|text| C</span></span><br><span class="line"><span class="attr">D</span> <span class="string">-.- E</span></span><br><span class="line"><span class="attr">E</span> <span class="string">-.text.-F</span></span><br><span class="line"><span class="attr">G</span> =<span class="string">=&gt; H</span></span><br><span class="line"><span class="meta">&#123;%</span> <span class="string">endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>flowchart</li>
</ol>
<pre class="mermaid">
flowchart LR
A &lt;--&gt; B
C o--o D
E x--x F
</pre>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">mermaid</span> flowchart LR %&#125;</span></span><br><span class="line"><span class="xml">A <span class="tag">&lt;<span class="name">--</span>&gt;</span> B</span></span><br><span class="line"><span class="xml">C o--o D</span></span><br><span class="line"><span class="xml">E x--x F</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endmermaid</span> %&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><pre class="mermaid">
pie
title 电影
&quot;喜剧&quot; : 38
&quot;恐怖片&quot; : 85
&quot;动作片&quot; : 100
&quot;音乐剧&quot; : 150
</pre>

<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid pie %&#125;</span><br><span class="line">title 电影</span><br><span class="line"><span class="string">&quot;喜剧&quot;</span> : 38</span><br><span class="line"><span class="string">&quot;恐怖片&quot;</span> : 85</span><br><span class="line"><span class="string">&quot;动作片&quot;</span> : 100</span><br><span class="line"><span class="string">&quot;音乐剧&quot;</span> : 150</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客优化-代码压缩</title>
    <url>/2019/06/03/hexo/neat/</url>
    <content><![CDATA[<blockquote>
<p>因为 markdown 转 html 的原因，致使生成的 html 留有大量的空白，另外就是由于性能原因，需要对 js 和 css 进行压缩。</p>
</blockquote>
<h1 id="使用-hexo-neat-插件压缩"><a href="#使用-hexo-neat-插件压缩" class="headerlink" title="使用 hexo-neat 插件压缩"></a>使用 hexo-neat 插件压缩</h1><p>hexo-neat 插件使用 HTMLMinifier、clean-css、UglifyJS 插件实现。</p>
<p>安装 hexo-neat 插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure>

<p>在站点 _config.yml 文件中增加如下配置</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># hexo-neat</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 博文压缩</span></span><br><span class="line"></span><br><span class="line">neat<span class="emphasis">_enable: true</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># 压缩 html</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">neat_</span>html:</span><br><span class="line">enable: true</span><br><span class="line">exclude:</span><br><span class="line"></span><br><span class="line"><span class="section"># 压缩 css</span></span><br><span class="line"></span><br><span class="line">neat\<span class="emphasis">*css:</span></span><br><span class="line"><span class="emphasis">enable: true</span></span><br><span class="line"><span class="emphasis">exclude: - &#x27;\*</span>\<span class="emphasis">*/\_.min.css&#x27;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># 压缩 js</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">neat_js:</span></span><br><span class="line"><span class="emphasis">enable: true</span></span><br><span class="line"><span class="emphasis">mangle: true</span></span><br><span class="line"><span class="emphasis">output:</span></span><br><span class="line"><span class="emphasis">compress:</span></span><br><span class="line"><span class="emphasis">exclude: - &#x27;<span class="strong">**/\<span class="emphasis">*.min.js&#x27; - &#x27;<span class="strong">**/index.js&#x27;</span></span></span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>html5中的audio标签针对IOS系统的兼容处理</title>
    <url>/2020/12/30/html5/audio/</url>
    <content><![CDATA[<blockquote>
<p>最近在写一个移动端项目,在 Android 设备是播放音乐没有问题,但是在苹果设备上音乐无法播放,查阅资料才知道 safari 默认在没有用户交互的情况下是不允许自动播放音乐的.<br>所以想到了用 touchstart 事件进行交互</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#audio&quot;</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">PlayAudio</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    audio.load(); <span class="comment">// iOS 9 需要 load 一下, 否则直接 play 无效</span></span><br><span class="line">    audio.play(); <span class="comment">// iOS 7/8 需要 play 一下</span></span><br><span class="line">  &#125;</span><br><span class="line">  audio.addEventListener(</span><br><span class="line">    <span class="string">&quot;play&quot;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 当 audio 能够播放后, 移除这个事件</span></span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;touchstart&quot;</span>, PlayAudio, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;touchstart&quot;</span>, PlayAudio, <span class="literal">false</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>html5</category>
      </categories>
      <tags>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas添加事件</title>
    <url>/2020/12/30/html5/canvas/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;c1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="画布内的元素移动"><a href="#画布内的元素移动" class="headerlink" title="画布内的元素移动"></a>画布内的元素移动</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//图形动起来</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> oC = <span class="built_in">document</span>.getElementById(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> gd = oC.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> L = <span class="number">50</span>;</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    gd.clearRect(<span class="number">0</span>, <span class="number">0</span>, oC.width, oC.height); <span class="comment">//清除整个画布</span></span><br><span class="line">    L++;</span><br><span class="line">    gd.strokeRect(L, <span class="number">50</span>, <span class="number">100</span>, <span class="number">70</span>);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="画布内的矩形元素添加事件"><a href="#画布内的矩形元素添加事件" class="headerlink" title="画布内的矩形元素添加事件"></a>画布内的矩形元素添加事件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//点击事件</span></span><br><span class="line">  <span class="keyword">let</span> oC = <span class="built_in">document</span>.getElementById(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> gd = oC.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">50</span>,</span><br><span class="line">    t = <span class="number">50</span>,</span><br><span class="line">    w = <span class="number">100</span>,</span><br><span class="line">    h = <span class="number">70</span>;</span><br><span class="line">  gd.strokeRect(l, t, w, h);</span><br><span class="line">  oC.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    gd.clearRect(<span class="number">0</span>, <span class="number">0</span>, oC.width, oC.height);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      e.offsetX &gt;= l &amp;&amp;</span><br><span class="line">      e.offsetX &lt;= l + w &amp;&amp;</span><br><span class="line">      e.offsetY &gt;= t &amp;&amp;</span><br><span class="line">      e.offsetY &lt;= t + h</span><br><span class="line">    ) &#123;</span><br><span class="line">      gd.strokeStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">      gd.strokeRect(l, t, w, h);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      gd.strokeStyle = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">      gd.strokeRect(l, t, w, h);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="画布圆心区域添加事件"><a href="#画布圆心区域添加事件" class="headerlink" title="画布圆心区域添加事件"></a>画布圆心区域添加事件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oC = <span class="built_in">document</span>.getElementById(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> gd = oC.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> cx = <span class="number">400</span>,</span><br><span class="line">    cy = <span class="number">300</span>,</span><br><span class="line">    r = <span class="number">200</span>;</span><br><span class="line">  gd.arc(cx, cy, r, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>);</span><br><span class="line">  gd.fillStyle = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">  gd.fill();</span><br><span class="line">  oC.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = e.offsetX - cx;</span><br><span class="line">    <span class="keyword">let</span> b = e.offsetY - cy;</span><br><span class="line">    <span class="keyword">let</span> dis = <span class="built_in">Math</span>.sqrt(a * a + b * b);</span><br><span class="line">    gd.beginPath();</span><br><span class="line">    gd.arc(cx, cy, r, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (dis &lt;= r) &#123;</span><br><span class="line">      gd.fillStyle = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      gd.fillStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gd.fill();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>html5</category>
      </categories>
      <tags>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>使用fileReader实现图片预览</title>
    <url>/2020/12/30/html5/fileReader/</url>
    <content><![CDATA[<blockquote>
<p>FileReader 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，</p>
</blockquote>
<p>使用 <code>File</code> 或 <code>Blob</code> 对象指定要读取的文件或数据。其中 <code>File</code> 对象可以是来自用户在一个&lt;input&gt;元素上选择文件后返回的 FileList 对象,</p>
<p>也可以来自拖放操作生成的 <code>DataTransfer</code> 对象,还可以是来自在一个 <code>HTMLCanvasElement</code> 上执行 <code>mozGetAsFile()</code>方法后返回结果.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fileInput = <span class="built_in">document</span>.querySelector(<span class="string">&quot;input[type=file]&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> viewImg = <span class="built_in">document</span>.querySelector(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">fileInput.addEventListener(</span><br><span class="line">  <span class="string">&quot;change&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log(this.files[0]);</span></span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">this</span>.files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.addEventListener(</span><br><span class="line">      <span class="string">&quot;load&quot;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(reader.result);</span><br><span class="line">        viewImg.src = reader.result;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>html5</category>
      </categories>
      <tags>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的flat(Infinity)扁平化</title>
    <url>/2020/12/23/javascript/array-flat/</url>
    <content><![CDATA[<blockquote>
<p>ES6 之数组的 flat(Infinity)扁平化，可以实现多维数组转成一维数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line">arr1.flat();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr2.flat();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr3.flat(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Infinity 作为深度，展开任意深度的嵌套数组</span></span><br><span class="line">arr3.flat(<span class="literal">Infinity</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<p>flat() 方法会移除数组中的空项:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr4.flat();</span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的常见方法</title>
    <url>/2020/09/10/javascript/array-methods/</url>
    <content><![CDATA[<p>数组方法详细介绍：<a href="/2020/09/10/javascript/array/" title="Array 对象">Array 对象</a></p>
<h1 id="数组的四个基本方法"><a href="#数组的四个基本方法" class="headerlink" title="数组的四个基本方法"></a>数组的四个基本方法</h1><blockquote>
<p>数组元素的添加和删除</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>push()</td>
<td>向数组的<strong>最后面</strong>插入一个或多个元素，返回结果为<strong>该数组新的长度</strong></td>
<td>会改变原数组</td>
</tr>
<tr>
<td>pop()</td>
<td>删除数组中的<strong>最后一个</strong>元素，返回结果为<strong>被删除的元素</strong></td>
<td>会改变原数组</td>
</tr>
<tr>
<td>unshift()</td>
<td>在数组<strong>最前面</strong>插入一个或多个元素，返回结果为<strong>该数组新的长度</strong></td>
<td>会改变原数组</td>
</tr>
<tr>
<td>shift()</td>
<td>删除数组中的<strong>第一个</strong>元素，返回结果为<strong>被删除的元素</strong></td>
<td>会改变原数组</td>
</tr>
</tbody></table>
<h1 id="数组的常见方法"><a href="#数组的常见方法" class="headerlink" title="数组的常见方法"></a>数组的常见方法</h1><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>slice()</td>
<td>从数组中<strong>提取</strong>指定的一个或多个元素，返回结果为<strong>新的数组</strong></td>
<td>不会改变原数组</td>
</tr>
<tr>
<td>splice()</td>
<td>从数组中<strong>删除</strong>指定的一个或多个元素，返回结果为<strong>新的数组</strong></td>
<td>会改变原数组</td>
</tr>
<tr>
<td>concat()</td>
<td>连接两个或多个数组，返回结果为<strong>新的数组</strong></td>
<td>不会改变原数组</td>
</tr>
<tr>
<td>join()</td>
<td>将数组转换为字符串，返回结果为<strong>转换后的字符串</strong></td>
<td>不会改变原数组</td>
</tr>
<tr>
<td>reverse()</td>
<td>反转数组，返回结果为<strong>反转后的数组</strong></td>
<td>会改变原数组</td>
</tr>
<tr>
<td>sort()</td>
<td>对数组的元素,默认按照<strong>Unicode 编码</strong>，从小到大进行排序</td>
<td>会改变原数组</td>
</tr>
</tbody></table>
<h1 id="遍历数组的方法"><a href="#遍历数组的方法" class="headerlink" title="遍历数组的方法"></a>遍历数组的方法</h1><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>for 循环</td>
<td>这个大家都懂</td>
<td></td>
</tr>
<tr>
<td>forEach()</td>
<td>和 for 循环类似，但需要兼容 IE8 以上</td>
<td>forEach() 没有返回值。也就是说，它的返回值是 undefined</td>
</tr>
<tr>
<td>map()</td>
<td>对原数组中的每一项进行加工，将组成新的数组</td>
<td>不会改变原数组</td>
</tr>
<tr>
<td>filter()</td>
<td>对数组中的每一项运行回调函数，该函数返回结果是 true 的项，将组成新的数组，返回结果为<strong>新的数组</strong>。可以起到过滤的作用</td>
<td>不会改变原数组</td>
</tr>
<tr>
<td>every()</td>
<td>如果有一项返回 false，则停止遍历，此方法返回 false</td>
<td>一假即假。要求每一项都返回 true，最终的结果才返回 true</td>
</tr>
<tr>
<td>some()</td>
<td>只要有一项返回 true，则停止遍历，此方法返回 true</td>
<td>一真即真。要求每一项都返回 false，最终的结果才返回 false</td>
</tr>
<tr>
<td>reduce</td>
<td>为数组中的每一个元素，依次执行回调函数</td>
<td></td>
</tr>
</tbody></table>
<h1 id="数组的其他方法"><a href="#数组的其他方法" class="headerlink" title="数组的其他方法"></a>数组的其他方法</h1><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>indexOf(value)</td>
<td>从前往后索引，获取 value 在数组中的第一个下标</td>
</tr>
<tr>
<td>lastIndexOf(value)</td>
<td>从后往前索引，获取 value 在数组中的最后一个下标</td>
</tr>
<tr>
<td>find(function())</td>
<td>找出<strong>第一个</strong>满足「指定条件返回 true」的元素。</td>
</tr>
<tr>
<td>findIndex(function())</td>
<td>找出<strong>第一个</strong>满足「指定条件返回 true」的元素的 index</td>
</tr>
<tr>
<td>Array.from(arrayLike)</td>
<td>将<strong>伪数组</strong>转化为<strong>真数组</strong></td>
</tr>
<tr>
<td>Array.of(value1, value2, value3)</td>
<td>将<strong>一系列值</strong>转换成数组。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>算法 去重 排序 递归</title>
    <url>/2019/09/16/javascript/array-opt/</url>
    <content><![CDATA[<h1 id="一道面试题引发的思考"><a href="#一道面试题引发的思考" class="headerlink" title="一道面试题引发的思考"></a>一道面试题引发的思考</h1><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入数据</span></span><br><span class="line"><span class="keyword">const</span> input = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, [<span class="number">11</span>, <span class="number">12</span>, [<span class="number">12</span>, <span class="number">13</span>, [<span class="number">14</span>]]]],</span><br><span class="line">  <span class="number">10</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出数据</span></span><br><span class="line">expect = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 附加条件 最好不要超过五行</span></span><br></pre></td></tr></table></figure>

<h3 id="学霸答案"><a href="#学霸答案" class="headerlink" title="学霸答案"></a>学霸答案</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ary = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, [<span class="number">11</span>, <span class="number">12</span>, [<span class="number">12</span>, <span class="number">13</span>, [<span class="number">14</span>]]]],</span><br><span class="line">  <span class="number">10</span></span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">&quot;ary&quot;</span>,</span><br><span class="line">  [...new <span class="built_in">Set</span>(ary.flat(<span class="literal">Infinity</span>))].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>flat(Infinity) 不知道怎么办？ <strong><a href="/2020/12/23/javascript/array-flat/" title="数组的flat(Infinity)扁平化">数组的flat(Infinity)扁平化</a></strong></li>
</ul>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="数组平面化"><a href="#数组平面化" class="headerlink" title="数组平面化"></a>数组平面化</h3><ul>
<li>循环+递归 (5 行)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  result = [];</span><br><span class="line">  input.forEach(<span class="function"><span class="params">v</span> =&gt;</span></span><br><span class="line">    <span class="built_in">Array</span>.isArray(v) ? (result = result.concat(flatten(v))) : result.push(v)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>归并方法：reduce</p>
<blockquote>
<p>(1 行 不过太难于理解了)</p>
<p>reduce 的第二个参数：作为归并基础的初始值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">input</span> =&gt;</span></span><br><span class="line">  input.reduce(</span><br><span class="line">    (prev, next) =&gt; prev.concat(<span class="built_in">Array</span>.isArray(next) ? flatten(next) : next),</span><br><span class="line">    []</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6：<code>...</code>扩展运算符</p>
<blockquote>
<p>5 行代码</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (input.some(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">Array</span>.isArray(v))) &#123;</span><br><span class="line">    input = [].concat(...input);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>toString 法</p>
<blockquote>
<p>一行代码</p>
<p>只适用于数组元素全部为数字的情况下</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">ary</span> =&gt;</span></span><br><span class="line">  ary</span><br><span class="line">    .toString()</span><br><span class="line">    .split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">v</span> =&gt;</span> +v);</span><br></pre></td></tr></table></figure>

<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><h4 id="循环遍历去重"><a href="#循环遍历去重" class="headerlink" title="循环遍历去重"></a>循环遍历去重</h4><blockquote>
<p>返回新数组每个位子类型没变</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outRepeat</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = [],</span><br><span class="line">    arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">    hash[a[i]] != <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!hash[a[i]]) &#123;</span><br><span class="line">      arr.push(a[i]);</span><br><span class="line">      hash[a[i]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line">outRepeat([<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>]); <span class="comment">// [2, 4, 5, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outRepeat</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = [],</span><br><span class="line">    arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, elem; (elem = a[i]) != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hash[elem]) &#123;</span><br><span class="line">      arr.push(elem);</span><br><span class="line">      hash[elem] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line">outRepeat([<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>]); <span class="comment">// [2, 4, 5, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>比前两个更易于理解但是返回的新数组每个位子的 number 类型变为 string 类型了！！关键时刻得处理</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outRepeat</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = [],</span><br><span class="line">    arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">    hash[a[i]] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> hash) &#123;</span><br><span class="line">    arr.push(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line">outRepeat([<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>]); <span class="comment">//[&quot;2&quot;, &quot;4&quot;, &quot;5&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<h4 id="reduce-去重"><a href="#reduce-去重" class="headerlink" title="reduce() 去重"></a>reduce() 去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> uniq = <span class="function"><span class="params">input</span> =&gt;</span></span><br><span class="line">  input.reduce(</span><br><span class="line">    (cur, next) =&gt; (cur.indexOf(next) !== <span class="number">-1</span> ? cur : [...cur, next]),</span><br><span class="line">    []</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对象键值 + reduce 去重</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 速度最快， 占空间最多（空间换时间）</span></span><br><span class="line"><span class="comment"> * 该方法执行的速度比其他任何方法都快， 就是占用的内存大一些</span></span><br><span class="line"><span class="comment"> * 现思路：新建一js对象以及新数组，遍历传入数组时，判断值是否为js对象的键</span></span><br><span class="line"><span class="comment"> *   不是的话给对象新增该键并放入新数组</span></span><br><span class="line"><span class="comment"> * 注意点：判断是否为js对象键时，会自动对传入的键执行“toString()”</span></span><br><span class="line"><span class="comment"> *   不同的键可能会被误认为一样，例如n[val]-- n[1]、n[&quot;1&quot;]</span></span><br><span class="line"><span class="comment"> * 解决上述问题还是得调用 indexOf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> uniq = <span class="function"><span class="params">input</span> =&gt;</span></span><br><span class="line">  input.reduce(</span><br><span class="line">    (cur, next) =&gt; (obj[next] ? cur : (obj[next] = <span class="literal">true</span> &amp;&amp; [...cur, next])),</span><br><span class="line">    []</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一行搞定排序 + 去重</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> uniq = <span class="function"><span class="params">input</span> =&gt;</span></span><br><span class="line">  input</span><br><span class="line">    .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b)</span><br><span class="line">    .reduce(</span><br><span class="line">      (cur, next) =&gt; (cur[cur.length - <span class="number">1</span>] === next ? cur : [...cur, next]),</span><br><span class="line">      []</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<h4 id="数组下标法"><a href="#数组下标法" class="headerlink" title="数组下标法"></a>数组下标法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> uniq = <span class="function"><span class="params">input</span> =&gt;</span></span><br><span class="line">  input.reduce(</span><br><span class="line">    (cur, next, i) =&gt; (input.indexOf(next) !== i ? cur : [...cur, next]),</span><br><span class="line">    []</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<h4 id="Set-去重"><a href="#Set-去重" class="headerlink" title="Set 去重"></a>Set 去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> uniq = <span class="function"><span class="params">input</span> =&gt;</span> [...new <span class="built_in">Set</span>(input)];</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>async函数（异步函数）</title>
    <url>/2021/01/12/javascript/async/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>async 函数是在 ES2017 引入的。</p>
</blockquote>
<p>概念：真正意义上去解决异步回调的问题，同步流程表达异步操作。</p>
<p>本质： Generator 的语法糖。</p>
<p>async 比之前的 Promise、Generator 要好用一些。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// await 异步操作;</span></span><br><span class="line">  <span class="comment">// await 异步操作；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在普通的函数前面加上 async 关键字，就成了 async 函数。</p>
<h1 id="async、Promise、Generator-的对比（async-的特点）"><a href="#async、Promise、Generator-的对比（async-的特点）" class="headerlink" title="async、Promise、Generator 的对比（async 的特点）"></a>async、Promise、Generator 的对比（async 的特点）</h1><p>1、不需要像 Generator 去调用 next 方法，遇到 await 等待，当前的异步操作完成就往下执行。</p>
<p>2、async 返回的总是 Promise 对象，可以用 then 方法进行下一步操作。</p>
<p>3、async 取代 Generator 函数的星号*，await 取代 Generator 的 yield。</p>
<p>4、语意上更为明确，使用简单，经临床验证，暂时没有任何副作用。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>获取各浏览器的版本号</title>
    <url>/2021/01/28/javascript/browser-version/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">browser: &#123;</span><br><span class="line">  chrome: <span class="regexp">/chrome\/(\d+\.\d+)/i</span>.test(navigator.userAgent) ? +<span class="built_in">RegExp</span>[<span class="string">&quot;\x241&quot;</span>] : <span class="literal">undefined</span>,</span><br><span class="line">  firefox: <span class="regexp">/firefox\/(\d+\.\d+)/i</span>.test(navigator.userAgent) ? +<span class="built_in">RegExp</span>[<span class="string">&quot;\x241&quot;</span>] : <span class="literal">undefined</span>,</span><br><span class="line">  ie: <span class="regexp">/msie (\d+\.\d+)|Trident/i</span>.test(navigator.userAgent) ? (<span class="built_in">document</span>.documentMode || +<span class="built_in">RegExp</span>[<span class="string">&quot;\x241&quot;</span>]) : <span class="literal">undefined</span>,</span><br><span class="line">  isGecko: <span class="regexp">/gecko/i</span>.test(navigator.userAgent) &amp;&amp; !<span class="regexp">/like gecko/i</span>.test(navigator.userAgent),</span><br><span class="line">  isWebkit: <span class="regexp">/webkit/i</span>.test(navigator.userAgent),</span><br><span class="line">  opera: <span class="regexp">/opera(\/| )(\d+(\.\d+)?)(.+?(version\/(\d+(\.\d+)?)))?/i</span>.test(navigator.userAgent) ? +(<span class="built_in">RegExp</span>[<span class="string">&quot;\x246&quot;</span>] || <span class="built_in">RegExp</span>[<span class="string">&quot;\x242&quot;</span>]) : <span class="literal">undefined</span>,</span><br><span class="line">  safari: <span class="regexp">/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i</span>.test(navigator.userAgent) &amp;&amp; !<span class="regexp">/chrome/i</span>.test(navigator.userAgent) ? +(<span class="built_in">RegExp</span>[<span class="string">&quot;\x241&quot;</span>] || <span class="built_in">RegExp</span>[<span class="string">&quot;\x242&quot;</span>]) : <span class="literal">undefined</span>,</span><br><span class="line">  isSogouIE: ((navigator.userAgent.toLowerCase()).indexOf(<span class="string">&quot;msie&quot;</span>) &gt; <span class="number">0</span>) &amp;&amp; ((navigator.userAgent.toLowerCase()).indexOf(<span class="string">&quot;se&quot;</span>) &gt; <span class="number">0</span>) &amp;&amp; ((navigator.userAgent.toLowerCase()).indexOf(<span class="string">&quot;360se&quot;</span>) == <span class="number">-1</span>),</span><br><span class="line">  isBaidu: <span class="regexp">/BIDUBrowser/i</span>.test(navigator.userAgent),</span><br><span class="line">  edge: <span class="regexp">/edge\/(\d+)/i</span>.test(navigator.userAgent) ? +<span class="built_in">RegExp</span>[<span class="string">&quot;\x241&quot;</span>] : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>使用html2canvas时图片跨域问题的解决方法</title>
    <url>/2020/12/17/javascript/canvas/</url>
    <content><![CDATA[<blockquote>
<p>html2canvas 是一个可以将整个 html 转为一张图片的 JS 插件，但是，我们在使用过程中，难免会遇到图片跨域的问题，这个问题也同样困扰了我好久，但最终还是找到了解决办法，现在就来分享给大家。</p>
</blockquote>
<h1 id="解决思路-将图片转为-base64"><a href="#解决思路-将图片转为-base64" class="headerlink" title="解决思路(将图片转为 base64)"></a>解决思路(将图片转为 base64)</h1><p>什么是 base64？<br>简单来说就是一串二进制数据。详细了解，请 Google。<br>为什么要转成 base64<br>普通 src 存在跨域问题，而 base64 已经将图片进行编码，相当于下载到了本地，因此不会存在跨域.</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>客户端: 废话不多说，直接上代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBase64Image</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  canvas.width = img.width;</span><br><span class="line">  canvas.height = img.height;</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height);</span><br><span class="line">  <span class="keyword">var</span> ext = img.src.substring(img.src.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>).toLowerCase();</span><br><span class="line">  <span class="keyword">var</span> dataURL = canvas.toDataURL(<span class="string">&quot;image/&quot;</span> + ext);</span><br><span class="line">  <span class="keyword">return</span> dataURL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 JS 将图片转为 base64 兼容性不太好，所以有很多时候还是会出问题的。<br>Don’t worry! 接下来还有服务器端的转换</p>
<p>服务器端: 这里只有 base64 转换的 JAVA 代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Trans</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从图片文件中读取内容。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 图片文件的路径。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 二进制图片内容的byte数组。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] readFile(Path path) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] imageContents = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            imageContents = Files.readAllBytes(path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            out.println(<span class="string">&quot;读取文件出错了...~zZ&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> imageContents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码图片文件，编码内容输出为&#123;<span class="doctag">@code</span> String&#125;格式。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageContents 二进制图片内容的byte数组。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> String&#125;格式的编码内容。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">base64Encoding</span><span class="params">(<span class="keyword">byte</span>[] imageContents)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(imageContents != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(imageContents);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解码图片文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageContents 待解码的图片文件的字符串格式。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解码后图片文件的二进制内容。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] base64Decoding(String imageContents) &#123;</span><br><span class="line">        <span class="keyword">if</span>(imageContents != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> Base64.getDecoder().decode(imageContents);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将解码后的二进制内容写入文件中。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 写入的路径。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageContents 解码后的二进制内容。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(Path path, <span class="keyword">byte</span>[] imageContents)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(imageContents != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">                Files.write(path, imageContents, StandardOpenOption.CREATE);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                out.println(<span class="string">&quot;写入文件出错了...~zZ&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Base64Trans bt = <span class="keyword">new</span> Base64Trans();</span><br><span class="line">        String url = <span class="string">&quot;http://static.ruitaowang.com/qr/qr_1_83.png&quot;</span>;</span><br><span class="line">        String encodingString = bt.base64Encoding(bt.readFile(Paths.get(url)));</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;二进制图片文件Base64码：&quot;</span> + encodingString);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  bt.writeFile(Paths.get(&quot;D:/temp/mm2.png&quot;), bt.base64Decoding(encodingString));</span></span><br><span class="line">      <span class="comment">//  out.println(&quot;任务结束...&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>call、apply、bind的区别</title>
    <url>/2021/01/12/javascript/change-this-refer/</url>
    <content><![CDATA[<h1 id="call-和-apply"><a href="#call-和-apply" class="headerlink" title="call()和 apply()"></a>call()和 apply()</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这两个方法都是函数对象的方法，需要通过函数对象来调用。</p>
<p>当函数调用 call()和 apply()时，函数都会立即<strong>执行</strong>。</p>
<ul>
<li><p>都可以用来改变函数的 this 对象的指向。</p>
</li>
<li><p>第一个参数都是 this 要指向的对象（函数执行时，this 将指向这个对象），后续参数用来传实参。</p>
</li>
</ul>
<h2 id="显式绑定-this"><a href="#显式绑定-this" class="headerlink" title="显式绑定 this"></a>显式绑定 this</h2><p>JS 提供的绝大多数函数以及我们自己创建的所有函数，都可以使用 call 和 apply 方法。</p>
<p>它们的第一个参数是一个对象。因为你可以直接指定 this 绑定的对象，因此我们称之为显式绑定。</p>
<p>例 1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 this 指向 obj</span></span><br><span class="line">foo.apply(obj); <span class="comment">//打印结果：2</span></span><br></pre></td></tr></table></figure>

<h2 id="第一个参数的传递"><a href="#第一个参数的传递" class="headerlink" title="第一个参数的传递"></a>第一个参数的传递</h2><p>1、thisObj 不传或者为 null、undefined 时，函数中的 this 会指向 window 对象（非严格模式）。</p>
<p>2、传递一个别的函数名时，函数中的 this 将指向这个<strong>函数的引用</strong>。</p>
<p>3、传递的值为数字、布尔值、字符串时，this 会指向这些基本类型的包装对象 Number、Boolean、String。</p>
<p>4、传递一个对象时，函数中的 this 则指向传递的这个对象。</p>
<h2 id="call-和-apply-的区别"><a href="#call-和-apply-的区别" class="headerlink" title="call()和 apply()的区别"></a>call()和 apply()的区别</h2><p>call()和 apply()方法都可以将实参在对象之后依次传递，但是 apply()方法需要将实参封装到一个<strong>数组</strong>中统一传递（即使只有实参只有一个，也要放到数组中）。</p>
<p>比如针对下面这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> persion1 = &#123;</span><br><span class="line">  name: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">  gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  age: <span class="number">24</span>,</span><br><span class="line">  say: <span class="function"><span class="keyword">function</span> (<span class="params">school, grade</span>) </span>&#123;</span><br><span class="line">    alert(</span><br><span class="line">      <span class="built_in">this</span>.name +</span><br><span class="line">        <span class="string">&quot; , &quot;</span> +</span><br><span class="line">        <span class="built_in">this</span>.gender +</span><br><span class="line">        <span class="string">&quot; ,今年&quot;</span> +</span><br><span class="line">        <span class="built_in">this</span>.age +</span><br><span class="line">        <span class="string">&quot; ,在&quot;</span> +</span><br><span class="line">        school +</span><br><span class="line">        <span class="string">&quot;上&quot;</span> +</span><br><span class="line">        grade</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  name: <span class="string">&quot;小红&quot;</span>,</span><br><span class="line">  gender: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果是通过 call 的参数进行传参，是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">persion1.say.call(persion2, <span class="string">&quot;实验小学&quot;</span>, <span class="string">&quot;六年级&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果是通过 apply 的参数进行传参，是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">persion1.say.apply(persion2, [<span class="string">&quot;实验小学&quot;</span>, <span class="string">&quot;六年级&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>看到区别了吗，call 后面的实参与 say 方法中是一一对应的，而 apply 传实参时，要封装成一个数组，数组中的元素是和 say 方法中一一对应的，这就是两者最大的区别。</p>
<h2 id="call-和-apply-的作用"><a href="#call-和-apply-的作用" class="headerlink" title="call()和 apply()的作用"></a>call()和 apply()的作用</h2><ul>
<li><p>改变 this 的指向</p>
</li>
<li><p>实现继承。Father.call(this)</p>
</li>
</ul>
<h1 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h1><ul>
<li><p>都能改变 this 的指向</p>
</li>
<li><p>call()/apply()是<strong>立即调用函数</strong></p>
</li>
<li><p>bind()是将函数返回，因此后面还需要加<code>()</code>才能调用。</p>
</li>
</ul>
<p>bind()传参的方式与 call()相同。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>图表对比</title>
    <url>/2019/12/13/javascript/chart/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>特征</th>
<th>FusionCharts</th>
<th>HighCharts</th>
<th>Google ChartTools</th>
<th>Sencha ExtJS</th>
<th>Charts</th>
<th>Chart.js</th>
<th>Flot jqPlot</th>
</tr>
</thead>
<tbody><tr>
<td>概要</td>
<td>出色网络、移动应用程序 JS 图表</td>
<td>网络项目中的交互式 JavaScript</td>
<td>站点实时数据显示</td>
<td>免费插件图表(只有部分 extJS 框架)</td>
<td>简单，面向客户端图形的设计者和开发者</td>
<td>支持 jQuery 绘画的 JS</td>
<td>万能，可扩展的 jQuery 插件</td>
</tr>
<tr>
<td>首发时间</td>
<td>2002</td>
<td>2009</td>
<td>2007</td>
<td>2011</td>
<td>2013</td>
<td>2007</td>
<td>2009</td>
</tr>
<tr>
<td>图表展示</td>
<td>应用 SVG 和 VML 的 JS/HTML5 图表</td>
<td>应用 SVG 和 VML 的 JS/ HTML5 图表</td>
<td>应用 SVG 和 VML 的 HTML5 图表</td>
<td>应用 SVG 和 VML 的 JS 图表</td>
<td>基于图表的 Canvas</td>
<td>应用 Canvas 和 VML 的 Canvas 和 VML 图表</td>
<td>运用 Canvas 的 HTML5 图表</td>
</tr>
<tr>
<td>数据输入格式</td>
<td>JSON 和 XML</td>
<td>JSON</td>
<td>JS API</td>
<td>JS API</td>
<td>JS API</td>
<td>JS API</td>
<td>JS API</td>
</tr>
<tr>
<td>浏览器支持</td>
<td>所有 web、移动浏览器，包括 IE6</td>
<td>所有 web、移动浏览器，包括 IE6</td>
<td>所有 web 浏览器、移动浏览器，包括 IE6</td>
<td>所有 web 浏览器，移动浏览器需要使用 Sencha Touch</td>
<td>所有 web 浏览器、移动浏览器，包括 IE6</td>
<td>E 6+, Chrome, Firefox 2+, Safari 3+和 Opera 9.5+</td>
<td>IE 7, IE 8, Firefox, Safari 和 Opera</td>
</tr>
<tr>
<td>图表和地图类型</td>
<td>90 多种 2D、3D 图表类型，950 种以上所有大洲、美国国家和地区、欧洲国家以及其他地区地图生成</td>
<td>25 类以上 2D 地图，不支持 3D 图表</td>
<td>13 种 2D 地图可作为 GeoChart 使用</td>
<td>13 种 2D 地图，不支持 3D 图表</td>
<td>6 种图表类型</td>
<td>8 种 2D 图表类型，不支持地图和 3D 图表</td>
<td>25 种类型以上的 2D 图表，不支持 3D 图表和地图</td>
</tr>
<tr>
<td>源代码是否可供下载和修改</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>授权</td>
<td>有收费版，也有免费版</td>
<td>非商用版使用免费</td>
<td>免费</td>
<td>只能是部分 Sencha Touch 捆绑包或者 Sencha 完整包使用</td>
<td>MIT 下授权免费</td>
<td>免费</td>
<td>GPL 和 MIT</td>
</tr>
<tr>
<td>帮助文档</td>
<td>1500 多页的帮助文档，包含新手指南，详细的 API 参考，综合示例，高级功能辅导性解释</td>
<td>新手指南，详细的 API 参考，简单例子</td>
<td>新手指南，详细的 API 参考，简单例子</td>
<td>新手指南，API 参考</td>
<td>新手指南，API 参考</td>
<td>新手指南，API 参考</td>
<td>新手指南，API 参考</td>
</tr>
<tr>
<td>是否带源代码演示功能</td>
<td>是。众多的即插即用真实演示与源代码可供下载</td>
<td>无</td>
<td>较少</td>
<td>是。有丰富的演示</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>保修升级服务</td>
<td>个性化技术支持，20000 多位活跃用户论坛供交流</td>
<td>个性化技术支持</td>
<td>讨论组</td>
<td>个性化技术支持和论坛交流</td>
<td>讨论组</td>
<td>讨论组</td>
<td>讨论组</td>
</tr>
<tr>
<td>用户</td>
<td>21000 多位客户，450000 多位发者</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
</tr>
<tr>
<td>团队规模</td>
<td>60</td>
<td>10</td>
<td>N/A</td>
<td>N/A</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>元、万元、亿元、万亿元转换（递归、闭包）</title>
    <url>/2020/05/28/javascript/data-recursion/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filterMoney(value) &#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> baseList = [<span class="string">&quot;元&quot;</span>, <span class="string">&quot;万元&quot;</span>, <span class="string">&quot;亿元&quot;</span>, <span class="string">&quot;万亿元&quot;</span>];</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> moneyLen = <span class="built_in">String</span>(<span class="built_in">Math</span>.abs(<span class="built_in">Number</span>(value))).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">let</span> money = <span class="built_in">Number</span>(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (moneyLen &lt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">num</span>: money, <span class="attr">base</span>: <span class="number">1</span>, <span class="attr">unit</span>: baseList[count] &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">var</span> num = (money / <span class="number">10000</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (num &gt;= <span class="number">10000</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> filter(num);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          num: num,</span><br><span class="line">          base: <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="number">4</span> * count),</span><br><span class="line">          unit: baseList[count]</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> filter(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>数据类型</title>
    <url>/2019/10/18/javascript/data-type/</url>
    <content><![CDATA[<h1 id="值类型-基本类型"><a href="#值类型-基本类型" class="headerlink" title="值类型(基本类型)"></a>值类型(基本类型)</h1><p>字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p>
<h1 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h1><p>对象(Object)、数组(Array)、函数(Function)。</p>
<h1 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h1><ol>
<li>charAt() 方法可返回指定位置的字符。</li>
<li>substring() 方法用于提取字符串中介于两个指定下标之间的字符。</li>
<li>toUpperCase() 方法用于把字符串转换为大写。</li>
</ol>
<h1 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h1><ol>
<li>sort() 方法用于对数组的元素进行排序。</li>
<li>concat() 方法用于连接两个或多个数组。concat 会返回一个新数组</li>
<li>reverse() 方法用于颠倒数组中元素的顺序。</li>
<li>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。(该方法会改变原始数组。)</li>
<li>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。（该方法会改变数组的长度。）</li>
<li>resort 逆向排列已废弃；</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>defineProperty的用法详解</title>
    <url>/2020/09/10/javascript/defineProperty/</url>
    <content><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor);</span><br></pre></td></tr></table></figure>

<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul>
<li>obj：要在其上定义属性的对象。</li>
<li>prop：要定义或修改的属性的名称。</li>
<li>descriptor：正在定义或修改的属性的描述符。</li>
<li>返回值 传递给函数的对象</li>
</ul>
<h2 id="添加属性和默认值"><a href="#添加属性和默认值" class="headerlink" title="添加属性和默认值"></a>添加属性和默认值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;; <span class="comment">// 创建一个新对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">**proto**: <span class="literal">null</span>,</span><br><span class="line">value : <span class="number">1</span>,</span><br><span class="line">writable : <span class="literal">true</span>,</span><br><span class="line">enumerable : <span class="literal">true</span>,</span><br><span class="line">configurable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="设置和修改属性"><a href="#设置和修改属性" class="headerlink" title="设置和修改属性"></a>设置和修改属性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bValue;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">&quot;b&quot;</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bValue;</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">    bValue = newValue;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">o.b = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<h2 id="视图控制器"><a href="#视图控制器" class="headerlink" title="视图控制器"></a>视图控制器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    你好，</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;nickName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;introduce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">　</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//视图控制器</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> userInfo = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">Object</span>.defineProperty(userInfo, <span class="string">&quot;nickName&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">&quot;nickName&quot;</span>).innerHTML;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    set: <span class="function"><span class="keyword">function</span> (<span class="params">nick</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;nickName&quot;</span>).innerHTML = nick;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">Object</span>.defineProperty(userInfo, <span class="string">&quot;introduce&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">&quot;introduce&quot;</span>).innerHTML;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    set: <span class="function"><span class="keyword">function</span> (<span class="params">introduce</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;introduce&quot;</span>).innerHTML = introduce;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//todo 获取用户信息的代码</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  userInfo.nickName = <span class="string">&quot;张无忌&quot;</span>;</span></span><br><span class="line"><span class="javascript">  userInfo.introduce = <span class="string">&quot;九阳神功护体&quot;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-defineProperty-实现简单的双向绑定"><a href="#Object-defineProperty-实现简单的双向绑定" class="headerlink" title="Object.defineProperty 实现简单的双向绑定"></a>Object.defineProperty 实现简单的双向绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">      &#125;</span><br><span class="line">      img &#123;</span><br><span class="line">        display: block;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> obj = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> temp = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        obj.name = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).value;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      <span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;name&quot;</span>, &#123;</span></span><br><span class="line">        get() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        set(val) &#123;</span><br><span class="line"><span class="javascript">          temp[<span class="string">&quot;name&quot;</span>] = val;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>).innerHTML = temp[<span class="string">&quot;name&quot;</span>];</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端click事件延迟300ms的原因以及解决办法</title>
    <url>/2021/07/02/javascript/delay/</url>
    <content><![CDATA[<h1 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h1><p>在移动端触发时间会按照 <code>touchstart</code>，<code>touchmove</code>，<code>touchend</code>，<code>click</code> 顺序触发；触发 <code>touchend</code>，<code>click</code> 之间会有 200-400 不等的时间延时（因为移动端需要判断用户是不是想要进行双击）</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li><code>FastClick</code> 是 FT Labs <strong>专门为解决移动端浏览器 300 毫秒点击延迟问题</strong>所开发的一个轻量级的库。简而言之，FastClick 在检测到 touchend 事件的时候，会通过 DOM 自定义事件立即触发一个模拟 click 事件的 click 事件（自定义事件），并把浏览器在 300 毫秒之后真正触发的 click 事件阻止掉。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">&quot;load&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>禁用缩放</li>
</ol>
<p>当 HTML 文档头部包含如下 meta 标签时：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1,maximum-scale=1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>表明这个页面是不可缩放的，那双击缩放的功能就没有意义了，此时浏览器可以禁用默认的双击缩放行为并且去掉 300ms 的点击延迟。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts.js使用指南</title>
    <url>/2020/12/22/javascript/echartJs/</url>
    <content><![CDATA[<blockquote>
<p>具体配置参考 <a href="https://echarts.apache.org/zh/option.html#title">echartsJs 官网</a></p>
</blockquote>
<h1 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h1><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><div id="echarts7994" style="width: 81%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts7994'));

        // 指定图表的配置项和数据
        var option = {
title: {
text: "折线图--text",
subtext:'折线图标题--subtext',
x:'center',
y:'top',
textAlign:'left'
},
grid: {
show: true,
left: 40,
top: 80,
right: 10
},
legend: {
icon: "rect",
itemWidth: 18,
itemHeight: 10,
bottom: 10,
data: ['line'],
textStyle: {
color: "#999999",
fontSize: 10
}
},
tooltip: {
className: "chart-tooltip",
trigger: "axis",
confine: true
},
xAxis: {
type: "category",
data: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
minorSplitLine: {
show: true
},
},
yAxis: {
type: "value"
},
series: [
{
name: "line",
data: [150, 230, 224, 218, 135, 147, 260],
type: "line",
symbol: "circle",
symbolSize: 3,
lineStyle: {
color: "skyblue"
},
itemStyle: {
normal: {
color: "#2ec7c9",
lineStyle: {
color: "#2ec7c9"
}
}
},
areaStyle: {
color: {
type: "linear",
x: 0,
y: 0,
x2: 0,
y2: 1,
colorStops: [
{
offset: 0,
color: "skyblue" // 0% 处的颜色
},
{
offset: 1,
color: "#fff" // 100% 处的颜色
}
],
global: false // 缺省为 false
}
}
}
],
dataZoom: [
{
type: "inside", // slider 表示有滑动块的，inside 表示内置的
show: true,
xAxisIndex: [0],
minValueSpan: 4,
maxValueSpan: 4,
startValue: 1,
// end,
// zoomOnMouseWheel: false,
backgroundColor: "rgba(0,0,0,0.5)", // 滑块背景颜色
fillerColor: "rgba(255,255,0,0.5)", // 填充颜色
showDetail: false // 拖拽时，是否显示详细信息
}
]
};

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<details>
<summary>折线图配置如下：</summary>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    text: <span class="string">&quot;折线图--text&quot;</span>,</span><br><span class="line">    subtext: <span class="string">&quot;折线图标题--subtext&quot;</span>,</span><br><span class="line">    x: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    y: <span class="string">&quot;top&quot;</span>,</span><br><span class="line">    textAlign: <span class="string">&quot;left&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  grid: &#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    left: <span class="number">40</span>,</span><br><span class="line">    top: <span class="number">80</span>,</span><br><span class="line">    right: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  legend: &#123;</span><br><span class="line">    icon: <span class="string">&quot;rect&quot;</span>,</span><br><span class="line">    itemWidth: <span class="number">18</span>,</span><br><span class="line">    itemHeight: <span class="number">10</span>,</span><br><span class="line">    bottom: <span class="number">10</span>,</span><br><span class="line">    data: [<span class="string">&quot;line&quot;</span>],</span><br><span class="line">    textStyle: &#123;</span><br><span class="line">      color: <span class="string">&quot;#999999&quot;</span>,</span><br><span class="line">      fontSize: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    className: <span class="string">&quot;chart-tooltip&quot;</span>,</span><br><span class="line">    trigger: <span class="string">&quot;axis&quot;</span>,</span><br><span class="line">    confine: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  xAxis: &#123;</span><br><span class="line">    type: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">    data: [<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>],</span><br><span class="line">    minorSplitLine: &#123;</span><br><span class="line">      show: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  yAxis: &#123;</span><br><span class="line">    type: <span class="string">&quot;value&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  series: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">      data: [<span class="number">150</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">218</span>, <span class="number">135</span>, <span class="number">147</span>, <span class="number">260</span>],</span><br><span class="line">      type: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">      symbol: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">      symbolSize: <span class="number">3</span>,</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        color: <span class="string">&quot;skyblue&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      areaStyle: &#123;</span><br><span class="line">        color: &#123;</span><br><span class="line">          type: <span class="string">&quot;linear&quot;</span>,</span><br><span class="line">          x: <span class="number">0</span>,</span><br><span class="line">          y: <span class="number">0</span>,</span><br><span class="line">          x2: <span class="number">0</span>,</span><br><span class="line">          y2: <span class="number">1</span>,</span><br><span class="line">          colorStops: [</span><br><span class="line">            &#123;</span><br><span class="line">              offset: <span class="number">0</span>,</span><br><span class="line">              color: <span class="string">&quot;skyblue&quot;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              offset: <span class="number">1</span>,</span><br><span class="line">              color: <span class="string">&quot;#fff&quot;</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="built_in">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  dataZoom: [</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">&quot;inside&quot;</span>, <span class="comment">// slider 表示有滑动块的，inside 表示内置的</span></span><br><span class="line">      show: <span class="literal">true</span>,</span><br><span class="line">      xAxisIndex: [<span class="number">0</span>],</span><br><span class="line">      minValueSpan: <span class="number">4</span>,</span><br><span class="line">      maxValueSpan: <span class="number">4</span>,</span><br><span class="line">      startValue: <span class="number">1</span>,</span><br><span class="line">      <span class="comment">// end,</span></span><br><span class="line">      <span class="comment">// zoomOnMouseWheel: false,</span></span><br><span class="line">      backgroundColor: <span class="string">&quot;rgba(0,0,0,0.5)&quot;</span>, <span class="comment">// 滑块背景颜色</span></span><br><span class="line">      fillerColor: <span class="string">&quot;rgba(255,255,0,0.5)&quot;</span>, <span class="comment">// 填充颜色</span></span><br><span class="line">      showDetail: <span class="literal">false</span> <span class="comment">// 拖拽时，是否显示详细信息</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="渐变折线图"><a href="#渐变折线图" class="headerlink" title="渐变折线图"></a>渐变折线图</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// options: &#123; series: [&#123; type: &quot;line&quot;, areaStyle: &#123;&#125; &#125;] &#125;</span></span><br><span class="line">areaStyle: &#123;</span><br><span class="line">  color: &#123;</span><br><span class="line">    type: <span class="string">&quot;linear&quot;</span>,</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">    x2: <span class="number">0</span>,</span><br><span class="line">    y2: <span class="number">1</span>,</span><br><span class="line">    colorStops: [</span><br><span class="line">      &#123;</span><br><span class="line">        offset: <span class="number">0</span>,</span><br><span class="line">        color: <span class="string">&quot;skyblue&quot;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        offset: <span class="number">1</span>,</span><br><span class="line">        color: <span class="string">&quot;#fff&quot;</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="线的颜色"><a href="#线的颜色" class="headerlink" title="线的颜色"></a>线的颜色</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">lineStyle: &#123;</span><br><span class="line">  color: <span class="string">&quot;skyblue&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">symbol: <span class="string">&quot;circle&quot;</span>, <span class="comment">// 标记的图形 &#x27;circle&#x27;, &#x27;rect&#x27;, &#x27;roundRect&#x27;, &#x27;triangle&#x27;, &#x27;diamond&#x27;, &#x27;pin&#x27;, &#x27;arrow&#x27;, &#x27;none&#x27;</span></span><br><span class="line">symbolSize: <span class="number">3</span>, <span class="comment">// 标记的大小，可以设置成诸如 10 这样单一的数字</span></span><br><span class="line">itemStyle: &#123;</span><br><span class="line">  normal: &#123;</span><br><span class="line">    color: <span class="string">&quot;#2ec7c9&quot;</span>, <span class="comment">// 标记的颜色</span></span><br><span class="line">    lineStyle: &#123;</span><br><span class="line">      color: <span class="string">&quot;#2ec7c9&quot;</span> <span class="comment">// 线的颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><div id="echarts2129" style="width: 81%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts2129'));

        // 指定图表的配置项和数据
        var option = {
xAxis: {
type: 'category',
data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
},
yAxis: {
type: 'value'
},
series: [{
data: [120, 200, 150, 80, 70, 110, 130],
type: 'bar',
showBackground: true,
backgroundStyle: {
color: 'rgba(180, 180, 180, 0.2)'
}
}]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><div id="echarts7951" style="width: 81%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts7951'));

        // 指定图表的配置项和数据
        var option = {
title: {
text: '某站点用户访问来源',
subtext: '纯属虚构',
left: 'center'
},
tooltip: {
trigger: 'item'
},
legend: {
orient: 'vertical',
left: 'left',
},
series: [
{
name: '访问来源',
type: 'pie',
radius: '50%',
data: [
{value: 1048, name: '搜索引擎'},
{value: 735, name: '直接访问'},
{value: 580, name: '邮件营销'},
{value: 484, name: '联盟广告'},
{value: 300, name: '视频广告'}
],
emphasis: {
itemStyle: {
shadowBlur: 10,
shadowOffsetX: 0,
shadowColor: 'rgba(0, 0, 0, 0.5)'
}
}
}
]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<details>
<summary>饼图配置如下：</summary>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    text: <span class="string">&quot;某站点用户访问来源&quot;</span>,</span><br><span class="line">    subtext: <span class="string">&quot;纯属虚构&quot;</span>,</span><br><span class="line">    left: <span class="string">&quot;center&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">&quot;item&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  legend: &#123;</span><br><span class="line">    orient: <span class="string">&quot;vertical&quot;</span>,</span><br><span class="line">    left: <span class="string">&quot;left&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  series: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&quot;访问来源&quot;</span>,</span><br><span class="line">      type: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">      radius: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">      data: [</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">1048</span>, <span class="attr">name</span>: <span class="string">&quot;搜索引擎&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">735</span>, <span class="attr">name</span>: <span class="string">&quot;直接访问&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">580</span>, <span class="attr">name</span>: <span class="string">&quot;邮件营销&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">484</span>, <span class="attr">name</span>: <span class="string">&quot;联盟广告&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">300</span>, <span class="attr">name</span>: <span class="string">&quot;视频广告&quot;</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      emphasis: &#123;</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          shadowBlur: <span class="number">10</span>,</span><br><span class="line">          shadowOffsetX: <span class="number">0</span>,</span><br><span class="line">          shadowColor: <span class="string">&quot;rgba(0, 0, 0, 0.5)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>

<div id="echarts1539" style="width: 81%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts1539'));

        // 指定图表的配置项和数据
        var option = {
tooltip: {
trigger: 'item'
},
legend: {
top: '5%',
left: 'center'
},
series: [
{
name: '访问来源',
type: 'pie',
radius: ['40%', '70%'],
avoidLabelOverlap: false,
label: {
show: false,
position: 'center'
},
emphasis: {
label: {
show: true,
fontSize: '40',
fontWeight: 'bold'
}
},
labelLine: {
show: false
},
data: [
{value: 1048, name: '搜索引擎'},
{value: 735, name: '直接访问'},
{value: 580, name: '邮件营销'},
{value: 484, name: '联盟广告'},
{value: 300, name: '视频广告'}
]
}
]
}

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<details>
<summary>环形图配置如下：</summary>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">&quot;item&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  legend: &#123;</span><br><span class="line">    top: <span class="string">&quot;5%&quot;</span>,</span><br><span class="line">    left: <span class="string">&quot;center&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  series: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&quot;访问来源&quot;</span>,</span><br><span class="line">      type: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">      radius: [<span class="string">&quot;40%&quot;</span>, <span class="string">&quot;70%&quot;</span>], <span class="comment">// 环形图配置</span></span><br><span class="line">      avoidLabelOverlap: <span class="literal">false</span>,</span><br><span class="line">      label: &#123;</span><br><span class="line">        show: <span class="literal">false</span>,</span><br><span class="line">        position: <span class="string">&quot;center&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      emphasis: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          fontSize: <span class="string">&quot;40&quot;</span>,</span><br><span class="line">          fontWeight: <span class="string">&quot;bold&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      labelLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      data: [</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">1048</span>, <span class="attr">name</span>: <span class="string">&quot;搜索引擎&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">735</span>, <span class="attr">name</span>: <span class="string">&quot;直接访问&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">580</span>, <span class="attr">name</span>: <span class="string">&quot;邮件营销&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">484</span>, <span class="attr">name</span>: <span class="string">&quot;联盟广告&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">300</span>, <span class="attr">name</span>: <span class="string">&quot;视频广告&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="环形大小"><a href="#环形大小" class="headerlink" title="环形大小"></a>环形大小</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// options: &#123; series: [ radius: [&quot;内环&quot;, &quot;外环&quot;] ] &#125;</span></span><br><span class="line">radius: [<span class="string">&quot;40%&quot;</span>, <span class="string">&quot;70%&quot;</span>], <span class="comment">// 环形图配置</span></span><br></pre></td></tr></table></figure>

<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">  text: <span class="string">&quot;折线图--text&quot;</span>,</span><br><span class="line">  subtext: <span class="string">&quot;折线图标题--subtext&quot;</span>,</span><br><span class="line">  x: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">  y: <span class="string">&quot;top&quot;</span>,</span><br><span class="line">  textAlign: <span class="string">&quot;left&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">  icon: <span class="string">&quot;rect&quot;</span>, <span class="comment">// 方形图例</span></span><br><span class="line">  itemWidth: <span class="number">18</span>,</span><br><span class="line">  itemHeight: <span class="number">10</span>,</span><br><span class="line">  bottom: <span class="number">10</span>, <span class="comment">// 图表底部</span></span><br><span class="line">  data: [<span class="string">&#x27;line&#x27;</span>],</span><br><span class="line">  textStyle: &#123;</span><br><span class="line">    color: <span class="string">&quot;#999999&quot;</span>,</span><br><span class="line">    fontSize: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="初始化图表"><a href="#初始化图表" class="headerlink" title="初始化图表"></a>初始化图表</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myChart = echarts.init(echartDom);</span><br><span class="line"></span><br><span class="line">myChart.clear();</span><br><span class="line"></span><br><span class="line">myChart.setOption(chartOptions);</span><br></pre></td></tr></table></figure>

<h1 id="重置图表"><a href="#重置图表" class="headerlink" title="重置图表"></a>重置图表</h1><p>在使用 echartsJs 制作图表时，一般需要在窗口改变时重置图表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeHandle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myChart.resize();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, resizeHandle);</span><br></pre></td></tr></table></figure>

<h1 id="图表可拖动"><a href="#图表可拖动" class="headerlink" title="图表可拖动"></a>图表可拖动</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// options: &#123; dataZoom: [] &#125;</span></span><br><span class="line">dataZoom: [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&quot;inside&quot;</span>, <span class="comment">// slider表示有滑动块的，inside表示内置的</span></span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    xAxisIndex: [<span class="number">0</span>],</span><br><span class="line">    minValueSpan: <span class="number">4</span>,</span><br><span class="line">    maxValueSpan: <span class="number">4</span>,</span><br><span class="line">    startValue: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// end,</span></span><br><span class="line">    <span class="comment">// zoomOnMouseWheel: false,</span></span><br><span class="line">    backgroundColor: <span class="string">&quot;rgba(0,0,0,0.5)&quot;</span>, <span class="comment">// 滑块背景颜色</span></span><br><span class="line">    fillerColor: <span class="string">&quot;rgba(255,255,0,0.5)&quot;</span>, <span class="comment">// 填充颜色</span></span><br><span class="line">    showDetail: <span class="literal">false</span> <span class="comment">// 拖拽时，是否显示详细信息</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">myChart.on(<span class="string">&quot;datazoom&quot;</span>, <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (params.batch[<span class="number">0</span>].start == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pageNo == <span class="number">0</span>) &#123;</span><br><span class="line">      pageNo = <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//  ....</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的空元素empty与undefined的区别</title>
    <url>/2019/10/18/javascript/empty-undefined/</url>
    <content><![CDATA[<ol>
<li>数组的空元素 empty 表示空位，它不是一种数据类型，而是由于人为修改 arr.length 或者写入时多写了逗号造成的。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, , , <span class="number">5</span>];</span><br><span class="line">arr.length; <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line">arr.length = <span class="number">10</span>;</span><br><span class="line">arr; <span class="comment">// [1, 2, 3, 4, empty × 2, 5, empty × 3]</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>undefined 是一种数据类型，在数组中表示这个位置的值未定义，但它仍然指向某个内存地址，这个内存地址指向的是 undefined。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.length; <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>empty 和 undefined 在操作数组时的主要区别在于:</li>
</ol>
<p>使用数组的 <code>forEach()</code> 方法遍历时会自动忽略空位，而使用 for 循环则会将 empty 转换为 undefined 并遍历。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的介绍和环境配置</title>
    <url>/2021/01/12/javascript/env/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ECMAScript 是 JS 的语言标准。而 ES6 是新的 JS 语法标准。</p>
<p>PS：严格来说，ECMAScript 还包括其他很多语言的语言标准。</p>
<p>很多人在做业务选型的时候，会倾向于选 jQuery。其实 jQuery 的语法是偏向于 ES3 的。而现在主流的框架 Vue.js 和 React.js 的语法，是用的 ES6。</p>
<p>ES6 中增加了很多功能上的不足。比如：<strong>常量、作用域、对象代理、异步处理、类、继承</strong>等。这些在 ES5 中想实现，比较复杂，但是 ES6 对它们进行了封装。</p>
<h1 id="ECMAScript-发展历史"><a href="#ECMAScript-发展历史" class="headerlink" title="ECMAScript 发展历史"></a>ECMAScript 发展历史</h1><ul>
<li><p>1995 年：ECMAScript 诞生。</p>
</li>
<li><p>1997 年：ECMAScript 标准确立。</p>
</li>
<li><p>1999 年：ES3 出现，与此同时，IE5 风靡一时。</p>
</li>
<li><p>2009 年，ES5 出现，例如 foreach、Object.keys、Object.create 和 json 标准。</p>
</li>
<li><p>2015 年 6 月，ES6 正式发布。</p>
</li>
</ul>
<p>ES6 的目标是：让 JS 语言可以编写复杂的大型应用程序，成为企业级开发语言。</p>
<h1 id="ECMAScript-的各大版本"><a href="#ECMAScript-的各大版本" class="headerlink" title="ECMAScript 的各大版本"></a>ECMAScript 的各大版本</h1><ul>
<li><p>ES5 : 09 年发布。</p>
</li>
<li><p>ES6：ECMAScript 2015 年 6 月</p>
</li>
<li><p>ES7：ECMAScript 2016</p>
</li>
<li><p>ES8：ECMAScript 2017</p>
</li>
</ul>
<h1 id="ES6-的其他优势"><a href="#ES6-的其他优势" class="headerlink" title="ES6 的其他优势"></a>ES6 的其他优势</h1><ul>
<li><p>使用 babel 语法转换器，支持低端浏览器。</p>
</li>
<li><p>流行的库基本都是基于 ES6 构建。 React 默认使用 ES6 标准开发。</p>
</li>
</ul>
<h2 id="ES6-的环境配置（为了兼容-ES5）"><a href="#ES6-的环境配置（为了兼容-ES5）" class="headerlink" title="ES6 的环境配置（为了兼容 ES5）"></a>ES6 的环境配置（为了兼容 ES5）</h2><p>掌握 ES6 之后，如果要考虑 ES5 的兼容性，可以这样做：写 ES6 语法的 js 代码，然后通过 <code>Babel</code>将 ES6 转换为 ES5。</p>
<p>但是，在这之前，我们需要配置一下相关的环境。</p>
<h1 id="建立工程目录"><a href="#建立工程目录" class="headerlink" title="建立工程目录"></a>建立工程目录</h1><p>（1）先建立一个空的工程目录 <code>ES6Demo</code>，并在目录下建立两个文件夹 <code>src</code>和 <code>dist</code>：</p>
<ul>
<li><p><code>src</code>：书写 ES6 代码，我们写的 js 程序都放在这里。</p>
</li>
<li><p><code>dist</code>：利用 Babel 编译生成的 ES5 代码。<strong>我们在 HTML 页面需要引入 dist 里的 js 文件</strong>。</p>
</li>
</ul>
<p>（2）在 src 里新建文件 <code>index.html</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们引入 ES5 中的 js 文件，而不是引入 ES6 中的 js 文件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>，上方代码中，我们引入的是<code>dist</code>目录下的 js 文件。</p>
<p>然后我们新建文件 <code>src/index.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;smyhvae&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;qianguyihao&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure>

<p>这个文件是一个 ES6 语法 的 js 文件，稍后，我们尝试把这个 ES6 语法的 js 文件转化为 ES5 的 js 文件。</p>
<p>PS：我们在写代码时，能用单引号尽量用单引号，而不是双引号，前者在压缩之后，程序执行会更快。</p>
<h1 id="全局安装-Babel-cli"><a href="#全局安装-Babel-cli" class="headerlink" title="全局安装 Babel-cli"></a>全局安装 Babel-cli</h1><p>（1）初始化项目：</p>
<p>在安装 Babel 之前，需要先用 npm init 先初始化我们的项目。打开终端或者通过 cmd 打开命令行工具，进入项目目录，输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>上方代码中，<code>-y</code> 代表全部默认同意，就不用一次次按回车了（稍后再根据需要，在文件中手动修改）。命令执行完成后，会在项目的根目录下生成 package.json 文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;es6demo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;smyhvae&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS：VS Code 里打开终端的快捷键是：<code>Contol + ~</code>。</p>
<p>（2）全局安装 Babel-cli：</p>
<p>在终端中输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure>

<p><img src="http://img.smyhvae.com/20180304_1305.png"></p>
<p>如果安装比较慢的话，Mac 下可以使用<code>cnpm</code>进行安装 ，windows 下可以使用<code>nrm</code>切换到 taobao 的镜像。</p>
<p>（3）本地安装 babel-preset-es2015 和 babel-cli：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015 babel-cli</span><br></pre></td></tr></table></figure>

<p><img src="http://img.smyhvae.com/20180304_1307.png"></p>
<p>安装完成后，会发现<code>package.json</code>文件，已经多了 devDependencies 选项：</p>
<p><img src="http://img.smyhvae.com/20180304_1308.png"></p>
<p>（4）新建.babelrc：</p>
<p>在根目录下新建文件<code>.babelrc</code>，输入如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;es2015&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5）开始转换：</p>
<p>现在，我们应该可以将 ES6 的文件转化为 ES5 的文件了，命令如下：（此命令略显复杂）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">babel src<span class="regexp">/index.js -o dist/i</span>ndex.js</span><br></pre></td></tr></table></figure>

<p>我们可以将上面这个命令进行简化一下。操作如下：</p>
<p>在文件 <code>package.json</code> 中修改键 <code>scripts</code>中的内容：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;babel src/index.js -o dist/index.js&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>修改后的效果如下：</p>
<p><img src="http://img.smyhvae.com/20180304_1315.png"></p>
<p>目前为止，环境配置好了。以后，我们执行如下命令，即可将<code>src/index.js</code>这个 ES6 文件转化为 <code>dist/index.js</code>这个 ES5 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>我们执行上面的命令之后，会发现， dist 目录下会生成 ES5 的 js 文件：</p>
<p>index.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;smyhvae&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;qianguyihao&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure>

<p>当我们打开网页后，就可以在浏览器的控制台，看到代码的输出结果。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES5中的一些扩展</title>
    <url>/2021/01/12/javascript/es5/</url>
    <content><![CDATA[<h1 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h1><p>1、js 对象(数组) –&gt; json 对象(数组)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(obj / arr);</span><br></pre></td></tr></table></figure>

<p>2、json 对象(数组) –&gt; js 对象(数组)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(json);</span><br></pre></td></tr></table></figure>

<p>上面这两个方法是 ES5 中提供的。</p>
<p>我们要记住，我们通常说的“json 字符串”，只有两种：<strong>json 对象、json 数组</strong>。</p>
<p><code>typeof json字符串</code>的返回结果是 string。</p>
<h1 id="Object-的扩展"><a href="#Object-的扩展" class="headerlink" title="Object 的扩展"></a>Object 的扩展</h1><p>ES5 给 Object 扩展了一些静态方法，常用的有 2 个，我们接下来讲解。</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(prototype, [descriptors]);</span><br></pre></td></tr></table></figure>

<p>作用: 以指定对象为原型，创建新的对象。同时，第二个参数可以为为新的对象添加新的属性，并对此属性进行描述。</p>
<p><strong>举例 1</strong>：（没有第二个参数时）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">username</span>: <span class="string">&quot;smyhvae&quot;</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">address</span>: <span class="string">&quot;shenzhen&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">obj2 = <span class="built_in">Object</span>.create(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<p><img src="http://img.smyhvae.com/20180401_2150.png"></p>
<p>我们发现，obj1 成为了 obj2 的原型。</p>
<p><strong>举例 2</strong>：（有第二个参数时）</p>
<p>第二个参数可以给新的对象添加新的属性。我们修改上面的代码，尝试给 obj2 添加新属性<code>sex</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">username</span>: <span class="string">&quot;smyhvae&quot;</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">address</span>: <span class="string">&quot;shenzhen&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">obj2 = <span class="built_in">Object</span>.create(obj1, &#123;</span><br><span class="line">  sex: &#123;</span><br><span class="line">    <span class="comment">//给obj2添加新的属性`sex`。注意，这一行的冒号不要漏掉</span></span><br><span class="line">    value: <span class="string">&quot;男&quot;</span>, <span class="comment">//通过value关键字设置sex的属性值</span></span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure>

<p>上方代码中，我们通过第 5 行的 sex 给 obj2 设置了一个新的属性<code>sex</code>，但是要通过<code>value</code>来设置属性值（第 6 行）。</p>
<p>设置完属性值后，这个属性值默认是不可修改的，要通过<code>writable</code>来设置。总而言之，这几个关键字的解释如下：</p>
<ul>
<li><code>value</code>：设置属性值。</li>
<li><code>writable</code>：标识当前属性值是否可修改。如果不写的话，默认为 false，不可修改。</li>
<li><code>configurable</code>：标识当前属性是否可以被删除。默认为 false，不可删除。</li>
<li><code>enumerable</code>：标识当前属性是否能用 for in 枚举。 默认为 false，不可。</li>
</ul>
<h3 id="单独设置属性"><a href="#单独设置属性" class="headerlink" title="单独设置属性"></a>单独设置属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj2, <span class="string">&quot;sex&quot;</span>, &#123;</span><br><span class="line">  value: <span class="string">&quot;cc&quot;</span>,</span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote>
<p>这个方法有点难理解。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(object, descriptors);</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：为指定对象定义扩展多个属性。</p>
<p>代码举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  firstName: <span class="string">&quot;smyh&quot;</span>,</span><br><span class="line">  lastName: <span class="string">&quot;vae&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj2, &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot;-&quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//监听扩展属性，当扩展属性发生变化的时候自动调用，自动调用后将变化的值作为实参注入到set函数</span></span><br><span class="line">      <span class="keyword">var</span> names = data.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">      <span class="built_in">this</span>.lastName = names[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj2.fullName);</span><br><span class="line">obj2.firstName = <span class="string">&quot;tim&quot;</span>;</span><br><span class="line">obj2.lastName = <span class="string">&quot;duncan&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.fullName);</span><br><span class="line">obj2.fullName = <span class="string">&quot;kobe-bryant&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.fullName);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>get ：用来获取当前属性值的回调函数</p>
</li>
<li><p>set ：修改当前属性值得触发的回调函数，并且实参即为修改后的值</p>
</li>
</ul>
<p>存取器属性：setter,getter 一个用来存值，一个用来取值。</p>
<h1 id="Object-的扩展（二）"><a href="#Object-的扩展（二）" class="headerlink" title="Object 的扩展（二）"></a>Object 的扩展（二）</h1><p>obj 对象本身就自带了两个方法。格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">get 属性名()&#123;&#125; 用来得到当前属性值的回调函数</span><br><span class="line"></span><br><span class="line">set 属性名()&#123;&#125; 用来监视当前属性值变化的回调函数</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  firstName: <span class="string">&quot;kobe&quot;</span>,</span><br><span class="line">  lastName: <span class="string">&quot;bryant&quot;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> names = data.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">this</span>.lastName = names[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.fullName);</span><br><span class="line">obj.fullName = <span class="string">&quot;curry stephen&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.fullName);</span><br></pre></td></tr></table></figure>

<h1 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h1><blockquote>
<p>下面讲的这几个方法，都是给数组的实例用的。</p>
</blockquote>
<blockquote>
<p>下面提到的数组的这五个方法，更详细的内容，可以看 <a href="/2020/09/10/javascript/array/" title="Array 对象">Array 对象</a></p>
</blockquote>
<p><strong>方法 1</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.indexOf(value);</span><br></pre></td></tr></table></figure>

<p>作用：获取 value 在数组中的第一个下标。</p>
<p><strong>方法 2</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.lastIndexOf(value);</span><br></pre></td></tr></table></figure>

<p>作用：获取 value 在数组中的最后一个下标。</p>
<p><strong>方法 3</strong>：遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>方法 4</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>作用：遍历数组返回一个新的数组，返回的是<strong>加工之后</strong>的新数组。</p>
<p><strong>方法 5</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>作用：遍历过滤出一个新的子数组，返回条件为 true 的值。</p>
<h1 id="函数-function-的扩展：bind"><a href="#函数-function-的扩展：bind" class="headerlink" title="函数 function 的扩展：bind()"></a>函数 function 的扩展：bind()</h1><blockquote>
<p>ES5 中新增了<code>bind()</code>函数来改变 this 的指向。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind(obj);</span><br></pre></td></tr></table></figure>

<p>作用：将函数内的 this 绑定为 obj, 并将函数返回。</p>
<p><strong>面试题</strong>: call()、apply()和 bind()的区别：</p>
<blockquote>
<p>详见：<a href="/2021/01/12/javascript/change-this-refer/" title="call、apply、bind的区别">call、apply、bind的区别</a></p>
</blockquote>
<ul>
<li><p>都能改变 this 的指向</p>
</li>
<li><p>call()/apply()是<strong>立即调用函数</strong></p>
</li>
<li><p>bind()：绑定完 this 后，不会立即调用当前函数，而是<strong>将函数返回</strong>，因此后面还需要再加<code>()</code>才能调用。</p>
</li>
</ul>
<p>PS：bind()传参的方式和 call()一样。</p>
<p><strong>分析</strong>：</p>
<p>为什么 ES5 中要加入 bind()方法来改变 this 的指向呢？因为 bind()不会立即调用当前函数。</p>
<p>bind()通常使用在回调函数中，因为回调函数并不会立即调用。如果你希望在回调函数中改变 this，不妨使用 bind()。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>函数扩展</title>
    <url>/2021/01/12/javascript/function/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ES6 在<strong>函数扩展</strong>方面，新增了很多特性。例如：</p>
<ul>
<li><p>箭头函数</p>
</li>
<li><p>参数默认值</p>
</li>
<li><p>参数结构赋值</p>
</li>
<li><p>扩展运算符</p>
</li>
<li><p>rest 参数</p>
</li>
<li><p>this 绑定</p>
</li>
<li><p>尾调用</p>
</li>
</ul>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>定义和调用函数：（传统写法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn1(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure>

<p>定义和调用函数：（ES6 中的写法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure>

<p>二者的效果是一样的。</p>
<p>在箭头函数中，如果方法体内有两句话，那就需要在方法体外边加上{}括号。如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure>

<p>从上面的箭头函数中，我们可以很清晰地找到函数名、参数名、方法体。</p>
<p>上方代码中：</p>
<ul>
<li><p>如果有且仅有 1 个参数，则<code>()</code>可以省略</p>
</li>
<li><p>如果方法体内有且仅有 1 条语句，则<code>&#123;&#125;</code>可以省略，但前提是，这条语句必须是 return。</p>
</li>
</ul>
<h2 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h2><blockquote>
<p>箭头函数只是为了让函数写起来更优雅吗？当然不是，还有一个很大的作用是与 this 的指向有关。</p>
</blockquote>
<p>ES5 中，this 指向的是函数被调用的对象；而 ES6 的箭头函数中，this 指向的是函数被定义时。</p>
<p>简单来说，箭头函数中的 this，是不会变的，是永远绑定在当前的环境下。</p>
<h1 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h1><p><strong>传统写法</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> p = param || <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上方代码中，函数体内的写法是：如果 param 不存在，就用 <code>hello</code>字符串做兜底。这样写比较啰嗦。</p>
<p><strong>ES6 写法</strong>：（参数默认值的写法，很简洁）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">param = <span class="string">&quot;hello&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 ES6 中定义方法时，我们可以给方法里的参数加一个<strong>默认值</strong>（缺省值）：</p>
<ul>
<li><p>方法被调用时，如果没有给参数赋值，那就是用默认值；</p>
</li>
<li><p>方法被调用时，如果给参数赋值了新的值，那就用新的值。</p>
</li>
</ul>
<p>如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn2 = <span class="function">(<span class="params">a, b = <span class="number">5</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>)); <span class="comment">//第二个参数使用默认值 5。输出结果：6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>, <span class="number">8</span>)); <span class="comment">//输出结果：9</span></span><br></pre></td></tr></table></figure>

<p><strong>提醒 1</strong>：默认值的后面，不能再有<strong>没有默认值的变量</strong>。比如<code>(a,b,c)</code>这三个参数，如果我给 b 设置了默认值，那么就一定要给 c 设置默认值。</p>
<p><strong>提醒 2</strong>：</p>
<p>我们来看下面这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&quot;smyh&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&quot;vae&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意第二行代码，我们给 y 赋值为<code>x</code>，这里的<code>x</code>是括号里的第一个参数，并不是第一行代码里定义的<code>x</code>。打印结果：<code>vae vae</code>。</p>
<p>如果我把第一个参数改一下，改成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&quot;smyh&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">z, y = x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(z, y);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&quot;vae&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>此时打印结果是：<code>vae smyh</code>。</p>
<h1 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h1><p>注意区分：</p>
<ul>
<li><p>扩展运算符的格式为<code>...</code></p>
</li>
<li><p>rest 运算符的格式为<code>...变量名</code></p>
</li>
</ul>
<p>有了 ES6，当我们在定义一个方法，但是不确定其参数的个数时，我们就可以用<strong>扩展运算符</strong>作为参数。</p>
<p>以前，我们在定义方法时，参数要确定个数，如下：（程序会报错）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">  <span class="built_in">console</span>.log(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>上方代码中，因为方法的参数是三个，但使用时是用到了四个参数，所以会报错：</p>
<p><img src="http://img.smyhvae.com/20180304_1638.png"></p>
<p>现在，我们有了扩展运算符，就不用担心报错的问题了。代码可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//当不确定方法的参数时，可以使用扩展运算符</span></span><br><span class="line">  <span class="built_in">console</span>.log(arg[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(arg[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(arg[<span class="number">2</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(arg[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//方法中定义了四个参数，但只引用了三个参数，ES6 中并不会报错。</span></span><br></pre></td></tr></table></figure>

<p><img src="http://img.smyhvae.com/20180304_1650.png"></p>
<p>上方代码中注意，arg 参数之后，不能再加别的参数，否则编译报错。</p>
<p><strong>举例：</strong>数组赋值的问题</p>
<p>我们来分析一段代码：（将数组 arr1 赋值给 arr2）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&quot;www&quot;</span>, <span class="string">&quot;smyhvae&quot;</span>, <span class="string">&quot;com&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1; <span class="comment">// 将 arr1 赋值给 arr2，其实是让 arr2 指向 arr1 的内存地址</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr1:&quot;</span> + arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr2:&quot;</span> + arr2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">arr2.push(<span class="string">&quot;你懂得&quot;</span>); <span class="comment">//往arr2 里添加一部分内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr1:&quot;</span> + arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr2:&quot;</span> + arr2);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="http://img.smyhvae.com/20180304_1950.png"></p>
<p>上方代码中，我们往往 arr2 里添加了<code>你懂的</code>，却发现，arr1 里也有这个内容。原因是：<code>let arr2 = arr1;</code>其实是让 arr2 指向 arr1 的地址。也就是说，二者指向的是同一个内存地址。</p>
<p>如果不想让 arr1 和 arr2 指向同一个内存地址，我们可以借助扩展运算符来做：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&quot;www&quot;</span>, <span class="string">&quot;smyhvae&quot;</span>, <span class="string">&quot;com&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1]; <span class="comment">//arr2 会重新开辟内存地址</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr1:&quot;</span> + arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr2:&quot;</span> + arr2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">arr2.push(<span class="string">&quot;你懂得&quot;</span>); <span class="comment">//往arr2 里添加一部分内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr1:&quot;</span> + arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr2:&quot;</span> + arr2);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="http://img.smyhvae.com/20180304_1951.png"></p>
<p>我们明白了这个例子，就可以避免开发中的很多业务逻辑上的 bug。</p>
<h1 id="rest-运算符"><a href="#rest-运算符" class="headerlink" title="rest 运算符"></a><code>rest</code> 运算符</h1><p><code>rest</code> 在英文中指的是<strong>剩余部分</strong>（不是指休息）。我们来举个例子，理解剩余部分的含义：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">first, second, ...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>); <span class="comment">//调用函数后，输出结果为 5</span></span><br></pre></td></tr></table></figure>

<p>上方代码的输出结果为 5。 调用<code>fn()</code>时，里面有七个参数，而<code>arg</code>指的是剩下的部分（因为除去了<code>first</code>和<code>second</code>）。</p>
<p>从上方例子中可以看出，<code>rest</code>运算符适用于：知道前面的一部分参数的数量，但对于后面剩余的参数数量未知的情况。</p>
<h2 id="Rest-参数接受函数的多余参数，组成一个数组，放在形参的最后"><a href="#Rest-参数接受函数的多余参数，组成一个数组，放在形参的最后" class="headerlink" title="Rest 参数接受函数的多余参数，组成一个数组，放在形参的最后"></a>Rest 参数接受函数的多余参数，组成一个数组，放在形参的最后</h2><p>形式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b, ...theArgs</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Rest-参数和-arguments-对象的区别"><a href="#Rest-参数和-arguments-对象的区别" class="headerlink" title="Rest 参数和 arguments 对象的区别"></a>Rest 参数和 arguments 对象的区别</h2><p>rest 参数只包括那些没有给出名称的参数，arguments 包含所有参数<br>arguments 对象不是真正的数组，而 rest 参数是数组实例，可以直接应用 sort, map, forEach, pop 等方法<br>arguments 对象拥有一些自己额外的功能</p>
<h2 id="从-arguments-转向数组"><a href="#从-arguments-转向数组" class="headerlink" title="从 arguments 转向数组"></a>从 arguments 转向数组</h2><p>Rest 参数简化了使用 arguments 获取多余参数的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arguments 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rest 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，rest 参数之后不能再有其他参数(即，只能是最后一个参数)，否则会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, ...b, c</span>) </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Rest parameter must be last formal parameter</span></span><br><span class="line">函数的 length 属性，不包括 rest 参数</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">...a</span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b, ...c</span>)).<span class="title">length</span> // 2</span></span><br></pre></td></tr></table></figure>

<h2 id="Rest-参数可以被解构"><a href="#Rest-参数可以被解构" class="headerlink" title="Rest 参数可以被解构"></a>Rest 参数可以被解构</h2><blockquote>
<p>通俗一点，将 rest 参数的数据解析后一一对应<br>不要忘记参数用[]括起来，因为它是数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">...[a, b, c]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>); <span class="comment">//NaN 因为只传递一个值，其实需要三个值</span></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 6 (第四值没有与之对应的变量名)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>JS获取浏览器及屏幕高度和宽度等信息</title>
    <url>/2020/07/23/javascript/get-screen/</url>
    <content><![CDATA[<h1 id="网页可见区域宽："><a href="#网页可见区域宽：" class="headerlink" title="网页可见区域宽："></a>网页可见区域宽：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.clientWidth;</span><br></pre></td></tr></table></figure>

<h1 id="网页可见区域高："><a href="#网页可见区域高：" class="headerlink" title="网页可见区域高："></a>网页可见区域高：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.clientHeight;</span><br></pre></td></tr></table></figure>

<h1 id="网页可见区域宽：-1"><a href="#网页可见区域宽：-1" class="headerlink" title="网页可见区域宽："></a>网页可见区域宽：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.offsetWidth(<span class="string">&quot;包括边线的宽&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="网页可见区域高：-1"><a href="#网页可见区域高：-1" class="headerlink" title="网页可见区域高："></a>网页可见区域高：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.offsetHeight(<span class="string">&quot;包括边线的高&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="网页正文全文宽："><a href="#网页正文全文宽：" class="headerlink" title="网页正文全文宽："></a>网页正文全文宽：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.scrollWidth;</span><br></pre></td></tr></table></figure>

<h1 id="网页正文全文高："><a href="#网页正文全文高：" class="headerlink" title="网页正文全文高："></a>网页正文全文高：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.scrollHeight;</span><br></pre></td></tr></table></figure>

<h1 id="网页被卷去的高："><a href="#网页被卷去的高：" class="headerlink" title="网页被卷去的高："></a>网页被卷去的高：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.scrollTop;</span><br></pre></td></tr></table></figure>

<h1 id="网页被卷去的左："><a href="#网页被卷去的左：" class="headerlink" title="网页被卷去的左："></a>网页被卷去的左：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.scrollLeft;</span><br></pre></td></tr></table></figure>

<h1 id="网页正文部分上："><a href="#网页正文部分上：" class="headerlink" title="网页正文部分上："></a>网页正文部分上：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.screenTop;</span><br></pre></td></tr></table></figure>

<h1 id="网页正文部分左："><a href="#网页正文部分左：" class="headerlink" title="网页正文部分左："></a>网页正文部分左：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.screenLeft;</span><br></pre></td></tr></table></figure>

<h1 id="屏幕分辨率的高："><a href="#屏幕分辨率的高：" class="headerlink" title="屏幕分辨率的高："></a>屏幕分辨率的高：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.screen.height;</span><br></pre></td></tr></table></figure>

<h1 id="屏幕分辨率的宽："><a href="#屏幕分辨率的宽：" class="headerlink" title="屏幕分辨率的宽："></a>屏幕分辨率的宽：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.screen.width;</span><br></pre></td></tr></table></figure>

<h1 id="屏幕可用工作区高度："><a href="#屏幕可用工作区高度：" class="headerlink" title="屏幕可用工作区高度："></a>屏幕可用工作区高度：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.screen.availHeight;</span><br></pre></td></tr></table></figure>

<h1 id="屏幕可用工作区宽度："><a href="#屏幕可用工作区宽度：" class="headerlink" title="屏幕可用工作区宽度："></a>屏幕可用工作区宽度：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.screen.availWidth;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>hasOwnProperty验证</title>
    <url>/2020/09/10/javascript/hasOwnProperty/</url>
    <content><![CDATA[<h1 id="for-in…时，注意-hasOwnProperty-验证"><a href="#for-in…时，注意-hasOwnProperty-验证" class="headerlink" title="for..in…时，注意 hasOwnProperty 验证"></a>for..in…时，注意 hasOwnProperty 验证</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意词句代码</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.c = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> item;</span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">  <span class="built_in">console</span>.log(obj[item]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： a b c</span></span><br><span class="line"><span class="comment">// 输出：10 20 30</span></span><br></pre></td></tr></table></figure>

<p>以下代码中，注意中间标注释的句子。这句代码加与不加，会对下面的 for..in..循环产生影响。加上了就输出“c”，不加就不输出“c”。道理很简单，<code>for..in..</code>循环<code>不光能遍历</code> obj 对象本身就有的属性，<code>还能遍历</code> obj 原型中的属性。<br>要想<code>屏蔽</code>掉原型中的属性，就用 <code>hasOwnProperty</code> 函数，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(item)) &#123;</span><br><span class="line">    <span class="comment">//if (Object.prototype.hasOwnProperty.call(obj, item)) &#123;</span></span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两句 if 判断语句，都可以用，效果是一样的。第一个代码可读性好，第二个效率相对较高。建议，没有特殊情况，用第一个即可。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>instanceof</title>
    <url>/2019/10/18/javascript/instanceof/</url>
    <content><![CDATA[<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object <span class="keyword">instanceof</span> <span class="keyword">constructor</span>;</span><br><span class="line">// instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</span><br><span class="line">// 参数</span><br><span class="line">// object</span><br><span class="line">// 某个实例对象</span><br><span class="line">// <span class="keyword">constructor</span></span><br><span class="line">// 某个构造函数</span><br></pre></td></tr></table></figure>

<h1 id="obj-为-null"><a href="#obj-为-null" class="headerlink" title="obj 为 null"></a>obj 为 null</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> &lt;任何类型&gt; 都是 <span class="literal">false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的内存空间</title>
    <url>/2020/12/29/javascript/js-RAM/</url>
    <content><![CDATA[<p>JavaScript 没有严格意义上，区分堆与栈，所有可以理解为 JavaScript 所有的数据都是存放在堆内存中，但是大部分时候我们还是需要借助堆栈来理解。</p>
<h1 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a>堆与栈</h1><p>栈由操作系统自动分配释放 ，用于存放函数的参数值、局部变量等，栈数据结构的一个特点就是后进先出。<br>堆由开发人员分配和释放， 若开发人员不释放，程序结束时由 OS 回收，分配方式类似于链表，堆数据结构类似于 JSON 对象中的 key-value。</p>
<h1 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h1><p>JavaScript 中的数据类型分为：基本数据类型与引用数据类型<br>基本数据类型都是存放在栈内存中<br>引用数据类型都是存放在堆内存中，javascript 是不允许直接访问堆内存中的数据，所以如果我们要访问引用数据类型的时候，采用的是按引用访问，就是在变量对象中存放了一个指向对象的地址，要访问堆内存中的对象，就要通过这个引用地址来访问<br>所以，在堆 JavaScript 变量进行拷贝时，基本数据类型相当于复制了一份数据，而引入数据类型只是复制了一个地址，其引用的对象依然没有发生变化</p>
<h1 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h1><p>内存泄漏：就是不再用到的内存，但是没有及时释放，就叫做内存泄漏，严重时将会导致进程崩溃<br>有些语言必须手动释放内存，程序员负责内存的管理，例如 C 语言，而 JavaScript 中是依靠垃圾回收机制来管理的</p>
<h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>垃圾回收机制的原理就是，使用引用计数法，就是记录内存中资源的引用次数，当内存中的某块资源的被引用次数为 0，垃圾回收机制就会把这块资源释放掉<br>但再实际情况中，有些资源我们已经不在需要，但他的引用次数缺不为 0（也就是依然被其他变量所引用），这时候，垃圾回收机制就不会对它进行回收（例如闭包）</p>
<h1 id="避免内存泄漏"><a href="#避免内存泄漏" class="headerlink" title="避免内存泄漏"></a>避免内存泄漏</h1><p>在局部作用域中，等函数执行完毕，变量就没有存在的必要了，js 垃圾回收机制很快做出判断并且回收，但是对于全局变量，很难判断什么时候不用，所以，应该尽量少使用全局变量。<br>我们在使用闭包的时候，就会造成严重的内存泄漏，因为闭包的原因，局部变量会一直保存在内存中，所以在使用闭包的时候，要慎重。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的异常处理</title>
    <url>/2020/12/29/javascript/js-error/</url>
    <content><![CDATA[<blockquote>
<p>JavaScript 中的异常处理可以用来避免浏览器向用户报告错误信息，也可以向调用者报告错误信息。</p>
</blockquote>
<h1 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try/catch/finally"></a>try/catch/finally</h1><p>try 语句允许我们定义在执行时进行错误测试的代码块。<br>catch 语句允许我们定义当 try 代码块发生错误时，所执行的代码块。<br>finally 语句在 try 和 catch 之后无论有无异常都会执行。<br>注意： catch 和 finally 语句都是可选的，但你在使用 try 语句时必须至少使用一个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">tryCode - 尝试执行代码块</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(err) &#123;</span><br><span class="line">catchCode - 捕获错误的代码块</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">finallyCode - 无论 <span class="keyword">try</span> / <span class="keyword">catch</span> 结果如何都会执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h1><p>throw 语句创建自定义错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h1><p>通过 Error 的构造器可以创建一个错误对象。当运行时错误产生时，Error 的实例对象会被抛出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Error</span>([message[, fileName[, lineNumber]]])</span><br><span class="line"></span><br><span class="line"><span class="comment">// message 可选， 描述错误的信息, 类型为一个字符串，如果不是字符串则会调用其 toString()</span></span><br><span class="line"><span class="comment">// fileName 可选，被创建的 Error 对象的 fileName 属性值，默认为调用 Error 构造器的文件名</span></span><br><span class="line"><span class="comment">// lineNumber 可选， 默认为调用 Error 构造器的文件行号</span></span><br><span class="line"><span class="comment">// 注意: fileName 和 lineNumber 参数是非标准的 api，使用时需要注意其兼容。</span></span><br></pre></td></tr></table></figure>

<h1 id="console-error"><a href="#console-error" class="headerlink" title="console.error()"></a>console.error()</h1><p>console.error() 方法用于输出错误信息到控制台。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.error(message);</span><br></pre></td></tr></table></figure>

<h1 id="console-warn"><a href="#console-warn" class="headerlink" title="console.warn()"></a>console.warn()</h1><p>console.warn() 方法用于在控制台输出警告信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.warn(message);</span><br></pre></td></tr></table></figure>

<h1 id="console-dir"><a href="#console-dir" class="headerlink" title="console.dir()"></a>console.dir()</h1><p>console.dir() 方法用于打印一个对象的所有属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(object);</span><br></pre></td></tr></table></figure>

<h1 id="window-onerror"><a href="#window-onerror" class="headerlink" title="window.onerror"></a>window.onerror</h1><p>window.onerror 用来监听 js 运行异常。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  errorMessage,</span></span></span><br><span class="line"><span class="function"><span class="params">  scriptURI,</span></span></span><br><span class="line"><span class="function"><span class="params">  lineNumber,</span></span></span><br><span class="line"><span class="function"><span class="params">  columnNumber,</span></span></span><br><span class="line"><span class="function"><span class="params">  errorObj</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;错误信息：&quot;</span>, errorMessage);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;出错文件：&quot;</span>, scriptURI);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;出错行号：&quot;</span>, lineNumber);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;出错列号：&quot;</span>, columnNumber);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;错误详情：&quot;</span>, errorObj);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax、Axios和Fetch的区别</title>
    <url>/2020/12/29/javascript/js-http-request/</url>
    <content><![CDATA[<h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h1><p>XMLHttpRequest(XHR)对象用于在页面已加载后从服务器接收数据，可以在不重新加载页面的情况下更新网页。<br>所有现代浏览器 (IE7+、Firefox、Chrome、Safari 以及 Opera) 都内建了 XMLHttpRequest 对象。</p>
<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>JQuery 的 Ajax 是对原生 XHR 的封装，支持 JSONP。</p>
<p><strong>缺点：</strong></p>
<ol>
<li>无法实现并发，多个请求之间如果有先后关系的话，就会出现回调地域。</li>
<li>没有单独的库，需要引入 JQuery，不符合 MVVM 思想。</li>
</ol>
<h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1><p>Axios 是基于 Promise，本质上也是对原生 XHR 的封装。</p>
<p><strong>优点：</strong></p>
<ol>
<li>客户端支持防止 CSRF。</li>
<li>提供了一些并发请求的接口。</li>
<li>可以拦截请求和响应。</li>
<li>可以取消请求。</li>
</ol>
<h1 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h1><p>Fetch 是基于 Promise 设计的，是原生 js，没有使用 XHR 对象。</p>
<p><strong>优点：</strong></p>
<ol>
<li>配置项更丰富。</li>
<li>JS 底层 API，扩展性强。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>兼容性不强，毕竟 XHR 已经根深蒂固。</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>混淆工具 javascript-obfuscator 使用简介</title>
    <url>/2021/01/14/javascript/js-obfuscator/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install javascript-obfuscator -g</span><br></pre></td></tr></table></figure>

<p>安装完成后，<code>javascript-obfuscator</code> 就是一个独立的可执行命令了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javascript-obfuscator -v</span><br></pre></td></tr></table></figure>

<p>可以<code>查看版本号</code>，检测安装是否成功。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javascript-obfuscator a.js</span><br></pre></td></tr></table></figure>

<p>上面命令表示，使用默认配置对 a.js 执行混淆，结果输出到默认文件 a-obfuscated.js。</p>
<blockquote>
<p>也可以根据需求修改配置，从而调整混淆强度。</p>
</blockquote>
<h2 id="主要有以下几个重要参数"><a href="#主要有以下几个重要参数" class="headerlink" title="主要有以下几个重要参数"></a>主要有以下几个<code>重要参数</code></h2><h3 id="controlFlowFlattening"><a href="#controlFlowFlattening" class="headerlink" title="controlFlowFlattening"></a>controlFlowFlattening</h3><p>默认 false。设为 true，表示开启代码控制流展平，这是源代码的一种结构转换，使代码增大且变得难以理解。</p>
<h3 id="controlFlowFlatteningThreshold"><a href="#controlFlowFlatteningThreshold" class="headerlink" title="controlFlowFlatteningThreshold"></a>controlFlowFlatteningThreshold</h3><p>和 <code>controlFlowFlattening</code> 配合，表示代码控制流展平的概率，此设置对于大代码影响较大，大量的控制流转换会减慢代码速度并增加代码大小。<code>controlFlowFlatteningThreshold</code> 的值范围是从 0 到 1，如果为 0 等同于 controlFlowFlattening 为 false。</p>
<h3 id="deadCodeInjection"><a href="#deadCodeInjection" class="headerlink" title="deadCodeInjection"></a>deadCodeInjection</h3><p>默认 false。设为 true，表示将添加随机废代码到被混淆代码中。</p>
<p>该选项会显著增加代码大小（高达 200%）</p>
<h3 id="deadCodeInjectionThreshold"><a href="#deadCodeInjectionThreshold" class="headerlink" title="deadCodeInjectionThreshold"></a>deadCodeInjectionThreshold</h3><p>设置废代码注入的百分比。值范围是从 0 到 1，如果为 0 等同于 deadCodeInjection 为 false。</p>
<p>此选项强制启用 stringArray 选项。</p>
<h3 id="stringArray"><a href="#stringArray" class="headerlink" title="stringArray"></a>stringArray</h3><p>删除字符串文字并将其放置在特殊数组中。例如，var m=“Hello World”中的字符串“Hello World”，将被替换为 <code>var m=x12c456[0x1]</code>；</p>
<h3 id="stringArrayEncoding"><a href="#stringArrayEncoding" class="headerlink" title="stringArrayEncoding"></a>stringArrayEncoding</h3><p>使用 <code>base64</code> 或 <code>rc4</code> 对 <code>stringArray</code> 影响的所有字符串文本进行编码，并插入用于在运行时对其进行解码的特殊代码。</p>
<p>此选项会减慢脚本的速度。</p>
<h3 id="stringArrayThreshold"><a href="#stringArrayThreshold" class="headerlink" title="stringArrayThreshold"></a>stringArrayThreshold</h3><p>此设置调整将字符串文本插入 stringArray 的概率（从 0 到 1）</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><blockquote>
<p>一个中等混淆强度的配置选项如下，它会使性能降低约 30-50%，代码体积增加约 300%。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compact&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;controlFlowFlattening&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;controlFlowFlatteningThreshold&quot;</span>: <span class="number">0.75</span>,</span><br><span class="line">  <span class="attr">&quot;deadCodeInjection&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;deadCodeInjectionThreshold&quot;</span>: <span class="number">0.4</span>,</span><br><span class="line">  <span class="attr">&quot;debugProtection&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;debugProtectionInterval&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;disableConsoleOutput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;identifierNamesGenerator&quot;</span>: <span class="string">&quot;hexadecimal&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;log&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;renameGlobals&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;rotateStringArray&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;selfDefending&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;stringArray&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;stringArrayEncoding&quot;</span>: <span class="string">&quot;base64&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;stringArrayThreshold&quot;</span>: <span class="number">0.75</span>,</span><br><span class="line">  <span class="attr">&quot;unicodeEscapeSequence&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将上述配置选项，保存为文件 <code>config.json</code>，并指定输出结果到 <code>b.js</code>，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javascript-obfuscator a.js --config test.json --output b.js</span><br></pre></td></tr></table></figure>

<p>上面命令表示， <code>javascript-obfuscator</code> 将会使用 <code>config.json</code> 指定的配置，对 <code>a.js</code> 执行混淆，结果输出到 <code>b.js</code>。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>web 性能分析之 performance</title>
    <url>/2020/12/29/javascript/performance/</url>
    <content><![CDATA[<blockquote>
<p>window.performance 允许网页访问某些函数来测量网页和 Web 应用程序的性能。</p>
</blockquote>
<h1 id="window-performance-timing-PerformanceTiming"><a href="#window-performance-timing-PerformanceTiming" class="headerlink" title="window.performance.timing (PerformanceTiming)"></a>window.performance.timing (PerformanceTiming)</h1><p>返回一个 <code>Object</code>，提供了在加载和使用当前页面期间发生的各种事件的性能计时信息。(均为一个无符号 long 型的毫秒数)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">PerformanceTiming.navigationStart <span class="comment">// 表示从同一个浏览器上下文的上一个文档卸载(unload)结束时的 UNIX 时间戳。如果没有上一个文档，这个值会和 PerformanceTiming.fetchStart 相同</span></span><br><span class="line">PerformanceTiming.unloadEventStart <span class="comment">// 表示 unload 事件抛出时的 UNIX 时间戳。如果没有上一个文档，或者上一个文档或所需的重定向之一不是同一来源， 这个值会返回 0</span></span><br><span class="line">PerformanceTiming.unloadEventEnd <span class="comment">// 表示 unload 事件处理完成时的 UNIX 时间戳。如果没有上一个文档，或者上一个文档或所需的重定向之一不是同一来源，这个值会返回 0</span></span><br><span class="line">PerformanceTiming.redirectStart <span class="comment">// 表示第一个 HTTP 重定向开始时的 UNIX 时间戳。如果没有重定向，或者重定向中的一个不同源，这个值会返回 0.</span></span><br><span class="line">PerformanceTiming.redirectEnd <span class="comment">// 表示最后一个 HTTP 重定向完成时（也就是说是 HTTP 响应的最后一个比特直接被收到的时间）的 UNIX 时间戳。如果没有重定向，或者重定向中的一个不同源，这个值会返回 0</span></span><br><span class="line">PerformanceTiming.fetchStart <span class="comment">// 表示浏览器准备好使用 HTTP 请求来获取(fetch)文档的 UNIX 时间戳。这个时间点会在检查任何应用缓存之前</span></span><br><span class="line">PerformanceTiming.domainLookupStart <span class="comment">// 表示域名查询开始的 UNIX 时间戳。如果使用了持续连接(persistent connection)，或者这个信息存储到了缓存或者本地资源上，这个值将和 PerformanceTiming.fetchStart 一致</span></span><br><span class="line">PerformanceTiming.domainLookupEnd <span class="comment">// 表示域名查询结束的 UNIX 时间戳。如果使用了持续连接(persistent connection)，或者这个信息存储到了缓存或者本地资源上，这个值将和 PerformanceTiming.fetchStart 一致</span></span><br><span class="line">PerformanceTiming.connectStart <span class="comment">// 返回 HTTP 请求开始向服务器发送时的 Unix 毫秒时间戳。如果使用持久连接（persistent connection），则返回值等同于 fetchStart 属性的值</span></span><br><span class="line">PerformanceTiming.connectEnd <span class="comment">// 返回浏览器与服务器之间的连接建立时的 Unix 毫秒时间戳。如果建立的是持久连接，则返回值等同于 fetchStart 属性的值。连接建立指的是所有握手和认证过程全部结束</span></span><br><span class="line">PerformanceTiming.secureConnectionStart <span class="comment">// 返回浏览器与服务器开始安全链接的握手时的 Unix 毫秒时间戳。如果当前网页不要求安全连接，则返回 0</span></span><br><span class="line">PerformanceTiming.requestStart <span class="comment">// 返回浏览器向服务器发出 HTTP 请求时（或开始读取本地缓存时）的 Unix 毫秒时间戳</span></span><br><span class="line">PerformanceTiming.responseStart <span class="comment">// 返回浏览器从服务器收到（或从本地缓存读取）第一个字节时的 Unix 毫秒时间戳。如果传输层在开始请求之后失败并且连接被重开，该属性将会被数制成新的请求的相对应的发起时间</span></span><br><span class="line">PerformanceTiming.responseEnd <span class="comment">// 返回浏览器从服务器收到（或从本地缓存读取，或从本地资源读取）最后一个字节时（如果在此之前 HTTP 连接已经关闭，则返回关闭时）的 Unix 毫秒时间戳</span></span><br><span class="line">PerformanceTiming.domLoading <span class="comment">// 返回当前网页 DOM 结构开始解析时（即 Document.readyState 属性变为“loading”、相应的 readystatechange 事件触发时）的 Unix 毫秒时间戳</span></span><br><span class="line">PerformanceTiming.domInteractive <span class="comment">// 返回当前网页 DOM 结构结束解析、开始加载内嵌资源时（即 Document.readyState 属性变为“interactive”、相应的 readystatechange 事件触发时）的 Unix 毫秒时间戳</span></span><br><span class="line">PerformanceTiming.domContentLoadedEventStart <span class="comment">// 返回当解析器发送 DOMContentLoaded 事件，即所有需要被执行的脚本已经被解析时的 Unix 毫秒时间戳</span></span><br><span class="line">PerformanceTiming.domContentLoadedEventEnd <span class="comment">// 返回当所有需要立即执行的脚本已经被执行（不论执行顺序）时的 Unix 毫秒时间戳</span></span><br><span class="line">PerformanceTiming.domComplete 返回当前文档解析完成，即 Document.readyState 变为 <span class="string">&#x27;complete&#x27;</span>且相对应的 readystatechange 被触发时的 Unix 毫秒时间戳</span><br><span class="line">PerformanceTiming.loadEventStart <span class="comment">// 返回该文档下，load 事件被发送时的 Unix 毫秒时间戳。如果这个事件还未被发送，它的值将会是 0</span></span><br><span class="line">PerformanceTiming.loadEventEnd <span class="comment">// 返回当 load 事件结束，即加载事件完成时的 Unix 毫秒时间戳。如果这个事件还未被发送，或者尚未完成，它的值将会是 0</span></span><br></pre></td></tr></table></figure>

<p><strong>常用计算：</strong><br>DNS 查询耗时 ：domainLookupEnd - domainLookupStart<br>TCP 链接耗时 ：connectEnd - connectStart<br>request 请求耗时 ：responseEnd - responseStart<br>解析 dom 树耗时 ： domComplete - domInteractive<br>白屏时间 ：responseStart - navigationStart<br>domready 时间(用户可操作时间节点) ：domContentLoadedEventEnd - navigationStart<br>onload 时间(总下载时间) ：loadEventEnd - navigationStart</p>
<h1 id="window-performance-navigation-PerformanceNavigation"><a href="#window-performance-navigation-PerformanceNavigation" class="headerlink" title="window.performance.navigation (PerformanceNavigation)"></a>window.performance.navigation (PerformanceNavigation)</h1><p>返回一个 Object，返回前给定浏览上下文中网页导航的类型和重定向次数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">PerformanceNavigation.type; <span class="comment">// 表示是如何导航到这个页面的，返回值有（0,1,2,255）四种</span></span><br><span class="line"><span class="comment">// 0: 当前页面是通过点击链接，书签和表单提交，或者脚本操作，或者在 url 中直接输入地址</span></span><br><span class="line"><span class="comment">// 1: 点击刷新页面按钮或者通过 Location.reload()方法显示的页面</span></span><br><span class="line"><span class="comment">// 2: 页面通过历史记录和前进后退访问</span></span><br><span class="line"><span class="comment">// 255: 任何其他方式</span></span><br><span class="line"></span><br><span class="line">PerformanceNavigation.redirectCount; <span class="comment">// 表示在到达这个页面之前重定向了多少次</span></span><br></pre></td></tr></table></figure>

<h1 id="window-performance-memory-memoryInfo"><a href="#window-performance-memory-memoryInfo" class="headerlink" title="window.performance.memory (memoryInfo)"></a>window.performance.memory (memoryInfo)</h1><p>返回一个 Object，返回量化的脚本内存使用率数字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">memoryInfo.jsHeapSizeLimit; <span class="comment">// 表示 JS 内存大小限制</span></span><br><span class="line">memoryInfo.totalJSHeapSize; <span class="comment">// 表示 JS 堆的当前大小，包括未被任何 JS 对象占用的可用空间，这意味着 usedJsHeapSize 不能大于 totalJsHeapSize（注意，不一定存在活动的 JS 对象的 totalJsHeapSize）</span></span><br><span class="line">memoryInfo.usedJSHeapSize; <span class="comment">// 表示 JS 对象（包括 V8 内部对象）正在使用的内存总量</span></span><br></pre></td></tr></table></figure>

<h1 id="window-performance-mark-“name”"><a href="#window-performance-mark-“name”" class="headerlink" title="window.performance.mark(“name”)"></a>window.performance.mark(“name”)</h1><p>在浏览器的性能缓冲区中使用给定名称添加一个 timestamp(时间戳) 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">entryType; <span class="comment">// 设置为 &quot;mark&quot;.</span></span><br><span class="line">name; <span class="comment">// 设置为 mark 被创建时给出的 &quot;name&quot;。</span></span><br><span class="line">startTime; <span class="comment">// 设置为 mark() 方法被调用时的 timestamp 。</span></span><br><span class="line">duration; <span class="comment">// 设置为 &quot;0&quot; (标记没有持续时间).</span></span><br></pre></td></tr></table></figure>

<h1 id="window-performance-measure-“name”"><a href="#window-performance-measure-“name”" class="headerlink" title="window.performance.measure(“name”)"></a>window.performance.measure(“name”)</h1><p>在浏览器性能记录缓存中创建了一个名为时间戳的记录来记录两个特殊标志位（通常称为开始标志和结束标志）。 被命名的时间戳称为一次测量（measure）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">entryType; <span class="comment">// 设置为 &quot;measure&quot;.</span></span><br><span class="line">name; <span class="comment">// 设置为 mark 被创建时给出的 &quot;name&quot;。</span></span><br><span class="line">startTime; <span class="comment">// 设置为 mark() 方法被调用时的 timestamp 。</span></span><br><span class="line">duration; <span class="comment">// 设置为 DOMHighResTimeStamp 小节的持续时间（通常是结束标记时间戳减去开始标记时间戳）.</span></span><br></pre></td></tr></table></figure>

<h1 id="window-performance-getEntriesByType-“mark”"><a href="#window-performance-getEntriesByType-“mark”" class="headerlink" title="window.performance.getEntriesByType(“mark”)"></a>window.performance.getEntriesByType(“mark”)</h1><p>获取所有的 type 为”mark”PerformanceEntry 对象数组</p>
<h1 id="window-performance-getEntriesByName-“name”"><a href="#window-performance-getEntriesByName-“name”" class="headerlink" title="window.performance.getEntriesByName(“name”)"></a>window.performance.getEntriesByName(“name”)</h1><p>获取所有的 name 为”name”的 PerformanceEntry 对象数组</p>
<h1 id="window-performance-clearMarks"><a href="#window-performance-clearMarks" class="headerlink" title="window.performance.clearMarks()"></a>window.performance.clearMarks()</h1><p>清除所有 mark</p>
<h1 id="window-performance-clearMeasures"><a href="#window-performance-clearMeasures" class="headerlink" title="window.performance.clearMeasures()"></a>window.performance.clearMeasures()</h1><p>清除所有 measure</p>
<h1 id="window-performance-now"><a href="#window-performance-now" class="headerlink" title="window.performance.now()"></a>window.performance.now()</h1><p>返回一个 DOMHighResTimeStamp 对象，该对象表示从某一时刻（某一时刻通常是 navigationStart 事件发生时刻）到调用该方法时刻的毫秒数</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>popstate事件监听</title>
    <url>/2020/06/10/javascript/popstate/</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍 popstate 事件监听的作用。</p>
</blockquote>
<h1 id="pushState"><a href="#pushState" class="headerlink" title="pushState"></a>pushState</h1><p>在 HTML 文件中, history.pushState() 方法向浏览器历史添加了一个状态。<br>pushState() 带有三个参数：一个状态对象，一个标题（现在被忽略了），以及一个可选的 URL 地址。</p>
<h1 id="state-object"><a href="#state-object" class="headerlink" title="state object"></a>state object</h1><p>状态对象是一个由 pushState()方法创建的、与历史纪录相关的 JS 对象。当用户定向到一个新的状态时，会触发 popstate 事件。事件的 state 属性包含了历史纪录的 state 对象。（译者注：总而言之，它存储 JSON 字符串，可以用在 popstate 事件中。）state 对象可以是任何可以序列化的东西。由于 火狐 会将这些对象存储在用户的磁盘上，所以用户在重启浏览器之后这些 state 对象会恢复，我们施加一个最大 640k 的字符串在 state 对象的序列化表示上。如果你像 pushState() 方法传递了一个序列化表示大于 640k 的 state 对象，这个方法将扔出一个异常。如果你需要更多的空间，推荐使用 sessionStorage 或者 localStorage。</p>
<h1 id="title"><a href="#title" class="headerlink" title="title"></a>title</h1><p>火狐浏览器现在已经忽略此参数，将来也许可能被使用。考虑到将来有可能的改变，传递一个空字符串是安全的做法。当然，你可以传递一个短标题给你要转变成的状态。（译者注：现在大多数浏览器不支持或者忽略这个参数，最好用 null 代替）</p>
<h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>这个参数提供了新历史纪录的地址。请注意，浏览器在调用 pushState()方法后不会去加载这个 URL，但有可能在之后会这样做，比如用户重启浏览器之后。新的 URL 不一定要是绝对地址，如果它是相对的，它一定是相对于当前的 URL。新 URL 必须和当前 URL 在同一个源下;否则，pushState() 将丢出异常。这个参数可选，如果它没有被特别标注，会被设置为文档的当前 URL。</p>
<h1 id="popstate"><a href="#popstate" class="headerlink" title="popstate"></a>popstate</h1><p>当活动历史记录条目更改时，将触发 popstate 事件。如果被激活的历史记录条目是通过对 history.pushState()的调用创建的，或者受到对 history.replaceState()的调用的影响，popstate 事件的 state 属性包含历史条目的状态对象的副本。<br>需要注意的是调用 history.pushState()或 history.replaceState()不会触发 popstate 事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在 Javascript 代码中调用 history.back()）<br>不同的浏览器在加载页面时处理 popstate 事件的形式存在差异。页面加载时 Chrome 和 Safari 通常会触发(emit )popstate 事件，但 Firefox 则不会。</p>
<p><strong>监听代码如下:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;监听到历史记录条目已更改&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>禁用浏览器返回按钮如下:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="built_in">document</span>.URL);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;popstate&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="built_in">document</span>.URL);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端模块化</title>
    <url>/2021/01/14/javascript/modularization/</url>
    <content><![CDATA[<blockquote>
<p>模块化是指将一个复杂的系统分解为多个模块以方便编码。<br>当项目变得越来越大的时候，原来的引入方式会越来越臃肿，难以维护。<br>所以在这里需要用模块化的思想来组织代码。目前流行的 前端模块化规范有 CommonJs、AMD、CMD、ES6</p>
</blockquote>
<h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><blockquote>
<p>CommonJs 是一种被广泛使用的 JavaScript 模块化规范，其核心思想是通过 require 方法来同步加载依赖的其他模块，通过 module.exports 导出需要暴露的接口。它的流行得益于 Node.js 采用了这种方式，后来这种方式就被引入到了 网页开发之中。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  add,</span><br><span class="line">  num1</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 导入自定义的模块时，参数包含路径，可省略.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&quot;./modul_demo&quot;</span>);</span><br><span class="line">moduleA.add(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 node 中，引用其核心模块，则不需要带路径</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> data = fs.readFileSync(<span class="string">&quot;./modul_demo.js&quot;</span>);</span><br><span class="line">data.toString();</span><br></pre></td></tr></table></figure>

<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><code>commonJS</code> 用同步的方式加载模块，在<code>服务端</code>，模块文件都存在本地磁盘，读取很快，但在<code>浏览器端</code>因为网络等原因，最好的方式应该需要进行异步加载；因为是同步加载，所以只有加载完成，才能执行后面的操作；在服务器端，模块的加载是<code>可以直接运行</code>的；在浏览器端，模块需要<code>提前编译打包处理</code>。</p>
<h2 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h2><p><code>CommonJS</code> 模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  incCounter: incCounter</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> mod = <span class="built_in">require</span>(<span class="string">&quot;./lib&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mod.counter); <span class="comment">// 3</span></span><br><span class="line">mod.incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(mod.counter); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>上面的代码说明，<code>lib.js</code> 模块加载完了之后，它的内部变化就影响不到输出的 <code>mod.counter</code> 了。这是因为 mod.counter 是一个原始类型的值，会被缓存。除非写成一个<code>函数</code>，才能<code>得到内部变动后的值</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">counter</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">  &#125;,</span><br><span class="line">  incCounter: incCounter</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mod.counter); <span class="comment">// 3</span></span><br><span class="line">mod.incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(mod.counter); <span class="comment">//  4</span></span><br></pre></td></tr></table></figure>

<h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p>CMD 规范专门用于浏览器端，模块的加载是异步的，模块使用时才会加载执行。它整合了 CommonJS 和 AMD 规范的特点最具代表性的是 Sea.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义没有依赖的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">exports</span>.xxx = value;</span><br><span class="line">  <span class="built_in">module</span>.exports = value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义有依赖的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//引入依赖模块(同步)</span></span><br><span class="line">  <span class="keyword">var</span> module2 = <span class="built_in">require</span>(<span class="string">&quot;./module2&quot;</span>);</span><br><span class="line">  <span class="comment">//引入依赖模块(异步)</span></span><br><span class="line">  <span class="built_in">require</span>.async(<span class="string">&quot;./module3&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m3</span>) </span>&#123;&#125;);</span><br><span class="line">  <span class="comment">//暴露模块</span></span><br><span class="line">  <span class="built_in">exports</span>.xxx = value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入使用模块：</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> m1 = <span class="built_in">require</span>(<span class="string">&quot;./module1&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> m4 = <span class="built_in">require</span>(<span class="string">&quot;./module4&quot;</span>);</span><br><span class="line">  m1.show();</span><br><span class="line">  m4.show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h1><p><code>ES6 模块化</code>是国际标准化组织 ECMA 提出的 JavaScript 模块化 规范，它在语言层面上实现了模块化。浏览器厂商和 Node.js 都说要原生支持该规范。他将取代 CommonJs 和 Amd 规范，成为浏览器和服务器通用的模块解决方案。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFile &#125; <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>代码无法直接运行在 大部分的 Javascript 运行环境之下，必须通过一些工具转化为浏览器能运行的 ES5</p>
<h1 id="ES6-与-CommonJs-的差异"><a href="#ES6-与-CommonJs-的差异" class="headerlink" title="ES6 与 CommonJs 的差异"></a>ES6 与 CommonJs 的差异</h1><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。<br>CommonJs 在上文中已经进行分析过，ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p>
<p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。<br>因为 CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; counter, incCounter &#125; <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 3</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>页面打印</title>
    <url>/2020/01/19/javascript/print/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印类属性、方法定义</span></span><br><span class="line"><span class="keyword">const</span> Print = <span class="function"><span class="keyword">function</span> (<span class="params">dom, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">this</span> <span class="keyword">instanceof</span> Print)) <span class="keyword">return</span> <span class="keyword">new</span> Print(dom, options);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.options = <span class="built_in">this</span>.extend(</span><br><span class="line">    &#123;</span><br><span class="line">      noPrint: <span class="string">&quot;.no-print&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    options</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> dom === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.dom = <span class="built_in">document</span>.querySelector(dom);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isDOM(dom);</span><br><span class="line">    <span class="built_in">this</span>.dom = <span class="built_in">this</span>.isDOM(dom) ? dom : dom.$el;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line">Print.prototype = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> content = <span class="built_in">this</span>.getStyle() + <span class="built_in">this</span>.getHtml();</span><br><span class="line">    <span class="built_in">this</span>.writeIframe(content);</span><br><span class="line">  &#125;,</span><br><span class="line">  extend: <span class="function"><span class="keyword">function</span> (<span class="params">obj, obj2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj2) &#123;</span><br><span class="line">      obj[k] = obj2[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getStyle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>,</span><br><span class="line">      styles = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;style,link&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; styles.length; i++) &#123;</span><br><span class="line">      str += styles[i].outerHTML;</span><br><span class="line">    &#125;</span><br><span class="line">    str +=</span><br><span class="line">      <span class="string">&quot;&lt;style&gt;&quot;</span> +</span><br><span class="line">      (<span class="built_in">this</span>.options.noPrint ? <span class="built_in">this</span>.options.noPrint : <span class="string">&quot;.no-print&quot;</span>) +</span><br><span class="line">      <span class="string">&quot;&#123;display:none;&#125;&lt;/style&gt;&quot;</span>;</span><br><span class="line">    str +=</span><br><span class="line">      <span class="string">&quot;&lt;style&gt; table &#123;border: 1px solid #000;&#125; .el-table__header &#123;border: 1px solid #000;border-bottom: none;&#125; .el-table__body &#123;border-top: none;&#125; .el-table td, .el-table th.is-leaf &#123;border: 1px solid #000; border-right: 1px solid #000;&#125;  .print-title-content &#123;display:block !important;&#125; #backBtn &#123;display:none;&#125; #img-wrapper &#123;display:block !important;&#125; #echarts &#123;display:none;&#125; .box-card &#123;border: 1px solid #000;&#125; .el-tabs__header &#123;display:none !important;&#125;&lt;/style&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getHtml: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> textareas = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;textarea&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> selects = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;select&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; inputs.length; k++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (inputs[k].type == <span class="string">&quot;checkbox&quot;</span> || inputs[k].type == <span class="string">&quot;radio&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputs[k].checked == <span class="literal">true</span>) &#123;</span><br><span class="line">          inputs[k].setAttribute(<span class="string">&quot;checked&quot;</span>, <span class="string">&quot;checked&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          inputs[k].removeAttribute(<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inputs[k].type == <span class="string">&quot;text&quot;</span>) &#123;</span><br><span class="line">        inputs[k].setAttribute(<span class="string">&quot;value&quot;</span>, inputs[k].value);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        inputs[k].setAttribute(<span class="string">&quot;value&quot;</span>, inputs[k].value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k2 = <span class="number">0</span>; k2 &lt; textareas.length; k2++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (textareas[k2].type == <span class="string">&quot;textarea&quot;</span>) &#123;</span><br><span class="line">        textareas[k2].innerHTML = textareas[k2].value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k3 = <span class="number">0</span>; k3 &lt; selects.length; k3++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (selects[k3].type == <span class="string">&quot;select-one&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> child = selects[k3].children;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> child) &#123;</span><br><span class="line">          <span class="keyword">if</span> (child[i].tagName == <span class="string">&quot;OPTION&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child[i].selected == <span class="literal">true</span>) &#123;</span><br><span class="line">              child[i].setAttribute(<span class="string">&quot;selected&quot;</span>, <span class="string">&quot;selected&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              child[i].removeAttribute(<span class="string">&quot;selected&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.dom.outerHTML;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  writeIframe: <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> w,</span><br><span class="line">      doc,</span><br><span class="line">      iframe = <span class="built_in">document</span>.createElement(<span class="string">&quot;iframe&quot;</span>),</span><br><span class="line">      f = <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">    iframe.id = <span class="string">&quot;myIframe&quot;</span>;</span><br><span class="line">    <span class="comment">//iframe.style = &quot;position:absolute;width:0;height:0;top:-10px;left:-10px;&quot;;</span></span><br><span class="line">    iframe.setAttribute(</span><br><span class="line">      <span class="string">&quot;style&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position:absolute;width:0;height:0;top:-10px;left:-10px;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    w = f.contentWindow || f.contentDocument;</span><br><span class="line">    doc = f.contentDocument || f.contentWindow.document;</span><br><span class="line">    doc.open();</span><br><span class="line">    doc.write(content);</span><br><span class="line">    doc.close();</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    iframe.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      _this.toPrint(w);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">      &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  toPrint: <span class="function"><span class="keyword">function</span> (<span class="params">frameWindow</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        frameWindow.focus();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!frameWindow.document.execCommand(<span class="string">&quot;print&quot;</span>, <span class="literal">false</span>, <span class="literal">null</span>)) &#123;</span><br><span class="line">            frameWindow.print();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          frameWindow.print();</span><br><span class="line">        &#125;</span><br><span class="line">        frameWindow.close();</span><br><span class="line">      &#125;, <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;err&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  isDOM: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> HTMLElement === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj <span class="keyword">instanceof</span> HTMLElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        obj &amp;&amp;</span><br><span class="line">        <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> &amp;&amp;</span><br><span class="line">        obj.nodeType === <span class="number">1</span> &amp;&amp;</span><br><span class="line">        <span class="keyword">typeof</span> obj.nodeName === <span class="string">&quot;string&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> MyPlugin = &#123;&#125;;</span><br><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$print = Print;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyPlugin;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise 对象</title>
    <url>/2019/08/08/javascript/promise/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Promise 对象是 JavaScript 的异步操作解决方案，为异步操作提供统一接口。它起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise 可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。</p>
<p>注意，本章只是 Promise 对象的简单介绍。为了避免与后续教程的重复，更完整的介绍请看<a href="http://es6.ruanyifeng.com/">《ES6 标准入门》</a>的<a href="http://es6.ruanyifeng.com/#docs/promise">《Promise 对象》</a>一章。</p>
<p>首先，Promise 是一个对象，也是一个构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 异步代码...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(f1);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Promise</code>构造函数接受一个回调函数<code>f1</code>作为参数，<code>f1</code>里面是异步操作的代码。然后，返回的<code>p1</code>就是一个 Promise 实例。</p>
<p>Promise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个<code>then</code>方法，用来指定下一步的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(f1);</span><br><span class="line">p1.then(f2);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>f1</code>的异步操作执行完成，就会执行<code>f2</code>。</p>
<p>传统的写法可能需要把<code>f2</code>作为回调函数传入<code>f1</code>，比如写成<code>f1(f2)</code>，异步操作完成后，在<code>f1</code>内部调用<code>f2</code>。Promise 使得<code>f1</code>和<code>f2</code>变成了链式写法。不仅改善了可读性，而且对于多层嵌套的回调函数尤其方便。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line">step1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  step2(value1, <span class="function"><span class="keyword">function</span> (<span class="params">value2</span>) </span>&#123;</span><br><span class="line">    step3(value2, <span class="function"><span class="keyword">function</span> (<span class="params">value3</span>) </span>&#123;</span><br><span class="line">      step4(value3, <span class="function"><span class="keyword">function</span> (<span class="params">value4</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 的写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(step1).then(step2).then(step3).then(step4);</span><br></pre></td></tr></table></figure>

<p>从上面代码可以看到，采用 Promises 以后，程序流程变得非常清楚，十分易读。注意，为了便于理解，上面代码的<code>Promise</code>实例的生成格式，做了简化，真正的语法请参照下文。</p>
<p>总的来说，传统的回调函数写法使得代码混成一团，变得横向发展而不是向下发展。Promise 就是解决这个问题，使得异步流程可以写成同步流程。</p>
<p>Promise 原本只是社区提出的一个构想，一些函数库率先实现了这个功能。ECMAScript 6 将其写入语言标准，目前 JavaScript 原生支持 Promise 对象。</p>
<h1 id="Promise-对象的状态"><a href="#Promise-对象的状态" class="headerlink" title="Promise 对象的状态"></a>Promise 对象的状态</h1><p>Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。</p>
<ul>
<li>异步操作未完成（pending）</li>
<li>异步操作成功（fulfilled）</li>
<li>异步操作失败（rejected）</li>
</ul>
<p>上面三种状态里面，<code>fulfilled</code>和<code>rejected</code>合在一起称为<code>resolved</code>（已定型）。</p>
<p>这三种的状态的变化途径只有两种。</p>
<ul>
<li>从“未完成”到“成功”</li>
<li>从“未完成”到“失败”</li>
</ul>
<p>一旦状态发生变化，就凝固了，不会再有新的状态变化。这也是 Promise 这个名字的由来，它的英语意思是“承诺”，一旦承诺成效，就不得再改变了。这也意味着，Promise 实例的状态变化只可能发生一次。</p>
<p>因此，Promise 的最终结果只有两种。</p>
<ul>
<li>异步操作成功，Promise 实例传回一个值（value），状态变为<code>fulfilled</code>。</li>
<li>异步操作失败，Promise 实例抛出一个错误（error），状态变为<code>rejected</code>。</li>
</ul>
<h1 id="Promise-构造函数"><a href="#Promise-构造函数" class="headerlink" title="Promise 构造函数"></a>Promise 构造函数</h1><p>JavaScript 提供原生的<code>Promise</code>构造函数，用来生成 Promise 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">/* 异步操作失败 */</span></span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己实现。</p>
<p><code>resolve</code>函数的作用是，将<code>Promise</code>实例的状态从“未完成”变为“成功”（即从<code>pending</code>变为<code>fulfilled</code>），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。<code>reject</code>函数的作用是，将<code>Promise</code>实例的状态从“未完成”变为“失败”（即从<code>pending</code>变为<code>rejected</code>），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms, <span class="string">&quot;done&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeout(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>timeout(100)</code>返回一个 Promise 实例。100 毫秒以后，该实例的状态会变为<code>fulfilled</code>。</p>
<h1 id="Promise-常用场景"><a href="#Promise-常用场景" class="headerlink" title="Promise 常用场景"></a>Promise 常用场景</h1><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p>Promise 实例具有 then 方法，也就是说，then 方法是定义在原型对象 Promise.prototype 上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then 方法的第一个参数是 resolved 状态的回调函数，第二个参数（可选）是 rejected 状态的回调函数。<br>then 方法返回的是一个新的 Promise 实例（注意，不是原来那个 Promise 实例）。因此可以采用链式写法，即 then 方法后面再调用另一个 then 方法。</p>
<p>Promise 实例的<code>then</code>方法，用来添加回调函数。</p>
<p><code>then</code>方法可以接受两个回调函数，第一个是异步操作成功时（变为<code>fulfilled</code>状态）时的回调函数，第二个是异步操作失败（变为<code>rejected</code>）时的回调函数（该参数可以省略）。一旦状态改变，就调用相应的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error);</span><br><span class="line"><span class="comment">// &quot;成功&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;失败&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error);</span><br><span class="line"><span class="comment">// Error: 失败</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>p1</code>和<code>p2</code>都是 Promise 实例，它们的<code>then</code>方法绑定两个回调函数：成功时的回调函数<code>console.log</code>，失败时的回调函数<code>console.error</code>（可以省略）。<code>p1</code>的状态变为成功，<code>p2</code>的状态变为失败，对应的回调函数会收到异步操作传回的值，然后在控制台输出。</p>
<p><code>then</code>方法可以链式使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p1.then(step1).then(step2).then(step3).then(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>p1</code>后面有四个<code>then</code>，意味依次有四个回调函数。只要前一步的状态变为<code>fulfilled</code>，就会依次执行紧跟在后面的回调函数。</p>
<p>最后一个<code>then</code>方法，回调函数是<code>console.log</code>和<code>console.error</code>，用法上有一点重要的区别。<code>console.log</code>只显示<code>step3</code>的返回值，而<code>console.error</code>可以显示<code>p1</code>、<code>step1</code>、<code>step2</code>、<code>step3</code>之中任意一个发生的错误。举例来说，如果<code>step1</code>的状态变为<code>rejected</code>，那么<code>step2</code>和<code>step3</code>都不会执行了（因为它们是<code>resolved</code>的回调函数）。Promise 开始寻找，接下来第一个为<code>rejected</code>的回调函数，在上面代码中是<code>console.error</code>。这就是说，Promise 对象的报错具有传递性。</p>
<h3 id="then-用法辨析"><a href="#then-用法辨析" class="headerlink" title="then() 用法辨析"></a>then() 用法辨析</h3><p>Promise 的用法，简单说就是一句话：使用<code>then</code>方法添加回调函数。但是，不同的写法有一些细微的差别，请看下面四种写法，它们的差别在哪里？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">f1().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> f2();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">f1().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  f2();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line">f1().then(f2());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法四</span></span><br><span class="line">f1().then(f2);</span><br></pre></td></tr></table></figure>

<p>为了便于讲解，下面这四种写法都再用<code>then</code>方法接一个回调函数<code>f3</code>。写法一的<code>f3</code>回调函数的参数，是<code>f2</code>函数的运行结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f2();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(f3);</span><br></pre></td></tr></table></figure>

<p>写法二的<code>f3</code>回调函数的参数是<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    f2();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(f3);</span><br></pre></td></tr></table></figure>

<p>写法三的<code>f3</code>回调函数的参数，是<code>f2</code>函数返回的函数的运行结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1().then(f2()).then(f3);</span><br></pre></td></tr></table></figure>

<p>写法四与写法一只有一个差别，那就是<code>f2</code>会接收到<code>f1()</code>返回的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1().then(f2).then(f3);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p>常见使用场景 ： 多个异步结果合并到一起<br>Promise.all 可以将多个 Promise 实例包装成一个新的 Promise 实例。用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br>它接受一个数组作为参数。<br>数组可以是 Promise 对象，也可以是其它值，只有 Promise 会等待状态改变。<br>当所有的子 Promise 都完成，该 Promise 完成，返回值是全部值的数组。<br>如果有任何一个失败，该 Promise 失败，返回值是第一个失败的子 Promise 的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wake = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">`<span class="subst">$&#123;time / <span class="number">1000</span>&#125;</span>秒后醒来`</span>);</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p1 = wake(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = wake(<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2])</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// [ &#x27;3秒后醒来&#x27;, &#x27;2秒后醒来&#x27; ]</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>需要特别注意的是，Promise.all 获得的成功结果的数组里面的数据顺序和 Promise.all 接收到的数组顺序是一致的，即 p1 的结果在前，即便 p1 的结果获取的比 p2 要晚。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用 Promise.all 毫无疑问可以解决这个问题。</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p>类似于 Promise.all() ,区别在于 它有任意一个返回成功后，就算完成，但是 进程不会立即停止<br>常见使用场景：把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;成功了&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2])</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">//[&#x27;成功了&#x27;, &#x27;success&#x27;]</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Promise-的实例"><a href="#Promise-的实例" class="headerlink" title="Promise 的实例"></a>Promise 的实例</h1><h2 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h2><p>我们可以把图片的加载写成一个<code>Promise</code>对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> preloadImage = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">    image.onload = resolve;</span><br><span class="line">    image.onerror = reject;</span><br><span class="line">    image.src = path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Ajax-操作"><a href="#Ajax-操作" class="headerlink" title="Ajax 操作"></a>Ajax 操作</h2><p>Ajax 操作是典型的异步操作，传统上往往写成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">term, onload, onerror</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr, results, url;</span><br><span class="line">  url = <span class="string">&quot;http://example.com/search?q=&quot;</span> + term;</span><br><span class="line"></span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">      results = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText);</span><br><span class="line">      onload(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    onerror(e);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">search(<span class="string">&quot;Hello World&quot;</span>, <span class="built_in">console</span>.log, <span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure>

<p>如果使用 Promise 对象，就可以写成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">term</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">&quot;http://example.com/search?q=&quot;</span> + term;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    xhr.open(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        result = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText);</span><br><span class="line">        resolve(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">search(<span class="string">&quot;Hello World&quot;</span>).then(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure>

<p>加载图片的例子，也可以用 Ajax 操作完成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgLoad</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">    request.responseType = <span class="string">&quot;blob&quot;</span>;</span><br><span class="line">    request.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(request.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;图片加载失败：&quot;</span> + request.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;发生网络错误&quot;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    request.send();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Promise 的优点在于，让回调函数变成了规范的链式写法，程序流程可以看得很清楚。它有一整套接口，可以实现许多强大的功能，比如同时执行多个异步操作，等到它们的状态都改变以后，再执行一个回调函数；再比如，为多个回调函数中抛出的错误，统一指定处理方法等等。</p>
<p>而且，Promise 还有一个传统写法没有的好处：它的状态一旦改变，无论何时查询，都能得到这个状态。这意味着，无论何时为 Promise 实例添加回调函数，该函数都能正确执行。所以，你不用担心是否错过了某个事件或信号。如果是传统写法，通过监听事件来执行回调函数，一旦错过了事件，再添加回调函数是不会执行的。</p>
<p>Promise 的缺点是，编写的难度比传统写法高，而且阅读代码也不是一眼可以看懂。你只会看到一堆<code>then</code>，必须自己在<code>then</code>的回调函数里面理清逻辑。</p>
<h1 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h1><p>Promise 的回调函数属于异步任务，会在同步任务之后执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">&#125;).then(<span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上面代码会先输出 2，再输出 1。因为<code>console.log(2)</code>是同步任务，而<code>then</code>的回调函数属于异步任务，一定晚于同步任务执行。</p>
<p>但是，Promise 的回调函数不是正常的异步任务，而是微任务（microtask）。它们的区别在于，正常任务追加到下一轮事件循环，微任务追加到本轮事件循环。这意味着，微任务的执行时间一定早于正常任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">2</span>);</span><br><span class="line">&#125;).then(<span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上面代码的输出结果是<code>321</code>。这说明<code>then</code>的回调函数的执行时间，早于<code>setTimeout(fn, 0)</code>。因为<code>then</code>是本轮事件循环执行，<code>setTimeout(fn, 0)</code>在下一轮事件循环开始时执行。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>原型链</title>
    <url>/2019/08/08/javascript/prototype-chain/</url>
    <content><![CDATA[<h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>事实上，js 里完全依靠”原型链”(prototype chain)模式来实现继承。<br>上面说完原型对象。下面要扒一扒 proto、prototype、constructor。</p>
<ul>
<li>proto：事实上就是原型链指针！！</li>
<li>prototype：上面说到这个是指向原型对象的</li>
<li>constructor：每一个原型对象都包含一个指向构造函数的指针，就是 constructor</li>
</ul>
<h1 id="继承实现方式"><a href="#继承实现方式" class="headerlink" title="继承实现方式"></a>继承实现方式</h1><p>为了实现继承，proto 会指向上一层的原型对象，而上一层的结构依然类似，那么就利用 proto 一直指向 Object 的原型对象上！<code>Object.prototype.__proto__ = null</code>;表示到达最顶端。如此形成了原型链继承。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>Object 是作为众多 new 出来的实例的基类 function Object(){ [ native code ] }</li>
<li>Function 是作为众多 function 出来的函数的基类 function Function(){ [ native code ] }</li>
<li>构造函数的 proto(包括 Function.prototype 和 Object.prototype)都指向 Function.prototype</li>
<li>原型对象的 proto 都指向 Object.prototype</li>
<li>Object.prototype.proto 指向 null</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 递归实例</title>
    <url>/2019/10/22/javascript/recursion/</url>
    <content><![CDATA[<h1 id="递归重组数据"><a href="#递归重组数据" class="headerlink" title="递归重组数据"></a>递归重组数据</h1><blockquote>
<p>在一些情境下（如：权限配置、多级级联下拉菜单），需要将数据进行重组。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;demonstration&quot;</span>&gt;</span>级联列表<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-cascader</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">&quot;options&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">el-cascader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">options: [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    label: <span class="string">&quot;******&quot;</span>,</span><br><span class="line">    value: <span class="string">&quot;******&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    label: <span class="string">&quot;**中心&quot;</span>,</span><br><span class="line">    parentId: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    value: <span class="string">&quot;****zhongxin&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    label: <span class="string">&quot;**中心&quot;</span>,</span><br><span class="line">    parentId: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    value: <span class="string">&quot;****zhongxin&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">4</span>,</span><br><span class="line">    label: <span class="string">&quot;****&quot;</span>,</span><br><span class="line">    parentId: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    value: <span class="string">&quot;****&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">5</span>,</span><br><span class="line">    label: <span class="string">&quot;****&quot;</span>,</span><br><span class="line">    parentId: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    value: <span class="string">&quot;****&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">6</span>,</span><br><span class="line">    label: <span class="string">&quot;****&quot;</span>,</span><br><span class="line">    parentId: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    value: <span class="string">&quot;****&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">7</span>,</span><br><span class="line">    label: <span class="string">&quot;****组&quot;</span>,</span><br><span class="line">    parentId: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">    value: <span class="string">&quot;****&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">8</span>,</span><br><span class="line">    label: <span class="string">&quot;****组&quot;</span>,</span><br><span class="line">    parentId: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">    value: <span class="string">&quot;****&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">9</span>,</span><br><span class="line">    label: <span class="string">&quot;****组&quot;</span>,</span><br><span class="line">    parentId: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">    value: <span class="string">&quot;****&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">recursion(pid) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = []</span><br><span class="line">  <span class="built_in">this</span>.options.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = element.parentId;</span><br><span class="line">    <span class="keyword">if</span> ((!pid &amp;&amp; !id) || (pid == element.parentId)) &#123;</span><br><span class="line">      <span class="keyword">const</span> children = <span class="built_in">this</span>.digui(element.id)</span><br><span class="line">      data.push(<span class="built_in">Object</span>.assign(element, children.length ? &#123;</span><br><span class="line">        children</span><br><span class="line">      &#125; : &#123;&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">4</span>); <span class="comment">// 4 * factorial(3) = 24</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>密码校验规则</title>
    <url>/2019/09/24/javascript/reg-password/</url>
    <content><![CDATA[<blockquote>
<p>强密码正则的要求是只能由数字，字母组成，不能有特殊符号, 并且长度限制在 8-10 位</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class="number">8</span>,<span class="number">10</span>&#125;$/;</span><br></pre></td></tr></table></figure>

<p><strong>1. 至少 8-16 个字符，至少 1 个大写字母，1 个小写字母和 1 个数字，其他可以是任意字符</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^]&#123;<span class="number">8</span>,<span class="number">16</span>&#125;$/;</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[\s\S]&#123;<span class="number">8</span>,<span class="number">16</span>&#125;$/;</span><br></pre></td></tr></table></figure>

<p>其中 [\s\S] 中的\s 空白符，\S 非空白符，所以[\s\S]是任意字符。也可以用 [\d\D]、[\w\W]来表示。</p>
<p><strong>2. 至少 8 个字符，至少 1 个大写字母，1 个小写字母和 1 个数字, 不能包含特殊字符（非数字字母）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]&#123;<span class="number">8</span>, &#125;$/;</span><br></pre></td></tr></table></figure>

<p><strong>3. 至少 8 个字符，至少 1 个字母，1 个数字和 1 个特殊字符</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">/^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&amp;])[A-Za-z\d$@$!%*#?&amp;]&#123;8, &#125;$/;</span><br></pre></td></tr></table></figure>

<p><strong>4. 至少 8 个字符，至少 1 个大写字母，1 个小写字母和 1 个数字</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]&#123;<span class="number">8</span>, &#125;$/;</span><br></pre></td></tr></table></figure>

<p><strong>5. 至少 8 个字符，至少 1 个大写字母，1 个小写字母，1 个数字和 1 个特殊字符</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&amp;])[A-Za-z\d$@$!%*?&amp;]&#123;<span class="number">8</span>, &#125;/;</span><br></pre></td></tr></table></figure>

<p><strong>6. 最少 8 个最多十个字符，至少 1 个大写字母，1 个小写字母，1 个数字和 1 个特殊字符</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&amp;])[A-Za-z\d$@$!%*?&amp;]&#123;<span class="number">8</span>, <span class="number">10</span>&#125;/;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>type 类型判断</title>
    <url>/2019/09/24/javascript/reg-type/</url>
    <content><![CDATA[<h1 id="是否字符串"><a href="#是否字符串" class="headerlink" title="是否字符串"></a>是否字符串</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;String&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否数字"><a href="#是否数字" class="headerlink" title="是否数字"></a>是否数字</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Number&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否-boolean"><a href="#是否-boolean" class="headerlink" title="是否 boolean"></a>是否 boolean</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBoolean</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Boolean&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否函数"><a href="#是否函数" class="headerlink" title="是否函数"></a>是否函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Function&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否为-null"><a href="#是否为-null" class="headerlink" title="是否为 null"></a>是否为 null</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNull</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Null&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否-undefined"><a href="#是否-undefined" class="headerlink" title="是否 undefined"></a>是否 undefined</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUndefined</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Undefined&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否对象"><a href="#是否对象" class="headerlink" title="是否对象"></a>是否对象</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Object&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否数组"><a href="#是否数组" class="headerlink" title="是否数组"></a>是否数组</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Array&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否时间"><a href="#是否时间" class="headerlink" title="是否时间"></a>是否时间</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDate</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Date&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否正则"><a href="#是否正则" class="headerlink" title="是否正则"></a>是否正则</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;RegExp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否错误对象"><a href="#是否错误对象" class="headerlink" title="是否错误对象"></a>是否错误对象</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isError</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否-Symbol-函数"><a href="#是否-Symbol-函数" class="headerlink" title="是否 Symbol 函数"></a>是否 Symbol 函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSymbol</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Symbol&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否-Promise-对象"><a href="#是否-Promise-对象" class="headerlink" title="是否 Promise 对象"></a>是否 Promise 对象</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPromise</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Promise&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否-Set-对象"><a href="#是否-Set-对象" class="headerlink" title="是否 Set 对象"></a>是否 Set 对象</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSet</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">&quot;Set&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否-true-或-false"><a href="#是否-true-或-false" class="headerlink" title="是否 true 或 false"></a>是否 true 或 false</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFalse</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!o || o === <span class="string">&quot;null&quot;</span> || o === <span class="string">&quot;undefined&quot;</span> || o === <span class="string">&quot;false&quot;</span> || o === <span class="string">&quot;NaN&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTrue</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !<span class="built_in">this</span>.isFalse(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="终端类型"><a href="#终端类型" class="headerlink" title="终端类型"></a>终端类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> u = navigator.userAgent;</span><br><span class="line">  <span class="keyword">if</span> (u.indexOf(<span class="string">&quot;Android&quot;</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">&quot;Linux&quot;</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">//安卓手机</span></span><br><span class="line">    <span class="comment">// return &quot;Android&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.indexOf(<span class="string">&quot;iPhone&quot;</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">//苹果手机</span></span><br><span class="line">    <span class="comment">// return &quot;iPhone&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.indexOf(<span class="string">&quot;iPad&quot;</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">//iPad</span></span><br><span class="line">    <span class="comment">// return &quot;iPad&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.indexOf(<span class="string">&quot;Windows Phone&quot;</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">//winphone手机</span></span><br><span class="line">    <span class="comment">// return &quot;Windows Phone&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="是否为-PC-端"><a href="#是否为-PC-端" class="headerlink" title="是否为 PC 端"></a>是否为 PC 端</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> userAgentInfo = navigator.userAgent;</span><br><span class="line">  <span class="keyword">var</span> Agents = [</span><br><span class="line">    <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iPhone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SymbianOS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Windows Phone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iPad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iPod&quot;</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; Agents.length; v++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (userAgentInfo.indexOf(Agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="浏览器类型"><a href="#浏览器类型" class="headerlink" title="浏览器类型"></a>浏览器类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">browserType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> userAgent = navigator.userAgent; <span class="comment">//取得浏览器的userAgent字符串</span></span><br><span class="line">  <span class="keyword">var</span> isOpera = userAgent.indexOf(<span class="string">&quot;Opera&quot;</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否Opera浏览器</span></span><br><span class="line">  <span class="keyword">var</span> isIE =</span><br><span class="line">    userAgent.indexOf(<span class="string">&quot;compatible&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp;</span><br><span class="line">    userAgent.indexOf(<span class="string">&quot;MSIE&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp;</span><br><span class="line">    !isOpera; <span class="comment">//判断是否IE浏览器</span></span><br><span class="line">  <span class="keyword">var</span> isIE11 =</span><br><span class="line">    userAgent.indexOf(<span class="string">&quot;Trident&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">&quot;rv:11.0&quot;</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">var</span> isEdge = userAgent.indexOf(<span class="string">&quot;Edge&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp; !isIE; <span class="comment">//判断是否IE的Edge浏览器</span></span><br><span class="line">  <span class="keyword">var</span> isFF = userAgent.indexOf(<span class="string">&quot;Firefox&quot;</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否Firefox浏览器</span></span><br><span class="line">  <span class="keyword">var</span> isSafari =</span><br><span class="line">    userAgent.indexOf(<span class="string">&quot;Safari&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">&quot;Chrome&quot;</span>) == <span class="number">-1</span>; <span class="comment">//判断是否Safari浏览器</span></span><br><span class="line">  <span class="keyword">var</span> isChrome =</span><br><span class="line">    userAgent.indexOf(<span class="string">&quot;Chrome&quot;</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">&quot;Safari&quot;</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断Chrome浏览器</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isIE) &#123;</span><br><span class="line">    <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;MSIE (\\d+\\.\\d+);&quot;</span>);</span><br><span class="line">    reIE.test(userAgent);</span><br><span class="line">    <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">&quot;$1&quot;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (fIEVersion == <span class="number">7</span>) <span class="keyword">return</span> <span class="string">&quot;IE7&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">8</span>) <span class="keyword">return</span> <span class="string">&quot;IE8&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">9</span>) <span class="keyword">return</span> <span class="string">&quot;IE9&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">10</span>) <span class="keyword">return</span> <span class="string">&quot;IE10&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;IE7以下&quot;</span>; <span class="comment">//IE版本过低</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isIE11) <span class="keyword">return</span> <span class="string">&quot;IE11&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (isEdge) <span class="keyword">return</span> <span class="string">&quot;Edge&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (isFF) <span class="keyword">return</span> <span class="string">&quot;FF&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (isOpera) <span class="keyword">return</span> <span class="string">&quot;Opera&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (isSafari) <span class="keyword">return</span> <span class="string">&quot;Safari&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (isChrome) <span class="keyword">return</span> <span class="string">&quot;Chrome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="判断字符串是否符合某种类型"><a href="#判断字符串是否符合某种类型" class="headerlink" title="判断字符串是否符合某种类型"></a>判断字符串是否符合某种类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStr</span>(<span class="params">str, type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="comment">// 手机号码</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;phone&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 座机</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;tel&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 身份证</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;card&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>.test(str);</span><br><span class="line">    <span class="comment">// 密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;pwd&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]\w&#123;5,17&#125;$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 邮政编码</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;postal&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/[1-9]\d&#123;5&#125;(?!\d)/</span>.test(str);</span><br><span class="line">    <span class="comment">// QQ号</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;QQ&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[1-9][0-9]&#123;4,9&#125;$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 邮箱</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;email&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 金额(小数点2位)</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;money&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^\d*(?:\.\d&#123;0,2&#125;)?$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 网址</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;URL&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/</span>.test(</span><br><span class="line">        str</span><br><span class="line">      );</span><br><span class="line">    <span class="comment">// IP</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;IP&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/</span>.test(</span><br><span class="line">        str</span><br><span class="line">      );</span><br><span class="line">    <span class="comment">// 日期时间</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;date&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        /^(\d&#123;<span class="number">4</span>&#125;)\-(\d&#123;<span class="number">2</span>&#125;)\-(\d&#123;<span class="number">2</span>&#125;) (\d&#123;<span class="number">2</span>&#125;)(?:\:\d&#123;<span class="number">2</span>&#125;|:(\d&#123;<span class="number">2</span>&#125;):(\d&#123;<span class="number">2</span>&#125;))$/.test(</span><br><span class="line">          str</span><br><span class="line">        ) || <span class="regexp">/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)$/</span>.test(str)</span><br><span class="line">      );</span><br><span class="line">    <span class="comment">// 数字</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;number&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[0-9]$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 英文</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;english&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]+$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 中文</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;chinese&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[\u4E00-\u9FA5]+$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 小写</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;lower&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[a-z]+$/</span>.test(str);</span><br><span class="line">    <span class="comment">// 大写</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;upper&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[A-Z]+$/</span>.test(str);</span><br><span class="line">    <span class="comment">// HTML标记</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;HTML&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/&lt;(&quot;[^&quot;]*&quot;|&#x27;[^&#x27;]*&#x27;|[^&#x27;&quot;&gt;])*&gt;/</span>.test(str);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="严格的身份证校验"><a href="#严格的身份证校验" class="headerlink" title="严格的身份证校验"></a>严格的身份证校验</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCardID</span>(<span class="params">sId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>.test(sId)) &#123;</span><br><span class="line">    alert(<span class="string">&quot;你输入的身份证长度或格式错误&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//身份证城市</span></span><br><span class="line">  <span class="keyword">var</span> aCity = &#123;</span><br><span class="line">    <span class="number">11</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    <span class="number">12</span>: <span class="string">&quot;天津&quot;</span>,</span><br><span class="line">    <span class="number">13</span>: <span class="string">&quot;河北&quot;</span>,</span><br><span class="line">    <span class="number">14</span>: <span class="string">&quot;山西&quot;</span>,</span><br><span class="line">    <span class="number">15</span>: <span class="string">&quot;内蒙古&quot;</span>,</span><br><span class="line">    <span class="number">21</span>: <span class="string">&quot;辽宁&quot;</span>,</span><br><span class="line">    <span class="number">22</span>: <span class="string">&quot;吉林&quot;</span>,</span><br><span class="line">    <span class="number">23</span>: <span class="string">&quot;黑龙江&quot;</span>,</span><br><span class="line">    <span class="number">31</span>: <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">    <span class="number">32</span>: <span class="string">&quot;江苏&quot;</span>,</span><br><span class="line">    <span class="number">33</span>: <span class="string">&quot;浙江&quot;</span>,</span><br><span class="line">    <span class="number">34</span>: <span class="string">&quot;安徽&quot;</span>,</span><br><span class="line">    <span class="number">35</span>: <span class="string">&quot;福建&quot;</span>,</span><br><span class="line">    <span class="number">36</span>: <span class="string">&quot;江西&quot;</span>,</span><br><span class="line">    <span class="number">37</span>: <span class="string">&quot;山东&quot;</span>,</span><br><span class="line">    <span class="number">41</span>: <span class="string">&quot;河南&quot;</span>,</span><br><span class="line">    <span class="number">42</span>: <span class="string">&quot;湖北&quot;</span>,</span><br><span class="line">    <span class="number">43</span>: <span class="string">&quot;湖南&quot;</span>,</span><br><span class="line">    <span class="number">44</span>: <span class="string">&quot;广东&quot;</span>,</span><br><span class="line">    <span class="number">45</span>: <span class="string">&quot;广西&quot;</span>,</span><br><span class="line">    <span class="number">46</span>: <span class="string">&quot;海南&quot;</span>,</span><br><span class="line">    <span class="number">50</span>: <span class="string">&quot;重庆&quot;</span>,</span><br><span class="line">    <span class="number">51</span>: <span class="string">&quot;四川&quot;</span>,</span><br><span class="line">    <span class="number">52</span>: <span class="string">&quot;贵州&quot;</span>,</span><br><span class="line">    <span class="number">53</span>: <span class="string">&quot;云南&quot;</span>,</span><br><span class="line">    <span class="number">54</span>: <span class="string">&quot;西藏&quot;</span>,</span><br><span class="line">    <span class="number">61</span>: <span class="string">&quot;陕西&quot;</span>,</span><br><span class="line">    <span class="number">62</span>: <span class="string">&quot;甘肃&quot;</span>,</span><br><span class="line">    <span class="number">63</span>: <span class="string">&quot;青海&quot;</span>,</span><br><span class="line">    <span class="number">64</span>: <span class="string">&quot;宁夏&quot;</span>,</span><br><span class="line">    <span class="number">65</span>: <span class="string">&quot;新疆&quot;</span>,</span><br><span class="line">    <span class="number">71</span>: <span class="string">&quot;台湾&quot;</span>,</span><br><span class="line">    <span class="number">81</span>: <span class="string">&quot;香港&quot;</span>,</span><br><span class="line">    <span class="number">82</span>: <span class="string">&quot;澳门&quot;</span>,</span><br><span class="line">    <span class="number">91</span>: <span class="string">&quot;国外&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!aCity[<span class="built_in">parseInt</span>(sId.substr(<span class="number">0</span>, <span class="number">2</span>))]) &#123;</span><br><span class="line">    alert(<span class="string">&quot;你的身份证地区非法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 出生日期验证</span></span><br><span class="line">  <span class="keyword">var</span> sBirthday = (</span><br><span class="line">      sId.substr(<span class="number">6</span>, <span class="number">4</span>) +</span><br><span class="line">      <span class="string">&quot;-&quot;</span> +</span><br><span class="line">      <span class="built_in">Number</span>(sId.substr(<span class="number">10</span>, <span class="number">2</span>)) +</span><br><span class="line">      <span class="string">&quot;-&quot;</span> +</span><br><span class="line">      <span class="built_in">Number</span>(sId.substr(<span class="number">12</span>, <span class="number">2</span>))</span><br><span class="line">    ).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>),</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Date</span>(sBirthday);</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    sBirthday !=</span><br><span class="line">    d.getFullYear() + <span class="string">&quot;/&quot;</span> + (d.getMonth() + <span class="number">1</span>) + <span class="string">&quot;/&quot;</span> + d.getDate()</span><br><span class="line">  ) &#123;</span><br><span class="line">    alert(<span class="string">&quot;身份证上的出生日期非法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 身份证号码校验</span></span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>,</span><br><span class="line">    weights = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>],</span><br><span class="line">    codes = <span class="string">&quot;10X98765432&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sId.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    sum += sId[i] * weights[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> last = codes[sum % <span class="number">11</span>]; <span class="comment">//计算出来的最后一位身份证号码</span></span><br><span class="line">  <span class="keyword">if</span> (sId[sId.length - <span class="number">1</span>] != last) &#123;</span><br><span class="line">    alert(<span class="string">&quot;你输入的身份证号非法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>严格模式</title>
    <url>/2021/01/12/javascript/strict/</url>
    <content><![CDATA[<h1 id="ES-的几个重要版本"><a href="#ES-的几个重要版本" class="headerlink" title="ES 的几个重要版本"></a>ES 的几个重要版本</h1><ul>
<li><p>ES5 : 09 年发布。</p>
</li>
<li><p>ES6(ES2015) : 2015 年发布，也称为 ECMA2015。</p>
</li>
<li><p>ES7(ES2016) : 2016 年发布，也称为 ECMA2016 (变化不大)。</p>
</li>
</ul>
<h1 id="严格模式的理解"><a href="#严格模式的理解" class="headerlink" title="严格模式的理解"></a>严格模式的理解</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>理解</strong>：除了正常运行模式(混杂模式)，ES5 添加了第二种运行模式：”严格模式”（strict mode）。</p>
<p>顾名思义，这种模式使得 Javascript 在更严格的语法条件下运行。</p>
<p><strong>目的</strong>：</p>
<ul>
<li><p>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为</p>
</li>
<li><p>消除代码运行的一些不安全之处，为代码的安全运行保驾护航</p>
</li>
<li><p>为未来新版本的 Javascript 做好铺垫</p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>针对整个脚本文件：将<code>use strict</code>放在脚本文件的第一行，则整个脚本文件将以严格模式运行。</p>
</li>
<li><p>针对单个函数：将<code>use strict</code>放在函数体的第一行，则整个函数以严格模式运行。</p>
</li>
</ul>
<p>PS：如果浏览器不支持，则这句话只解析为一条简单的语句, 没有任何副作用。</p>
<p>脚本文件的变通写法：因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。</p>
<h2 id="语法和行为改变"><a href="#语法和行为改变" class="headerlink" title="语法和行为改变"></a>语法和行为改变</h2><ul>
<li><p>必须用 var 声明变量</p>
</li>
<li><p>禁止自定义的函数中的 this 指向 window</p>
</li>
<li><p>对象不能有重名的属性</p>
</li>
</ul>
<h1 id="严格模式和普通模式的区别"><a href="#严格模式和普通模式的区别" class="headerlink" title="严格模式和普通模式的区别"></a>严格模式和普通模式的区别</h1><blockquote>
<p>下面列举几条严格模式的内容。</p>
</blockquote>
<h2 id="全局变量显式声明"><a href="#全局变量显式声明" class="headerlink" title="全局变量显式声明"></a>全局变量显式声明</h2><p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p>
<h2 id="禁止-this-关键字指向全局对象："><a href="#禁止-this-关键字指向全局对象：" class="headerlink" title="禁止 this 关键字指向全局对象："></a>禁止 this 关键字指向全局对象：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>

<p>上方代码中，普通模式打印的是 window。严格模式下打印的是 undefined。</p>
<h2 id="构造函数必须通过-new-实例化对象"><a href="#构造函数必须通过-new-实例化对象" class="headerlink" title="构造函数必须通过 new 实例化对象"></a>构造函数必须通过 new 实例化对象</h2><p>构造函数必须通过 new 实例化对象，否则报错。因为 this 为 undefined，此时无法设置属性。</p>
<p>比如说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Cat = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Cat(<span class="string">&quot;haha&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上方代码中，如果在严格模式下，则会报错。</p>
<h2 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h2><p>普通模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。</p>
<p>普通模式下，如果函数有多个重名的参数，可以用 arguments[i]读取。严格模式下，多个重名的参数属于语法错误。</p>
<p>比如下面这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  username: <span class="string">&#x27;smyh&#x27;</span>;</span><br><span class="line">  username: <span class="string">&#x27;vae&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码，在严格模式下属于语法错误，因为有重名的属性。</p>
<h2 id="函数必须声明在顶层"><a href="#函数必须声明在顶层" class="headerlink" title="函数必须声明在顶层"></a>函数必须声明在顶层</h2><p>将来 Javascript 的新版本会引入”块级作用域”。为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。</p>
<h2 id="新增关键字"><a href="#新增关键字" class="headerlink" title="新增关键字"></a>新增关键字</h2><p>为了向将来 Javascript 的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>js判断字符串中是否包含某个字符串</title>
    <url>/2019/10/31/javascript/string-verdict/</url>
    <content><![CDATA[<h1 id="String-对象的方法"><a href="#String-对象的方法" class="headerlink" title="String 对象的方法"></a>String 对象的方法</h1><h2 id="方法一：indexOf-推荐"><a href="#方法一：indexOf-推荐" class="headerlink" title="方法一：indexOf() (推荐)"></a>方法一：indexOf() (推荐)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;baidu&quot;</span>) != <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。如果要检索的字符串值没有出现，则该方法返回 -1。</span></span><br></pre></td></tr></table></figure>

<h2 id="方法二：search"><a href="#方法二：search" class="headerlink" title="方法二：search()"></a>方法二：search()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">&quot;baidu&quot;</span>) != <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。</span></span><br></pre></td></tr></table></figure>

<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="方法三：includes"><a href="#方法三：includes" class="headerlink" title="方法三：includes()"></a>方法三：includes()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;baidu&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// includes() 方法用于判断一个字符串是否包含在另一个字符串中。如果当前字符串包含被搜寻的字符串，就返回 true；否则返回 false。</span></span><br></pre></td></tr></table></figure>

<h1 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h1><h2 id="方法四：match"><a href="#方法四：match" class="headerlink" title="方法四：match()"></a>方法四：match()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/baidu/</span>);</span><br><span class="line"><span class="keyword">if</span> (str.match(reg)) &#123;</span><br><span class="line">  <span class="comment">// [&quot;baidu&quot;, index: 4, input: &quot;www.baidu.com&quot;, groups: undefined]</span></span><br><span class="line">  <span class="comment">// 包含</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</span></span><br></pre></td></tr></table></figure>

<h2 id="方法五：test"><a href="#方法五：test" class="headerlink" title="方法五：test()"></a>方法五：test()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/baidu/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// test() 方法用于检索字符串中指定的值。返回 true 或 false。</span></span><br></pre></td></tr></table></figure>

<h2 id="方法六：exec"><a href="#方法六：exec" class="headerlink" title="方法六：exec()"></a>方法六：exec()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/baidu/</span>);</span><br><span class="line"><span class="keyword">if</span> (reg.exec(str)) &#123;</span><br><span class="line">  <span class="comment">// [&quot;baidu&quot;, index: 4, input: &quot;www.baidu.com&quot;, groups: undefined]</span></span><br><span class="line">  <span class="comment">// 包含</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// exec() 方法用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</span></span><br></pre></td></tr></table></figure>

<h1 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.contains) &#123;</span><br><span class="line">  <span class="built_in">String</span>.prototype.contains = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !!~<span class="built_in">this</span>.indexOf(arg);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.contains(<span class="string">&quot;baidu&quot;</span>));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>Symbol</title>
    <url>/2021/01/12/javascript/symbol/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>背景：ES5 中对象的属性名都是字符串，容易造成重名，污染环境。</p>
<p><strong>概念</strong>：ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>
<p><strong>特点：</strong></p>
<ul>
<li><p>Symbol 属性对应的值是唯一的，解决<strong>命名冲突问题</strong></p>
</li>
<li><p>Symbol 值不能与其他数据进行计算，包括同字符串拼串</p>
</li>
<li><p>for in、for of 遍历时不会遍历 Symbol 属性。</p>
</li>
</ul>
<h1 id="创建-Symbol-属性值"><a href="#创建-Symbol-属性值" class="headerlink" title="创建 Symbol 属性值"></a>创建 Symbol 属性值</h1><p>Symbol 是函数，但并不是构造函数。创建一个 Symbol 数据类型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> mySymbol); <span class="comment">//打印结果：symbol</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol); <span class="comment">//打印结果：Symbol()</span></span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<p><img src="http://img.smyhvae.com/20180317_1134.png"></p>
<p>下面来讲一下 Symbol 的使用。</p>
<h1 id="1、将-Symbol-作为对象的属性值"><a href="#1、将-Symbol-作为对象的属性值" class="headerlink" title="1、将 Symbol 作为对象的属性值"></a>1、将 Symbol 作为对象的属性值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&quot;smyhvae&quot;</span>,</span><br><span class="line">  age: <span class="number">26</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//obj.mySymbol = &#x27;male&#x27;; //错误：不能用 . 这个符号给对象添加 Symbol 属性。</span></span><br><span class="line">obj[mySymbol] = <span class="string">&quot;hello&quot;</span>; <span class="comment">//正确：通过**属性选择器**给对象添加 Symbol 属性。后面的属性值随便写。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们尝试给 obj 添加一个 Symbol 类型的属性值，但是添加的时候，不能采用<code>.</code>这个符号，而是应该用<code>属性选择器</code>的方式。打印结果：</p>
<p><img src="http://img.smyhvae.com/20180317_1134.png"></p>
<p>现在我们用 for in 尝试对上面的 obj 进行遍历：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&quot;smyhvae&quot;</span>,</span><br><span class="line">  age: <span class="number">26</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[mySymbol] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历obj</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<p><img src="http://img.smyhvae.com/20180317_1134.png"></p>
<p>从打印结果中可以看到：for in、for of 遍历时不会遍历 Symbol 属性。</p>
<h1 id="创建-Symbol-属性值时，传参作为标识"><a href="#创建-Symbol-属性值时，传参作为标识" class="headerlink" title="创建 Symbol 属性值时，传参作为标识"></a>创建 Symbol 属性值时，传参作为标识</h1><p>如果我通过 Symbol()函数创建了两个值，这两个值是不一样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> mySymbol2 = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol1 == mySymbol2); <span class="comment">//打印结果：false</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol1); <span class="comment">//打印结果：Symbol()</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol2); <span class="comment">//打印结果：Symbol()</span></span><br></pre></td></tr></table></figure>

<p><img src="http://img.smyhvae.com/20180317_1134.png"></p>
<p>上面代码中，倒数第三行的打印结果也就表明了，二者的值确实是不相等的。</p>
<p>最后两行的打印结果却发现，二者的打印输出，肉眼看到的却相同。那该怎么区分它们呢？</p>
<p>既然 Symbol()是函数，函数就可以传入参数，我们可以通过参数的不同来作为<strong>标识</strong>。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在括号里加入参数，来标识不同的Symbol</span></span><br><span class="line"><span class="keyword">let</span> mySymbol1 = <span class="built_in">Symbol</span>(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> mySymbol2 = <span class="built_in">Symbol</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol1 == mySymbol2); <span class="comment">//打印结果：false</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol1); <span class="comment">//打印结果：Symbol(one)</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol2); <span class="comment">//打印结果：Symbol(two)。颜色为红色。</span></span><br><span class="line"><span class="built_in">console</span>.log(mySymbol2.toString()); <span class="comment">//打印结果：Symbol(two)。颜色为黑色。</span></span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<p><img src="http://img.smyhvae.com/20180317_1134.png"></p>
<h1 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h1><p>Symbol 可以用来定义常量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MY_NAME = <span class="built_in">Symbol</span>(<span class="string">&quot;my_name&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 执行机制</title>
    <url>/2021/05/11/javascript/task/</url>
    <content><![CDATA[<p>JavaScript 是单线程的，即只有一个调用栈，调用栈按照先入后出的规则执行，一次调用一个，而且可以嵌套，在执行调用栈的时候回先执行同步的任务，同步任务马上就能执行，调用栈在发现异步任务的时候回把异步任务放入队列里面，异步任务队列分为<code>宏任务队列</code>和<code>微任务队列</code>，队列都按照先入先出的规则</p>
<h1 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h1><pre class="mermaid">
flowchart TB
A(任务进入执行栈)--&gt; B{同步任务还是异步任务}
B --&gt; |同步| C[&quot;主线程&quot;]
C --&gt; D[&quot;任务全部执行完毕&quot;]
D --&gt; E[&quot;读取任务队列中的结果，进入主线程执行&quot;]

B --&gt; |异步| F[Event Table]
F --&gt; |注册回调函数| G[Event Queue]
G &lt;--&gt; E
classDef cdfece fill:#cdfece,stroke:#333,stroke-width:2px;
classDef d1e1fe fill:#d1e1fe,stroke:#333,stroke-width:2px;
classDef e5cdfe fill:#e5cdfe,stroke:#333,stroke-width:2px;
class A,E cdfece;
class C,D d1e1fe;
class F,G e5cdfe;
style B fill:#fd999a,stroke:#333,stroke-width:2px;
</pre>

<ul>
<li>同步和异步任务分别进入不同的执行场所，同步的进入主线程，异步的进入 Event Table 并注册函数。</li>
<li>当指定的事情完成时，Event Table 会将这个函数移入 Event Queue。</li>
<li>主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执行。</li>
<li>上述过程会不断重复，也就是常说的 Event Loop(事件循环)。</li>
</ul>
<h1 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h1><img src="/images/source-img/task-loop.png">

<ol>
<li>宏任务队列</li>
</ol>
<ul>
<li>新程序或子程序被直接执行<br>最常见的就是<code>&lt;script&gt;</code>元素里面的代码就是程序被执行，控制台写代码也算是程序执行</li>
<li>事件的回调函数<br>如：鼠标点击事件触发后，里面的回调函数就会被添加到宏任务队列</li>
<li>setTimeout()和 setInterval()</li>
<li>requestAnimationFrame</li>
<li>I/O 操作</li>
<li>setImmediate</li>
<li>UI rendering</li>
<li>…</li>
</ul>
<ol start="2">
<li>微任务队列</li>
</ol>
<ul>
<li>Promise.then().catch().finally()</li>
<li>MutationObserver</li>
<li>Object.observe</li>
<li>Node.js 中的 process.nextTick()</li>
</ul>
<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><p>要知道如何运行任务，需要靠 Event Loop 事件循环，事件循环是一个不断进行循环的机制，事件循环会不断去寻找可以执行的任务来执行，在执行完同步任务以后，也就是清空了调用栈以后，首先会执行微任务队列的任务，把微任务队列的任务清空以后才会去执行宏任务。在进行下一步宏任务之前，浏览器可能会发生渲染的情况，在渲染以后再执行宏任务。</p>
<blockquote>
<p><strong>注意：</strong> 并不是每个浏览器都把这些函数归为同一类宏任务或微任务，有些浏览器会把 Promise.then()归为宏任务</p>
</blockquote>
<h2 id="浏览器运行任务的顺序"><a href="#浏览器运行任务的顺序" class="headerlink" title="浏览器运行任务的顺序"></a>浏览器运行任务的顺序</h2><ol>
<li>宏任务 –&gt; 微任务 –&gt; 渲染 –&gt; 宏任务</li>
<li>事件循环</li>
<li>宏任务 –&gt; 微任务 –&gt; 渲染 –&gt; 宏任务</li>
<li>事件循环</li>
<li>…</li>
</ol>
<p>首先执行宏任务，因为所有 js 代码都是在 script 中的，在调用栈为空的时候，事件循环优先执行微任务，并且清空微任务队列才会看浏览器是否需要渲染，渲染过后事件循环再执行下一轮宏任务，如果此时宏任务的其中一轮结束后，也就是调用栈清空的时候，事件循环有发现微任务，还会执行微任务，并且清空微任务队列才会看一下是否需要渲染，渲染过后事件循环再执行下一轮宏任务，在没有其余微任务的时候，宏任务就可以一直清空宏任务队列了</p>
<h2 id="宏任务的执行顺序"><a href="#宏任务的执行顺序" class="headerlink" title="宏任务的执行顺序"></a>宏任务的执行顺序</h2><ol>
<li>timers 定时器：执行已经安排的 setTimeout 和 setInterval 的回调函数</li>
<li>pending callback 待定回调：执行延迟到下一个循环迭代的 I/O 回调</li>
<li>idle，prepare：仅系统内部使用</li>
<li>poll：检索新的 I/O 事件，执行与 I/O 相关的回调</li>
<li>check：执行 setImmediate() 回调函数</li>
<li>close callbacks：<code>socket.on(&quot;close&quot;, () =&gt; &#123;&#125;)</code></li>
</ol>
<h2 id="微任务和宏任务在-node-的执行顺序"><a href="#微任务和宏任务在-node-的执行顺序" class="headerlink" title="微任务和宏任务在 node 的执行顺序"></a>微任务和宏任务在 node 的执行顺序</h2><h3 id="node-v10-及以前"><a href="#node-v10-及以前" class="headerlink" title="node v10 及以前"></a>node v10 及以前</h3><ol>
<li>执行完一个阶段中的所有任务</li>
<li>执行 nextTick 队列里的内容</li>
<li>执行完微任务队列的内容</li>
</ol>
<h3 id="node-v10-以后"><a href="#node-v10-以后" class="headerlink" title="node v10 以后"></a>node v10 以后</h3><blockquote>
<p>和浏览器的行为统一</p>
</blockquote>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> async2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line"></span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// script start</span></span><br><span class="line"><span class="comment">// async1 start</span></span><br><span class="line"><span class="comment">// async2</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// script end</span></span><br><span class="line"><span class="comment">// async1 end</span></span><br><span class="line"><span class="comment">// setTimeout</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;children1&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;children2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;children3&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;children4&quot;</span>);</span><br><span class="line">    resolve(<span class="string">&quot;children5&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;children6&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// children3</span></span><br><span class="line"><span class="comment">// 第一轮宏任务结束，尝试清空微任务队列，发现没有微任务</span></span><br><span class="line"><span class="comment">// children1</span></span><br><span class="line"><span class="comment">// 第二轮宏任务结束，尝试清空微任务队列</span></span><br><span class="line"><span class="comment">// children2</span></span><br><span class="line"><span class="comment">// children4</span></span><br><span class="line"><span class="comment">// children6</span></span><br><span class="line"><span class="comment">// children5</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>toFixed()方法的坑</title>
    <url>/2021/04/20/javascript/toFixed/</url>
    <content><![CDATA[<blockquote>
<p>toFixed()方法的坑<br>javascript 中 toFixed 使用的是<strong>银行家舍入规则</strong>。</p>
</blockquote>
<p>银行家舍入:所谓银行家舍入法，其实质是一种<strong>四舍六入五取偶（又称四舍六入五留双）法</strong>。</p>
<p>简单来说就是：<strong>四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。</strong></p>
<p>但是不论引入 toFixed 解决浮点数计算精度缺失的问题也好，它有没有使用银行家舍入法也罢，都是为了解决精度的问题，但是又离不开二进制浮点数的环境，但至少他帮助我们找到了问题所在，从而让我们有解决方法。</p>
<p>四舍五入并不是真正的四舍五入</p>
<ol>
<li>chrome 上的测试结果：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1.35</span>).toFixed(<span class="number">1</span>); <span class="comment">// 1.4 正确</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.335</span>).toFixed(<span class="number">2</span>); <span class="comment">// 1.33 错误</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.3335</span>).toFixed(<span class="number">3</span>); <span class="comment">// 1.333 错误</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.33335</span>).toFixed(<span class="number">4</span>); <span class="comment">// 1.3334 正确</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.333335</span>).toFixed(<span class="number">5</span>); <span class="comment">// 1.33333 错误</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.3333335</span>).toFixed(<span class="number">6</span>); <span class="comment">// 1.333333 错误</span></span><br><span class="line"></span><br><span class="line">(<span class="number">999.62225</span>).toFixed(<span class="number">4</span>); <span class="comment">// 999.6223 正确</span></span><br><span class="line"></span><br><span class="line">(<span class="number">999.62235</span>).toFixed(<span class="number">4</span>); <span class="comment">// 999.6223 错误</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>IE 上的测试结果：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1.35</span>).toFixed(<span class="number">1</span>); <span class="comment">// 1.4 正确</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.335</span>).toFixed(<span class="number">2</span>); <span class="comment">// 1.34  正确</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.3335</span>).toFixed(<span class="number">3</span>); <span class="comment">// 1.334 正确</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.33335</span>).toFixed(<span class="number">4</span>); <span class="comment">// 1.3334 正确</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.333335</span>).toFixed(<span class="number">5</span>); <span class="comment">// 1.33334 正确</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1.3333335</span>).toFixed(<span class="number">6</span>); <span class="comment">// 1.333334 正确</span></span><br></pre></td></tr></table></figure>

<p>下面是自己封装的格式化数字的方法，此外有一些自己封装的工具类 <a href="/2020/08/14/javascript/tools/" title="项目开发常用的工具类">项目开发常用的工具类</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number, String&#125;</span> </span>val 需要格式化的数值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>num 小数点保留位数（noZero为true时该字段为最大位数）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>noZero  是否去除小数点末尾0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>placeholder 不存在时显示的占位符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>comma 是否需要千分位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">String</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numF</span>(<span class="params">val, num = <span class="number">4</span>, noZero = false, placeholder = <span class="string">&quot;--&quot;</span>, comma = true</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(val) || (!val &amp;&amp; val !== <span class="number">0</span>)) <span class="keyword">return</span> placeholder;</span><br><span class="line">  val = <span class="built_in">Number</span>(val) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> pointInd = val.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  val = val</span><br><span class="line">    ? pointInd &gt; <span class="number">-1</span></span><br><span class="line">      ? <span class="built_in">Number</span>(val.substring(<span class="number">0</span>, val.lastIndexOf(<span class="string">&quot;.&quot;</span>) + num + <span class="number">1</span>))</span><br><span class="line">      : <span class="built_in">Number</span>(val)</span><br><span class="line">    : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> commaFormat = comma ? <span class="string">&quot;,&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 整数部分</span></span><br><span class="line">  <span class="keyword">var</span> intFormat = <span class="built_in">String</span>(<span class="built_in">parseInt</span>(val)).replace(</span><br><span class="line">    /(\d)(?=(?:\d&#123;<span class="number">3</span>&#125;)+$)/g,</span><br><span class="line">    <span class="string">&quot;$1&quot;</span> + commaFormat</span><br><span class="line">  ); <span class="comment">// 千分位</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 小数部分</span></span><br><span class="line">  <span class="keyword">var</span> floatVal = <span class="built_in">String</span>(<span class="built_in">Number</span>(val)).split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] || <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> floatNum = floatVal || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!noZero) &#123;</span><br><span class="line">    floatNum = floatVal.padEnd(num, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> intFormat + (floatNum ? <span class="string">&quot;.&quot;</span> + floatNum : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>项目开发常用的工具类</title>
    <url>/2020/08/14/javascript/tools/</url>
    <content><![CDATA[<h1 id="整数前补-0"><a href="#整数前补-0" class="headerlink" title="整数前补 0"></a>整数前补 0</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整数前补0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@num <span class="type">&#123;Number&#125;</span> </span>数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@n <span class="type">&#123;Number&#125;</span> </span>保留位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefixZero</span>(<span class="params">num = <span class="number">0</span>, n = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">Array</span>(n).join(<span class="number">0</span>) + num).slice(-n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化数字（四舍五入）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@val <span class="type">&#123;Number&#125;</span> </span>数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@num <span class="type">&#123;Number&#125;</span> </span>小数点保留位数（noZero为true时该字段为最大位数）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@noZero <span class="type">&#123;Boolean&#125;</span> </span>是否去除小数点末尾0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@placeholder <span class="type">&#123;String&#125;</span> </span>val 不存在时显示的占位符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numF</span>(<span class="params">val, num = <span class="number">4</span>, noZero = false, placeholder = <span class="string">&quot;--&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(val) || (!val &amp;&amp; val !== <span class="number">0</span>)) <span class="keyword">return</span> placeholder;</span><br><span class="line">  val = val ? <span class="built_in">Number</span>(val).toFixed(num) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 整数部分</span></span><br><span class="line">  <span class="keyword">var</span> intFormat = <span class="built_in">String</span>(<span class="built_in">parseInt</span>(val)).replace(<span class="regexp">/(\d)(?=(?:\d&#123;3&#125;)+$)/g</span>, <span class="string">&quot;$1,&quot;</span>); <span class="comment">// 千分位</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 小数部分</span></span><br><span class="line">  <span class="keyword">var</span> floatNum = <span class="built_in">String</span>(noZero ? <span class="built_in">Number</span>(val) : val).split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] || <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> intFormat + (floatNum ? <span class="string">&quot;.&quot;</span> + floatNum : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化数字（超出保留位数直接截断）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@val <span class="type">&#123;Number&#125;</span> </span>数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@num <span class="type">&#123;Number&#125;</span> </span>小数点保留位数（noZero为true时该字段为最大位数）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@noZero <span class="type">&#123;Boolean&#125;</span> </span>是否去除小数点末尾0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@placeholder <span class="type">&#123;String&#125;</span> </span>val 不存在时显示的占位符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numF</span>(<span class="params">val, num = <span class="number">4</span>, noZero = false, placeholder = <span class="string">&quot;--&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(val) || (!val &amp;&amp; val !== <span class="number">0</span>)) <span class="keyword">return</span> placeholder;</span><br><span class="line">  val = <span class="built_in">Number</span>(val) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> pointInd = val.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  val = val</span><br><span class="line">    ? pointInd &gt; <span class="number">-1</span></span><br><span class="line">      ? <span class="built_in">Number</span>(val.substring(<span class="number">0</span>, val.lastIndexOf(<span class="string">&quot;.&quot;</span>) + num + <span class="number">1</span>))</span><br><span class="line">      : <span class="built_in">Number</span>(val)</span><br><span class="line">    : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 整数部分</span></span><br><span class="line">  <span class="keyword">var</span> intFormat = <span class="built_in">String</span>(<span class="built_in">parseInt</span>(val)).replace(<span class="regexp">/(\d)(?=(?:\d&#123;3&#125;)+$)/g</span>, <span class="string">&quot;$1,&quot;</span>); <span class="comment">// 千分位</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 小数部分</span></span><br><span class="line">  <span class="keyword">var</span> floatVal = <span class="built_in">String</span>(<span class="built_in">Number</span>(val)).split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] || <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> floatNum = floatVal || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!noZero) &#123;</span><br><span class="line">    floatNum = floatVal.padEnd(num, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> intFormat + (floatNum ? <span class="string">&quot;.&quot;</span> + floatNum : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="将以·隔开的字符串转为获取对象某个属性值"><a href="#将以·隔开的字符串转为获取对象某个属性值" class="headerlink" title="将以·隔开的字符串转为获取对象某个属性值"></a>将以<code>·</code>隔开的字符串转为获取对象某个属性值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将以`·`隔开的字符串转为获取对象某个属性值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@val <span class="type">&#123;string&#125;</span> </span>字符串 如：&quot;obj.a.c&quot;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@obj <span class="type">&#123;object&#125;</span> </span>需要获取值的对象 obj</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitPath</span>(<span class="params">str = <span class="string">&quot;&quot;</span>, obj = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> strArr = str.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> _obj = &#123; ...obj &#125;;</span><br><span class="line">  strArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    _obj = _obj[item];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> _obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="手机号脱敏"><a href="#手机号脱敏" class="headerlink" title="手机号脱敏"></a>手机号脱敏</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手机号脱敏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mobile <span class="type">&#123;String&#125;</span> </span>手机号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mobileF</span>(<span class="params">mobile</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mobile &amp;&amp; mobile.length == <span class="number">11</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pat = <span class="regexp">/(\d&#123;3&#125;)\d*(\d&#123;4&#125;)/</span>;</span><br><span class="line">    <span class="keyword">return</span> mobile.replace(pat, <span class="string">&quot;$1****$2&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="图片加载监控"><a href="#图片加载监控" class="headerlink" title="图片加载监控"></a>图片加载监控</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片加载监控</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@src <span class="type">&#123;String&#125;</span> </span>图片路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@onLoad <span class="type">&#123;Function&#125;</span> </span>成功回调</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@onError <span class="type">&#123;Function&#125;</span> </span>失败回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgLoadWatch</span>(<span class="params">src, onLoad, onError</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reloadTimes = <span class="number">2</span>; <span class="comment">// 加载超时重试次数</span></span><br><span class="line">  <span class="keyword">let</span> srcName = src.split(<span class="string">&quot;/&quot;</span>).pop();</span><br><span class="line">  <span class="keyword">let</span> isReturn = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 默认错误处理</span></span><br><span class="line">  <span class="keyword">let</span> imgError = <span class="function"><span class="params">src</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 发送错误日志</span></span><br><span class="line">    sendLog.ERROR(&#123;</span><br><span class="line">      toptype: <span class="string">&quot;IMG_ERROR&quot;</span>,</span><br><span class="line">      subtype: <span class="string">&quot;ONE_IMG_LOAD&quot;</span>,</span><br><span class="line">      data: &#123; src &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (onError) &#123;</span><br><span class="line">      isReturn = <span class="literal">true</span>;</span><br><span class="line">      onError(src);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isReturn) <span class="keyword">return</span>;</span><br><span class="line">      app(<span class="string">&quot;clearCache&quot;</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> times = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;APP_WEB_RELOAD&quot;</span>) || <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;APP_WEB_RELOAD&quot;</span>, ++times);</span><br><span class="line">        <span class="comment">// 强刷次数不要超过三</span></span><br><span class="line">        <span class="keyword">if</span> (times &lt; <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="comment">// 强制刷新web</span></span><br><span class="line">          app(<span class="string">&quot;webReolad&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> createImage = <span class="function">(<span class="params">src, isTimeout = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(srcName, &quot;开始加载&quot;);</span></span><br><span class="line">    <span class="keyword">let</span> overTime = <span class="number">4000</span>; <span class="comment">// 单张图片超时时间（毫秒）</span></span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="comment">// 创建定时器</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(srcName, <span class="string">&quot;加载超时&quot;</span>, reloadTimes);</span><br><span class="line">      --reloadTimes &gt; <span class="number">0</span> ? createImage(src, <span class="literal">true</span>) : imgError(src);</span><br><span class="line">    &#125;, overTime);</span><br><span class="line">    img.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      <span class="keyword">if</span> (isTimeout) &#123;</span><br><span class="line">        createImage(src);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> endTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="comment">// console.log(srcName, &quot;加载完成，耗时&quot; + (endTime - startTime));</span></span><br><span class="line">        <span class="keyword">if</span> (onLoad) &#123;</span><br><span class="line">          isReturn = <span class="literal">true</span>;</span><br><span class="line">          onLoad(src, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    img.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(srcName, <span class="string">&quot;加载异常&quot;</span>, reloadTimes);</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      --reloadTimes &gt; <span class="number">0</span> ? createImage(src) : imgError(src);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (isTimeout) &#123;</span><br><span class="line">      img.src = src + <span class="string">&quot;?t=&quot;</span> + tools.randomNum();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">    img.complete &amp;&amp; img.onload();</span><br><span class="line">  &#125;;</span><br><span class="line">  createImage(src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="px-转成-rem"><a href="#px-转成-rem" class="headerlink" title="px 转成 rem"></a>px 转成 rem</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * px转成rem</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@px <span class="type">&#123;String&#125;</span> </span>像素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">px2rem</span>(<span class="params">px = <span class="string">&quot;&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> scale = <span class="number">37.5</span>;</span><br><span class="line">  <span class="keyword">let</span> numberPx = <span class="built_in">Number</span>(px) / scale;</span><br><span class="line">  <span class="keyword">return</span> numberPx ? numberPx.toFixed(<span class="number">2</span>) + <span class="string">&quot;rem&quot;</span> : <span class="string">&quot;inherit&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="生成并返回一个从-m-到-n-全区间的随机数"><a href="#生成并返回一个从-m-到-n-全区间的随机数" class="headerlink" title="生成并返回一个从 m 到 n 全区间的随机数"></a>生成并返回一个从 m 到 n 全区间的随机数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成并返回一个从m到n全区间的随机数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>m 开始（含）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>n 结束（含）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomNum</span>(<span class="params">m = <span class="number">1</span>, n = <span class="number">100</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (n - m + <span class="number">1</span>) + m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="将数组随机混排"><a href="#将数组随机混排" class="headerlink" title="将数组随机混排"></a>将数组随机混排</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组随机混排</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@arr <span class="type">&#123;Array&#125;</span> </span>数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomArr</span>(<span class="params">arr = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> m = arr.length,</span><br><span class="line">    t,</span><br><span class="line">    i;</span><br><span class="line">  <span class="keyword">while</span> (m) &#123;</span><br><span class="line">    i = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * m--);</span><br><span class="line">    t = arr[m];</span><br><span class="line">    arr[m] = arr[i];</span><br><span class="line">    arr[i] = t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="从数组中随机获取几个元素（不重复）"><a href="#从数组中随机获取几个元素（不重复）" class="headerlink" title="从数组中随机获取几个元素（不重复）"></a>从数组中随机获取几个元素（不重复）</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数组中随机获取几个元素（不重复）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>arr 可选值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>num 可选值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">arr = [], num = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = [...arr];</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    newArr.push(a.splice(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * a.length), <span class="number">1</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="生成-1-到-N-的数组-1-2-3…-N"><a href="#生成-1-到-N-的数组-1-2-3…-N" class="headerlink" title="生成 1 到 N 的数组 [1,2,3…,N]"></a>生成 1 到 N 的数组 [1,2,3…,N]</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成1到N的数组 [1,2,3...,N]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewArray</span>(<span class="params">num = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...Array(num + <span class="number">1</span>).keys()].splice(<span class="number">1</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取元素相对于屏幕顶部的相对位置"><a href="#获取元素相对于屏幕顶部的相对位置" class="headerlink" title="获取元素相对于屏幕顶部的相对位置"></a>获取元素相对于屏幕顶部的相对位置</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素相对于屏幕顶部的相对位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Object&#125;</span> </span>dom dom元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Object&#125;</span> </span>绝对位置&#123;currentX, currentY&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElPosition</span>(<span class="params">dom, fixed = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> top = dom.offsetTop;</span><br><span class="line">  <span class="keyword">let</span> left = dom.offsetLeft;</span><br><span class="line">  <span class="keyword">while</span> ((dom = dom.offsetParent)) &#123;</span><br><span class="line">    <span class="keyword">let</span> translate = tools.getTranslate(dom);</span><br><span class="line">    top += dom.offsetTop;</span><br><span class="line">    top += translate[<span class="number">1</span>];</span><br><span class="line">    left += dom.offsetLeft;</span><br><span class="line">    left += translate[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// body不统计scroll</span></span><br><span class="line">    <span class="keyword">if</span> (dom.tagName != <span class="string">&quot;BODY&quot;</span>) &#123;</span><br><span class="line">      top -= dom.scrollTop;</span><br><span class="line">      left -= dom.scrollLeft;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// fixed需要统计scroll</span></span><br><span class="line">  <span class="keyword">if</span> (fixed) &#123;</span><br><span class="line">    <span class="built_in">console</span>.print(<span class="string">&quot;!fixed scroll&quot;</span>, scrollTop, scrollLeft, top, left);</span><br><span class="line">    <span class="keyword">let</span> scrollTop =</span><br><span class="line">      <span class="built_in">window</span>.pageYOffset ||</span><br><span class="line">      <span class="built_in">document</span>.documentElement.scrollTop ||</span><br><span class="line">      <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">    <span class="keyword">let</span> scrollLeft =</span><br><span class="line">      <span class="built_in">window</span>.pageXOffset ||</span><br><span class="line">      <span class="built_in">document</span>.documentElement.scrollLeft ||</span><br><span class="line">      <span class="built_in">document</span>.body.scrollLeft;</span><br><span class="line">    top += scrollTop;</span><br><span class="line">    left += scrollLeft;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; top, left &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="时间格式化插件"><a href="#时间格式化插件" class="headerlink" title="时间格式化插件"></a>时间格式化插件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间格式化插件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>date 时间(可以传入时间戳)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>format 格式</span></span><br><span class="line"><span class="comment"> * YYYY-MM-DD(yyyy-MM-dd)</span></span><br><span class="line"><span class="comment"> * HH:mm:ss hh:mm:ss  &quot;H: 24小时计时  h: 12小时计时&quot;</span></span><br><span class="line"><span class="comment"> * 星期W 第Q季度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TimeFormater</span>(<span class="params">date, format</span>) </span>&#123;</span><br><span class="line">  date = date || <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  format = format || <span class="string">&quot;YYYY-MM-DD&quot;</span>;</span><br><span class="line">  <span class="comment">// 转换毫秒和字符串为时间对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> date === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^\d+$/</span>.test(date)) &#123;</span><br><span class="line">      date = <span class="built_in">parseInt</span>(date);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 处理日期兼容(火狐和safari浏览器)</span></span><br><span class="line">      date = date.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/-/gm</span>), <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> date === <span class="string">&quot;number&quot;</span> &amp;&amp; date.toString().length === <span class="number">10</span>) &#123;</span><br><span class="line">    date = date * <span class="number">1000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">  <span class="comment">// d是NaN的时候返回空</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(d)) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fillZero</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num.toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> WEEK_DISPLAY = [<span class="string">&quot;日&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>];</span><br><span class="line">  <span class="keyword">const</span> formatObj = &#123;</span><br><span class="line">    YYYY: d.getFullYear(), <span class="comment">// 年</span></span><br><span class="line">    yyyy: d.getFullYear(), <span class="comment">// 年</span></span><br><span class="line">    MM: fillZero(d.getMonth() + <span class="number">1</span>), <span class="comment">// 月份 [01..12]</span></span><br><span class="line">    M: d.getMonth() + <span class="number">1</span>, <span class="comment">// 月份 [1..12]</span></span><br><span class="line">    DD: fillZero(d.getDate()), <span class="comment">// 日期 [01..31]</span></span><br><span class="line">    D: d.getDate(), <span class="comment">// 日期 [1..31]</span></span><br><span class="line">    dd: fillZero(d.getDate()), <span class="comment">// 日期 [01..31]</span></span><br><span class="line">    d: d.getDate(), <span class="comment">// 日期 [1..31]</span></span><br><span class="line">    W: WEEK_DISPLAY[d.getDay()], <span class="comment">// 星期</span></span><br><span class="line">    hh: fillZero(d.getHours() % <span class="number">12</span> || <span class="number">12</span>), <span class="comment">// 时 [01..12]</span></span><br><span class="line">    h: d.getHours() % <span class="number">12</span> || <span class="number">12</span>, <span class="comment">// 时 [1.12]</span></span><br><span class="line">    HH: fillZero(d.getHours()), <span class="comment">// 时 [00..23]</span></span><br><span class="line">    H: d.getHours(), <span class="comment">// 时 [0..23]</span></span><br><span class="line">    mm: fillZero(d.getMinutes()), <span class="comment">// 分钟 [00..59]</span></span><br><span class="line">    m: d.getMinutes(), <span class="comment">// 分钟 [0..59]</span></span><br><span class="line">    ss: fillZero(d.getSeconds()), <span class="comment">// 秒 [00..59]</span></span><br><span class="line">    s: d.getSeconds(), <span class="comment">// 秒 [0..59]</span></span><br><span class="line">    S: d.getMilliseconds(), <span class="comment">// 毫秒</span></span><br><span class="line">    Q: <span class="built_in">Math</span>.ceil((d.getMonth() + <span class="number">1</span>) / <span class="number">3</span>), <span class="comment">// 季度</span></span><br><span class="line">    x: d.getTime(), <span class="comment">// 时间戳，单位：毫秒</span></span><br><span class="line">    X: <span class="built_in">Math</span>.floor(d.getTime() / <span class="number">1000</span>) <span class="comment">// 时间戳，单位：秒</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/Y&#123;4&#125;|y&#123;4&#125;|M&#123;1,2&#125;|D&#123;1,2&#125;|d&#123;1,2&#125;|H&#123;1,2&#125;|h&#123;1,2&#125;|m&#123;1,2&#125;|s&#123;1,2&#125;|S|W|Q|x|X/g</span>;</span><br><span class="line">  <span class="keyword">return</span> format.replace(reg, <span class="function"><span class="params">match</span> =&gt;</span></span><br><span class="line">    formatObj[match] ? formatObj[match] : <span class="string">&quot;&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要引入moment.js</span></span><br><span class="line">moment.locale(<span class="string">&quot;zh-cn&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeF</span>(<span class="params">time, pattern = <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>, placeholder = <span class="string">&quot;--&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> time ? moment(time).format(pattern) : placeholder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="返回指定长度的月份集合"><a href="#返回指定长度的月份集合" class="headerlink" title="返回指定长度的月份集合"></a>返回指定长度的月份集合</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回指定长度的月份集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;time&#125;</span> </span>时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;len&#125;</span> </span>长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;direction&#125;</span> </span>方向：  1: 前几个月;  2: 后几个月;  3:前后几个月  默认 3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&#125;</span> </span>数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example   </span>getMonths(&#x27;2018-1-29&#x27;, 6, 1)  // -&gt;  [&quot;2018-1&quot;, &quot;2017-12&quot;, &quot;2017-11&quot;, &quot;2017-10&quot;, &quot;2017-9&quot;, &quot;2017-8&quot;, &quot;2017-7&quot;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMonths</span>(<span class="params">time, len, direction</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mm = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getMonth(),</span><br><span class="line">    yy = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getFullYear(),</span><br><span class="line">    direction = <span class="built_in">isNaN</span>(direction) ? <span class="number">3</span> : direction,</span><br><span class="line">    index = mm;</span><br><span class="line">  <span class="keyword">var</span> cutMonth = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= len &amp;&amp; index &gt;= -len) &#123;</span><br><span class="line">      <span class="keyword">return</span> direction === <span class="number">1</span></span><br><span class="line">        ? formatPre(index).concat(cutMonth(++index))</span><br><span class="line">        : direction === <span class="number">2</span></span><br><span class="line">        ? formatNext(index).concat(cutMonth(++index))</span><br><span class="line">        : formatCurr(index).concat(cutMonth(++index));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> formatNext = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="built_in">Math</span>.floor(i / <span class="number">12</span>),</span><br><span class="line">      m = i % <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">return</span> [yy + y + <span class="string">&quot;-&quot;</span> + (m + <span class="number">1</span>)];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> formatPre = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="built_in">Math</span>.ceil(i / <span class="number">12</span>),</span><br><span class="line">      m = i % <span class="number">12</span>;</span><br><span class="line">    m = m === <span class="number">0</span> ? <span class="number">12</span> : m;</span><br><span class="line">    <span class="keyword">return</span> [yy - y + <span class="string">&quot;-&quot;</span> + (<span class="number">13</span> - m)];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> formatCurr = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="built_in">Math</span>.floor(i / <span class="number">12</span>),</span><br><span class="line">      yNext = <span class="built_in">Math</span>.ceil(i / <span class="number">12</span>),</span><br><span class="line">      m = i % <span class="number">12</span>,</span><br><span class="line">      mNext = m === <span class="number">0</span> ? <span class="number">12</span> : m;</span><br><span class="line">    <span class="keyword">return</span> [yy - yNext + <span class="string">&quot;-&quot;</span> + (<span class="number">13</span> - mNext), yy + y + <span class="string">&quot;-&quot;</span> + (m + <span class="number">1</span>)];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 数组去重</span></span><br><span class="line">  <span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.hasOwnProperty(<span class="string">&quot;from&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> n = &#123;&#125;,</span><br><span class="line">        r = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!n[arr[i]]) &#123;</span><br><span class="line">          n[arr[i]] = <span class="literal">true</span>;</span><br><span class="line">          r.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> direction !== <span class="number">3</span></span><br><span class="line">    ? cutMonth(index)</span><br><span class="line">    : unique(</span><br><span class="line">        cutMonth(index).sort(<span class="function"><span class="keyword">function</span> (<span class="params">t1, t2</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(t1).getTime() - <span class="keyword">new</span> <span class="built_in">Date</span>(t2).getTime();</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="返回指定长度的天数集合"><a href="#返回指定长度的天数集合" class="headerlink" title="返回指定长度的天数集合"></a>返回指定长度的天数集合</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回指定长度的天数集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;time&#125;</span> </span>时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;len&#125;</span> </span>长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;direction&#125;</span> </span>方向： 1: 前几天;  2: 后几天;  3:前后几天  默认 3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&#125;</span> </span>数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>date.getDays(&#x27;2018-1-29&#x27;, 6) // -&gt; [&quot;2018-1-26&quot;, &quot;2018-1-27&quot;, &quot;2018-1-28&quot;, &quot;2018-1-29&quot;, &quot;2018-1-30&quot;, &quot;2018-1-31&quot;, &quot;2018-2-1&quot;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDays</span>(<span class="params">time, len, diretion</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tt = <span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line">  <span class="keyword">var</span> getDay = <span class="function"><span class="keyword">function</span> (<span class="params">day</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line">    t.setDate(t.getDate() + day);</span><br><span class="line">    <span class="keyword">var</span> m = t.getMonth() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> t.getFullYear() + <span class="string">&quot;-&quot;</span> + m + <span class="string">&quot;-&quot;</span> + t.getDate();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  <span class="keyword">if</span> (diretion === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">      arr.unshift(getDay(-i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (diretion === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">      arr.push(getDay(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">      arr.unshift(getDay(-i));</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(tt.getFullYear() + <span class="string">&quot;-&quot;</span> + (tt.getMonth() + <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + tt.getDate());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">      arr.push(getDay(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> diretion === <span class="number">1</span></span><br><span class="line">    ? arr.concat([</span><br><span class="line">        tt.getFullYear() + <span class="string">&quot;-&quot;</span> + (tt.getMonth() + <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + tt.getDate()</span><br><span class="line">      ])</span><br><span class="line">    : diretion === <span class="number">2</span></span><br><span class="line">    ? [</span><br><span class="line">        tt.getFullYear() + <span class="string">&quot;-&quot;</span> + (tt.getMonth() + <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + tt.getDate()</span><br><span class="line">      ].concat(arr)</span><br><span class="line">    : arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="转化秒数"><a href="#转化秒数" class="headerlink" title="转化秒数"></a>转化秒数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;s&#125;</span> </span>秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span> </span>字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>formatHMS(3610) // -&gt; 1h0m10s</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatHMS</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (s &gt; <span class="number">3600</span>) &#123;</span><br><span class="line">    str =</span><br><span class="line">      <span class="built_in">Math</span>.floor(s / <span class="number">3600</span>) +</span><br><span class="line">      <span class="string">&quot;h&quot;</span> +</span><br><span class="line">      <span class="built_in">Math</span>.floor((s % <span class="number">3600</span>) / <span class="number">60</span>) +</span><br><span class="line">      <span class="string">&quot;m&quot;</span> +</span><br><span class="line">      (s % <span class="number">60</span>) +</span><br><span class="line">      <span class="string">&quot;s&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; <span class="number">60</span>) &#123;</span><br><span class="line">    str = <span class="built_in">Math</span>.floor(s / <span class="number">60</span>) + <span class="string">&quot;m&quot;</span> + (s % <span class="number">60</span>) + <span class="string">&quot;s&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    str = (s % <span class="number">60</span>) + <span class="string">&quot;s&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取某月有多少天"><a href="#获取某月有多少天" class="headerlink" title="获取某月有多少天"></a>获取某月有多少天</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*获取某月有多少天*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMonthOfDay</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line">  <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> mouth = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> days;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当月份为二月时，根据闰年还是非闰年判断天数</span></span><br><span class="line">  <span class="keyword">if</span> (mouth == <span class="number">2</span>) &#123;</span><br><span class="line">    days =</span><br><span class="line">      (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">400</span> == <span class="number">0</span>) ||</span><br><span class="line">      (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)</span><br><span class="line">        ? <span class="number">28</span></span><br><span class="line">        : <span class="number">29</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    mouth == <span class="number">1</span> ||</span><br><span class="line">    mouth == <span class="number">3</span> ||</span><br><span class="line">    mouth == <span class="number">5</span> ||</span><br><span class="line">    mouth == <span class="number">7</span> ||</span><br><span class="line">    mouth == <span class="number">8</span> ||</span><br><span class="line">    mouth == <span class="number">10</span> ||</span><br><span class="line">    mouth == <span class="number">12</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 月份为：1,3,5,7,8,10,12 时，为大月.则天数为31；</span></span><br><span class="line">    days = <span class="number">31</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其他月份，天数为：30.</span></span><br><span class="line">    days = <span class="number">30</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取某年有多少天"><a href="#获取某年有多少天" class="headerlink" title="获取某年有多少天"></a>获取某年有多少天</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 获取某年有多少天 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getYearOfDay</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> firstDayYear = <span class="built_in">this</span>.getFirstDayOfYear(time);</span><br><span class="line">  <span class="keyword">var</span> lastDayYear = <span class="built_in">this</span>.getLastDayOfYear(time);</span><br><span class="line">  <span class="keyword">var</span> numSecond =</span><br><span class="line">    (<span class="keyword">new</span> <span class="built_in">Date</span>(lastDayYear).getTime() - <span class="keyword">new</span> <span class="built_in">Date</span>(firstDayYear).getTime()) / <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(numSecond / (<span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取某年的第一天"><a href="#获取某年的第一天" class="headerlink" title="获取某年的第一天"></a>获取某年的第一天</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 获取某年的第一天 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstDayOfYear</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> year = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getFullYear();</span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">&quot;-01-01 00:00:00&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取某年最后一天"><a href="#获取某年最后一天" class="headerlink" title="获取某年最后一天"></a>获取某年最后一天</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 获取某年最后一天 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLastDayOfYear</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> year = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getFullYear();</span><br><span class="line">  <span class="keyword">var</span> dateString = year + <span class="string">&quot;-12-01 00:00:00&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> endDay = <span class="built_in">this</span>.getMonthOfDay(dateString);</span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">&quot;-12-&quot;</span> + endDay + <span class="string">&quot; 23:59:59&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取某个日期是当年中的第几天"><a href="#获取某个日期是当年中的第几天" class="headerlink" title="获取某个日期是当年中的第几天"></a>获取某个日期是当年中的第几天</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 获取某个日期是当年中的第几天 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayOfYear</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> firstDayYear = <span class="built_in">this</span>.getFirstDayOfYear(time);</span><br><span class="line">  <span class="keyword">var</span> numSecond =</span><br><span class="line">    (<span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() - <span class="keyword">new</span> <span class="built_in">Date</span>(firstDayYear).getTime()) / <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(numSecond / (<span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取某个日期在这一年的第几周"><a href="#获取某个日期在这一年的第几周" class="headerlink" title="获取某个日期在这一年的第几周"></a>获取某个日期在这一年的第几周</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 获取某个日期在这一年的第几周 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayOfYearWeek</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> numdays = <span class="built_in">this</span>.getDayOfYear(time);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(numdays / <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数节流</span></span><br><span class="line"><span class="comment"> * @fn 执行的方法</span></span><br><span class="line"><span class="comment"> * @wait 时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn.apply(context, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>实时通讯</title>
    <url>/2021/01/08/javascript/websocket/</url>
    <content><![CDATA[<h1 id="websocket-实现实时通讯"><a href="#websocket-实现实时通讯" class="headerlink" title="websocket 实现实时通讯"></a>websocket 实现实时通讯</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> socket = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">socket</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 调用socket方法时传入的第一个参数为url， 第二个参数为options配置</span></span><br><span class="line">    <span class="keyword">var</span> url =</span><br><span class="line">      <span class="built_in">arguments</span>.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">arguments</span>[<span class="number">0</span>] !== <span class="literal">undefined</span> ? <span class="built_in">arguments</span>[<span class="number">0</span>] : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> options = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    _classCallCheck(<span class="built_in">this</span>, socket);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.heartBeatTimer = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.options = options;</span><br><span class="line">    <span class="built_in">this</span>.messageMap = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.connState = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.socket = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.url = url;</span><br><span class="line">    <span class="built_in">this</span>.limitConnect = <span class="number">3</span>; <span class="comment">// 断线重连次数</span></span><br><span class="line">    <span class="built_in">this</span>.timeConnect = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  socket.prototype.doOpen = <span class="function"><span class="keyword">function</span> <span class="title">doOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.connState) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">this</span>.connState = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.afterOpenEmit = [];</span><br><span class="line">    <span class="keyword">var</span> BrowserWebSocket = <span class="built_in">window</span>.WebSocket || <span class="built_in">window</span>.MozWebSocket;</span><br><span class="line">    <span class="keyword">var</span> socket = <span class="keyword">new</span> BrowserWebSocket(<span class="built_in">this</span>.url);</span><br><span class="line">    socket.binaryType = <span class="string">&quot;arraybuffer&quot;</span>;</span><br><span class="line">    socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _this.onOpen(evt);</span><br><span class="line">    &#125;;</span><br><span class="line">    socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _this.onClose(evt);</span><br><span class="line">    &#125;;</span><br><span class="line">    socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _this.onMessage(evt.data);</span><br><span class="line">    &#125;;</span><br><span class="line">    socket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _this.onError(err);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.socket = socket;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.onOpen = <span class="function"><span class="keyword">function</span> <span class="title">onOpen</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.connState = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.heartBeatTimer = <span class="built_in">setInterval</span>(<span class="built_in">this</span>.checkHeartbeat.bind(<span class="built_in">this</span>), <span class="number">5000</span>);</span><br><span class="line">    <span class="built_in">this</span>.onReceiver(&#123;</span><br><span class="line">      Event: <span class="string">&quot;open&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.checkOpen = <span class="function"><span class="keyword">function</span> <span class="title">checkOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.connState === <span class="number">2</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.onClose = <span class="function"><span class="keyword">function</span> <span class="title">onClose</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.connState = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.connState) &#123;</span><br><span class="line">      <span class="built_in">this</span>.onReceiver(&#123;</span><br><span class="line">        Event: <span class="string">&quot;close&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;服务器已经断开&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.reconnect();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.send = <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.socket.send(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.emit = <span class="function"><span class="keyword">function</span> <span class="title">emit</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this2 = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      _this2.socket.send(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">      _this2.on(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.onMessage = <span class="function"><span class="keyword">function</span> <span class="title">onMessage</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;pong&quot;</span> !== message) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(message);</span><br><span class="line">        <span class="built_in">this</span>.onReceiver(&#123;</span><br><span class="line">          Event: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">          Data: data</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// console.error(&#x27; &gt;&gt; Data parsing error:&#x27;, err);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.checkHeartbeat = <span class="function"><span class="keyword">function</span> <span class="title">checkHeartbeat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.socket.send(<span class="string">&quot;ping&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.onError = <span class="function"><span class="keyword">function</span> <span class="title">onError</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;服务器报错：&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.reconnect();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重连</span></span><br><span class="line">  socket.prototype.reconnect = <span class="function"><span class="keyword">function</span> <span class="title">reconnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.heartBeatTimer) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.heartBeatTimer);</span><br><span class="line">      <span class="built_in">this</span>.heartBeatTimer = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.limitConnect &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// lockReconnect加锁，防止onclose、onerror两次重连</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;lockReconnect&quot;</span>) != <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;lockReconnect&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.limitConnect--;</span><br><span class="line">        <span class="built_in">this</span>.timeConnect++;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;第&quot;</span> + <span class="built_in">this</span>.timeConnect + <span class="string">&quot;次重连&quot;</span>);</span><br><span class="line">        <span class="comment">// 进行重连</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          TVjsApi.initSocket();</span><br><span class="line">          <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;lockReconnect&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;TCP连接已超时&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.onReceiver = <span class="function"><span class="keyword">function</span> <span class="title">onReceiver</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> callback = <span class="built_in">this</span>.messageMap[data.Event];</span><br><span class="line">    <span class="keyword">if</span> (callback) callback(data.Data);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.on = <span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">name, handler</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.messageMap[name] = handler;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.doClose = <span class="function"><span class="keyword">function</span> <span class="title">doClose</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.socket.close();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.prototype.destroy = <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.heartBeatTimer) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="built_in">this</span>, <span class="built_in">this</span>.heartBeatTimer);</span><br><span class="line">      <span class="built_in">this</span>.heartBeatTimer = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.doClose();</span><br><span class="line">    <span class="built_in">this</span>.messageMap = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.connState = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.socket = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> socket;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>wget 与 curl 命令详解</title>
    <url>/2021/06/09/linux/wget-curl/</url>
    <content><![CDATA[<h1 id="wget-命令"><a href="#wget-命令" class="headerlink" title="wget 命令"></a>wget 命令</h1><p><code>wget命令</code>用来从指定的 URL 下载文件。wget 非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget 会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>wget [选项] URL资源</code></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="下载单个文件"><a href="#下载单个文件" class="headerlink" title="下载单个文件"></a>下载单个文件</h3><p><code>wget http://www.example.com/testfile.zip</code></p>
<p>下载的文件并保存在当前目录，在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）</p>
<h3 id="下载并以不同的文件名保存"><a href="#下载并以不同的文件名保存" class="headerlink" title="下载并以不同的文件名保存"></a>下载并以不同的文件名保存</h3><p><code>wget -O myfile.zip http://www.example.com/testfile.zip</code></p>
<ul>
<li><code>-O 自定义文件名</code> 重命名下载的文件</li>
</ul>
<p>如果不指定”-O” 选项，wget 默认会以 url 路径最后一个 “/“ 的后面全部字符为下载的文件名，如 <code>wget http://www.example.com/testfile?id=123</code>，下载后的文件名就为 testfile?id=123</p>
<h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p><code>wget -c http://www.example.com/testfile.zip</code></p>
<ul>
<li><code>-c</code> 继续接着执行上次未下载完的任务</li>
</ul>
<p>当下载的文件特别大或者网络原因，文件没有下载完连接就已经被断开，使用 -c 选项可以在网络连接恢复时接着上次的下载任务继续下载，而不需要重头开始下载文件</p>
<p>wget 默认重试 20 次连接下载文件，如果网络一直有问题下载可能失败。如果需要的话，你可以使用–tries 增加重试次数。例如设置最多重试 40 次：<code>wget --tries=40 http://www.example.com/testfile.zip</code></p>
<h3 id="后台下载"><a href="#后台下载" class="headerlink" title="后台下载"></a>后台下载</h3><p><code>wget -b http://www.example.com/testfile.zip</code></p>
<ul>
<li><code>-b</code> 以后台运行的方式下载</li>
</ul>
<p>对于下载非常大的文件不能及时下载完时，可以进行后台下载。后台下载时会在当前下载目录下创建一个 “wget-log” 文件记录下载日志，可以使用 <code>tail -f wget-log</code> 命令查看下载进度</p>
<h3 id="带宽控制和下载配额"><a href="#带宽控制和下载配额" class="headerlink" title="带宽控制和下载配额"></a>带宽控制和下载配额</h3><p><code>wget --limit-rate=下载速度 http://www.example.com/testfile.zip</code></p>
<ul>
<li><code>--limit-rate=下载速度</code> 限定不超过指定的下载速度。例如：<code>--limit-rate=300k</code></li>
</ul>
<p>当你执行 wget 的时候，它默认会占用全部可能的宽带下载，但是当你准备下载一个大文件，而你还需要下载其它文件时就有必要限速了。</p>
<p>如果还需要限制下载配额，可使用选项 “<code>-Q 下载配额</code>“，下载数据超过了指定配额会停止下载。注意，该选项对于单个文件下载无效，只适用于多文件下载或递归下载，例如：<code>wget -Q 10m -i dowload.txt</code>，如果不指定下载配额会下载 download.txt 文件包含的所有 url，如果指定了下载配额为 10m，下载数据超过了 10m 会停止后面 url 的下载（一个文件正在下载过程中下载数据超过了下载配额会继续完成该文件的下载不会立即停止下载）。</p>
<h3 id="多文件下载"><a href="#多文件下载" class="headerlink" title="多文件下载"></a>多文件下载</h3><p><code>wget -i url 文件</code></p>
<ul>
<li><code>-i url 文件</code> 从指定文件获取要下载的 URL 地址</li>
</ul>
<p>如果有多个 url 资源需要下载，那么可以先生成一个文件，把下载地址的 url 按行写入该文件，然后使用 “-i” 选项指定该文件就可以批量下载了</p>
<h3 id="密码认证下载"><a href="#密码认证下载" class="headerlink" title="密码认证下载"></a>密码认证下载</h3><p><code>wget --http-user=USER --http-password=PASS http://www.example.com/testfile.zip</code></p>
<ul>
<li><code>--http-user=USER</code> 设置 http 用户名为 USER</li>
<li><code>--http-password=PASS</code> 设置 http 密码为 PASS</li>
<li><code>--ftp-user=USER</code> 设置 ftp 用户名为 USER</li>
<li><code>--ftp-password=PASS</code> 设置 ftp 密码为 PASS</li>
</ul>
<p>对于需要证书做认证的网站，就只能利用其他下载工具了，例如 curl</p>
<h3 id="递归下载"><a href="#递归下载" class="headerlink" title="递归下载"></a>递归下载</h3><p><code>wget -r http://www.example.com/path1/path2/</code></p>
<ul>
<li><code>-r</code> 递归在下整个站点（<a href="http://www.example.com)资源/">www.example.com）资源</a></li>
<li><code>-nd</code> 递归下载时不创建一层一层的目录，把所有的文件下载到当前目录；不指定该选项默认按照资源在站点位置创建相应目录</li>
<li><code>-np</code> 递归下载时不搜索上层目录，只在当前路径 path2 下进行下载；不指定该选项默认搜素整个站点</li>
<li><code>-A 后缀名</code> 指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔</li>
<li><code>-R 后缀名</code> 排除要下载文件的后缀名，多个后缀名之间使用逗号进行分隔</li>
<li><code>-L</code> 递归时不进入其它主机。不指定该选项的话，如果站点包含了外部站点的链接，这样可能会导致下载内容无限大</li>
</ul>
<p>示例，只下载 path2 路径下的所有 pdf 和 png 文件，不创建额外目录全都保存在当前下载目录下:<br><code>wget -r -nd -np -A pdf,png http://www.example.com/path1/path2/</code></p>
<h1 id="curl-命令"><a href="#curl-命令" class="headerlink" title="curl 命令"></a>curl 命令</h1><p><code>curl 命令</code>是一个利用 URL 规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称 curl 为下载工具。作为一款强力工具，curl 支持包括 HTTP、HTTPS、ftp 等众多协议，还支持 POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl 可以祝一臂之力。</p>
<h2 id="与-wget-类似的下载功能"><a href="#与-wget-类似的下载功能" class="headerlink" title="与 wget 类似的下载功能"></a>与 wget 类似的下载功能</h2><h3 id="单个文件下载"><a href="#单个文件下载" class="headerlink" title="单个文件下载"></a>单个文件下载</h3><p><code>curl [-o 自定义文件名|-O] http://www.example.com/index.html</code></p>
<ul>
<li><code>-o 自定义文件名</code> 把服务器响应输出到指定文件</li>
<li><code>-O</code> 与-o 选项作用一样，区别在于以 url 路径最后一个”/“之后的部分作为文件名</li>
</ul>
<p>如果这两个选项都不写，curl 默认会把服务器响应内容输出到终端</p>
<h3 id="断点续传-1"><a href="#断点续传-1" class="headerlink" title="断点续传"></a>断点续传</h3><p><code>curl -O -C 偏移量 http://www.example.com/testfile.zip</code></p>
<ul>
<li><code>-C 偏移量</code> 从指定的偏移量处继续下载，偏移量以字节为单位</li>
</ul>
<p>如果让 curl 自动推断出正确的续传位置可以使用 “-“ 代替偏移量，例如：<br><code>curl -O -C - http://www.example.com/testfile.zip</code></p>
<h3 id="带宽控制和下载配额-1"><a href="#带宽控制和下载配额-1" class="headerlink" title="带宽控制和下载配额"></a>带宽控制和下载配额</h3><p><code>curl -O --limit-rate 下载速度 http://www.example.com/testfile.zip</code></p>
<ul>
<li><code>--limit-rate 下载速度</code> 限定不超过指定的下载速度。例：–limit-rate 500k</li>
<li><code>--max-filesize 下载配额</code> 指定最大可下载文件大小</li>
</ul>
<h2 id="处理复杂的-web-请求"><a href="#处理复杂的-web-请求" class="headerlink" title="处理复杂的 web 请求"></a>处理复杂的 web 请求</h2><h3 id="自动跳转"><a href="#自动跳转" class="headerlink" title="自动跳转"></a>自动跳转</h3><p><code>curl -L http://www.example.com</code></p>
<ul>
<li><code>-L</code> 自动跳转到重定向链接(Location)</li>
</ul>
<p>有些链接访问时会自动跳转(响应状态码为 3xx)，-L 参数会让 HTTP 请求跟随服务器的重定向。例如：访问 “<a href="http://a.com&quot;/">http://a.com&quot;</a> 会重定向到 “<a href="http://b.com&quot;,使用&quot;-l&quot;选项会返回/">http://b.com&quot;，使用&quot;-L&quot;选项会返回</a> “<a href="http://b.com&quot;/">http://b.com&quot;</a> 的响应内容</p>
<h3 id="显示响应头信息"><a href="#显示响应头信息" class="headerlink" title="显示响应头信息"></a>显示响应头信息</h3><p><code>curl -i http://www.example.com</code></p>
<ul>
<li><code>-i</code> 输出包含响应头信息</li>
<li><code>-I</code> 输出仅包含响应头信息，不包含响应内容</li>
</ul>
<h3 id="显示通信过程"><a href="#显示通信过程" class="headerlink" title="显示通信过程"></a>显示通信过程</h3><p><code>curl -v http://www.example.com</code></p>
<ul>
<li><code>-v</code> 显示一次 http 通信的整个过程，包括端口连接和 http request 头信息</li>
</ul>
<p>如果还需要查看额外的通信信息，还可以使用选项 “<code>--trace 输出文件</code>“ 或者 “<code>--trace-ascii 输出文件</code>“，例如：<code>curl --trace-ascii output.txt http://www.example.com</code>，打开文件 “output.txt”可以查看结果。</p>
<h3 id="指定-http-请求方式"><a href="#指定-http-请求方式" class="headerlink" title="指定 http 请求方式"></a>指定 http 请求方式</h3><p><code>curl -X 请求方式 http://www.example.com/test</code></p>
<ul>
<li><code>-X 请求方式</code>指定 http 请求方式(GET|POST|DELETE|PUT 等)。默认是”GET”</li>
</ul>
<h3 id="添加-http-请求头"><a href="#添加-http-请求头" class="headerlink" title="添加 http 请求头"></a>添加 http 请求头</h3><p><code>curl -H &#39;kev:value&#39; http://www.example.com/test</code></p>
<p><code>-H &#39;kev:value&#39;</code> 添加 http 请求头。例：<code>-H &#39;Content-Type:application/json&#39;</code><br>添加多个请求头，-H 选项重复多次即可。例如：<br><code>curl -H &#39;Accept-Language: en-US&#39; -H &#39;Secret-Message: xyzzy&#39; http://www.example.com/test</code></p>
<h3 id="传递请求参数"><a href="#传递请求参数" class="headerlink" title="传递请求参数"></a>传递请求参数</h3><p><code>curl -X POST -d &#39;参数&#39; http://www.example.com/test</code></p>
<ul>
<li><code>-d &#39;参数&#39;</code> 指定 POST 请求体。参数形式可以是 “k1=v1&amp;k2=v2”, 也可以是 json 串</li>
<li><code>--data-urlencode &#39;参数&#39;</code> 与 -d 相同，区别在于会自动将发送的数据进行 URL 编码</li>
</ul>
<p>使用 -d 参数以后，HTTP 请求会自动加上标头”<code>Content-Type:application/x-www-form-urlencoded</code>“，并且会自动将请求转为 POST 方法，因此可以省略 “-X POST”。如果要发送的请求体为 json 串，需要指定”Content-Type:application/json”，例如：<br><code>curl -d &#39;&#123;&quot;user&quot;:&quot;zhangsan&quot;, &quot;password&quot;:&quot;123456&quot;&#125;&#39; -H &#39;Content-Type:application/json&#39; http://www.example.com/login</code></p>
<p>参数较多时，可以下把参数数据保存到本地文本中，然后从文本中读取参数数据。例如：<br><code>curl -d &#39;@requestData.txt&#39; -H &#39;Content-Type:application/json&#39; http://www.example.com/login</code><br>如果要以 GET 请求方式发送表单数据，可以直接把参数直接追加 url 之后。例如：<br><code>curl http://www.example.com/login?user=zhansan&amp;password=123456</code></p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p><code>curl -F &#39;file=@文件&#39; https://www.example.com/test</code></p>
<ul>
<li><code>-F &#39;file=@文件&#39;</code> 模拟 http 表单向服务器上传文件。更多参数形式：file=@文件;name1=value1;name2=value2</li>
</ul>
<p>文件上传时 -F 选项默认会给 HTTP 请求头加上 <code>Content-Type: multipart/form-data</code>，默认文件 MIME 类型为 <code>application/octet-stream</code></p>
<p>指定上传文件 MIME 类型。下面示例指定 MIME 类型为”image/png”<br><code>curl -F &#39;file=@photo.png;type=image/png&#39; https://google.com/profile</code><br>指定上传文件名。下面示例中原始文件名为”photo.png”，但是服务器接收到的文件名为 “me.png”<br><code>curl -F &#39;file=@photo.png;filename=me.png&#39; https://google.com/profile</code></p>
<h3 id="设置来源网址"><a href="#设置来源网址" class="headerlink" title="设置来源网址"></a>设置来源网址</h3><p><code>curl -e &#39;源网址&#39; https://www.example.com</code></p>
<ul>
<li><code>-e &#39;源网址&#39; 或 --referer &#39;源网址&#39;</code> 设置来源网址，即 http 请求头的 Referer 字段。和 -H 选项直接设置请求头 “Referer” 字段等效</li>
</ul>
<h3 id="设置客户端用户代理"><a href="#设置客户端用户代理" class="headerlink" title="设置客户端用户代理"></a>设置客户端用户代理</h3><p><code>curl -A &#39;代理信息&#39; https://www.example.com</code></p>
<ul>
<li><code>-A &#39;代理信息&#39; 或 --user-agent &#39;代理信息&#39;</code> 设置客户端用户代理，即 http 请求头的 User-Agent 字段。和 -H 选项直接设置请求头 “User-Agent” 字段等效</li>
</ul>
<p>将”User-Agent”改成 Chrome 浏览器，示例：<br><code>curl -A &#39;Mozilla/0 (Linux; Android 0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.3987.149 Mobile Safari/537.36&#39; https://www.example.com</code><br>移出 “User-Agent” 请求头，示例：<br><code>curl -A &#39;&#39; https://www.example.com</code></p>
<h3 id="设置-cookie"><a href="#设置-cookie" class="headerlink" title="设置 cookie"></a>设置 cookie</h3><p><code>curl -b &#39;参数&#39; https://www.example.com</code></p>
<ul>
<li><code>-b &#39;参数&#39; 或 --cookie &#39;参数&#39;</code> 设置 cookie 参数。参数形式可以是 key1=value1;key2=value2…，也可以是一个文件</li>
<li><code>-c 文件</code> 把服务器响应的 cookie 信息写入到文件中</li>
</ul>
<p>至于具体的 cookie 的值，可以从 http response 头信息的 “Set-Cookie” 字段中得到，可以保存服务器返回的 cookie 信息到文件，再用这文件作为下次请求的 cookie 信息，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -c cookies.txt http://example.com</span><br><span class="line">curl -b cookies.txt http://example.com</span><br></pre></td></tr></table></figure>

<h3 id="设置服务器认证的用户名和密码"><a href="#设置服务器认证的用户名和密码" class="headerlink" title="设置服务器认证的用户名和密码"></a>设置服务器认证的用户名和密码</h3><p><code>curl -u &#39;user[:password]&#39; https://www.example.com</code></p>
<ul>
<li><code>-u &#39;user[:password]&#39;</code> 设置服务器认证的用户名和密码。只有用户名时，执行 curl 后提示输入密码</li>
</ul>
<h1 id="wget-与-curl-对比"><a href="#wget-与-curl-对比" class="headerlink" title="wget 与 curl 对比"></a>wget 与 curl 对比</h1><p>wget 是一个独立的下载程序，无需额外的资源库，它也允许你下载网页中或是 FTP 目录中的任何内容, 能享受它超凡的下载速度，简单直接。<br>curl 是一个多功能工具，是 libcurl 这个库支持的。它可以下载网络内容，但同时它也能做更多别的事情。</p>
<p>从用途方面，wget 倾向于网络文件下载；curl 倾向于网络接口调试，相当于一个无图形界面的 PostMan 工具</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>解决vue移动端适配问题</title>
    <url>/2019/10/10/mobile/amfe-flexible/</url>
    <content><![CDATA[<h1 id="首先把安装-amfe-flexible，这里使用-npm-install"><a href="#首先把安装-amfe-flexible，这里使用-npm-install" class="headerlink" title="首先把安装 amfe-flexible，这里使用 npm install"></a>首先把安装 amfe-flexible，这里使用 npm install</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -S amfe-flexible</span><br></pre></td></tr></table></figure>

<h1 id="在入口文件-main-js-中引入"><a href="#在入口文件-main-js-中引入" class="headerlink" title="在入口文件 main.js 中引入"></a>在入口文件 main.js 中引入</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;amfe-flexible/index.js&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="在根目录的-index-html-的头部加入手机端适配的-meta-代码"><a href="#在根目录的-index-html-的头部加入手机端适配的-meta-代码" class="headerlink" title="在根目录的 index.html 的头部加入手机端适配的 meta 代码"></a>在根目录的 index.html 的头部加入手机端适配的 meta 代码</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="安装-postcss-pxtorem-是一款-postcss-插件，用于将单位转化为-rem"><a href="#安装-postcss-pxtorem-是一款-postcss-插件，用于将单位转化为-rem" class="headerlink" title="安装 postcss-pxtorem 是一款 postcss 插件，用于将单位转化为 rem"></a>安装 postcss-pxtorem 是一款 postcss 插件，用于将单位转化为 rem</h1><p>ps：前提是 ui 设计的 psd 图尺寸大小是 750*1334，这样我们在 iphone6 的模拟机上直接使用所标注的尺寸</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i postcss-pxtorem --save-dev</span><br></pre></td></tr></table></figure>

<h1 id="在-package-json-配置"><a href="#在-package-json-配置" class="headerlink" title="在 package.json 配置"></a>在 <code>package.json</code> 配置</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;postcss&quot;: &#123;</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &#123;</span><br><span class="line">      &quot;browsers&quot;: [</span><br><span class="line">        &quot;Android &gt;= 4.0&quot;,</span><br><span class="line">        <span class="string">&quot;iOS &gt;= 7&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;postcss-pxtorem&quot;: &#123;</span><br><span class="line">      &quot;rootValue&quot;: 37.5,</span><br><span class="line">      &quot;propList&quot;: [</span><br><span class="line">      <span class="string">&quot;*&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>或者在 <code>postcss.config.js</code> 中配置（此文件需要在根目录下新建）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> pxtorem = <span class="built_in">require</span>(<span class="string">&quot;postcss-pxtorem&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">&#123; file &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rootValue;</span><br><span class="line">  <span class="comment">// vant 37.5 [link](https://github.com/youzan/vant/issues/1181)</span></span><br><span class="line">  <span class="keyword">if</span> (file &amp;&amp; file.dirname &amp;&amp; file.dirname.indexOf(<span class="string">&quot;vant&quot;</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    rootValue = <span class="number">37.5</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    rootValue = <span class="number">75</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      autoprefixer(),</span><br><span class="line">      pxtorem(&#123;</span><br><span class="line">        rootValue: rootValue,</span><br><span class="line">        propList: [<span class="string">&quot;*&quot;</span>],</span><br><span class="line">        minPixelValue: <span class="number">2</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>html2canvas 图片中的文字显示模糊 图片模糊 二维码模糊</title>
    <url>/2020/11/20/mobile/html2canvas/</url>
    <content><![CDATA[<h1 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h1><p>有些 h5 项目有长按保存图片的需求，可以使用 html2canvas 来实现相对应的功能，<br>但是在项目中发现有的地方模糊不清，比如网页中有一张二维码的图片模糊，无法识别，</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>后来发现，图片之类的不要当作背景图片，也就是直接放在 <img> 标签中即可,<br>解决了<code>图片模糊</code>的问题</p>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS手机端兼容问题</title>
    <url>/2019/10/18/mobile/ios-compatibility/</url>
    <content><![CDATA[<h1 id="去除-ios-页面的-input、textarea-的自带效果（阴影、等）"><a href="#去除-ios-页面的-input、textarea-的自带效果（阴影、等）" class="headerlink" title="去除 ios 页面的 input、textarea 的自带效果（阴影、等）"></a>去除 ios 页面的 input、textarea 的自带效果（阴影、等）</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="iOS-系统上常常能看到高斯模糊-Gaussian-Blur-效果。"><a href="#iOS-系统上常常能看到高斯模糊-Gaussian-Blur-效果。" class="headerlink" title="iOS 系统上常常能看到高斯模糊(Gaussian Blur)效果。"></a>iOS 系统上常常能看到高斯模糊(Gaussian Blur)效果。</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 只支持ios端；只作用于当前元素；到目前为止，仅有Safari浏览器支持，而且还需要添加前缀：-webkit-backdrop-filter*/</span></span><br><span class="line"><span class="selector-tag">backdrop-filter</span>：<span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure>

<h1 id="屏蔽-ios-和-android-下点击元素时出现的阴影"><a href="#屏蔽-ios-和-android-下点击元素时出现的阴影" class="headerlink" title="屏蔽 ios 和 android 下点击元素时出现的阴影"></a>屏蔽 ios 和 android 下点击元素时出现的阴影</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可以同时屏蔽ios和android下点击元素时出现的阴影。备transparent的属性值在android下无效。 */</span></span><br><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span>: <span class="selector-tag">rgba</span>(255, 255, 255, 0);</span><br></pre></td></tr></table></figure>

<h1 id="改掉-ios-默认的曲边框"><a href="#改掉-ios-默认的曲边框" class="headerlink" title="改掉 ios 默认的曲边框"></a>改掉 ios 默认的曲边框</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 0;</span><br></pre></td></tr></table></figure>

<h1 id="文本框输入"><a href="#文本框输入" class="headerlink" title="文本框输入"></a>文本框输入</h1><blockquote>
<p>当文本框只能输入数字是一个很常见的需求，比如电话号码，身份证号，卡号， 数量….等等只允许数字输入，为了更好的用户体验性，直接写出 启动数字键盘的需求</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">this.style.imeMode=&#x27;disabled&#x27;;</span><br><span class="line"><span class="comment">/* imeMode有四种形式，分别是：*/</span></span><br><span class="line"><span class="comment">/* active 代表输入法为中文*/</span></span><br><span class="line"><span class="comment">/* inactive 代表输入法为英文*/</span></span><br><span class="line"><span class="comment">/* auto 代表打开输入法 (默认)*/</span></span><br><span class="line"><span class="comment">/* disable 代表关闭输入法*/</span></span><br></pre></td></tr></table></figure>

<p>问题： 发现在 Android 手机上是不行的<br>解决办法： html5 里的 input 的 type 属性可设置为 number</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 弹出数字键盘 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="IOS-11-2-2-以下系统键盘弹起遮挡输入框的问题"><a href="#IOS-11-2-2-以下系统键盘弹起遮挡输入框的问题" class="headerlink" title="IOS 11.2.2 以下系统键盘弹起遮挡输入框的问题"></a>IOS 11.2.2 以下系统键盘弹起遮挡输入框的问题</h1><p>首先要修改底部定位元素 fixed 为 absolute<br>接下来 JS 未输入框绑定聚焦事件，当输入框聚焦时，执行如下代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">var</span> ver = str.match(<span class="regexp">/cpu iphone os (.\*?) like mac os/</span>); <span class="comment">//ver 是当前 IOS 系统版本号</span></span><br><span class="line"><span class="keyword">var</span> arr = ver[<span class="number">1</span>].replace(<span class="regexp">/\_/g</span>, <span class="string">&quot;.&quot;</span>).split(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (arr[<span class="number">0</span>] &lt; <span class="number">11</span> || (arr[<span class="number">0</span>] &gt; <span class="number">11</span> &amp;&amp; arr[<span class="number">2</span>] &gt; <span class="number">1</span>)) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">window</span>).scrollTop(<span class="number">1000</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个解决方法还是会有一个小问题，那就是键盘弹起时不太流畅</p>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>富文本渲染样式约定</title>
    <url>/2020/08/14/mobile/rich-text/</url>
    <content><![CDATA[<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.richText</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line"></span><br><span class="line">  * &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-attr">[data-src]</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">white-space</span>: pre-wrap <span class="meta">!important</span>;</span><br><span class="line">    *<span class="attribute">white-space</span>: normal <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>判断当前终端</title>
    <url>/2019/09/12/mobile/terminal/</url>
    <content><![CDATA[<h1 id="判断是否-PC"><a href="#判断是否-PC" class="headerlink" title="判断是否 PC"></a>判断是否 PC</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="regexp">/(iPhone|iPad|iPod|iOS|Android)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;当前为pc&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;当前为H5&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="判断是否在微信打开"><a href="#判断是否在微信打开" class="headerlink" title="判断是否在微信打开"></a>判断是否在微信打开</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_weixin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">  <span class="keyword">if</span> (ua.match(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">&quot;micromessenger&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="判断当前手机内核"><a href="#判断当前手机内核" class="headerlink" title="判断当前手机内核"></a>判断当前手机内核</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line"><span class="keyword">if</span> (ua.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是IOS终端&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是Android终端&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库基本操作</title>
    <url>/2021/04/29/mysql/basic/</url>
    <content><![CDATA[<h1 id="MySQL-创建数据库"><a href="#MySQL-创建数据库" class="headerlink" title="MySQL 创建数据库"></a>MySQL 创建数据库</h1><p>我们可以在登陆 MySQL 服务后，使用 create 命令创建数据库，语法如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名;</span><br></pre></td></tr></table></figure>

<p>以下命令简单的演示了创建数据库的过程，数据名为 SXT:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:******  <span class="comment"># 登录后进入终端</span></span><br><span class="line">​</span><br><span class="line">mysql&gt; create DATABASE SXT;</span><br></pre></td></tr></table></figure>

<h1 id="使用-mysqladmin-创建数据库"><a href="#使用-mysqladmin-创建数据库" class="headerlink" title="使用 mysqladmin 创建数据库"></a>使用 mysqladmin 创建数据库</h1><p>使用普通用户，你可能需要特定的权限来创建或者删除 MySQL 数据库。</p>
<p>所以我们这边使用 root 用户登录，root 用户拥有最高权限，可以使用 mysql mysqladmin 命令来创建数据库。</p>
<p>以下命令简单的演示了创建数据库的过程，数据名为 SXT:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysqladmin -u root -p create SXT</span></span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure>

<p>以上命令执行成功后会创建 MySQL 数据库 SXT。</p>
<h1 id="MySQL-删除数据库"><a href="#MySQL-删除数据库" class="headerlink" title="MySQL 删除数据库"></a>MySQL 删除数据库</h1><p>使用普通用户登陆 MySQL 服务器，你可能需要特定的权限来创建或者删除 MySQL 数据库，所以我们这边使用 root 用户登录，root 用户拥有最高权限。</p>
<p>在删除数据库过程中，务必要十分谨慎，因为在执行删除命令后，所有数据将会消失。</p>
<h2 id="drop-命令删除数据库"><a href="#drop-命令删除数据库" class="headerlink" title="drop 命令删除数据库"></a>drop 命令删除数据库</h2><p>drop 命令格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure>

<p>例如删除名为 SXT 的数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database SXT;</span><br></pre></td></tr></table></figure>

<h1 id="MySQL-创建数据表"><a href="#MySQL-创建数据表" class="headerlink" title="MySQL 创建数据表"></a>MySQL 创建数据表</h1><p>创建 MySQL 数据表需要以下信息：</p>
<ul>
<li>表名</li>
<li>表字段名</li>
<li>定义每个表字段</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>以下为创建 MySQL 数据表的 SQL 通用语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (column_name column_type);</span><br></pre></td></tr></table></figure>

<p>以下例子中我们将在 sxt 数据库中创建数据表 sxt_tbl：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`sxt_tbl`</span>(</span><br><span class="line">   <span class="string">`sxt_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT,</span><br><span class="line">   <span class="string">`sxt_title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="string">`sxt_author`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="string">`submission_date`</span> <span class="built_in">DATE</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> ( <span class="string">`sxt_id`</span> )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<p><strong>实例解析：</strong></p>
<ul>
<li>如果你不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为 NULL ，就会报错。</li>
<li>AUTO_INCREMENT 定义列为自增的属性，一般用于主键，数值会自动加 1。</li>
<li>PRIMARY KEY 关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li>
<li>ENGINE 设置存储引擎，CHARSET 设置编码。</li>
</ul>
<h1 id="MySQL-删除数据表"><a href="#MySQL-删除数据表" class="headerlink" title="MySQL 删除数据表"></a>MySQL 删除数据表</h1><p>MySQL 中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。</p>
<h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>以下为删除 MySQL 数据表的通用语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name ;</span><br></pre></td></tr></table></figure>

<h2 id="在命令提示窗口中删除数据表"><a href="#在命令提示窗口中删除数据表" class="headerlink" title="在命令提示窗口中删除数据表"></a>在命令提示窗口中删除数据表</h2><p>在 mysql&gt;命令提示窗口中删除数据表 SQL 语句为 DROP TABLE ：</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以下实例删除了数据表 runoob_tbl:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@host<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; DROP TABLE sxt_tbl</span><br><span class="line">Query OK, 0 rows affected (0.8 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<h1 id="MySQL-选择数据库"><a href="#MySQL-选择数据库" class="headerlink" title="MySQL 选择数据库"></a>MySQL 选择数据库</h1><p>在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。</p>
<h2 id="从命令提示窗口中选择-MySQL-数据库"><a href="#从命令提示窗口中选择-MySQL-数据库" class="headerlink" title="从命令提示窗口中选择 MySQL 数据库"></a>从命令提示窗口中选择 MySQL 数据库</h2><p>在 mysql&gt; 提示窗口中可以很简单的选择特定的数据库。你可以使用 SQL 命令来选择指定的数据库。</p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>以下实例选取了数据库 SXT:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:******</span><br><span class="line">mysql&gt; use SXT;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>执行以上命令后，你就已经成功选择了 SXT 数据库，在后续的操作中都会在 SXT 数据库中执行。</p>
<p>**注意:**所有的数据库名，表名，表字段都是区分大小写的。所以你在使用 SQL 命令时需要输入正确的名称。</p>
<h1 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h1><p>MySQL 中定义数据字段的类型对你数据库的优化是非常重要的。</p>
<p>MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p>
<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>MySQL 支持所有标准 SQL 数值数据类型。</p>
<p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型(FLOAT、REAL 和 DOUBLE PRECISION)。</p>
<p>关键字 INT 是 INTEGER 的同义词，关键字 DEC 是 DECIMAL 的同义词。</p>
<p>BIT 数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。</p>
<p>作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围（有符号）</th>
<th>范围（无符号）</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1 字节</td>
<td>(-128，127)</td>
<td>(0，255)</td>
<td>小整数值</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2 字节</td>
<td>(-32 768，32 767)</td>
<td>(0，65 535)</td>
<td>大整数值</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3 字节</td>
<td>(-8 388 608，8 388 607)</td>
<td>(0，16 777 215)</td>
<td>大整数值</td>
</tr>
<tr>
<td>INT 或 INTEGER</td>
<td>4 字节</td>
<td>(-2 147 483 648，2 147 483 647)</td>
<td>(0，4 294 967 295)</td>
<td>大整数值</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8 字节</td>
<td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>
<td>(0，18 446 744 073 709 551 615)</td>
<td>极大整数值</td>
</tr>
<tr>
<td>FLOAT</td>
<td>4 字节</td>
<td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
<td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td>单精度 浮点数值</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8 字节</td>
<td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td>双精度 浮点数值</td>
</tr>
<tr>
<td>DECIMAL</td>
<td>对 DECIMAL(M,D) ，如果 M&gt;D，为 M+2 否则为 D+2</td>
<td>依赖于 M 和 D 的值</td>
<td>依赖于 M 和 D 的值</td>
<td>小数值</td>
</tr>
</tbody></table>
<h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>表示时间值的日期和时间类型为 DATETIME、DATE、TIMESTAMP、TIME 和 YEAR。</p>
<p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的 MySQL 不能表示的值时使用”零”值。</p>
<p>TIMESTAMP 类型有专有的自动更新特性，将在后面描述。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小 (字节)</th>
<th>范围</th>
<th>格式</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>DATE</td>
<td>3</td>
<td>1000-01-01/9999-12-31</td>
<td>YYYY-MM-DD</td>
<td>日期值</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
<td>‘-838:59:59’/‘838:59:59’</td>
<td>HH:MM:SS</td>
<td>时间值或持续时间</td>
</tr>
<tr>
<td>YEAR</td>
<td>1</td>
<td>1901/2155</td>
<td>YYYY</td>
<td>年份值</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
<td>1000-01-01 00:00:00/9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合日期和时间值</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4</td>
<td>1970-01-01 00:00:00/2038 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07</td>
<td>YYYYMMDD HHMMSS</td>
<td>混合日期和时间值，时间戳</td>
</tr>
</tbody></table>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR</td>
<td>0-255 字节</td>
<td>定长字符串</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>0-65535 字节</td>
<td>变长字符串</td>
</tr>
<tr>
<td>TINYBLOB</td>
<td>0-255 字节</td>
<td>不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>0-255 字节</td>
<td>短文本字符串</td>
</tr>
<tr>
<td>BLOB</td>
<td>0-65 535 字节</td>
<td>二进制形式的长文本数据</td>
</tr>
<tr>
<td>TEXT</td>
<td>0-65 535 字节</td>
<td>长文本数据</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0-16 777 215 字节</td>
<td>二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0-16 777 215 字节</td>
<td>中等长度文本数据</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0-4 294 967 295 字节</td>
<td>二进制形式的极大文本数据</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0-4 294 967 295 字节</td>
<td>极大文本数据</td>
</tr>
</tbody></table>
<p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>
<p>BINARY 和 VARBINARY 类似于 CHAR 和<br>VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>
<p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p>
<p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p>
<h1 id="SQL-插入数据"><a href="#SQL-插入数据" class="headerlink" title="SQL 插入数据"></a>SQL 插入数据</h1><p>MySQL 表中使用 INSERT INTO SQL 语句来插入数据。</p>
<p>你可以通过 mysql&gt; 命令提示窗口中向数据表中插入数据，或者通过 PHP 脚本来插入数据。</p>
<p>语法<br>以下为向 MySQL 数据表插入数据通用的 INSERT INTO SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>

<p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p>
<h2 id="通过命令提示窗口插入数据"><a href="#通过命令提示窗口插入数据" class="headerlink" title="通过命令提示窗口插入数据"></a>通过命令提示窗口插入数据</h2><p>以下我们将使用 SQL INSERT INTO 语句向 MySQL 数据表 SXT 插入数据</p>
<h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p>以下实例中我们将向 SXT 表插入三条数据:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@host<span class="comment"># mysql -u root -p password;</span></span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use SXT;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; INSERT INTO SXTl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (<span class="string">&quot;学习 PHP&quot;</span>, <span class="string">&quot;SXT&quot;</span>, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, SXT, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (<span class="string">&quot;学习 MySQL&quot;</span>, <span class="string">&quot;SXT&quot;</span>, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, SXT_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (<span class="string">&quot;JAVA 教程&quot;</span>, <span class="string">&quot;SXT.COM&quot;</span>, <span class="string">&#x27;2016-05-06&#x27;</span>);</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 使用箭头标记 -&gt; 不是 SQL<br>语句的一部分，它仅仅表示一个新行，如果一条 SQL 语句太长，我们可以通过回车键来创建一个新行来编写 SQL 语句，SQL 语句的命令结束符为分号<code>;</code>。</p>
<h1 id="MySQL-UPDATE-更新"><a href="#MySQL-UPDATE-更新" class="headerlink" title="MySQL UPDATE 更新"></a>MySQL UPDATE 更新</h1><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。</p>
<h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1=<span class="keyword">new</span>-value1, field2=<span class="keyword">new</span>-value2</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>你可以同时更新一个或多个字段。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以在一个单独表中同时更新数据。</li>
</ul>
<p>当你需要更新数据表中指定行的数据时 WHERE 子句是非常有用的。</p>
<p>通过命令提示符更新数据</p>
<p>以下我们将在 SQL UPDATE 命令使用 WHERE 子句来更新 runoob_tbl 表中指定的数据：</p>
<h1 id="MySQL-DELETE-语句"><a href="#MySQL-DELETE-语句" class="headerlink" title="MySQL DELETE 语句"></a>MySQL DELETE 语句</h1><p>你可以使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录。</p>
<p>你可以在 mysql&gt; 命令提示符或 PHP 脚本中执行该命令。</p>
<h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><p>以下是 SQL DELETE 语句从 MySQL 数据表中删除数据的通用语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li>
<li>你可以在 WHERE 子句中指定任何条件</li>
<li>您可以在单个表中一次性删除记录。</li>
</ul>
<p>当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。</p>
<h2 id="从命令行中删除数据"><a href="#从命令行中删除数据" class="headerlink" title="从命令行中删除数据"></a>从命令行中删除数据</h2><p>这里我们将在 SQL DELETE 命令中使用 WHERE 子句来删除 MySQL 数据表 runoob_tbl 所选的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询视图内容等同于查询表操作</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> bookallinfo <span class="keyword">where</span> cataory = <span class="string">&#x27;历史传记&#x27;</span>;</span><br><span class="line"><span class="comment">-- 视图实现模糊查找</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> bookallinfo <span class="keyword">where</span> bookname <span class="keyword">like</span> <span class="string">&quot;%小%&quot;</span>;</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 更新多字段</span></span><br><span class="line"><span class="keyword">UPDATE</span> booktable <span class="keyword">SET</span> bookname = <span class="string">&quot;小时代1&quot;</span>,authorid=<span class="number">0</span>,score = <span class="literal">NULL</span>  <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="comment">-- 逻辑删除和物理删除</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 逻辑删除小时代书</span></span><br><span class="line"><span class="keyword">UPDATE</span> booktable <span class="keyword">set</span> isdelete = <span class="string">&quot;true&quot;</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">-- 物理删除</span></span><br><span class="line"><span class="comment">-- DELETE from booktable WHERE bookname = &quot;鬼吹灯&quot;</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> booktable</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>查询基本操作</title>
    <url>/2021/04/30/mysql/query/</url>
    <content><![CDATA[<h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><blockquote>
<p>使用 where 子句对表中的数据筛选，结果为 true 的行会出现在结果集中</p>
</blockquote>
<p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>

<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><ul>
<li>等于=</li>
<li>大于&gt;</li>
<li>大于等于&gt;=</li>
<li>小于&lt;</li>
<li>小于等于&lt;=</li>
<li>不等于!=或&lt;&gt;</li>
</ul>
<p>查询编号大于 3 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>查询编号不大于 4 的科目</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> subjects <span class="keyword">where</span> <span class="keyword">id</span>&lt;=<span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p>查询姓名不是“黄蓉”的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> sname!=<span class="string">&#x27;黄蓉&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>查询没被删除的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> isdelete=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul>
<li>and</li>
<li>or</li>
<li>not</li>
</ul>
<p>查询编号大于 3 的女同学</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">3</span> <span class="keyword">and</span> gender=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>查询编号小于 4 或没被删除的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span>&lt;<span class="number">4</span> <span class="keyword">or</span> isdelete=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="模糊查询-like"><a href="#模糊查询-like" class="headerlink" title="模糊查询 like"></a>模糊查询 like</h2><ul>
<li>%表示任意多个任意字符</li>
<li>_表示一个任意字符</li>
</ul>
<p>查询姓黄的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;黄%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>查询姓黄并且名字是一个字的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;黄_&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>查询姓黄或叫靖的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;黄%&#x27;</span> <span class="keyword">or</span> sname <span class="keyword">like</span> <span class="string">&#x27;%靖%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h2><h3 id="in-表示在一个非连续的范围内"><a href="#in-表示在一个非连续的范围内" class="headerlink" title="in 表示在一个非连续的范围内"></a>in 表示在一个非连续的范围内</h3><p>查询编号是 1 或 3 或 8 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<h3 id="between-…-and-…表示在一个连续的范围内"><a href="#between-…-and-…表示在一个连续的范围内" class="headerlink" title="between … and …表示在一个连续的范围内"></a>between … and …表示在一个连续的范围内</h3><p>查询学生是 3 至 8 的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<p>查询学生是 3 至 8 的男生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">8</span> <span class="keyword">and</span> gender=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h2><ul>
<li>注意：null 与’’是不同的</li>
</ul>
<h3 id="判空-is-null"><a href="#判空-is-null" class="headerlink" title="判空 is null"></a>判空 is null</h3><p>查询没有填写地址的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> hometown <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="判非空-is-not-null"><a href="#判非空-is-not-null" class="headerlink" title="判非空 is not null"></a>判非空 is not null</h3><p>查询填写了地址的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> hometown <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>查询填写了地址的女生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> hometown <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> gender=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><ul>
<li>小括号，not，比较运算符，逻辑运算符</li>
<li>and 比 or 先运算，如果同时出现并希望先算 or，需要结合()使用</li>
</ul>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>为了方便查看数据，可以对数据进行排序</p>
<p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 列<span class="number">1</span> <span class="keyword">asc</span>|<span class="keyword">desc</span>,列<span class="number">2</span> <span class="keyword">asc</span>|<span class="keyword">desc</span>,...</span><br></pre></td></tr></table></figure>

<ul>
<li>将行数据按照列 1 进行排序，如果某些行列 1 的值相同时，则按照列 2 排序，以此类推</li>
<li>默认按照列值从小到大排列</li>
<li>asc 从小到大排列，即升序</li>
<li>desc 从大到小排序，即降序</li>
</ul>
<p>查询未删除男生学生信息，按学号降序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">where</span> gender=<span class="number">1</span> <span class="keyword">and</span> isdelete=<span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<p>查询未删除科目信息，按名称升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> subject</span><br><span class="line"><span class="keyword">where</span> isdelete=<span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> stitle;</span><br></pre></td></tr></table></figure>

<h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>为了快速得到统计数据，提供了 5 个聚合函数<br>count(*)表示计算总行数，括号中写星与列名，结果是相同的</p>
<p>查询学生总数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure>

<h2 id="max-列-表示求此列的最大值"><a href="#max-列-表示求此列的最大值" class="headerlink" title="max(列)表示求此列的最大值"></a>max(列)表示求此列的最大值</h2><p>查询女生的编号最大值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> students <span class="keyword">where</span> gender=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="min-列-表示求此列的最小值"><a href="#min-列-表示求此列的最小值" class="headerlink" title="min(列)表示求此列的最小值"></a>min(列)表示求此列的最小值</h2><p>查询未删除的学生最小编号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">from</span> students <span class="keyword">where</span> isdelete=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="sum-列-表示求此列的和"><a href="#sum-列-表示求此列的和" class="headerlink" title="sum(列)表示求此列的和"></a>sum(列)表示求此列的和</h2><p>查询男生的编号之后</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(<span class="keyword">id</span>) <span class="keyword">from</span> students <span class="keyword">where</span> gender=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="avg-列-表示求此列的平均值"><a href="#avg-列-表示求此列的平均值" class="headerlink" title="avg(列)表示求此列的平均值"></a>avg(列)表示求此列的平均值</h2><p>查询未删除女生的编号平均值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">id</span>) <span class="keyword">from</span> students <span class="keyword">where</span> isdelete=<span class="number">0</span> <span class="keyword">and</span> gender=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><ul>
<li>按照字段分组，表示此字段相同的数据会被放到一个组中</li>
<li>分组后，只能查询出相同的数据列，对于有差异的数据列无法出现在结果集中</li>
<li>可以对分组后的数据进行统计，做聚合运算</li>
</ul>
<p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1</span>,列<span class="number">2</span>,聚合... <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 列<span class="number">1</span>,列<span class="number">2</span>,列<span class="number">3.</span>..</span><br></pre></td></tr></table></figure>

<p>查询男女生总数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gender <span class="keyword">as</span> 性别,<span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure>

<p>查询各城市人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> hometown <span class="keyword">as</span> 家乡,<span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> hometown;</span><br></pre></td></tr></table></figure>

<h2 id="分组后的数据筛选"><a href="#分组后的数据筛选" class="headerlink" title="分组后的数据筛选"></a>分组后的数据筛选</h2><p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列<span class="number">1</span>,列<span class="number">2</span>,聚合... <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 列<span class="number">1</span>,列<span class="number">2</span>,列<span class="number">3.</span>..</span><br><span class="line"><span class="keyword">having</span> 列<span class="number">1</span>,...聚合...</span><br></pre></td></tr></table></figure>

<p><strong>having 后面的条件运算符与 where 的相同</strong></p>
<p>查询男生总人数</p>
<p>方案一</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">where</span> gender=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>方案二：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gender <span class="keyword">as</span> 性别,<span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender</span><br><span class="line"><span class="keyword">having</span> gender=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="对比-where-与-having"><a href="#对比-where-与-having" class="headerlink" title="对比 where 与 having"></a>对比 where 与 having</h2><ul>
<li>where 是对 from 后面指定的表进行数据筛选，属于对原始数据的筛选</li>
<li>having 是对 group by 的结果进行筛选</li>
</ul>
<h1 id="获取部分行"><a href="#获取部分行" class="headerlink" title="获取部分行"></a>获取部分行</h1><p>当数据量过大时，在一页中查看数据是一件非常麻烦的事情</p>
<p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">limit</span> <span class="keyword">start</span>,<span class="keyword">count</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从 start 开始，获取 count 条数据</li>
<li>start 索引从 0 开始</li>
</ul>
<p><strong>示例：分页</strong></p>
<ul>
<li>已知：每页显示 m 条数据，当前显示第 n 页</li>
<li>求总页数：此段逻辑后面会在 python 中实现<ul>
<li>查询总条数 p1</li>
<li>使用 p1 除以 m 得到 p2</li>
<li>如果整除则 p2 为总数页</li>
<li>如果不整除则 p2+1 为总页数</li>
</ul>
</li>
<li>求第 n 页的数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students</span><br><span class="line"><span class="keyword">where</span> isdelete=<span class="number">0</span></span><br><span class="line"><span class="keyword">limit</span> (n<span class="number">-1</span>)*m,m</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Egg.js</title>
    <url>/2021/04/19/nodeJs/eggJs/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://eggjs.org/zh-cn/">Egg.js 官网</a></p>
<p>Egg.js 是《阿里旗下产品》基于 Node.js 和 Koa 是一个 Nodejs 的企业级应用开发框架。 可以帮助发团队和开发人员降低开发和维护成本。<br>Express 和 Koa 是 Node.js 社区广泛使用的框架，简单且扩展性强，非常适合做个人项 目。但框架本身缺少约定，标准的 MVC 模型会有各种千奇百怪的写法。Egg 按照约定进行 开发，奉行『约定优于配置』，团队协作成本低。<br>Egg.js 基于 Es6、Es7 以及 Typescript、Koa2 使得 Nodejs 具有更规范的开发模式、更低 的学习成本、更优雅的代码、更少的开发成本、更少的维护成本。为企业级框架而生。</p>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol>
<li>提供基于 Egg 定制上层框架的能力</li>
<li>高度可扩展的插件机制</li>
<li>内置多进程管理</li>
<li>基于 Koa 开发，性能优异</li>
<li>框架稳定，测试覆盖率高</li>
<li>渐进式开发</li>
</ol>
<h1 id="Egg-快速入门、搭建环境、创建项目"><a href="#Egg-快速入门、搭建环境、创建项目" class="headerlink" title="Egg 快速入门、搭建环境、创建项目"></a>Egg 快速入门、搭建环境、创建项目</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>操作系统：支持 macOS，Linux，Windows<br>运行环境：Nodejs 建议选择 LTS 版本，Nodejs 最低要求 8.x。</p>
<h2 id="安装-egg-脚手架以及使用-egg-init-创建项目"><a href="#安装-egg-脚手架以及使用-egg-init-创建项目" class="headerlink" title="安装 egg 脚手架以及使用 egg-init 创建项目"></a>安装 egg 脚手架以及使用 egg-init 创建项目</h2><p>我们推荐直接使用脚手架，只需几条简单指令，即可快速生成项目:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i egg-init -g</span><br><span class="line">egg-init egg-example --<span class="built_in">type</span>=simple</span><br><span class="line"><span class="built_in">cd</span> egg-example</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure>

<p>启动项目:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h1 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h1><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">|-- .idea idea配置文件</span></span><br><span class="line"><span class="string">|-- app 项目开发目录*</span></span><br><span class="line">    <span class="string">|-- router.js</span></span><br><span class="line">    <span class="string">|-- controller 控制器</span></span><br><span class="line">    <span class="string">|-- service(可选) 数据模型</span></span><br><span class="line">    <span class="string">|-- middleware(可选)</span></span><br><span class="line">    <span class="string">|-- public(可选) 静态资源目录</span></span><br><span class="line">        <span class="string">|-- reset.css</span></span><br><span class="line">    <span class="string">|-- view(可选) 视图</span></span><br><span class="line"><span class="string">|-- config 项目配置文件*</span></span><br><span class="line">    <span class="string">|-- plugin.js</span></span><br><span class="line">    <span class="string">|-- config.default.js</span></span><br><span class="line">    <span class="string">|-- config.prod.js</span></span><br><span class="line"><span class="string">|-- logs 日志文件*</span></span><br><span class="line"><span class="string">|-- node_modules</span></span><br><span class="line"><span class="string">|-- run 项目运行配置文件</span></span><br><span class="line"><span class="string">|-- test 测试文件</span></span><br><span class="line"><span class="string">|-- package.json 项目配置文件 管理项目模块等元数据*</span></span><br><span class="line"><span class="string">|-- appveyor.yml</span></span><br><span class="line"><span class="string">|-- jsconfig.json</span></span><br><span class="line"><span class="string">|-- README.md</span></span><br><span class="line"><span class="string">|-- typings</span></span><br><span class="line"><span class="string">|-- yarn.lock</span></span><br></pre></td></tr></table></figure>

<p>app 的类型是 Egg.Application，是全局应用对象，在每个项目中只会实例化一次，也就是说 egg.js 默认把 router,controller 集成好了。</p>
<p>controller 里放置个个业务模块；</p>
<p>egg.js 使用规范：文件名小写，类名首字母大写并使用驼峰命名；</p>
<p>egg.js 框架中使用同步编程模式＝&gt; async…await;</p>
<p>ctx 每次用户在使用时，框架就会实例化的一个 Egg.content 上下文，content 用来存放用户请求的一些信息；</p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>Router 主要用来描述请求 URL 和具体承担执行动作的 Controller 的对应关系， 框架约定了 app/router.js 文件用于统一所有路由规则。</p>
<p>通过统一的配置，我们可以避免路由规则逻辑散落在多个地方，从而出现未知的冲突，集中在一起我们可以更方便的来查看全局的路由规则。</p>
<h2 id="定义-Router"><a href="#定义-Router" class="headerlink" title="定义 Router"></a>定义 Router</h2><ul>
<li>app/router.js 里面定义 URL 路由规则</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Egg.Application&#125;</span> <span class="variable">app</span></span> - egg application</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line"></span><br><span class="line">  router.get(<span class="string">&quot;/&quot;</span>, controller.home.index);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h1><p>Controller 负责解析用户的输入，处理后返回相应的结果。框架推荐 Controller 层主要对用户的请求参数进行处理（校验、转换），然后调用对应的 service 方法处理业务，得到业务结果后封装并返回：</p>
<ol>
<li>获取用户通过 HTTP 传递过来的请求参数。</li>
<li>校验、组装参数。</li>
<li>调用 Service 进行业务处理，必要时处理转换 Service 的返回结果，让它适应用户的需求。</li>
<li>通过 HTTP 将结果响应给用户。</li>
</ol>
<h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><blockquote>
<p><strong><a href="/2021/04/19/nodeJs/http/" title="GET、POST、PUT、DELETE的区别">GET、POST、PUT、DELETE的区别</a></strong><br>1、POST 创建<br>2、DELETE 删除<br>3、PUT 更新<br>4、GET 查看</p>
</blockquote>
<h2 id="get-请求两种传参"><a href="#get-请求两种传参" class="headerlink" title="get 请求两种传参"></a>get 请求两种传参</h2><blockquote>
<p>put 和 delete 请求传参格式与 get 请求一致</p>
</blockquote>
<ol>
<li>params</li>
</ol>
<p>路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/news/detail/:id&quot;</span>, controller.news.detail);</span><br></pre></td></tr></table></figure>

<p>获取方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  detail() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// egg获取动态路由参数 /detail/123</span></span><br><span class="line">    <span class="keyword">var</span> params = ctx.params || &#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line"></span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      code: <span class="number">0</span>,</span><br><span class="line">      data: &#123; params &#125;,</span><br><span class="line">      msg: <span class="string">&quot;请求成功&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>query</li>
</ol>
<p>路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/news/updateId&quot;</span>, controller.news.updateId);</span><br></pre></td></tr></table></figure>

<p>获取方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> updateId() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// egg get 请求获取body中的参数  updateId?id=456</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> ctx.query;</span><br><span class="line"></span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      code: <span class="number">0</span>,</span><br><span class="line">      data,</span><br><span class="line">      msg: <span class="string">&quot;修改成功&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="post-请求传参"><a href="#post-请求传参" class="headerlink" title="post 请求传参"></a>post 请求传参</h2><p>路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&quot;/news/add&quot;</span>, controller.news.add);</span><br></pre></td></tr></table></figure>

<p>获取方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> add() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// egg post请求获取body中的参数</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> ctx.request.body;</span><br><span class="line"></span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      code: <span class="number">0</span>,</span><br><span class="line">      data,</span><br><span class="line">      msg: <span class="string">&quot;添加成功&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><ol>
<li>安装对应的插件 egg-mysql ：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save egg-mysql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>开启插件：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mysql: &#123;</span><br><span class="line">    enable: <span class="literal">true</span>,</span><br><span class="line">    package: <span class="string">&quot;egg-mysql&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>单数据源</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line"></span><br><span class="line">config.mysql = &#123;</span><br><span class="line">  <span class="comment">// 单数据库信息配置</span></span><br><span class="line">  client: &#123;</span><br><span class="line">    <span class="comment">// host</span></span><br><span class="line">    host: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="string">&quot;0000&quot;</span>,</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    user: <span class="string">&quot;username&quot;</span>,</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    password: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">    <span class="comment">// 数据库名</span></span><br><span class="line">    database: <span class="string">&quot;dbname&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否加载到 app 上，默认开启</span></span><br><span class="line">  app: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否加载到 agent 上，默认关闭</span></span><br><span class="line">  agent: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="sequelize"><a href="#sequelize" class="headerlink" title="sequelize"></a>sequelize</h1><ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save egg-sequelize mysql2</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>开启插件：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  sequelize: &#123;</span><br><span class="line">    enable: <span class="literal">true</span>,</span><br><span class="line">    package: <span class="string">&quot;egg-sequelize&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编写 sequelize 配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line"></span><br><span class="line">config.sequelize = &#123;</span><br><span class="line">  Sequelize: <span class="built_in">require</span>(<span class="string">&quot;sequelize&quot;</span>),</span><br><span class="line">  dialect: <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">  database: <span class="string">&quot;test_ry&quot;</span>,</span><br><span class="line">  host: <span class="string">&quot;47.94.214.227&quot;</span>,</span><br><span class="line">  port: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">  username: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  password: <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="service"><a href="#service" class="headerlink" title="service"></a>service</h1><ol>
<li>router.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>/service/article.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">&quot;egg&quot;</span>).Service;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ArticleService;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>/controller/article.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">&quot;egg&quot;</span>).Controller;</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&quot;moment&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ArticleController;</span><br></pre></td></tr></table></figure>

<h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><ol>
<li>router.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&quot;/article/create&quot;</span>, controller.article.create);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>/service/article.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> create(params) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; app &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = app.mysql.insert(<span class="string">&quot;newsList&quot;</span>, params);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>/controller/article.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> create() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ctx, service &#125; = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    ...ctx.request.body,</span><br><span class="line">    create_time: moment().format(<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> service.article.create(data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      status: <span class="number">200</span>,</span><br><span class="line">      data: result</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      status: <span class="number">500</span>,</span><br><span class="line">      msg: <span class="string">&quot;发布文章失败&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><ol>
<li>router.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.delete(<span class="string">&quot;/article/delete/:id&quot;</span>, controller.article.delete);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>/service/article.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">delete</span>(id) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;id必须传递&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="built_in">this</span>.app.mysql.delete(<span class="string">&quot;newsList&quot;</span>, &#123; id &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>/controller/article.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">delete</span>() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ctx, service &#125; = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> service.article.delete(ctx.params.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      status: <span class="number">200</span>,</span><br><span class="line">      data: result</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      status: <span class="number">500</span>,</span><br><span class="line">      msg: <span class="string">&quot;删除文章失败&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><ol>
<li>router.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/article/lists&quot;</span>, controller.article.lists);</span><br><span class="line">router.get(<span class="string">&quot;/article/detail/:id&quot;</span>, controller.article.detail);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>/service/article.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> lists() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; app &#125; = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> app.mysql.select(<span class="string">&quot;newsList&quot;</span>, &#123;</span><br><span class="line">      orders: [[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;desc&quot;</span>]],</span><br><span class="line">      limit: <span class="number">2</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> detail(id) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;id必须传递&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="built_in">this</span>.app.mysql.get(<span class="string">&quot;newsList&quot;</span>, &#123; id &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>/controller/article.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> lists() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ctx, service &#125; = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> service.article.lists();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      status: <span class="number">200</span>,</span><br><span class="line">      data: result</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      status: <span class="number">500</span>,</span><br><span class="line">      msg: <span class="string">&quot;查询文章列表失败&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> detail() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ctx, service &#125; = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> service.article.detail(ctx.params.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      status: <span class="number">200</span>,</span><br><span class="line">      data: result</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      status: <span class="number">500</span>,</span><br><span class="line">      msg: <span class="string">&quot;查询文章详情失败&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>fs 模块 - 本地文件的读写能力</title>
    <url>/2020/09/11/nodeJs/fs/</url>
    <content><![CDATA[<p><code>fs</code>是<code>filesystem</code>的缩写，该模块提供本地文件的读写能力，基本上是 POSIX 文件操作命令的简单包装。但是，这个模块几乎对所有操作提供异步和同步两种操作方式，供开发者选择。</p>
<h2 id="readFile-，readFileSync"><a href="#readFile-，readFileSync" class="headerlink" title="readFile()，readFileSync()"></a>readFile()，readFileSync()</h2><p><code>readFile</code>方法用于异步读取数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readFile(<span class="string">&quot;./image.png&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, buffer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  process(buffer);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>readFile</code>方法的第一个参数是文件的路径，可以是绝对路径，也可以是相对路径。注意，如果是相对路径，是相对于当前进程所在的路径（<code>process.cwd()</code>），而不是相对于当前脚本所在的路径。</p>
<p><code>readFile</code>方法的第二个参数是读取完成后的回调函数。该函数的第一个参数是发生错误时的错误对象，第二个参数是代表文件内容的<code>Buffer</code>实例。</p>
<p><code>readFileSync</code>方法用于同步读取文件，返回一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = fs.readFileSync(fileName, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件按行拆成数组</span></span><br><span class="line">text.split(<span class="regexp">/\r?\n/</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>readFileSync</code>方法的第一个参数是文件路径，第二个参数可以是一个表示配置的对象，也可以是一个表示文本文件编码的字符串。默认的配置对象是<code>&#123; encoding: null, flag: &#39;r&#39; &#125;</code>，即文件编码默认为<code>null</code>，读取模式默认为<code>r</code>（只读）。如果第二个参数不指定编码（<code>encoding</code>），<code>readFileSync</code>方法返回一个<code>Buffer</code>实例，否则返回的是一个字符串。</p>
<p>不同系统的行结尾字符不同，可以用下面的方法判断。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一，查询现有的行结尾字符</span></span><br><span class="line"><span class="keyword">var</span> EOL = fileContents.indexOf(<span class="string">&quot;\r\n&quot;</span>) &gt;= <span class="number">0</span> ? <span class="string">&quot;\r\n&quot;</span> : <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二，根据当前系统处理</span></span><br><span class="line"><span class="keyword">var</span> EOL = process.platform === <span class="string">&quot;win32&quot;</span> ? <span class="string">&quot;\r\n&quot;</span> : <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="writeFile-，writeFileSync"><a href="#writeFile-，writeFileSync" class="headerlink" title="writeFile()，writeFileSync()"></a>writeFile()，writeFileSync()</h2><p><code>writeFile</code>方法用于异步写入文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.writeFile(<span class="string">&quot;message.txt&quot;</span>, <span class="string">&quot;Hello Node.js&quot;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;It&#x27;s saved!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>writeFile</code>方法的第一个参数是写入的文件名，第二个参数是写入的字符串，第三个参数是回调函数。</p>
<p>回调函数前面，还可以再加一个参数，表示写入字符串的编码（默认是<code>utf8</code>）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.writeFile(<span class="string">&quot;message.txt&quot;</span>, <span class="string">&quot;Hello Node.js&quot;</span>, <span class="string">&quot;utf8&quot;</span>, callback);</span><br></pre></td></tr></table></figure>

<p><code>writeFileSync</code>方法用于同步写入文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.writeFileSync(fileName, str, <span class="string">&quot;utf8&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>它的第一个参数是文件路径，第二个参数是写入文件的字符串，第三个参数是文件编码，默认为 utf8。</p>
<h2 id="exists-path-callback"><a href="#exists-path-callback" class="headerlink" title="exists(path, callback)"></a>exists(path, callback)</h2><p>exists 方法用来判断给定路径是否存在，然后不管结果如何，都会调用回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.exists(<span class="string">&quot;/path/to/file&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">exists</span>) </span>&#123;</span><br><span class="line">  util.debug(exists ? <span class="string">&quot;it&#x27;s there&quot;</span> : <span class="string">&quot;no file!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码表明，回调函数的参数是一个表示文件是否存在的布尔值。</p>
<p>需要注意的是，不要在<code>open</code>方法之前调用<code>exists</code>方法，open 方法本身就能检查文件是否存在。</p>
<p>下面的例子是如果给定目录存在，就删除它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fs.existsSync(outputFolder)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Removing &quot;</span> + outputFolder);</span><br><span class="line">  fs.rmdirSync(outputFolder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mkdir-，writeFile-，readFile"><a href="#mkdir-，writeFile-，readFile" class="headerlink" title="mkdir()，writeFile()，readFile()"></a>mkdir()，writeFile()，readFile()</h2><p>mkdir 方法用于新建目录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdir(<span class="string">&quot;./helloDir&quot;</span>, <span class="number">0777</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>mkdir 接受三个参数，第一个是目录名，第二个是权限值，第三个是回调函数。</p>
<p>writeFile 方法用于写入文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">&quot;./helloDir/message.txt&quot;</span>, <span class="string">&quot;Hello Node&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;文件写入成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>readFile 方法用于读取文件内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&quot;./helloDir/message.txt&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码使用 readFile 方法读取文件。readFile 方法的第一个参数是文件名，第二个参数是文件编码，第三个参数是回调函数。可用的文件编码包括“ascii”、“utf8”和“base64”。如果没有指定文件编码，返回的是原始的缓存二进制数据，这时需要调用 buffer 对象的 toString 方法，将其转为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.readFile(<span class="string">&quot;example_log.txt&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, logData</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="keyword">var</span> text = logData.toString();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>readFile 方法是异步操作，所以必须小心，不要同时发起多个 readFile 请求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  fs.readFile(<span class="string">&quot;./&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something with the file</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码会同时发起 1000 个 readFile 异步请求，很快就会耗尽系统资源。</p>
<h2 id="mkdirSync-，writeFileSync-，readFileSync"><a href="#mkdirSync-，writeFileSync-，readFileSync" class="headerlink" title="mkdirSync()，writeFileSync()，readFileSync()"></a>mkdirSync()，writeFileSync()，readFileSync()</h2><p>这三个方法是建立目录、写入文件、读取文件的同步版本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.mkdirSync(<span class="string">&quot;./helloDirSync&quot;</span>, <span class="number">0777</span>);</span><br><span class="line">fs.writeFileSync(<span class="string">&quot;./helloDirSync/message.txt&quot;</span>, <span class="string">&quot;Hello Node&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">&quot;./helloDirSync/message.txt&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;file created with contents:&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure>

<p>对于流量较大的服务器，最好还是采用异步操作，因为同步操作时，只有前一个操作结束，才会开始后一个操作，如果某个操作特别耗时（常常发生在读写数据时），会导致整个程序停顿。</p>
<h2 id="readdir-，readdirSync"><a href="#readdir-，readdirSync" class="headerlink" title="readdir()，readdirSync()"></a>readdir()，readdirSync()</h2><p><code>readdir</code>方法用于读取目录，返回一个所包含的文件和子目录的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readdir(process.cwd(), <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> count = files.length;</span><br><span class="line">  <span class="keyword">var</span> results = &#123;&#125;;</span><br><span class="line">  files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      results[filename] = data;</span><br><span class="line">      count--;</span><br><span class="line">      <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 对所有文件进行处理</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>readdirSync</code>方法是<code>readdir</code>方法的同步版本。下面是同步列出目录内容的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> files = fs.readdirSync(dir);</span><br><span class="line">files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fullname = path.join(dir, filename);</span><br><span class="line">  <span class="keyword">var</span> stats = fs.statSync(fullname);</span><br><span class="line">  <span class="keyword">if</span> (stats.isDirectory()) filename += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">  process.stdout.write(</span><br><span class="line">    filename + <span class="string">&quot;\t&quot;</span> + stats.size + <span class="string">&quot;\t&quot;</span> + stats.mtime + <span class="string">&quot;\n&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="stat"><a href="#stat" class="headerlink" title="stat()"></a>stat()</h2><p>stat 方法的参数是一个文件或目录，它产生一个对象，该对象包含了该文件或目录的具体信息。我们往往通过该方法，判断正在处理的到底是一个文件，还是一个目录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.readdir(<span class="string">&quot;/etc/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">  files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    fs.stat(<span class="string">&quot;/etc/&quot;</span> + file, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (stats.isFile()) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;%s is file&quot;</span>, file);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stats.isDirectory()) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;%s is a directory&quot;</span>, file);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;stats:  %s&quot;</span>, <span class="built_in">JSON</span>.stringify(stats));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="watchfile-，unwatchfile"><a href="#watchfile-，unwatchfile" class="headerlink" title="watchfile()，unwatchfile()"></a>watchfile()，unwatchfile()</h2><p>watchfile 方法监听一个文件，如果该文件发生变化，就会自动触发回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.watchFile(<span class="string">&quot;./testFile.txt&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">curr, prev</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;the current mtime is: &quot;</span> + curr.mtime);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;the previous mtime was: &quot;</span> + prev.mtime);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">&quot;./testFile.txt&quot;</span>, <span class="string">&quot;changed&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;file write complete&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>unwatchfile</code>方法用于解除对文件的监听。</p>
<h2 id="createReadStream"><a href="#createReadStream" class="headerlink" title="createReadStream()"></a>createReadStream()</h2><p><code>createReadStream</code>方法往往用于打开大型的文本文件，创建一个读取操作的数据流。所谓大型文本文件，指的是文本文件的体积很大，读取操作的缓存装不下，只能分成几次发送，每次发送会触发一个<code>data</code>事件，发送结束会触发<code>end</code>事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readLines</span>(<span class="params">input, func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> remaining = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  input.on(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    remaining += data;</span><br><span class="line">    <span class="keyword">var</span> index = remaining.indexOf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> line = remaining.substring(last, index);</span><br><span class="line">      last = index + <span class="number">1</span>;</span><br><span class="line">      func(line);</span><br><span class="line">      index = remaining.indexOf(<span class="string">&quot;\n&quot;</span>, last);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remaining = remaining.substring(last);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  input.on(<span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (remaining.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      func(remaining);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Line: &quot;</span> + data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input = fs.createReadStream(<span class="string">&quot;lines.txt&quot;</span>);</span><br><span class="line">readLines(input, func);</span><br></pre></td></tr></table></figure>

<h2 id="createWriteStream"><a href="#createWriteStream" class="headerlink" title="createWriteStream()"></a>createWriteStream()</h2><p><code>createWriteStream</code>方法创建一个写入数据流对象，该对象的<code>write</code>方法用于写入数据，<code>end</code>方法用于结束写入操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> out = fs.createWriteStream(fileName, &#123;</span><br><span class="line">  encoding: <span class="string">&quot;utf8&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">out.write(str);</span><br><span class="line">out.end();</span><br></pre></td></tr></table></figure>

<p><code>createWriteStream</code>方法和<code>createReadStream</code>方法配合，可以实现拷贝大型文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileCopy</span>(<span class="params">filename1, filename2, done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> input = fs.createReadStream(filename1);</span><br><span class="line">  <span class="keyword">var</span> output = fs.createWriteStream(filename2);</span><br><span class="line"></span><br><span class="line">  input.on(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">    output.write(d);</span><br><span class="line">  &#125;);</span><br><span class="line">  input.on(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;);</span><br><span class="line">  input.on(<span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    output.end();</span><br><span class="line">    <span class="keyword">if</span> (done) done();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>GET、POST、PUT、DELETE的区别</title>
    <url>/2021/04/19/nodeJs/http/</url>
    <content><![CDATA[<h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><p>GET 请求是用来获取数据的，不对服务器的数据做任何的修改，新增，删除等操作。<br>GET 请求就像数据库的 SELECT 操作一样，只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容。GET 请求会把请求的参数附加在 URL 后面，这样会产生安全问题，如果是系统的登陆接口采用的 GET 请求，需要对请求的参数做一个加密。</p>
<h1 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h1><p>PUT 请求是向服务器端发送数据的，PUT 请求就像数据库的 UPDATE 操作一样，用来修改数据的内容，PUT 的侧重点在于对于数据的修改操作。</p>
<h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><p>POST 请求同 PUT 请求类似，都是向服务器端发送数据的，但是 POST 请求会改变数据的种类等资源，就像数据库的 INSERT 操作一样，会创建新的内容。常用来数据的提交，新增操作。</p>
<h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><p>DELETE 请求用来删除某一个资源的，DELETE 请求就像数据库的 DELETE 操作一样。</p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Node基础篇</title>
    <url>/2021/01/14/nodeJs/intro/</url>
    <content><![CDATA[<h1 id="最简短的开场白"><a href="#最简短的开场白" class="headerlink" title="最简短的开场白"></a>最简短的开场白</h1><h2 id="Node-是什么"><a href="#Node-是什么" class="headerlink" title="Node 是什么"></a>Node 是什么</h2><ul>
<li><p>用于编写服务器端应用</p>
</li>
<li><p>javascript 核心语法</p>
</li>
<li><p>只是操作的对象不同</p>
<table>
<thead>
<tr>
<th>前端</th>
<th>DOM</th>
<th>文档对象</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>BOM/DOM</td>
<td>浏览器对象</td>
</tr>
<tr>
<td></td>
<td>XMLHttpRequest/fetch</td>
<td>网络通讯</td>
</tr>
<tr>
<td>后端</td>
<td>os</td>
<td>操作系统</td>
</tr>
<tr>
<td></td>
<td>process</td>
<td>进程</td>
</tr>
<tr>
<td></td>
<td>fs</td>
<td>文件系统</td>
</tr>
<tr>
<td></td>
<td>net</td>
<td>网络通讯</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="API-哪里找"><a href="#API-哪里找" class="headerlink" title="API 哪里找"></a>API 哪里找</h2><p>英文 <a href="https://nodejs.org/dist/latest-v10.x/docs/api/">https://nodejs.org/dist/latest-v10.x/docs/api/</a></p>
<p>中文 <a href="http://nodejs.cn/api/">http://nodejs.cn/api/</a></p>
<h1 id="运行-调试-模块-如何搭建万里长城"><a href="#运行-调试-模块-如何搭建万里长城" class="headerlink" title="运行/调试/模块 - 如何搭建万里长城"></a>运行/调试/模块 - 如何搭建万里长城</h1><h2 id="Helloworld"><a href="#Helloworld" class="headerlink" title="Helloworld"></a>Helloworld</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="bash-运行"><a href="#bash-运行" class="headerlink" title="bash 运行"></a>bash 运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node helloworld/index.js</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">node helloworld</span><br></pre></td></tr></table></figure>

<h2 id="Nodemon-自动重启"><a href="#Nodemon-自动重启" class="headerlink" title="Nodemon 自动重启"></a>Nodemon 自动重启</h2><p>监视代码修改，自动重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i nodemon -g</span><br><span class="line">nodemon helloworld</span><br></pre></td></tr></table></figure>

<h2 id="Vscode-调试-debug"><a href="#Vscode-调试-debug" class="headerlink" title="Vscode 调试 debug"></a>Vscode 调试 debug</h2><h2 id="单元测试-Jest"><a href="#单元测试-Jest" class="headerlink" title="单元测试 Jest"></a>单元测试 Jest</h2><h3 id="安装-jest-库"><a href="#安装-jest-库" class="headerlink" title="安装 jest 库"></a>安装 jest 库</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span><span class="keyword">jest </span>-g</span><br></pre></td></tr></table></figure>

<p>在___tests___文件夹中创建 index.spec.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&quot;Hello world&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;../index&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jest helloworld</span><br></pre></td></tr></table></figure>

<h2 id="Exports-与-Require"><a href="#Exports-与-Require" class="headerlink" title="Exports 与 Require"></a>Exports 与 Require</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="comment">// module.exports = str</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">// module.exports.str = str</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="built_in">exports</span>.str = str;</span><br></pre></td></tr></table></figure>

<p>测试程序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">it(<span class="string">&quot;测试Export&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> string = <span class="built_in">require</span>(<span class="string">&quot;../index&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;export&quot;</span>, string);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="测试代码生成工具"><a href="#测试代码生成工具" class="headerlink" title="测试代码生成工具"></a>测试代码生成工具</h2><blockquote>
<ul>
<li><p>掌握 fs 中的同步方法</p>
</li>
<li><p>path 包</p>
</li>
</ul>
</blockquote>
<h2 id="生成测试文件名"><a href="#生成测试文件名" class="headerlink" title="生成测试文件名"></a>生成测试文件名</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&quot;测试文件名称&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> src = <span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">&quot;../index&quot;</span>))();</span><br><span class="line">  <span class="keyword">const</span> ret = src.getTestFileName(<span class="string">&quot;/abc/class.js&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;getSourceName&quot;</span>, ret);</span><br><span class="line">  expect(ret).toBe(<span class="string">&quot;/abc/__test__/class.spec.js&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">TestNow</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成测试文件名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">filename</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getTestFileName(filename) &#123;</span><br><span class="line">    <span class="keyword">const</span> dirName = path.dirname(filename);</span><br><span class="line">    <span class="keyword">const</span> baseName = path.basename(filename);</span><br><span class="line">    <span class="keyword">const</span> extname = path.extname(filename);</span><br><span class="line">    <span class="keyword">const</span> testName = baseName.replace(extname, <span class="string">`.spec<span class="subst">$&#123;extname&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path.format(&#123;</span><br><span class="line">      root: dirName + <span class="string">&quot;/__test__/&quot;</span>,</span><br><span class="line">      base: testName</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="生成测试代码"><a href="#生成测试代码" class="headerlink" title="生成测试代码"></a>生成测试代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&quot;生成测试代码&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> src = <span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">&quot;../index&quot;</span>))();</span><br><span class="line">  <span class="keyword">const</span> ret = src.getTestSource(<span class="string">&quot;fun&quot;</span>, <span class="string">&quot;class&quot;</span>);</span><br><span class="line">  expect(ret).toBe(</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">test(&#x27;TEST fun&#x27;,() =&gt; &#123;</span></span><br><span class="line"><span class="string">    const  fun = require(&#x27;../class&#x27;)</span></span><br><span class="line"><span class="string">    const ret = fun()</span></span><br><span class="line"><span class="string">    // expect(ret)</span></span><br><span class="line"><span class="string">    //     .toBe(&#x27;test ret&#x27;)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="异步编程-如何控制好异步过程"><a href="#异步编程-如何控制好异步过程" class="headerlink" title="异步编程 - 如何控制好异步过程"></a>异步编程 - 如何控制好异步过程</h1><blockquote>
<p>参考资料 <a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html">阮一峰 Javascript 异步编程的 4 种方法</a>)</p>
</blockquote>
<ul>
<li><p>JS 的执行环境是单线程（Single thread）</p>
</li>
<li><p>I/O 处理需要回调函数异步处理 (异步 I/O)</p>
</li>
<li><p>前端异步 IO 可以消除 UI 阻塞，提高用户体验</p>
</li>
<li><p>而放在后端则可以提高 CPU 和内存里利用率</p>
</li>
</ul>
<h2 id="串联异步处理"><a href="#串联异步处理" class="headerlink" title="串联异步处理"></a>串联异步处理</h2><p>异步操作队列化，按照期望的顺序执行。</p>
<h3 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h3><blockquote>
<p>回调地域太可怕</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> logTime = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Log....<span class="subst">$&#123;name&#125;</span>   `</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.callback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    logTime(<span class="string">&quot;callback 1&quot;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      logTime(<span class="string">&quot;callback 2&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&quot;callback&quot;</span>, <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  callback();</span><br><span class="line">  <span class="comment">// 延时4s结束</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(done, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote>
<p>The Promise object is used for asynchronous computations. A Promise represents a single asynchronous operation that hasn’t completed yet, but is expected in the future.</p>
<p>译文：Promise 对象用于异步操作，它表示一个尚未完成且预计在未来完成的异步操作。</p>
</blockquote>
<p>说白了就是一个异步执行的状态机，异步执行的承诺。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="function">(<span class="params">name, delay = <span class="number">100</span></span>) =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      logTime(name);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.promise = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  promise(<span class="string">&quot;Promise1&quot;</span>)</span><br><span class="line">    .then(promise(<span class="string">&quot;Promise2&quot;</span>))</span><br><span class="line">    .then(promise(<span class="string">&quot;Promise3&quot;</span>))</span><br><span class="line">    .then(promise(<span class="string">&quot;Promise4&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Gennerator"><a href="#Gennerator" class="headerlink" title="Gennerator"></a>Gennerator</h3><blockquote>
<p>ES6 新引入了 Generator 函数，可以通过 yield 关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案。 基本</p>
</blockquote>
<ul>
<li>function -&gt; function* 称为 Gennerator 函数</li>
<li>函数内部有 yield 表达式。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = func();</span><br><span class="line">f.next();</span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// &#123;value: &quot;1&quot;, done: false&#125;</span></span><br><span class="line">f.next();</span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// &#123;value: &quot;2&quot;, done: false&#125;</span></span><br><span class="line">f.next();</span><br><span class="line"><span class="comment">// three</span></span><br><span class="line"><span class="comment">// &#123;value: &quot;3&quot;, done: true&#125;</span></span><br><span class="line">f.next();</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者通过迭代器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> func()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="逻辑代码"><a href="#逻辑代码" class="headerlink" title="逻辑代码"></a>逻辑代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> co = <span class="function"><span class="keyword">function</span> (<span class="params">gen, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> it = gen(name);</span><br><span class="line">  <span class="keyword">var</span> ret = it.next();</span><br><span class="line">  ret.value.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    it.next(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.generator = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> generator = <span class="function"><span class="keyword">function</span>* (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> promise(name + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">yield</span> promise(name + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">yield</span> promise(name + <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">yield</span> promise(name + <span class="number">4</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> co = <span class="function"><span class="params">generator</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((it = generator.next().value)) &#123;</span><br><span class="line">      it.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        co(generator);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  co(generator(<span class="string">&quot;Co-Generator&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><blockquote>
<p>async/await 是 es7 推出的一套关于异步的终极解决方案</p>
</blockquote>
<ul>
<li>任何一个 await 语句后面的 Promise 对象变为 reject 状态，那么整个 async 函数都会中断执行。</li>
<li>async 函数返回的 Promise 对象，必须等到内部所有 await 命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到 return 语句或者抛出错误。也就是说，只有 async 函数内部的异步操作执行完，才会执行 then 方法指定的回调函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.asyncAwait = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> promise(<span class="string">&quot;Async/Await1&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> promise(<span class="string">&quot;Async/Await2&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> promise(<span class="string">&quot;Async/Await3&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> promise(<span class="string">&quot;Async/Await4&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="事件监听方式处理"><a href="#事件监听方式处理" class="headerlink" title="事件监听方式处理"></a>事件监听方式处理</h3><p>采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.event = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> asyncFun = <span class="function"><span class="params">name</span> =&gt;</span> <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      logTime(name);</span><br><span class="line">      event.emit(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ary = [asyncFun(<span class="string">&quot;event1&quot;</span>), asyncFun(<span class="string">&quot;event2&quot;</span>), asyncFun(<span class="string">&quot;event3&quot;</span>)];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; EventEmitter &#125; = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> event = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  event.on(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> i &lt; ary.length &amp;&amp; ary[i++](event));</span><br><span class="line">  event.emit(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="eventEmmiter"><a href="#eventEmmiter" class="headerlink" title="eventEmmiter"></a>eventEmmiter</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="function">(<span class="params">name, delay = <span class="number">100</span></span>) =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      logTime(name);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.promise = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  promise(<span class="string">&quot;Promise1&quot;</span>)</span><br><span class="line">    .then(promise(<span class="string">&quot;Promise2&quot;</span>))</span><br><span class="line">    .then(promise(<span class="string">&quot;Promise3&quot;</span>))</span><br><span class="line">    .then(promise(<span class="string">&quot;Promise4&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="扩展阅读-eventEimitter-源码解析-订阅发布机制"><a href="#扩展阅读-eventEimitter-源码解析-订阅发布机制" class="headerlink" title="扩展阅读 eventEimitter 源码解析 / 订阅发布机制"></a>扩展阅读 eventEimitter 源码解析 / 订阅发布机制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.handler = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  on(eventName, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.handles) &#123;</span><br><span class="line">      <span class="built_in">this</span>.handles = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.handles[eventName]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.handles[eventName] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.handles[eventName].push(callback);</span><br><span class="line">  &#125;</span><br><span class="line">  emit(eventName, ...arg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handles[eventName]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.handles[eventName].length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>.handles[eventName][i](...arg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">event.on(<span class="string">&quot;some_event&quot;</span>, <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;some_event 事件触发:&quot;</span> + num);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  event.emit(<span class="string">&quot;some_event&quot;</span>, num++);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="异步处理并行"><a href="#异步处理并行" class="headerlink" title="异步处理并行"></a>异步处理并行</h2><h2 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h2><h1 id="IO-处理"><a href="#IO-处理" class="headerlink" title="IO 处理"></a>IO 处理</h1><h2 id="同步与异步读取文件"><a href="#同步与异步读取文件" class="headerlink" title="同步与异步读取文件"></a>同步与异步读取文件</h2><blockquote>
<p>补充资料 <a href="https://nodejs.org/dist/latest-v10.x/docs/api/fs.html">https://nodejs.org/dist/latest-v10.x/docs/api/fs.html</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">fs 方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fs.truncate</td>
<td align="left">截断或者拓展文件到制定的长度</td>
</tr>
<tr>
<td align="left">fs.ftruncate</td>
<td align="left">和 truncate 一样，但将文件描述符作为参数</td>
</tr>
<tr>
<td align="left">fs.chown</td>
<td align="left">改变文件的所有者以及组</td>
</tr>
<tr>
<td align="left">fs.fchown</td>
<td align="left">和 chown 一样，但将文件描述符作为参数</td>
</tr>
<tr>
<td align="left">fs.lchown</td>
<td align="left">和 chown 一样，但不解析符号链接</td>
</tr>
<tr>
<td align="left">fs.stat</td>
<td align="left">获取文件状态</td>
</tr>
<tr>
<td align="left">fs.lstat</td>
<td align="left">和 stat 一样，但是返回信息是关于符号链接而不是它指向的内容</td>
</tr>
<tr>
<td align="left">fs.fstat</td>
<td align="left">和 stat 一样，但将文件描述符作为参数</td>
</tr>
<tr>
<td align="left">fs.link</td>
<td align="left">创建一个硬链接</td>
</tr>
<tr>
<td align="left">fs.symlink</td>
<td align="left">创建一个软连接</td>
</tr>
<tr>
<td align="left">fs.readlink</td>
<td align="left">读取一个软连接的值</td>
</tr>
<tr>
<td align="left">fs.realpath</td>
<td align="left">返回规范的绝对路径名</td>
</tr>
<tr>
<td align="left">fs.unlink</td>
<td align="left">删除文件</td>
</tr>
<tr>
<td align="left">fs.rmdir</td>
<td align="left">删除文件目录</td>
</tr>
<tr>
<td align="left">fs.mkdir</td>
<td align="left">创建文件目录</td>
</tr>
<tr>
<td align="left">fs.readdir</td>
<td align="left">读取一个文件目录的内容</td>
</tr>
<tr>
<td align="left">fs.close</td>
<td align="left">关闭一个文件描述符</td>
</tr>
<tr>
<td align="left">fs.open</td>
<td align="left">打开或者创建一个文件用来读取或者写入</td>
</tr>
<tr>
<td align="left">fs.utimes</td>
<td align="left">设置文件的读取和修改时间</td>
</tr>
<tr>
<td align="left">fs.futimes</td>
<td align="left">和 utimes 一样，但将文件描述符作为参数</td>
</tr>
<tr>
<td align="left">fs.fsync</td>
<td align="left">同步磁盘中的文件数据</td>
</tr>
<tr>
<td align="left">fs.write</td>
<td align="left">写入数据到一个文件</td>
</tr>
<tr>
<td align="left">fs.read</td>
<td align="left">读取一个文件的数据</td>
</tr>
</tbody></table>
<h2 id="Promisify"><a href="#Promisify" class="headerlink" title="Promisify"></a>Promisify</h2><h2 id="buffer-操作二进制数据"><a href="#buffer-操作二进制数据" class="headerlink" title="buffer - 操作二进制数据"></a>buffer - 操作二进制数据</h2><h2 id="生成-Base64-编码"><a href="#生成-Base64-编码" class="headerlink" title="生成 Base64 编码"></a>生成 Base64 编码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.imageUrl = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mime = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> encoding = <span class="string">&#x27;base64&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> base64Data = fs.readFileSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/image.png`</span>).toString(encoding)</span><br><span class="line">    <span class="keyword">const</span> uri = <span class="string">`data:<span class="subst">$&#123;mime&#125;</span>;<span class="subst">$&#123;encoding&#125;</span>,<span class="subst">$&#123;base64Data&#125;</span>`</span></span><br><span class="line">    <span class="comment">// data:image/png;base64,</span></span><br><span class="line">    fs.writeFileSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/index.html`</span>,<span class="string">`&lt;img src=&#x27;<span class="subst">$&#123;uri&#125;</span>&#x27; /&gt;`</span>)</span><br><span class="line">    <span class="comment">// console.log(uri)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="stream-流的操作"><a href="#stream-流的操作" class="headerlink" title="stream - 流的操作"></a>stream - 流的操作</h2><p>流是基于事件的 API，用于管理和处理数据。</p>
<ul>
<li>流是能够读写的</li>
<li>是基于事件实现的一个实例</li>
</ul>
<p>理解流的最好方式就是想象一下没有流的时候怎么处理数据：</p>
<ul>
<li><p><code>fs.readFileSync</code> 同步读取文件，程序会阻塞，所有数据被读到内存</p>
</li>
<li><p><code>fs.readFile</code> 阻止程序阻塞，但仍会将文件所有数据读取到内存中</p>
</li>
<li><p>希望少内存读取大文件，读取一个数据块到内存处理完再去索取更多的数据</p>
</li>
</ul>
<h1 id="进程-子进程"><a href="#进程-子进程" class="headerlink" title="进程/子进程"></a>进程/子进程</h1><p>process</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看PATH</span></span><br><span class="line"><span class="built_in">console</span>.log(process.env.PATH.split(<span class="string">&quot;:&quot;</span>).join(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`arch:<span class="subst">$&#123;process.arch&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`platform:<span class="subst">$&#123;process.platform&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`获取内存使用情况 memoryUsage:<span class="subst">$&#123;process.memoryUsage()&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`获取命令行参数 argv:<span class="subst">$&#123;process.argv&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="自动重启工具（Nodemon）"><a href="#自动重启工具（Nodemon）" class="headerlink" title="自动重启工具（Nodemon）"></a>自动重启工具（Nodemon）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [cmd, , source, ...argv] = process.argv;</span><br><span class="line">  <span class="comment">// console.log(&#x27;abc&#x27;, cmd, source, argv)</span></span><br><span class="line">  <span class="keyword">const</span> childProcess = spawn(cmd, [source, ...argv]);</span><br><span class="line">  childProcess.stdout.pipe(process.stdout);</span><br><span class="line">  childProcess.stderr.pipe(process.stderr);</span><br><span class="line">  <span class="keyword">const</span> watcher = fs.watch(resolve(__dirname, source), <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;File changed, reloading.&quot;</span>);</span><br><span class="line">    childProcess.kill();</span><br><span class="line">    watcher.close();</span><br><span class="line">    watch();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">watch();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>node 中的 nextTick和setImmediate</title>
    <url>/2019/10/18/nodeJs/nextTick/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;main1&quot;</span>);</span><br><span class="line"><span class="comment">// 该函数仅在 Node.js 环境下可以使用</span></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;process.nextTick1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;process.nextTick2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;promise&quot;</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;promise then&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;main&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>Node.js 提供的 nextTick 和 setImmediate</li>
<li>nexTick 和 setImmediate 属于 node 中 process 模块中方法</li>
<li>process.nextTick()属于 idle 观察者，setImmediate()属 check 观察者。</li>
<li>在每一轮循环检查中，idle 观察者先于 I/O 观察者，I/O 观察者先 check 观察者。</li>
<li>idle 观察者，也就是事件轮询最先进行的任务 I/O 观察者，也就是事件轮询的任务（任务中的回调函数）</li>
<li>check 观察者 事件轮询中的任务的结束</li>
<li>在具体实现上，process.nextTick()的回调函数保存在一个数中，setImmediate() 的结果则是保存在链表。在行为上 process.nextTick() 在每轮循环中会将数组中的回调函数全部行完。而 setImmediate() 在每轮循环中执行链表中的一个回调函数。</li>
</ul>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js中的API</title>
    <url>/2021/05/26/nodeJs/node-api/</url>
    <content><![CDATA[<blockquote>
<p>Node.js 可以解析 JS 代码（没有浏览器安全级别的限制）提供很多系统级别的 API，如：</p>
</blockquote>
<ul>
<li>文件的读写 (File System)</li>
<li>进程的管理 (Process)</li>
<li>网络通信 (HTTP/HTTPS)</li>
<li>…</li>
</ul>
<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);</span><br><span class="line"></span><br><span class="line">https.get(<span class="string">&quot;https://obsidianstar.cn/2021/05/26/nodeJs/node-api/&quot;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">    str += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="文件的读写-File-System"><a href="#文件的读写-File-System" class="headerlink" title="文件的读写 (File System)"></a>文件的读写 (File System)</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&quot;./ajax.png&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="function">(<span class="params">err, content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(content);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">&quot;./log.txt&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="进程的管理（Process）"><a href="#进程的管理（Process）" class="headerlink" title="进程的管理（Process）"></a>进程的管理（Process）</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(argv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main(process.argv.slice(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node 2.3-process.js argv1 argv2</span><br></pre></td></tr></table></figure>

<h1 id="网络通信（HTTP-HTTPS）"><a href="#网络通信（HTTP-HTTPS）" class="headerlink" title="网络通信（HTTP/HTTPS）"></a>网络通信（HTTP/HTTPS）</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url = request.url;</span><br><span class="line"></span><br><span class="line">  response.write(url);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">&quot;3000&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;localhost:3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>切换淘宝镜像</title>
    <url>/2021/03/19/npm/org/</url>
    <content><![CDATA[<p>来回自如的切换淘宝镜像与国外源</p>
<h1 id="打开-cmd，查看当前镜像地址："><a href="#打开-cmd，查看当前镜像地址：" class="headerlink" title="打开 cmd，查看当前镜像地址："></a>打开 cmd，查看当前镜像地址：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure>

<h1 id="切换为淘宝镜像："><a href="#切换为淘宝镜像：" class="headerlink" title="切换为淘宝镜像："></a>切换为淘宝镜像：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<h1 id="切换为原本的-npm-镜像："><a href="#切换为原本的-npm-镜像：" class="headerlink" title="切换为原本的 npm 镜像："></a>切换为原本的 npm 镜像：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>nuxt中vuex数据持久化</title>
    <url>/2020/12/16/nuxt/vuex-data-persistence/</url>
    <content><![CDATA[<blockquote>
<p>在 nuxt 中使用 vuex,为了数据持久化使用 vuex-persistedstate，但是在使用中发现找不到 window 对象，因此需要借助 cookie 来完成。</p>
</blockquote>
<h1 id="使用-vuex-persistedstate"><a href="#使用-vuex-persistedstate" class="headerlink" title="使用 vuex-persistedstate"></a>使用 vuex-persistedstate</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vuex-persistedstate</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&quot;vuex-persistedstate&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> conststore = <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    createPersistedState(&#123;</span><br><span class="line">      storage: <span class="built_in">window</span>.sessionStorage,</span><br><span class="line">      reducer(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="comment">//各种操作</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="使用-js-cookie"><a href="#使用-js-cookie" class="headerlink" title="使用 js-cookie"></a>使用 js-cookie</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save js-cookie</span><br></pre></td></tr></table></figure>

<p>在 plugins 中新建文件 localStorage.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&quot;vuex-persistedstate&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Cookies <span class="keyword">from</span> <span class="string">&quot;js-cookie&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cookieStorage = &#123;</span><br><span class="line">  getItem: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cookies.getJSON(key);</span><br><span class="line">  &#125;,</span><br><span class="line">  setItem: <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cookies.set(key, value, &#123; <span class="attr">expires</span>: <span class="number">3</span>, <span class="attr">secure</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  removeItem: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cookies.remove(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">  createPersistedState(&#123;</span><br><span class="line">    storage: cookieStorage,</span><br><span class="line">    getState: cookieStorage.getItem,</span><br><span class="line">    setState: cookieStorage.setItem</span><br><span class="line">  &#125;)(context.store);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在 nuxt.config.js 中新增</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [&#123; <span class="attr">src</span>: <span class="string">&#x27;@/plugins/localStorage.js&#x27;</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;],</span><br></pre></td></tr></table></figure>

<p>这两者结合使用，会发现页面刷新后保存在 vuex 中的数据仍然有效，不会回到初始数据。</p>
]]></content>
      <categories>
        <category>nuxt</category>
      </categories>
      <tags>
        <tag>nuxt</tag>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>UmiJS</title>
    <url>/2021/01/21/react/UmiJS/</url>
    <content><![CDATA[<h1 id="umi-常用配置"><a href="#umi-常用配置" class="headerlink" title="umi 常用配置"></a>umi 常用配置</h1><blockquote>
<p>umi 的配置主要是在.umirc.ts 文件里面进行配置</p>
</blockquote>
<p>几个常用的配置：</p>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><ul>
<li>Type: <code>boolean</code></li>
<li>Default: <code>false</code></li>
</ul>
<p>配置是否让生成的文件包含 hash 后缀，通常用于增量发布和避免浏览器加载缓存。</p>
<p>启用 hash 后，产物通常是这样，</p>
<ul>
<li>dist<ul>
<li>logo.sw892d.png</li>
<li>umi.df723s.js</li>
<li>umi.8sd8fw.css</li>
<li>index.html</li>
</ul>
</li>
</ul>
<p>注：</p>
<ul>
<li>html 文件始终没有 hash</li>
</ul>
<h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><ul>
<li>Type: <code>string</code></li>
<li>Default: <code>/</code></li>
</ul>
<p>设置路由前缀，通常用于部署到非根目录。</p>
<p>比如，你有路由 <code>/</code> 和 <code>/users</code>，然后设置了 <code>base</code> 为 <code>/foo/</code>，那么就可以通过 <code>/foo/</code> 和 <code>/foo/users</code> 访问到之前的路由。</p>
<h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><ul>
<li>Type: <code>object</code></li>
<li>Default: <code>&#123; type: &#39;browser&#39; &#125;</code></li>
</ul>
<p>配置 <code>history</code> 类型和配置项。</p>
<p>包含以下子配置项：</p>
<p>type，可选 browser、hash 和 memory<br>options，传给 <code>create&#123;&#123;&#123; type &#125;&#125;&#125;History</code> 的配置项，每个类型器的配置项不同</p>
<p>注意:</p>
<ul>
<li>options 中，<code>getUserConfirmation</code> 由于是函数的格式，暂不支持配置</li>
<li>options 中，<code>basename</code> 无需配置，通过 <code>umi</code> 的 <code>base</code> 配置指定</li>
</ul>
<h2 id="outputPath"><a href="#outputPath" class="headerlink" title="outputPath"></a>outputPath</h2><ul>
<li>Type: <code>string</code></li>
<li>Default: <code>dist</code></li>
</ul>
<p>指定输出路径。</p>
<p><strong>注意：</strong></p>
<blockquote>
<p>不允许设定为 src、public、pages、mock、config 等约定目录</p>
</blockquote>
<h2 id="publicPath"><a href="#publicPath" class="headerlink" title="publicPath"></a>publicPath</h2><ul>
<li>Type: <code>publicPath</code></li>
<li>Default: <code>/</code></li>
</ul>
<p>配置 <code>webpack</code> 的 <code>publicPath</code>。当打包的时候，<code>webpack</code> 会在静态文件路径前面添加 <code>publicPath</code> 的值，当你需要修改静态文件地址时，比如使用 <code>CDN</code> 部署，把 <code>publicPath</code> 的值设为 CDN 的值就可以。如果使用一些特殊的文件系统，比如混合开发或者 <code>cordova</code> 等技术，可以尝试将 <code>publicPath</code> 设置成 ./ 相对路径。</p>
<p>相对路径 <code>./</code> 有一些限制，例如不支持多层路由 <code>/foo/bar</code>，只支持单层路径 <code>/foo</code></p>
<p>如果你的应用部署在域名的子路径上，例如 <a href="https://www.your-app.com/foo/%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E8%AE%BE%E7%BD%AE">https://www.your-app.com/foo/，你需要设置</a> <code>publicPath</code> 为 <code>/foo/</code>，如果同时要兼顾开发环境正常调试，你可以这样配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  publicPath: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;/foo/&quot;</span> : <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><ul>
<li>Type: <code>string</code></li>
<li>Default: <code>&#39;&#39;</code></li>
</ul>
<p>配置标题。</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  title: <span class="string">&quot;hi&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>此外，你还可以针对路由配置标题，比如，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  title: <span class="string">&quot;hi&quot;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;Home&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;Users&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/foo&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后我们访问 <code>/</code> 标题是 <code>Home</code>，访问 <code>/users</code> 标题是 <code>Users</code>，访问 <code>/foo</code> 标题是默认的 <code>hi</code>。</p>
<p><strong>注意：</strong></p>
<blockquote>
<p>默认不会在 HTML 里输出 <code>&lt;title&gt;</code> 标签，通过动态渲染得到<br>配 exportStatic 后会为每个 HTML 输出 <code>&lt;title&gt;</code> 标签<br>如果需要自行通过 react-helmet 等方式渲染 title，配 title: false 可禁用内置的 title 渲染机制</p>
</blockquote>
<h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><ul>
<li>Type: <code>object</code></li>
<li>Default: <code>&#123;&#125;</code></li>
</ul>
<p>配置代理能力。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">      target: <span class="string">&quot;http://jsonplaceholder.typicode.com/&quot;</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后访问 /api/users 就能访问到 <a href="http://jsonplaceholder.typicode.com/users">http://jsonplaceholder.typicode.com/users</a> 的数据。</p>
<p><strong>注意：</strong></p>
<blockquote>
<p>proxy 配置仅在 dev 时生效。</p>
</blockquote>
<h2 id="ssr-3-2"><a href="#ssr-3-2" class="headerlink" title="ssr (3.2+)"></a>ssr (3.2+)</h2><ul>
<li>Type: <code>object</code></li>
<li>Default: <code>false</code></li>
</ul>
<p>配置是否开启服务端渲染，配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 一键开启</span></span><br><span class="line">  ssr: &#123;</span><br><span class="line">    <span class="comment">// 更多配置</span></span><br><span class="line">    <span class="comment">// forceInitial: false,</span></span><br><span class="line">    <span class="comment">// removeWindowInitialProps: false</span></span><br><span class="line">    <span class="comment">// devServerRender: true,</span></span><br><span class="line">    <span class="comment">// mode: &#x27;string&#x27;,</span></span><br><span class="line">    <span class="comment">// staticMarkup: false,</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置说明：</strong></p>
<ul>
<li>forceInitial：客户端渲染时强制执行 getInitialProps 方法，常见的场景：静态站点希望每次访问时保持数据最新，以客户端渲染为主。</li>
<li>removeWindowInitialProps: HTML 中移除 window.getInitialProps 变量，避免 HTML 中有大量数据影响 SEO 效果，场景：静态站点</li>
<li>devServerRender：在 umi dev 开发模式下，执行渲染，用于 umi SSR 项目的快速开发、调试，服务端渲染效果所见即所得，同时我们考虑到可能会与服务端框架（如 Egg.js、Express、Koa）结合做本地开发、调试，关闭后，在 umi dev 下不执行服务端渲染，但会生成 umi.server.js（Umi SSR 服务端渲染入口文件），渲染开发流程交由开发者处理。</li>
<li>mode：渲染模式，默认使用 string 字符串渲染，同时支持流式渲染 mode: ‘stream’，减少 TTFB（浏览器开始收到服务器响应数据的时间） 时长。<br>staticMarkup：html 上的渲染属性（例如 React 渲染的 data-reactroot），常用于静态站点生成的场景上。</li>
</ul>
<p><strong>注意：</strong></p>
<blockquote>
<p>开启后，执行 umi dev 时，访问 <code>http://localhost:8000</code> ，默认将单页应用（SPA）渲染成 html 片段，片段可以通过开发者工具『显示网页源代码』进行查看。</p>
<p>执行 umi build，产物会额外生成 umi.server.js 文件，此文件运行在 Node.js 服务端，用于做服务端渲染，渲染 html 片段。</p>
<p>如果应用没有 Node.js 服务端，又希望生成 html 片段做 SEO（搜索引擎优化），可以开启 exportStatic 配置，会在执行 umi build 构建时进行预渲染。</p>
<p>removeWindowInitialProps 与 forceInitial 不可同时使用</p>
</blockquote>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React 中函数组件和类组件的区别</title>
    <url>/2021/05/28/react/component-type/</url>
    <content><![CDATA[<p><strong>定义组件有两个要求：</strong></p>
<ol>
<li>组件名称必须以大写字母开头</li>
<li>组件的返回值只能有一个根元素</li>
</ol>
<h1 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;react&quot;</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>函数组件接收一个单一的 props 对象并返回了一个 React 元素</p>
<h1 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;react&quot;</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>

<ol>
<li>无论是使用函数或是类来声明一个组件，它决不能修改它自己的 props。</li>
<li>所有 React 组件都必须是纯函数，并禁止修改其自身 props。</li>
<li>React 是单项数据流，父组件改变了属性，那么子组件视图会更新。</li>
<li>属性 props 是外界传递过来的，状态 state 是组件本身的，状态可以在组件中任意修改。</li>
<li>组件的属性和状态改变都会更新视图。</li>
</ol>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>函数组件和类组件当然是有区别的，而且函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件。</p>
<table>
<thead>
<tr>
<th>区别</th>
<th>函数组件</th>
<th>类组件</th>
</tr>
</thead>
<tbody><tr>
<td>是否有 this</td>
<td>没有</td>
<td>有</td>
</tr>
<tr>
<td>是否有生命周期</td>
<td>没有</td>
<td>有</td>
</tr>
<tr>
<td>是否有状态 state</td>
<td>没有</td>
<td>有</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React 中使用 CSS 的方式</title>
    <url>/2021/05/28/react/css-use/</url>
    <content><![CDATA[<h1 id="style-内联样式"><a href="#style-内联样式" class="headerlink" title="style 内联样式"></a>style 内联样式</h1><blockquote>
<p>不需要组件从外部引入 css 文件，直接在组件中书写<br>在 react 中使用 style 对象的方式时。值必须用双引号包裹起来<br>只作用于当前组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> react, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> div1 = &#123;</span><br><span class="line">  width: <span class="string">&quot;300px&quot;</span>,</span><br><span class="line">  margin: <span class="string">&quot;30px auto&quot;</span>,</span><br><span class="line">  backgroundColor: <span class="string">&quot;#44014C&quot;</span> <span class="comment">// 驼峰法 minHeight: &quot;200px&quot;,boxSizing: &quot;border-box&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;div style=&#123;div1&#125;&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line">        &lt;div style=<span class="string">&quot;background-color:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test;</span><br></pre></td></tr></table></figure>

<h1 id="name-css"><a href="#name-css" class="headerlink" title="[name].css"></a>[name].css</h1><blockquote>
<p>需要在当前组件中使用 import 引入 css 文件。<br>作用于当前组件及其所有后代组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> TestChidren <span class="keyword">from</span> <span class="string">&quot;./TestChidren&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/css/index.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;link-name&quot;</span>&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line">        &lt;TestChidren&gt;测试子组件的样式&lt;/TestChidren&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test;</span><br></pre></td></tr></table></figure>

<h1 id="name-scss"><a href="#name-scss" class="headerlink" title="[name].scss"></a>[name].scss</h1><blockquote>
<p>引入 react 内部已经支持了后缀为 scss 的文件，所以只需要安装 node-sass 即可，因为有个 node-sass，scss 文件才能在 node 环境上编译成 css 文件<br>作用于当前组件及其所有后代组件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add node-sass</span><br></pre></td></tr></table></figure>

<p>然后编写 scss 文件</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.scss</span></span><br><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#282c34</span>;</span><br><span class="line">  <span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="name-module-css"><a href="#name-module-css" class="headerlink" title="[name].module.css"></a>[name].module.css</h1><blockquote>
<p>将 css 文件作为一个模块引入<br>只作用于当前组件。不会影响当前组件的后代组件<br>完全将 css 和组件分离开，又不会影响其他组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> TestChild <span class="keyword">from</span> <span class="string">&quot;./TestChild&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> moduleCss <span class="keyword">from</span> <span class="string">&quot;./test.module.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=&#123;moduleCss.linkName&#125;&gt;<span class="number">321321</span>&lt;/div&gt;</span><br><span class="line">        &lt;TestChild&gt;&lt;/TestChild&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test;</span><br></pre></td></tr></table></figure>

<h1 id="引入-name-module-scss-文件"><a href="#引入-name-module-scss-文件" class="headerlink" title="引入 [name].module.scss 文件"></a>引入 [name].module.scss 文件</h1><blockquote>
<p>类似于 [name].module.css，区别是 [name].module.css 是引入 css module，这种引入 scss module<br>可以看做是 [name].module.css 在组件中使用 style 的升级版</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> TestChild <span class="keyword">from</span> <span class="string">&quot;./TestChild&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> moduleCss <span class="keyword">from</span> <span class="string">&quot;./test.module.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=&#123;moduleCss.linkName&#125;&gt;<span class="number">321321</span>&lt;/div&gt;</span><br><span class="line">        &lt;TestChild&gt;&lt;/TestChild&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test;</span><br></pre></td></tr></table></figure>

<h1 id="radium"><a href="#radium" class="headerlink" title="radium"></a>radium</h1><blockquote>
<p>对于处理变量，媒体查询，伪类等是不方便的<br>使用 Radium 可以直接处理变量，媒体查询，伪类等，并且可以直接使用 js 中的数学，连接，正则表达式，条件，函数等<br>在 export 之前，必须用 Radium 包裹</p>
</blockquote>
<p>需要先安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add radium</span><br></pre></td></tr></table></figure>

<p>然后在 react 组件中直接引入使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Radium <span class="keyword">from</span> <span class="string">&quot;radium&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> styles = &#123;</span><br><span class="line">  base: &#123;</span><br><span class="line">    color: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;:hover&quot;</span>: &#123;</span><br><span class="line">      background: <span class="string">&quot;#0074d9&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  primary: &#123; <span class="attr">background</span>: <span class="string">&quot;#0074D9&quot;</span> &#125;,</span><br><span class="line">  warning: &#123; <span class="attr">background</span>: <span class="string">&quot;#FF4136&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button style=&#123;[styles.base, styles.primary]&#125;&gt;</span><br><span class="line">          <span class="built_in">this</span> is a primary button</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Radium(Test);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React 扩展</title>
    <url>/2021/04/28/react/extends/</url>
    <content><![CDATA[<h1 id="setState-更新状态的-2-种写法"><a href="#setState-更新状态的-2-种写法" class="headerlink" title="setState 更新状态的 2 种写法"></a>setState 更新状态的 2 种写法</h1><h2 id="setState-stateChange-callback"><a href="#setState-stateChange-callback" class="headerlink" title="setState(stateChange, [callback])"></a>setState(stateChange, [callback])</h2><blockquote>
<p>对象式的 setState</p>
</blockquote>
<ol>
<li>stateChange 为状态改变对象(该对象可以体现出状态的更改)</li>
<li>callback 是可选的回调函数, 它在状态更新完毕、界面也更新后(render 调用后)才被调用</li>
</ol>
<h2 id="setState-updater-callback"><a href="#setState-updater-callback" class="headerlink" title="setState(updater, [callback])"></a>setState(updater, [callback])</h2><blockquote>
<p>函数式的 setState</p>
</blockquote>
<ol>
<li>updater 为返回 stateChange 对象的函数。</li>
<li>updater 可以接收到 state 和 props。</li>
<li>callback 是可选的回调函数, 它在状态更新、界面也更新后(render 调用后)才被调用。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>对象式的 setState 是函数式的 setState 的简写方式(语法糖)</li>
<li>使用原则：<ol>
<li>如果新状态不依赖于原状态 ===&gt; 使用对象方式</li>
<li>如果新状态依赖于原状态 ===&gt; 使用函数方式</li>
<li>如果需要在 setState()执行后获取最新的状态数据，要在第二个 callback 函数中读取</li>
</ol>
</li>
</ol>
<h1 id="路由组件的-lazyLoad"><a href="#路由组件的-lazyLoad" class="headerlink" title="路由组件的 lazyLoad"></a>路由组件的 lazyLoad</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span></span><br><span class="line"><span class="keyword">const</span> Login = lazy(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@/pages/Login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span></span><br><span class="line">&lt;Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>loading.....<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">  &lt;Switch&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;/xxx&quot;</span> component=&#123;Xxxx&#125;/&gt;</span><br><span class="line">    &lt;Redirect to=<span class="string">&quot;/login&quot;</span>/&gt;</span><br><span class="line">  &lt;/Switch&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h1><h2 id="React-Hook-Hooks-是什么"><a href="#React-Hook-Hooks-是什么" class="headerlink" title="React Hook/Hooks 是什么?"></a>React Hook/Hooks 是什么?</h2><ol>
<li>Hook 是 React 16.8.0 版本增加的新特性/新语法</li>
<li>可以让你在函数组件中使用 state 以及其他的 React 特性</li>
</ol>
<h2 id="三个常用的-Hook"><a href="#三个常用的-Hook" class="headerlink" title="三个常用的 Hook"></a>三个常用的 Hook</h2><ol>
<li>State Hook: React.useState()</li>
<li>Effect Hook: React.useEffect()</li>
<li>Ref Hook: React.useRef()</li>
</ol>
<h2 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h2><ol>
<li>State Hook 让函数组件也可以有 state 状态, 并进行状态数据的读写操作</li>
<li>语法: const [xxx, setXxx] = React.useState(initValue)</li>
<li>useState()说明:<br>参数: 第一次初始化指定的值在内部作缓存<br>返回值: 包含 2 个元素的数组, 第 1 个为内部当前状态值, 第 2 个为更新状态值的函数</li>
<li>setXxx()2 种写法:<br>setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值<br>setXxx(value =&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</li>
</ol>
<h2 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h2><ol>
<li><p>Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)</p>
</li>
<li><p>React 中的副作用操作:<br>发 ajax 请求数据获取<br>设置订阅 / 启动定时器<br>手动更改真实 DOM</p>
</li>
<li><p>语法和说明:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在此可以执行任何带副作用操作</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在组件卸载前执行</span></span><br><span class="line">    <span class="comment">// 在此做一些收尾工作, 比如清除定时器/取消订阅等</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [stateValue]); <span class="comment">// 如果指定的是[], 回调函数只会在第一次 render()后执行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以把 useEffect Hook 看做如下三个函数的组合</p>
<ul>
<li>componentDidMount()</li>
<li>componentDidUpdate()</li>
<li>componentWillUnmount()</li>
</ul>
</li>
</ol>
<h2 id="Ref-Hook"><a href="#Ref-Hook" class="headerlink" title="Ref Hook"></a>Ref Hook</h2><ol>
<li>Ref Hook 可以在函数组件中存储/查找组件内的标签或任意其它数据</li>
<li>语法: const refContainer = useRef()</li>
<li>作用:保存标签对象,功能与 React.createRef()一样</li>
</ol>
<h1 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Fragment&gt;<span class="xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>可以不用必须有一个真实的 DOM 根标签了</p>
<h1 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p>
<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="创建-Context-容器对象"><a href="#创建-Context-容器对象" class="headerlink" title="创建 Context 容器对象"></a>创建 Context 容器对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> XxxContext = React.createContext();</span><br></pre></td></tr></table></figure>

<h3 id="渲染子组时，外面包裹-xxxContext-Provider-通过-value-属性给后代组件传递数据"><a href="#渲染子组时，外面包裹-xxxContext-Provider-通过-value-属性给后代组件传递数据" class="headerlink" title="渲染子组时，外面包裹 xxxContext.Provider, 通过 value 属性给后代组件传递数据"></a>渲染子组时，外面包裹 xxxContext.Provider, 通过 value 属性给后代组件传递数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;xxxContext.Provider value=&#123;数据&#125;&gt;子组件&lt;/xxxContext.Provider&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后代组件读取数据"><a href="#后代组件读取数据" class="headerlink" title="后代组件读取数据"></a>后代组件读取数据</h3><ol>
<li><p>仅适用于类组件<br>static contextType = xxxContext // 声明接收 context<br>this.context // 读取 context 中的 value 数据</p>
</li>
<li><p>第二种方式: 函数组件与类组件都可以</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;xxxContext.Consumer&gt;</span><br><span class="line">  &#123;(</span><br><span class="line">    value <span class="comment">// value 就是 context 中的 value 数据</span></span><br><span class="line">  ) =&gt; 要显示的内容&#125;</span><br><span class="line">&lt;/xxxContext.Consumer&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在应用开发中一般不用 context, 一般都用它的封装 react 插件</p>
<h1 id="组件优化"><a href="#组件优化" class="headerlink" title="组件优化"></a>组件优化</h1><h2 id="Component-的-2-个问题"><a href="#Component-的-2-个问题" class="headerlink" title="Component 的 2 个问题"></a>Component 的 2 个问题</h2><blockquote>
<ol>
<li>只要执行 setState(),即使不改变状态数据, 组件也会重新 render() ==&gt; 效率低</li>
<li>只当前组件重新 render(), 就会自动重新 render 子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低</li>
</ol>
</blockquote>
<h2 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h2><blockquote>
<p>只有当组件的 state 或 props 数据发生改变时才重新 render()</p>
</blockquote>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote>
<p>Component 中的 shouldComponentUpdate()总是返回 true</p>
</blockquote>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol>
<li>重写 shouldComponentUpdate()方法<br>比较新旧 state 或 props 数据, 如果有变化才返回 true, 如果没有返回 false</li>
<li>使用 PureComponent<br><code>PureComponent</code> 重写了 <code>shouldComponentUpdate()</code>, 只有 state 或 props 数据有变化才返回 true</li>
</ol>
<p><strong>注意:</strong><br>只是进行 state 和 props 数据的浅比较, 如果只是数据对象内部数据变了, 返回 false<br>不要直接修改 state 数据, 而是要产生新数据<br>项目中一般使用 PureComponent 来优化</p>
<h1 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h1><h2 id="如何向组件内部动态传入带内容的结构-标签"><a href="#如何向组件内部动态传入带内容的结构-标签" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)?"></a>如何向组件内部动态传入带内容的结构(标签)?</h2><p><strong>Vue 中:</strong><br>使用 slot 技术, 也就是通过组件标签体传入结构 <code>&lt;A&gt;&lt;B/&gt;&lt;/A&gt;</code></p>
<p><strong>React 中:</strong><br>使用 children props: 通过组件标签体传入结构<br>使用 render props: 通过组件标签属性传入结构,而且可以携带数据，一般用 render 函数属性</p>
<h2 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a>children props</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;A&gt;</span><br><span class="line">  &lt;B&gt;xxxx&lt;/B&gt;</span><br><span class="line">&lt;/A&gt;;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">this</span>.props.children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题: 如果 B 组件需要 A 组件内的数据, ==&gt; 做不到</p>
<h2 id="render-props-1"><a href="#render-props-1" class="headerlink" title="render props"></a>render props</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;A render=&#123;<span class="function"><span class="params">data</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">C</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span>&#125;&gt;&lt;/A&gt;</span><br></pre></td></tr></table></figure>

<p>A 组件: {this.props.render(内部 state 数据)}<br>C 组件: 读取 A 组件传入的数据显示 {this.props.data}</p>
<h1 id="错误边界"><a href="#错误边界" class="headerlink" title="错误边界"></a>错误边界</h1><h2 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h2><p>错误边界(Error boundary)：用来捕获后代组件错误，渲染出备用页面</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>getDerivedStateFromError 配合 componentDidCatch</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生命周期函数，一旦后台组件报错，就会触发</span></span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromError(error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">  <span class="comment">// 在render之前触发</span></span><br><span class="line">  <span class="comment">// 返回新的state</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      hasError: <span class="literal">true</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidCatch(error, info) &#123;</span><br><span class="line">  <span class="comment">// 统计页面的错误。发送请求发送到后台去</span></span><br><span class="line">  <span class="built_in">console</span>.log(error, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="组件通信方式总结"><a href="#组件通信方式总结" class="headerlink" title="组件通信方式总结"></a>组件通信方式总结</h1><h2 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系"></a>组件间的关系</h2><ul>
<li>父子组件</li>
<li>兄弟组件（非嵌套组件）</li>
<li>祖孙组件（跨级组件）</li>
</ul>
<h2 id="几种通信方式"><a href="#几种通信方式" class="headerlink" title="几种通信方式"></a>几种通信方式</h2><ol>
<li>props：<code>children props</code>、<code>render props</code></li>
<li>消息订阅-发布：<br>pubs-sub、event 等等</li>
<li>集中式管理：<br>redux、dva 等等</li>
<li>conText:<br>生产者-消费者模式</li>
</ol>
<h2 id="比较好的搭配方式"><a href="#比较好的搭配方式" class="headerlink" title="比较好的搭配方式"></a>比较好的搭配方式</h2><p>父子组件：props<br>兄弟组件：消息订阅-发布、集中式管理<br>祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(开发用的少，封装插件用的多)</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React 的生命周期</title>
    <url>/2020/09/09/react/lifecycle/</url>
    <content><![CDATA[<h1 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h1><p>构造函数中完成了 <code>React 数据的初始化</code>，它接受两个参数：<code>props</code> 和 <code>context</code>，当想在函数内部使用这两个参数时，需使用 super()传入这两个参数。<br>注意：只要使用了 constructor()就必须写 super(),否则会导致 this 指向错误。</p>
<h1 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h1><p>当组件已经初始化，但是还未渲染 DOM 时</p>
<h1 id="componentWillUnmount-1"><a href="#componentWillUnmount-1" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h1><p>当组件实例被创建并插入 DOM 中</p>
<h1 id="componentWillUnmount-2"><a href="#componentWillUnmount-2" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h1><p>当完成组件的卸载和数据的销毁时<br>一般再此处清除所有的定时器和事件监听</p>
<h1 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h1><p>当接受父组件改变后的 props 需要重新渲染组件时，接受一个参数 <code>nextProps</code></p>
<h1 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h1><p>唯一用于控制组件重新渲染的生命周期，setState 以后，state 发生变化，组件会进入重新渲染的流程，在这里 return false 可以阻止组件的更新<br>可以用于性能优化（部分更新）<br>因为父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有子组件都跟着重新渲染的，因此需要在子组件的该生命周期中做判断</p>
<h1 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h1><p>shouldComponentUpdate 返回 true 以后，组件进入重新渲染的流程，进入 componentWillUpdate（也就是组件更新时）,这里同样可以拿到 nextProps 和 nextState</p>
<h1 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h1><p>当组件组件更新完毕后，这里可以拿到 prevProps 和 prevState，即更新前的 props 和 state</p>
<h1 id="render"><a href="#render" class="headerlink" title="render"></a>render</h1><p><code>render</code> 函数会插入 <code>jsx</code> 生成的 dom 结构</p>
<h1 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h1><p>当子组件接受到 props 时（代替 componentWillReceiveProps），接受两个参数 nextProps、prevState，可以根据 props 来更新 state，也可以触发一些回调，如动画或页面跳转等</p>
<h1 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h1><p>当子组件重新渲染时（代替 componentWillUpdate），接受两个参数 prevProps、prevState，保证和 componentDidUpdate 中读取到的 DOM 一致，此生命周期返回的任何值都将作为参数传递给 componentDidUpdate</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React 脚手架配置代理总结</title>
    <url>/2020/09/09/react/proxy/</url>
    <content><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>在 package.json 中追加如下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span>: <span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ol>
<li>优点：配置简单，前端请求资源时可以不加任何前缀。</li>
<li>缺点：不能配置多个代理。</li>
<li>工作方式：上述方式配置代理，当请求了 3000 不存在的资源时，那么该请求会转发给 5000 （优先匹配前端资源）</li>
</ol>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><ol>
<li><p>第一步：创建代理配置文件</p>
<p>在 src 下创建配置文件：<code>src/setupProxy.js</code></p>
</li>
<li><p>编写 setupProxy.js 配置具体代理规则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(</span><br><span class="line">    proxy(<span class="string">&quot;/api&quot;</span>, &#123;</span><br><span class="line">      <span class="comment">//api是需要转发的请求(所有带有/api前缀的请求都会转发给5000)</span></span><br><span class="line">      target: <span class="string">&quot;http://localhost:5000&quot;</span>, <span class="comment">//配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line">      changeOrigin: <span class="literal">true</span>, <span class="comment">//控制服务器接收到的请求头中host字段的值</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      	changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">      	changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span></span><br><span class="line"><span class="comment">      	changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      pathRewrite: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125; <span class="comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span><br><span class="line">    &#125;),</span><br><span class="line">    proxy(<span class="string">&quot;/api2&quot;</span>, &#123;</span><br><span class="line">      target: <span class="string">&quot;http://localhost:5001&quot;</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123; <span class="string">&quot;^/api2&quot;</span>: <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>说明：</strong></p>
<ol>
<li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li>
<li>缺点：配置繁琐，前端请求资源时必须加前缀。</li>
</ol>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React UI 组件库</title>
    <url>/2020/09/09/react/react-UI/</url>
    <content><![CDATA[<h1 id="最流行的开源-React-UI-组件库"><a href="#最流行的开源-React-UI-组件库" class="headerlink" title="最流行的开源 React UI 组件库"></a>最流行的开源 React UI 组件库</h1><h2 id="material-ui-国外"><a href="#material-ui-国外" class="headerlink" title="material-ui(国外)"></a>material-ui(国外)</h2><p>官网: <a href="http://www.material-ui.com/#/">http://www.material-ui.com/#/</a><br>github: <a href="https://github.com/callemall/material-ui">https://github.com/callemall/material-ui</a></p>
<h2 id="ant-design-国内蚂蚁金服"><a href="#ant-design-国内蚂蚁金服" class="headerlink" title="ant-design(国内蚂蚁金服)"></a>ant-design(国内蚂蚁金服)</h2><p>官网: <a href="https://ant.design/">https://ant.design/</a><br>github: <a href="https://github.com/ant-design/ant-design/">https://github.com/ant-design/ant-design/</a></p>
<h1 id="ant-design-使用入门"><a href="#ant-design-使用入门" class="headerlink" title="ant-design 使用入门"></a>ant-design 使用入门</h1><h2 id="使用-create-react-app-搭建-react-开发环境"><a href="#使用-create-react-app-搭建-react-开发环境" class="headerlink" title="使用 create-react-app 搭建 react 开发环境"></a>使用 create-react-app 搭建 react 开发环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install create-react-app -g</span><br><span class="line">create-react-app antd-demo</span><br><span class="line"><span class="built_in">cd</span> antd-demo</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<h2 id="搭建-antd-的基本开发环境"><a href="#搭建-antd-的基本开发环境" class="headerlink" title="搭建 antd 的基本开发环境"></a>搭建 antd 的基本开发环境</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install antd@<span class="number">2.7</span><span class="number">.4</span> --save</span><br></pre></td></tr></table></figure>

<h3 id="src-App-js"><a href="#src-App-js" class="headerlink" title="src/App.js"></a>src/App.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;Button type=<span class="string">&quot;primary&quot;</span>&gt;Button&lt;/Button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h3 id="src-App-css"><a href="#src-App-css" class="headerlink" title="src/App.css"></a>src/App.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;~antd/dist/antd.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.app</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现按需加载-组件-js-组件-css"><a href="#实现按需加载-组件-js-组件-css" class="headerlink" title="实现按需加载(组件 js/组件 css)"></a>实现按需加载(组件 js/组件 css)</h2><h3 id="使用-eject-命令将所有内建的配置暴露出来"><a href="#使用-eject-命令将所有内建的配置暴露出来" class="headerlink" title="使用 eject 命令将所有内建的配置暴露出来"></a>使用 eject 命令将所有内建的配置暴露出来</h3><p>npm run eject</p>
<h3 id="下载-babel-plugin-import-用于按需加载组件代码和样式的-babel-插件"><a href="#下载-babel-plugin-import-用于按需加载组件代码和样式的-babel-插件" class="headerlink" title="下载 babel-plugin-import(用于按需加载组件代码和样式的 babel 插件)"></a>下载 babel-plugin-import(用于按需加载组件代码和样式的 babel 插件)</h3><p>npm install babel-plugin-import –save-dev</p>
<h3 id="修改配置-config-webpack-config-dev-js"><a href="#修改配置-config-webpack-config-dev-js" class="headerlink" title="修改配置: config/webpack.config.dev.js"></a>修改配置: config/webpack.config.dev.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Process JS with Babel.</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">  include: paths.appSrc,</span><br><span class="line">  loader: <span class="string">&#x27;babel&#x27;</span>,</span><br><span class="line">  options: &#123; + plugins: [ + [<span class="string">&#x27;import&#x27;</span>, &#123; <span class="attr">libraryName</span>: <span class="string">&#x27;antd&#x27;</span>, <span class="attr">style</span>: <span class="string">&#x27;css&#x27;</span> &#125;], + ],</span><br><span class="line">    <span class="comment">// This is a feature of `babel-loader` for webpack (not Babel itself).</span></span><br><span class="line">    <span class="comment">// It enables caching results in ./node_modules/.cache/babel-loader/</span></span><br><span class="line">    <span class="comment">// directory for faster rebuilds.</span></span><br><span class="line">    cacheDirectory: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="去除引入全量样式的语句-src-App-css"><a href="#去除引入全量样式的语句-src-App-css" class="headerlink" title="去除引入全量样式的语句: src/App.css"></a>去除引入全量样式的语句: src/App.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;~antd/dist/antd.css&quot;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React router</title>
    <url>/2020/09/09/react/react-router/</url>
    <content><![CDATA[<h1 id="理解-react-router"><a href="#理解-react-router" class="headerlink" title="理解 react-router"></a>理解 react-router</h1><p>react 的一个插件库<br>专门用来实现一个 SPA 应用<br>基于 react 的项目基本都会用到此库</p>
<h1 id="几个重要问题"><a href="#几个重要问题" class="headerlink" title="几个重要问题"></a>几个重要问题</h1><h2 id="SPA-应用"><a href="#SPA-应用" class="headerlink" title="SPA 应用"></a>SPA 应用</h2><p>单页 Web 应用（single page web application，SPA）<br>整个应用只有一个完整的页面<br>点击页面中的链接不会刷新页面, 本身也不会向服务器发请求<br>当点击链接时, 只会做页面的局部更新<br>数据都需要通过 ajax 请求获取, 并在前端异步展现</p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol>
<li>什么是路由?<br>一个路由就是一个映射关系(key:value)<br>key 为路由路径, value 可能是 function/component</li>
<li>路由分类<br>后台路由: node 服务器端路由, value 是 function, 用来处理客户端提交的请求并返回一个响应数据<br>前台路由: 浏览器端路由, value 是 component, 当请求的是路由 path 时, 浏览器端前没有发送 http 请求, 但界面会更新显示对应的组件</li>
<li>后台路由</li>
</ol>
<ul>
<li>注册路由: router.get(path, function(req, res))</li>
<li>当 node 接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来处理请求, 返回响应数据</li>
<li>前端路由<ul>
<li>注册路由: <Route path="/about" component={About}></li>
<li>当浏览器的 hash 变为#about 时, 当前路由组件就会变为 About 组件</li>
</ul>
</li>
</ul>
<h2 id="关于-url-中的"><a href="#关于-url-中的" class="headerlink" title="关于 url 中的#"></a>关于 url 中的#</h2><ol>
<li>理解#<br>‘#’代表网页中的一个位置。其右面的字符，就是该位置的标识符<br>改变#不触发网页重载<br>改变#会改变浏览器的访问历史</li>
<li>操作#<br>window.location.hash 读取#值<br>window.onhashchange = func 监听 hash 改变</li>
<li>学习资源:<br>阮一峰教程: <a href="http://www.ruanyifeng.com/blog/2011/03/url_hash.html">http://www.ruanyifeng.com/blog/2011/03/url_hash.html</a></li>
</ol>
<h1 id="react-router-的学习资源"><a href="#react-router-的学习资源" class="headerlink" title="react-router 的学习资源"></a>react-router 的学习资源</h1><p><code>github 主页</code>: <a href="https://github.com/ReactTraining/react-router">https://github.com/ReactTraining/react-router</a><br><code>官网教程</code>: <a href="https://github.com/reactjs/react-router-tutorial">https://github.com/reactjs/react-router-tutorial</a><br><code>阮一峰教程</code>: <a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html">http://www.ruanyifeng.com/blog/2016/05/react_router.html</a></p>
<h1 id="相关-API"><a href="#相关-API" class="headerlink" title="相关 API"></a>相关 API</h1><h2 id="react-router-中的相关组件"><a href="#react-router-中的相关组件" class="headerlink" title="react-router 中的相关组件:"></a>react-router 中的相关组件:</h2><ul>
<li>Router: 路由器组件, 用来包含各个路由组件</li>
<li>Route: 路由组件, 注册路由</li>
<li>IndexRoute: 默认子路由组件</li>
<li>hashHistory: 路由的切换由 URL 的 hash 变化决定，即 URL 的#部分发生变化</li>
<li>Link: 路由链接组件</li>
</ul>
<h2 id="Router-路由器组件"><a href="#Router-路由器组件" class="headerlink" title="Router: 路由器组件"></a>Router: 路由器组件</h2><p><code>属性</code>: history={hashHistory} 用来监听浏览器地址栏的变化, 并将 URL 解析成一个地址对象，供 React Router 匹配<br><code>子组件</code>: Route</p>
<h2 id="Route-路由组件"><a href="#Route-路由组件" class="headerlink" title="Route: 路由组件"></a>Route: 路由组件</h2><p>属性 1: path=”/xxx”<br>属性 2: component={Xxx}<br>根路由组件: path=”/“的组件, 一般为 App<br>子路由组件: 子<Route>配置的组件</p>
<h2 id="IndexRoute-默认路由"><a href="#IndexRoute-默认路由" class="headerlink" title="IndexRoute: 默认路由"></a>IndexRoute: 默认路由</h2><p>当父路由被请求时, 默认就会请求此路由组件</p>
<h2 id="hashHistory"><a href="#hashHistory" class="headerlink" title="hashHistory"></a>hashHistory</h2><p>用于 Router 组件的 history 属性<br>作用: 为地址 url 生成?_k=hash, 用于内部保存对应的 state</p>
<h2 id="Link-路由链接"><a href="#Link-路由链接" class="headerlink" title="Link: 路由链接"></a>Link: 路由链接</h2><p>属性 1: to=”/xxx”<br>属性 2: activeClassName=”active”</p>
<h1 id="react-router-的基本使用"><a href="#react-router-的基本使用" class="headerlink" title="react-router 的基本使用"></a>react-router 的基本使用</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-router --save</span><br></pre></td></tr></table></figure>

<h2 id="定义各个路由组件"><a href="#定义各个路由组件" class="headerlink" title="定义各个路由组件"></a>定义各个路由组件</h2><ol>
<li>About.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>About 组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> About;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Home.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Home 组件内容 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Repos.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Repos</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Repos 组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>App.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Hello, React Router!&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/about&quot;</span> activeClassName=<span class="string">&quot;active&quot;</span>&gt;</span><br><span class="line">              About2</span><br><span class="line">            &lt;/Link&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/repos&quot;</span> activeClassName=<span class="string">&quot;active&quot;</span>&gt;</span><br><span class="line">              Repos2</span><br><span class="line">            &lt;/Link&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="index-js-注册路由-渲染路由器标签"><a href="#index-js-注册路由-渲染路由器标签" class="headerlink" title="index.js: 注册路由, 渲染路由器标签"></a>index.js: 注册路由, 渲染路由器标签</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, IndexRoute, hashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;react-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./modules/App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;./modules/About&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Repos <span class="keyword">from</span> <span class="string">&quot;./modules/Repos&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;./modules/Home&quot;</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;/&quot;</span> component=&#123;App&#125;&gt;</span><br><span class="line">      &lt;IndexRoute component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;/about&quot;</span> component=&#123;About&#125;&gt;&lt;/Route&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;/repos&quot;</span> component=&#123;Repos&#125;&gt;&lt;/Route&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Router&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="主页面-index-html"><a href="#主页面-index-html" class="headerlink" title="主页面: index.html"></a>主页面: index.html</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="向路由组件传递请求参数"><a href="#向路由组件传递请求参数" class="headerlink" title="向路由组件传递请求参数"></a>向路由组件传递请求参数</h1><h2 id="repo-js-repos-组件下的分路由组件"><a href="#repo-js-repos-组件下的分路由组件" class="headerlink" title="repo.js: repos 组件下的分路由组件"></a>repo.js: repos 组件下的分路由组件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123; params &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; username, repoName &#125; = params;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户名:&#123;username&#125;, 仓库名:&#123;repoName&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="repos-js"><a href="#repos-js" class="headerlink" title="repos.js"></a>repos.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> NavLink <span class="keyword">from</span> <span class="string">&quot;./NavLink&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Repos</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      repos: [</span><br><span class="line">        &#123; <span class="attr">username</span>: <span class="string">&quot;faceback&quot;</span>, <span class="attr">repoName</span>: <span class="string">&quot;react&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">username</span>: <span class="string">&quot;faceback&quot;</span>, <span class="attr">repoName</span>: <span class="string">&quot;react-router&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">username</span>: <span class="string">&quot;Angular&quot;</span>, <span class="attr">repoName</span>: <span class="string">&quot;angular&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">username</span>: <span class="string">&quot;Angular&quot;</span>, <span class="attr">repoName</span>: <span class="string">&quot;angular-cli&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.handleSubmit = <span class="built_in">this</span>.handleSubmit.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit() &#123;</span><br><span class="line">    <span class="keyword">const</span> repos = <span class="built_in">this</span>.state.repos;</span><br><span class="line">    repos.push(&#123;</span><br><span class="line">      username: <span class="built_in">this</span>.refs.username.value,</span><br><span class="line">      repoName: <span class="built_in">this</span>.refs.repoName.value</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; repos &#125;);</span><br><span class="line">    <span class="built_in">this</span>.refs.username.value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.refs.repoName.value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Repos&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;<span class="built_in">this</span>.state.repos.map(<span class="function">(<span class="params">repo, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> to = <span class="string">`/repos/<span class="subst">$&#123;repo.username&#125;</span>/<span class="subst">$&#123;repo.repoName&#125;</span>`</span>;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;li key=&#123;index&#125;&gt;</span><br><span class="line">                &lt;Link to=&#123;to&#125; activeClassName=<span class="string">&quot;active&quot;</span>&gt;</span><br><span class="line">                  &#123;repo.repoName&#125;</span><br><span class="line">                &lt;/Link&gt;</span><br><span class="line">              &lt;/li&gt;</span><br><span class="line">            );</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;form onSubmit=&#123;<span class="built_in">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">              &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;用户名&quot;</span> ref=<span class="string">&quot;username&quot;</span> /&gt; /&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">              &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;仓库名&quot;</span> ref=<span class="string">&quot;repoName&quot;</span> /&gt;&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">              &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;添加&lt;/button&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="index-js-配置路由"><a href="#index-js-配置路由" class="headerlink" title="index.js: 配置路由"></a>index.js: 配置路由</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/repos&quot;</span> component=&#123;Repos&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/repos/:username/:repoName&quot;</span> component=&#123;Repo&#125; /&gt;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure>

<h1 id="优化-Link-组件"><a href="#优化-Link-组件" class="headerlink" title="优化 Link 组件"></a>优化 Link 组件</h1><h2 id="NavLink-js"><a href="#NavLink-js" class="headerlink" title="NavLink.js"></a>NavLink.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">NavLink</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Link</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">activeClassName</span>=<span class="string">&quot;active&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Repos-js"><a href="#Repos-js" class="headerlink" title="Repos.js"></a>Repos.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;NavLink to=&#123;to&#125;&gt;&#123;repo.repoName&#125;&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React 路由传参的三种方式</title>
    <url>/2020/09/10/react/react-transfer-params/</url>
    <content><![CDATA[<h1 id="params-传参"><a href="#params-传参" class="headerlink" title="params 传参"></a>params 传参</h1><h2 id="params-传参-刷新页面后参数不消失，参数会在地址栏显示"><a href="#params-传参-刷新页面后参数不消失，参数会在地址栏显示" class="headerlink" title="params 传参(刷新页面后参数不消失，参数会在地址栏显示)"></a>params 传参(刷新页面后参数不消失，参数会在地址栏显示)</h2><p><strong>路由页面：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/demo/:id&quot;</span> component=&#123;Demo&#125;&gt;&lt;<span class="regexp">/Route&gt; /</span><span class="regexp">/ 注意要配置 /</span>:id</span><br></pre></td></tr></table></figure>

<p><strong>路由跳转并传递参数：</strong></p>
<ol>
<li>链接方式：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;<span class="string">&#x27;/demo/&#x27;</span>+<span class="string">&#x27;6&#x27;</span>&#125;&gt;XX&lt;/Link&gt;</span><br><span class="line">&lt;Link to=&#123;&#123;<span class="attr">pathname</span>:<span class="string">&#x27;/demo/&#x27;</span>+<span class="string">&#x27;6&#x27;</span>&#125;&#125;&gt;XX&lt;/Link&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>js 方式：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.history.push(<span class="string">&quot;/demo/&quot;</span> + <span class="string">&quot;6&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.props.history.push(&#123; <span class="attr">pathname</span>: <span class="string">&quot;/demo/&quot;</span> + <span class="string">&quot;6&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>获取参数：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.match.params.id; <span class="comment">// 注意这里是 match 而非 history</span></span><br></pre></td></tr></table></figure>

<h2 id="params-传参-多个动态参数"><a href="#params-传参-多个动态参数" class="headerlink" title="params 传参(多个动态参数)"></a>params 传参(多个动态参数)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  id: <span class="number">88</span>,</span><br><span class="line">  name: <span class="string">&quot;Jack&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>路由页面：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/demo/:id/:name&quot;</span> component=&#123;Demo&#125;&gt;&lt;/Route&gt;</span><br></pre></td></tr></table></figure>

<p><strong>路由跳转并传递参数：</strong></p>
<ol>
<li>链接方式：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;&#123; <span class="attr">pathname</span>: <span class="string">`/demo/<span class="subst">$&#123;<span class="built_in">this</span>.state.id&#125;</span>/<span class="subst">$&#123;<span class="built_in">this</span>.state.name&#125;</span>`</span> &#125;&#125;&gt;XX&lt;/Link&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>js 方式：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.history.push(&#123;</span><br><span class="line">  pathname: <span class="string">`/demo/<span class="subst">$&#123;<span class="built_in">this</span>.state.id&#125;</span>/<span class="subst">$&#123;<span class="built_in">this</span>.state.name&#125;</span>`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>获取参数：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.match.params; <span class="comment">//结果 &#123;id: &quot;88&quot;, name: &quot;Jack&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="query-传参"><a href="#query-传参" class="headerlink" title="query 传参"></a>query 传参</h1><blockquote>
<p>刷新页面后参数消失</p>
</blockquote>
<p><strong>路由页面：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/demo&quot;</span> component=&#123;Demo&#125;&gt;&lt;<span class="regexp">/Route&gt; /</span><span class="regexp">/ 无需配置</span></span><br></pre></td></tr></table></figure>

<p><strong>路由跳转并传递参数：</strong></p>
<ol>
<li>链接方式：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;&#123; <span class="attr">pathname</span>: <span class="string">&quot;/demo&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">id</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;dahuang&quot;</span> &#125; &#125;&#125;&gt;XX&lt;/Link&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>js 方式：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.history.push(&#123;</span><br><span class="line">  pathname: <span class="string">&quot;/demo&quot;</span>,</span><br><span class="line">  query: &#123; <span class="attr">id</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;dahuang&quot;</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>获取参数：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.location.query.name;</span><br></pre></td></tr></table></figure>

<h1 id="state-传参"><a href="#state-传参" class="headerlink" title="state 传参"></a>state 传参</h1><blockquote>
<p>刷新页面后参数不消失，state 传的参数是加密的，比 query 传参好用</p>
</blockquote>
<p>注：state 传参的方式<code>只支持 Browserrouter 路由</code>，<code>不支持 hashrouter</code></p>
<p><strong>路由页面：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/demo&quot;</span> component=&#123;Demo&#125;&gt;&lt;<span class="regexp">/Route&gt; /</span><span class="regexp">/无需配置</span></span><br></pre></td></tr></table></figure>

<p><strong>路由跳转并传递参数：</strong></p>
<ol>
<li>链接方式：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;&#123; <span class="attr">pathname</span>: <span class="string">&quot;/demo&quot;</span>, <span class="attr">state</span>: &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">&quot;dahuang&quot;</span> &#125; &#125;&#125;&gt;XX&lt;/Link&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>js 方式：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.history.push(&#123;</span><br><span class="line">  pathname: <span class="string">&quot;/demo&quot;</span>,</span><br><span class="line">  state: &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">&quot;dahuang&quot;</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>获取参数：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.location.state.name;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>redux</title>
    <url>/2020/09/09/react/redux/</url>
    <content><![CDATA[<h1 id="redux-理解"><a href="#redux-理解" class="headerlink" title="redux 理解"></a>redux 理解</h1><p>什么: redux 是专门做状态管理的独立第三方库，不是 react 插件<br>作用: 对应用中状态进行集中式的管理(写/读)<br>开发: 与 react-redux，redux-thunk 等插件配合使用</p>
<h1 id="redux-相关-API"><a href="#redux-相关-API" class="headerlink" title="redux 相关 API"></a>redux 相关 API</h1><p>redux 中包含: createStore()，applyMiddleware()，combineReducers()<br>store 对象: getState()，dispatch()，subscribe()<br>react-redux: <Provider>，connect()()</p>
<h1 id="redux-核心概念-3-个"><a href="#redux-核心概念-3-个" class="headerlink" title="redux 核心概念(3 个)"></a>redux 核心概念(3 个)</h1><h2 id="action"><a href="#action" class="headerlink" title="action:"></a>action:</h2><p>默认是对象(同步 action)，{type: ‘xxx’, data: value}，需要通过对应的 actionCreator 产生，它的值也可以是函数(异步 action)，需要引入 redux-thunk 才可以</p>
<h2 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h2><p>根据老的 state 和指定的 action，返回一个新的 state<br>不能修改老的 state</p>
<h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><p>redux <code>最核心</code>的管理对象<br>内部管理着: <code>state</code> 和 <code>reducer</code><br>提供方法: getState()，dispatch(action)，subscribe(listener)</p>
<h1 id="redux-工作流程"><a href="#redux-工作流程" class="headerlink" title="redux 工作流程"></a>redux 工作流程</h1><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg"><br><img src="https://i.imgur.com/2R5G8bG.png"></p>
<h1 id="使用-redux-及相关库编码"><a href="#使用-redux-及相关库编码" class="headerlink" title="使用 redux 及相关库编码"></a>使用 redux 及相关库编码</h1><h2 id="需要引入的库"><a href="#需要引入的库" class="headerlink" title="需要引入的库:"></a>需要引入的库:</h2><ul>
<li>redux</li>
<li>react-redux</li>
<li>redux-thunk</li>
<li>redux-devtools-extension(这个只在开发时需要)</li>
</ul>
<h2 id="redux-文件夹"><a href="#redux-文件夹" class="headerlink" title="redux 文件夹:"></a>redux 文件夹:</h2><ul>
<li>action-types.js</li>
<li>actions.js</li>
<li>reducers.js</li>
<li>store.js</li>
</ul>
<h2 id="组件分-2-类"><a href="#组件分-2-类" class="headerlink" title="组件分 2 类:"></a>组件分 2 类:</h2><p><code>ui 组件(components)</code>: 不使用 redux 相关 PAI<br><code>容器组件(containers)</code>: 使用 redux 相关 API</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2021/01/14/redis/intro/</url>
    <content><![CDATA[<h1 id="什么是-Redis"><a href="#什么是-Redis" class="headerlink" title="什么是 Redis"></a>什么是 Redis</h1><p>Redis 是一个开源（BSD 许可）的内存数据结构存储，用作数据库，缓存和消息代理。它支持数据结构，如字符串，散列，列表，集合，带有范围查询的排序集，位图，超级日志，具有半径查询和流的地理空间索引。Redis 具有内置复制，Lua 脚本，LRU 驱逐，事务和不同级别的磁盘持久性，并通过 Redis Sentinel 提供高可用性并使用 Redis Cluster 自动分区。</p>
<ul>
<li>redis 是由 C 语言写成</li>
<li>开源 key-value 型数据库</li>
</ul>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>速度快，因为数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O(1)</p>
</li>
<li><p>支持丰富数据类型，支持 string，list，set，sorted set，hash</p>
</li>
<li><p>支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</p>
</li>
<li><p>丰富的特性：可用于缓存，消息，按 key 设置过期时间，过期后将会自动删除</p>
</li>
</ul>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存是 redis 最常见的应用场景，主要是因为 redis 读写性能优异，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value DB。其次 redis 支持保存多种数据结构，此外单个 value 的最大限制是 1GB，而 memcached 只能保存 1MB 的数据。</p>
<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>因为 redis 单线程的这个特性，其中有个很重要的应用场景就是分布式锁。对于高并发的系统，都是用多服务器部署，其中程序进行逻辑处理时就可以用到分布式锁来限制程序的并发。</p>
<h2 id="自动过期"><a href="#自动过期" class="headerlink" title="自动过期"></a>自动过期</h2><p>redis 针对数据都可以设置过期时间，可以自动的去清理过期的数据。常见的应用场景有：短信验证码，活动开始和截止日期等具有时间性的商品展示等</p>
<h2 id="计数器和排行榜"><a href="#计数器和排行榜" class="headerlink" title="计数器和排行榜"></a>计数器和排行榜</h2><p>redis 在内存中对数字进行递增或递减的操作支持很好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些排行操作的时的非常简单。</p>
<h2 id="秒杀的缓冲层"><a href="#秒杀的缓冲层" class="headerlink" title="秒杀的缓冲层"></a>秒杀的缓冲层</h2><p>秒杀是现在互联网系统中常见的营销模式，但是通常由于并发太高导致、程序阻塞等原因给开发带来很大困难。可以利用 redis 单线程的特性来控制并发，可将 redis 作为缓存平台，由于 redis 的读写能力很强，所以不易产生程序阻塞现象。</p>
<h2 id="处理签到和其他状态（大数据处理）"><a href="#处理签到和其他状态（大数据处理）" class="headerlink" title="处理签到和其他状态（大数据处理）"></a>处理签到和其他状态（大数据处理）</h2><p>当用户量庞大时，如何去在极短的时间里去统计用户的状态，签到情况等，如 QQ 打卡、 查看好友状态等。redis 中的<strong>位图</strong>可以很好的解决这个问题。</p>
<h2 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h2><p>可以使用 redis 的发布订阅去实现的社交聊天系统。</p>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="Redis-发布-订阅实现聊天室"><a href="#Redis-发布-订阅实现聊天室" class="headerlink" title="Redis 发布/订阅实现聊天室"></a>Redis 发布/订阅实现聊天室</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rclient = redis.createClient(<span class="number">6379</span>, <span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">rclient.on(<span class="string">&quot;ready&quot;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;client ready ....&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publish = redis.createClient(<span class="number">6379</span>, <span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">publish.on(<span class="string">&quot;ready&quot;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;publish ready ...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function"><span class="params">socket</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 订阅</span></span><br><span class="line">  rclient.subscribe(<span class="string">&quot;chat&quot;</span>);</span><br><span class="line">  <span class="comment">// 收到消息后将推送消息</span></span><br><span class="line">  rclient.on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">channel, msg</span>) =&gt;</span> &#123;</span><br><span class="line">    io.emit(<span class="string">&quot;chat message&quot;</span>, msg);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&quot;chat message&quot;</span>, <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;receive message:&quot;</span> + msg);</span><br><span class="line">    publish.publish(<span class="string">&quot;chat&quot;</span>, msg);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&quot;disconnect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;user disconnected&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Redis-队列实现秒杀-秒杀实例"><a href="#Redis-队列实现秒杀-秒杀实例" class="headerlink" title="Redis 队列实现秒杀 秒杀实例"></a>Redis 队列实现秒杀 秒杀实例</h2><p><a href="https://www.jianshu.com/p/31f59426c779">https://www.jianshu.com/p/31f59426c779</a></p>
<h3 id="痛点解决"><a href="#痛点解决" class="headerlink" title="痛点解决"></a>痛点解决</h3><ul>
<li><p>短时间内大量并发</p>
</li>
<li><p>保证不会超卖</p>
<p>使用 Redi 提供缓冲层</p>
<ul>
<li><p>内存型数据库性能远优于关系型数据库</p>
</li>
<li><p>Redis 单进程方式保证操作原子性</p>
</li>
</ul>
</li>
</ul>
<h3 id="使用-Redis-队列投放秒杀商品"><a href="#使用-Redis-队列投放秒杀商品" class="headerlink" title="使用 Redis 队列投放秒杀商品"></a>使用 Redis 队列投放秒杀商品</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/create&quot;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="comment">// 清空商品</span></span><br><span class="line">  <span class="keyword">await</span> client.ltrim(<span class="string">&quot;goods&quot;</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加30个商品</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">30</span>).fill().forEach(<span class="keyword">async</span> (v, i) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> client.rpush(<span class="string">&quot;goods&quot;</span>, i);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;添加商品:&quot;</span>, i);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// redis llen</span></span><br><span class="line">  <span class="keyword">const</span> num = <span class="keyword">await</span> client.llen(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;抢购商品数量:&quot;</span>, num);</span><br><span class="line"></span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    ok: <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="秒杀从商品队列中取出商品"><a href="#秒杀从商品队列中取出商品" class="headerlink" title="秒杀从商品队列中取出商品"></a>秒杀从商品队列中取出商品</h3><h3 id="使用哈希表作为临时订单"><a href="#使用哈希表作为临时订单" class="headerlink" title="使用哈希表作为临时订单"></a>使用哈希表作为临时订单</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/buy&quot;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="comment">// 产生一个随机数当做用户id</span></span><br><span class="line">  <span class="keyword">const</span> uid = (<span class="built_in">Math</span>.random() * <span class="number">9999999</span>).toFixed();</span><br><span class="line">  <span class="keyword">let</span> pid = <span class="keyword">await</span> client.lpop(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断库存</span></span><br><span class="line">  <span class="keyword">if</span> (pid) &#123;</span><br><span class="line">    <span class="keyword">await</span> client.hset(<span class="string">&quot;orders&quot;</span>, pid, uid);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;订单生成&quot;</span>, pid, uid);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.body = &#123; <span class="attr">ok</span>: <span class="number">1</span> &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="打印订单列表"><a href="#打印订单列表" class="headerlink" title="打印订单列表"></a>打印订单列表</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/order&quot;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="keyword">await</span> client.hkeys(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;订单列表&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> orders = <span class="keyword">await</span> client.hgetall(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (k <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;k&#125;</span> =&gt; <span class="subst">$&#123;<span class="keyword">await</span> client.hget(<span class="string">&quot;orders&quot;</span>, k)&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    orders</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="清空订单"><a href="#清空订单" class="headerlink" title="清空订单"></a>清空订单</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/order/clear&quot;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="keyword">await</span> client.hkeys(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (k <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`删除订单: <span class="subst">$&#123;k&#125;</span> =&gt; <span class="subst">$&#123;<span class="keyword">await</span> client.hdel(<span class="string">&quot;orders&quot;</span>, k)&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.body = &#123; <span class="attr">ok</span>: <span class="number">1</span> &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="压力测试验证"><a href="#压力测试验证" class="headerlink" title="压力测试验证"></a>压力测试验证</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> autocannon = <span class="built_in">require</span>(<span class="string">&quot;autocannon&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> autocannon(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://localhost:3000/buy&quot;</span>,</span><br><span class="line">    connections: <span class="number">100</span>, <span class="comment">//default</span></span><br><span class="line">    pipelining: <span class="number">1</span>, <span class="comment">// default</span></span><br><span class="line">    duration: <span class="number">1</span> <span class="comment">// default</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;秒杀完成&quot;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h1 id="Redis-API"><a href="#Redis-API" class="headerlink" title="Redis API"></a>Redis API</h1><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><ul>
<li>keys: 计算所有的键 O(n)</li>
<li>dbsize: 数据库大小</li>
<li>exists keys: key 是否存在</li>
<li>del：删除 key</li>
<li>expire key seconds: 设置过期时间</li>
<li>type key: 获取 key 的数据类型</li>
<li>ttl key: 查看 key 的剩余过期时间</li>
<li>persist key: 去掉 key 的过期时间</li>
</ul>
<h2 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h2><ul>
<li>rpush key value1 value2 valueN O(1-n)</li>
<li>lpush key value1 value2 valueN O(1-n)</li>
<li>linsert key before|after value newValue O(n)</li>
<li>lpop key</li>
<li>rpop key</li>
<li>lrem key count value (删除 count 个 value 元素) 0(n)</li>
<li>ltrim key start end (按照索引范围修剪列表) o(n)</li>
<li>lrange key start end (包含 end) (获取列表制定索引范围)</li>
<li>lindex key index o(n)</li>
<li>llen key</li>
<li>lset key index newValue</li>
<li>blpop key timeout (lpop 的阻塞版本)</li>
<li>brpop key timeout (rpop 的阻塞版本)</li>
<li>lpush + lpop = stack</li>
<li>lpush + rpop = queue</li>
<li>lpush + ltrim = Capped Collection</li>
<li>lpush + brpop = Message Queue</li>
</ul>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><ul>
<li>场景：缓存、计数器、分布式锁</li>
<li>get key</li>
<li>set key value</li>
<li>incr key</li>
<li>decr key</li>
<li>incrby key k</li>
<li>decrby key k</li>
<li>setnx key value 值不存在才设置</li>
<li>set key value xx 存在才设置</li>
<li>mget 批量获取 O(n)</li>
<li>mset 批量设置 O(n)</li>
<li>getset key newvalue 设置新值返回旧值</li>
<li>append key value 将新值追加到旧值</li>
<li>strlen 获取值的长度</li>
<li>incrbyfloat key 3.5 增加对应 key 3.5</li>
<li>getrange key start end</li>
<li>setrange key start value</li>
</ul>
<h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><ul>
<li>无序 无重复 支持集合间操作</li>
<li>sadd key element （添加）</li>
<li>srem key element （删除）</li>
<li>scard key</li>
<li>sismember key element</li>
<li>srandmember key count (随机选出 count 个元素)</li>
<li>spop key (随机弹出一个元素)</li>
<li>smembers key (取出所有元素 小心使用)</li>
<li>sscan (遍历集合)</li>
<li>sdiff 差集</li>
<li>sinter 交集</li>
<li>sunion 并集</li>
<li>sadd = 打标签</li>
<li>spop/srandmember = 随机</li>
<li>sadd + sinter = Social Graph</li>
</ul>
<h2 id="有序集合类型"><a href="#有序集合类型" class="headerlink" title="有序集合类型"></a>有序集合类型</h2><ul>
<li>zadd key score element O(logN)</li>
<li>zrem key element （删除）</li>
<li>zscore key element</li>
<li>zincrby key increScore element （增加分数）</li>
<li>zcard key (返回个数)</li>
<li>zrange key start end withscores (获取元素) （O(logN + m)）</li>
<li>zrangebyscore key minScore maxScore</li>
<li>zcount key minScore maxScore （O(logN + m)）</li>
<li>zremrangebyrank key start end (删除指定排名内的升序元素)</li>
<li>zremrangebyscore key start end (删除指定分数内的升序元素)</li>
<li>zrevrank</li>
<li>zrevrange</li>
<li>zrevrangebyscore</li>
<li>zinterstore</li>
<li>zunionstore</li>
</ul>
<h2 id="哈希类型"><a href="#哈希类型" class="headerlink" title="哈希类型"></a>哈希类型</h2><ul>
<li>hget key filed</li>
<li>hset key field value</li>
<li>hdel key field</li>
<li>hgetall key O(n)</li>
<li>hexists key field</li>
<li>hlen key 获取字段数量</li>
<li>hmget key field1 field2 O(n)</li>
<li>hmset key field1 value1 field2 value2 O(n)</li>
<li>hincrby key field value</li>
<li>hvals key 返回 hash key 对应所有 field 的 value O(n)</li>
<li>hkeys key 返回 hash key 对应的所有 field O(n)</li>
<li>hsetnx key field value</li>
<li>hincrby key field intCounter</li>
<li>hincrbyfloat key field floatCounter</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器部署LAMP环境</title>
    <url>/2021/01/14/server/alicloud-lamp/</url>
    <content><![CDATA[<h2 id="购买阿里云学生机"><a href="#购买阿里云学生机" class="headerlink" title="购买阿里云学生机"></a>购买阿里云学生机</h2><ol>
<li>使用淘宝号登陆阿里云 app</li>
<li>点击中间部分校园扶持</li>
<li>进入新页面点击学生特惠</li>
<li>选择云服务器</li>
<li>在选操作系统的时候选 centos，如果没有 centos 系统可以先选 ubuntu（后续更改 centos）</li>
<li>选好以后购买即可 9.9 元一个月</li>
</ol>
<h2 id="更换-centos7-系统"><a href="#更换-centos7-系统" class="headerlink" title="更换 centos7 系统"></a>更换 centos7 系统</h2><ol>
<li>登陆 PC 端阿里云网站（aliyun.com）</li>
<li>点击右上角<strong>控制台</strong>，打开新页面点击左侧<strong>云服务器 ECS</strong></li>
<li>点击新的页面左侧的 <strong>实例</strong> 会显示已经买了的服务器</li>
<li>点击服务器的实例名称会跳转实例详情页面</li>
<li>在详情页面点击右上角<strong>停止</strong>按钮，会有提示，选择<strong>停止</strong>，确定即可</li>
<li>停止以后点击下方的<strong>更换系统盘</strong>，在新的页面选择<strong>centos7.2</strong>版本</li>
<li>下边登陆密码记录好，一会儿备用（看下图）。更换以后返回实例列表会显示提供的<strong>公共 ip</strong>地址用来访问和远程连接</li>
</ol>
<p><img src="/images/alicloud/shop.png"></p>
<p><img src="/images/alicloud/ip.png"></p>
<h2 id="使用-Xshell-连接阿里云服务器"><a href="#使用-Xshell-连接阿里云服务器" class="headerlink" title="使用 Xshell 连接阿里云服务器"></a>使用 Xshell 连接阿里云服务器</h2><p><strong>下载 Xshell</strong></p>
<pre><code>https://www.netsarang.com/download/down_form.html?code=522</code></pre>
<p><img src="/images/alicloud/xshell.png"></p>
<p>填入信息后，点击下方 submit 下载</p>
<p><strong>配置连接</strong></p>
<p>打开软件，点击文件，新建（看下图）</p>
<ol>
<li>ip 填写阿里云的公网 ip</li>
<li>端口号 22</li>
<li>点击确定，选择连接</li>
<li>提示输入用户名和密码</li>
<li>用户名是 root，密码是更换系统盘时设置的密码</li>
<li>出现下图即为连接成功</li>
</ol>
<p><img src="/images/alicloud/xshell1.png"></p>
<p><img src="/images/alicloud/xshell2.png"></p>
<h2 id="使用-Xftp-连接服务器，用于本机与服务器的文件传输"><a href="#使用-Xftp-连接服务器，用于本机与服务器的文件传输" class="headerlink" title="使用 Xftp 连接服务器，用于本机与服务器的文件传输"></a>使用 Xftp 连接服务器，用于本机与服务器的文件传输</h2><p><strong>下载 xftp</strong></p>
<pre><code>https://www.netsarang.com/download/down_form.html?code=523</code></pre>
<p>和 Xshell 下载方式相同</p>
<p><strong>配置连接</strong></p>
<p>打开软件，点击文件，新建连接（看下图）</p>
<ol>
<li>主机填写阿里云公网 ip</li>
<li>协议选择 SFTP</li>
<li>下方登陆输入用户名和密码即可</li>
</ol>
<p><img src="/images/alicloud/xftp1.png"></p>
<p><strong>第二种方法</strong></p>
<ol>
<li>在 Xshell 中连接服务器之后点击菜单栏按钮（看下图），也可以自动打开 xftp 用来文件传输。</li>
<li>比如想在 /var/www/html 中加入本机的 php 文件，就在 xshell 中输入 cd /var/www/html 然后点击第一步中所说的按钮，就会打开 xftp，以及所切换的文件目录（看下图）</li>
</ol>
<p><img src="/images/alicloud/xshellxftp.png"></p>
<p><img src="/images/alicloud/shell.png"></p>
<h2 id="安装-apache"><a href="#安装-apache" class="headerlink" title="安装 apache"></a>安装 apache</h2><p><strong>安装 apache</strong></p>
<pre><code>[root@localhost ~]# yum -y install httpd</code></pre>
<p>安装完会提示安装成功</p>
<p><strong>启动 apache 服务</strong></p>
<pre><code>[root@localhost ~]# systemctl start httpd.service</code></pre>
<p><strong>设置 apache 服务开机启动</strong></p>
<pre><code>[root@localhost ~]# systemctl enable httpd.service</code></pre>
<p><strong>测试 apache 是否安装成功</strong></p>
<p>打开浏览器输入 ip 地址(公网 ip)出现下图说明安装成功</p>
<p><img src="/images/alicloud/success.png"></p>
<blockquote>
<p>CentOS7 用的是 Firewall-cmd，CentOS7 之前用的是 iptables 防火墙；要想让外网能访问到 apache 主目录，就需要做以下的操作(阿里云无需做此步骤)</p>
</blockquote>
<pre><code>[root@localhost ~]# firewall-cmd --permanent --zone=public --add-service=http
[root@localhost ~]# firewall-cmd --permanent --zone=public --add-service=https
[root@localhost ~]# firewall-cmd --reload</code></pre>
<h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><p><strong>安装 epel-release</strong></p>
<pre><code>[root@localhost ~]# yum -y install epel-release</code></pre>
<p><strong>获取 PHP7 的 yum 源</strong></p>
<pre><code>rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</code></pre>
<p><strong>安装 php7</strong></p>
<pre><code>[root@localhost ~]# yum install php70w 出现安装提示 输入 Y 确认即可</code></pre>
<p>安装成功以后输入 <code>php -v</code> 会出现 php 的版本</p>
<p><strong>重启 apache 服务器</strong></p>
<pre><code>systemctl restart httpd或者systemctl restart httpd.service</code></pre>
<p><strong>安装 PHP 常用的模块</strong></p>
<pre><code>yum -y install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel</code></pre>
<p><strong>查看已安装的模块</strong></p>
<pre><code>php -m

安装包         提供的拓展
php70w          mod_php , php70w-zts
php70w-bcmath
php70w-cli      php-cgi, php-pcntl, php-readline
php70w-common   php-api, php-bz2, php-calendar, php-ctype, php-curl, php-date, php-exif, php-fileinfo, php-filter, php-ftp, php-gettext, php-gmp, php-hash, php-iconv, php-json, php-libxml, php-openssl, php-pcre, php-pecl-Fileinfo, php-pecl-phar, php-pecl-zip, php-reflection, php-session, php-shmop, php-simplexml   , php-sockets, php-spl, php-tokenizer, php-zend-abi, php-zip, php-zlib
php70w-dba
php70w-devel
php70w-embedded     php-embedded-devel
php70w-enchant
php70w-fpm
php70w-gd
php70w-imap
php70w-interbase        php_database, php-firebird
php70w-intl
php70w-ldap
php70w-mbstring
php70w-mcrypt
php70w-mysql        php-mysqli, php_database
php70w-mysqlnd      php-mysqli, php_database
php70w-odbc     php-pdo_odbc, php_database
php70w-opcache      php70w-pecl-zendopcache
php70w-pdo      php70w-pdo_sqlite, php70w-sqlite3
php70w-pdo_dblib        php70w-mssql
php70w-pear
php70w-pecl-apcu
php70w-pecl-imagick
php70w-pecl-memcached
php70w-pecl-mongodb
php70w-pecl-redis
php70w-pecl-xdebug
php70w-pgsql        php-pdo_pgsql, php_database
php70w-phpdbg
php70w-process      php-posix, php-sysvmsg, php-sysvsem, php-sysvshm
php70w-pspell
php70w-recode
php70w-snmp
php70w-soap
php70w-tidy
php70w-xml      php-dom, php-domxml, php-wddx, php-xsl
php70w-xmlrpc</code></pre>
<p>譬如你要加装 mysql，那么可以直接,别怀疑就是这么简单：</p>
<pre><code>[root@localhost ~]# yum install php70w-mysql</code></pre>
<p>安装完以后重启 apache</p>
<pre><code>systemctl restart httpd.service</code></pre>
<p><strong>测试是否能够运行 php</strong></p>
<p>打开 <code>vim /var/www/html/info.php</code> 输入 <code>&lt;?php echo phpinfo(); ?&gt;</code> 保存退出。在本机浏览器输入 10.2.5.17/info.php(ip 换成阿里云 ip) 会出现 php 的信息，以及安装的 PHP 模块儿</p>
<h2 id="安装-Mysql"><a href="#安装-Mysql" class="headerlink" title="安装 Mysql"></a>安装 Mysql</h2><p><strong>安装 5.7.x 的 mysql 源</strong></p>
<pre><code>yum -y localinstall  http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</code></pre>
<p><strong>检查 mysql 源是否安装成功</strong></p>
<pre><code> yum repolist enabled | grep &quot;mysql.*-community.*&quot;</code></pre>
<p><strong>安装 mysql</strong></p>
<pre><code>yum -y install mysql-community-server install mysql-community-devel</code></pre>
<p><strong>启动 mysql</strong></p>
<pre><code>service mysqld start</code></pre>
<p><strong>检查 mysql 启动是否正常</strong></p>
<pre><code>service mysqld status 或者 ps -ef | grep mysql</code></pre>
<p><strong>设置 mysqld 服务开机自启动</strong></p>
<pre><code>systemctl enable mysqld.service</code></pre>
<p><strong>检查 mysqld 开机自启动是否设置成功</strong></p>
<pre><code>systemctl list-dependencies | grep mysqld</code></pre>
<p><strong>查看 mysql 默认密码</strong></p>
<p>查阅 mysql 的官方文档(文档在上面工具/原料里面有写),查询对应的随机密码, 这里说明一下 mysql5.7 以后的争强了安全机制, 所以使用 yum 安装,启动会系统会自动生成一个随机的密码.<br>查看 mysql 的随机密码</p>
<pre><code>grep &#39;temporary password&#39; /var/log/mysqld.log</code></pre>
<p>使用查询得到的随机密码在终端登录</p>
<p>mysql -u root -p 更改密码(mysql 文档规定,密码必须包括大小写字母数字加特殊符号&gt;8 位)</p>
<pre><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;你要设置的密码&#39;;
退出mysql客户端,用刚才修改的密码登录确保密码修改成功</code></pre>
<p>mysql -uroot -pxxxxx</p>
<p><strong>(看下图)</strong><br><img src="/images/alicloud/mysql1.png"></p>
<p><img src="/images/alicloud/mysql2.png"></p>
<p><img src="/images/alicloud/mysql3.png"></p>
<p><img src="/images/alicloud/mysql4.png"></p>
<p><strong>设置 mysql 远程连接</strong></p>
<p>直接授权(推荐)</p>
<pre><code> mysql -u root -p
mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;youpassword&#39; WITH GRANT OPTION;
操作完后切记执行以下命令刷新权限
FLUSH PRIVILEGES</code></pre>
<p><img src="/images/alicloud/10038.png"></p>
<p><strong>navicat 远程连接</strong></p>
<p><img src="/images/alicloud/lianjie1.png"></p>
<p>如果连接失败请关闭防火墙 输入以下代码</p>
<pre><code>systemctl stop firewalld.service #停止firewall
systemctl disable firewalld.service #禁止firewall开机启动
firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</code></pre>
<p><img src="/images/alicloud/fanghuo.png">;</p>
<h2 id="测试-php-和-mysql-是否能够使用"><a href="#测试-php-和-mysql-是否能够使用" class="headerlink" title="测试 php 和 mysql 是否能够使用"></a>测试 php 和 mysql 是否能够使用</h2><p>打开 <code>vim /var/www/html/info.php</code> 输入以下内容，然后在本机浏览器预览，如果有数据就说明已经完成了。</p>
<pre><code>&lt;?php

$con = mysqli_connect(&#39;localhost&#39;, &#39;root&#39;, &#39;LIxiang@123&#39;);
var_dump($con);
?&gt;</code></pre>
<p>此时 LAMP 已经安装完成</p>
<h1 id="yum-安装-mysql"><a href="#yum-安装-mysql" class="headerlink" title="yum 安装 mysql"></a>yum 安装 mysql</h1><p>centos7 内置的 MySQL 镜像已经放弃 Oracle 公司的 MySQL，改用 MySQL 的分支数据库 mariaDB，使用以下安装 mariadb：</p>
<p><code>yum -y install mariadb</code></p>
<p>然后使用命令 systemctl start mariadb，提示如下：</p>
<pre><code>Failed to start mariadb.service: Unit mariadb.service failed to load: No such file or directory</code></pre>
<p>意思找不到 mariadb 这个服务。之所以找不到，是因为 mariadb 的安装本身就没有完成。</p>
<p>执行以下，安装缺少的依赖包：</p>
<p><code>yum -y install mariadb-embedded mariadb-libs mariadb-bench mariadb mariadb-sever </code></p>
<p>然后再启动 mariadb，正常，如果要设置开机自启动 mariadb，使用以下命令：</p>
<pre><code>systemctl enable mariadb</code></pre>
<p><strong>一定要记得，使用 yum install 命令安装 mysql 时，需要多加一个通配符<code>&#39;*&#39;</code>，使用如下命令：</strong></p>
<pre><code>yum install mariadb*</code></pre>
<p>此时就没错了 = =</p>
<h1 id="配置-Apache、mysql-开机启动"><a href="#配置-Apache、mysql-开机启动" class="headerlink" title="配置 Apache、mysql 开机启动"></a>配置 Apache、mysql 开机启动</h1><p>重启 Apache、mysql 服务(注意这里和 centos6 有区别,Cenots7+不能使用 6 的方式)</p>
<pre><code>systemctl start httpd.service #启动apache
systemctl stop httpd.service #停止apache
systemctl restart httpd.service #重启apache
systemctl enable httpd.service #设置apache开机启动</code></pre>
<p>如果是采用方法一安装的 mariadb,安装完成以后使用下面的命令开启数据库服务：</p>
<pre><code>#启动MariaDB

[root@localhost ~]# systemctl start mariadb.service

#停止MariaDB

[root@localhost ~]# systemctl stop mariadb.service

#重启MariaDB

[root@localhost ~]# systemctl restart mariadb.service</code></pre>
<p>设置开机启动</p>
<pre><code>[root@localhost ~]# systemctl enable mariadb.service</code></pre>
<p>重启对应服务</p>
<pre><code>service mysqld restart

service php-fpm start

service httpd restart</code></pre>
<p>五、配置 Mysql<br>初次安装 mysql 是没有密码的,我们要设置密码，mysql 的默认账户为 root</p>
<p>设置 MySQL 数据 root 账户的密码：</p>
<pre><code>[root@localhost ~]# mysql_secure_installation</code></pre>
<p>当出现如下提示时候直接按回车：</p>
<pre><code>Enter current password for root</code></pre>
<p>出现如下再次回车：</p>
<pre><code>Set root password? [Y/n]</code></pre>
<p>出现如下提示输入你需要设置的密码，这里输入了 root,输入密码是不显示的，回车后再输入一次确认：</p>
<p>New password:<br>接下来还会有四个确认，分别是：</p>
<pre><code>Remove anonymous users? [Y/n]
Disallow root login remotely? [Y/n]
Remove test database and access to it? [Y/n]
Reload privilege tables now? [Y/n]</code></pre>
<h1 id="安装-php-扩展"><a href="#安装-php-扩展" class="headerlink" title="安装 php 扩展"></a>安装 php 扩展</h1><pre><code>yum -y install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-pdo</code></pre>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令</title>
    <url>/2021/01/14/server/linux/</url>
    <content><![CDATA[<h1 id="公钥信任"><a href="#公钥信任" class="headerlink" title="公钥信任"></a>公钥信任</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">ssh-keygen -t rsa -P <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">xubin@xubindeMBP:~$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/xubin/.ssh/id_rsa):</span><br><span class="line">/Users/xubin/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? yes</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/xubin/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/xubin/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:IeFPfrcQ3hhP64SRTAFzGIHl2ROcopl5HotRi2XNOGk xubin@xubindeMBP</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|      .o*@=o     |</span></span><br><span class="line"><span class="string">|     ..oEB=o     |</span></span><br><span class="line"><span class="string">|      o@=+O .    |</span></span><br><span class="line"><span class="string">|      B=+o @ .   |</span></span><br><span class="line"><span class="string">|       =So* *    |</span></span><br><span class="line"><span class="string">|      . o. = .   |</span></span><br><span class="line"><span class="string">|            o    |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查看公钥</span></span><br><span class="line"><span class="string">cat .ssh/id_rsa.pub</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将公钥拷贝到服务器</span></span><br><span class="line"><span class="string">scp ~/.ssh/id_rsa.pub root@47.98.252.XXX:/root</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将公钥加入信任列表</span></span><br><span class="line"><span class="string">cat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<!-- <video controls="controls">
    <source src="../assets/ScreenFlow.mp4" type="video/mp4" />
        Your browser does not support the video tag.
</video> -->

<h1 id="SSH-登录"><a href="#SSH-登录" class="headerlink" title="SSH 登录"></a>SSH 登录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root 为用户名</span></span><br><span class="line"><span class="comment"># ip地址</span></span><br><span class="line">ssh root@47.98.252.XXX</span><br></pre></td></tr></table></figure>

<h1 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看目录</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变当前目录</span></span><br><span class="line"><span class="built_in">cd</span> [directory_name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前目录的文件和子目录</span></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">ls -a     列出所有目录、子目录、文件和隐藏文件</span><br><span class="line"></span><br><span class="line">ls -R    列出从当前目录开始的所有的子目录、文件并且一层层往下显示</span><br><span class="line"></span><br><span class="line">ls -F     列出文件、目录名并显示出文件类型</span><br><span class="line"></span><br><span class="line">ls -t     以修改时间为时间倒序来列出文件、子目录</span><br><span class="line"></span><br><span class="line">ls -l      以长列表格式显示文件、目录的详细信息</span><br></pre></td></tr></table></figure>

<h1 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看操作</span></span><br><span class="line">cat xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态查看信息</span></span><br><span class="line">tail -f xxx.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>vi 编辑内容</p>
<blockquote>
<p><a href="https://www.w3cschool.cn/vim/cjtr1pu3.html">https://www.w3cschool.cn/vim/cjtr1pu3.html</a></p>
</blockquote>
<h1 id="系统信息查看"><a href="#系统信息查看" class="headerlink" title="系统信息查看"></a>系统信息查看</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 磁盘容量</span></span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统配置</span></span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发行版本</span></span><br><span class="line">lsb_release -a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="系统进程"><a href="#系统进程" class="headerlink" title="系统进程"></a>系统进程</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出系统中当前运行的那些进程</span></span><br><span class="line">ps</span><br><span class="line">-a 显示同一终端下的所有程序</span><br><span class="line">-A 显示所有进程</span><br><span class="line">c  显示进程的真实名称</span><br><span class="line">-N 反向选择</span><br><span class="line">-e 等于“-A”</span><br><span class="line">e  显示环境变量</span><br><span class="line">f  显示程序间的关系</span><br><span class="line">-H 显示树状结构</span><br><span class="line">r  显示当前终端的进程</span><br><span class="line">T  显示当前终端的所有程序</span><br><span class="line">u  指定用户的所有进程</span><br><span class="line">-au 显示较详细的资讯</span><br><span class="line">-aux 显示所有包含其他使用者的行程</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态查看进程变化，监控linux的系统状况</span></span><br><span class="line">top</span><br><span class="line"><span class="comment"># top 运行中可以通过 top 的内部命令对进程的显示方式进行控制。内部命令如下：</span></span><br><span class="line">s – 改变画面更新频率</span><br><span class="line">l – 关闭或开启第一部分第一行 top 信息的表示</span><br><span class="line">t – 关闭或开启第一部分第二行 Tasks 和第三行 Cpus 信息的表示</span><br><span class="line">m – 关闭或开启第一部分第四行 Mem 和 第五行 Swap 信息的表示</span><br><span class="line">N – 以 PID 的大小的顺序排列表示进程列表</span><br><span class="line">P – 以 CPU 占用率大小的顺序排列进程列表</span><br><span class="line">M – 以内存占用率大小的顺序排列进程列表</span><br><span class="line">h – 显示帮助</span><br><span class="line">n – 设置在进程列表所显示进程的数量</span><br><span class="line">q – 退出 top</span><br><span class="line">s – 改变画面更新周期</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span></span><br><span class="line">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</span><br><span class="line">-a  当处理当前进程时，不限制命令名和进程号的对应关系</span><br><span class="line">-p  指定<span class="built_in">kill</span> 命令只打印相关进程的进程号，而不发送任何信号</span><br><span class="line">-s  指定发送信号</span><br><span class="line">-u  指定用户</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先用ps查找进程，然后用kill杀掉</span></span><br><span class="line">ps -ef|grep vim</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="网络状况"><a href="#网络状况" class="headerlink" title="网络状况"></a>网络状况</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监控TCP/IP网络</span></span><br><span class="line">netstat</span><br><span class="line"><span class="comment"># 列出所有端口情况</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -a      # 列出所有端口</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -at     # 列出所有TCP端口</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -au     # 列出所有UDP端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有处于监听状态的Sockets</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -l   # 只显示监听端口</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -lt  # 显示监听TCP端口</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -lu  # 显示监听UDP端口</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -lx  # 显示监听UNIX端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 PID 和进程名称</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示核心路由信息</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -r</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">default         gateway         0.0.0.0         UG        0 0          0 eth0</span><br><span class="line">192.168.130.0   0.0.0.0         255.255.255.0   U         0 0          0 eth0</span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -rn   # 显示数字格式，不查询主机名称</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">0.0.0.0         192.168.130.1   0.0.0.0         UG        0 0          0 eth0</span><br><span class="line">192.168.130.0   0.0.0.0         255.255.255.0   U         0 0          0 eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口和服务</span></span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -antp | grep ssh</span></span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      734/sshd</span><br><span class="line">tcp        0     52 192.168.130.20:22       119.129.118.189:58737   ESTABLISHED 1846/sshd: root@pts</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      734/sshd</span><br><span class="line">[root@xiesshavip002 ~]<span class="comment"># netstat -antp | grep 22</span></span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      734/sshd</span><br><span class="line">tcp        0     52 192.168.130.20:22       119.129.118.189:58737   ESTABLISHED 1846/sshd: root@pts</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      734/sshd</span><br><span class="line">[root@xiesshavip002 ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络抓包工具</span></span><br><span class="line">tcpdump -nn -i eth0 icmp</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="系统服务管理器"><a href="#系统服务管理器" class="headerlink" title="系统服务管理器"></a>系统服务管理器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl (待完成)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 系统状态:</span></span><br><span class="line">systemctl status</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">systemctl <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>实战 Mac</title>
    <url>/2021/01/14/server/mac/</url>
    <content><![CDATA[<h1 id="实战-Mac"><a href="#实战-Mac" class="headerlink" title="实战 Mac"></a>实战 Mac</h1><h2 id="Brew-安装"><a href="#Brew-安装" class="headerlink" title="Brew 安装"></a>Brew 安装</h2><h2 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><p><a href="https://brew.sh/">https://brew.sh/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置国内镜像"><a href="#配置国内镜像" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换brew.git:</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line"><span class="comment"># 中国科大:</span></span><br><span class="line">$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="comment"># 清华大学:</span></span><br><span class="line">$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-core.git:</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line"><span class="comment"># 中国科大:</span></span><br><span class="line">$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="comment"># 清华大学:</span></span><br><span class="line">$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-bottles:</span></span><br><span class="line"><span class="comment"># 中国科大:</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># 清华大学:</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用生效:</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure>

<h2 id="确定-brew-健康状况"><a href="#确定-brew-健康状况" class="headerlink" title="确定 brew 健康状况"></a>确定 brew 健康状况</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确认brew在正常工作</span></span><br><span class="line">brew doctor</span><br><span class="line"><span class="comment"># update更新包</span></span><br><span class="line">brew</span><br></pre></td></tr></table></figure>

<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 安装mysql</span></span><br><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>

<h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services start mysql</span><br></pre></td></tr></table></figure>

<h2 id="设置用户名密码"><a href="#设置用户名密码" class="headerlink" title="设置用户名密码"></a>设置用户名密码</h2><p>设置简单密码规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许简单密码</span></span><br><span class="line"><span class="built_in">set</span> global validate_password.policy=0;</span><br><span class="line"><span class="built_in">set</span> global validate_password.length=1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;example&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pexample</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 数据类型</title>
    <url>/2021/06/07/sql/data-type/</url>
    <content><![CDATA[<h1 id="准确数值类型"><a href="#准确数值类型" class="headerlink" title="准确数值类型"></a>准确数值类型</h1><table>
<thead>
<tr>
<th>精确数值类型</th>
<th>说明</th>
<th>存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>bigint</td>
<td>存储从–263 (–9,223,372,036,854,775,808)到 263-1 (9,223,372,036,854,775,807) 范围的整数</td>
<td>8 字节</td>
</tr>
<tr>
<td>int</td>
<td>存储从–231 (–2,147,483,648 ) 到 231-1 ( 2,147,483,647 ) 范围的整数。</td>
<td>4 字节</td>
</tr>
<tr>
<td>smallint</td>
<td>存储从–215 (–32,768 ) 到 215-1 (32,767 ) 范围的整数</td>
<td>2 字节</td>
</tr>
<tr>
<td>tinyint</td>
<td>存储从 0 到 255 之间的整数。</td>
<td>1 字节</td>
</tr>
<tr>
<td>bit</td>
<td>存储 1 或 0。如果一个表中有不多于 8 个的 bit 列，则这些列公用一个字节存储</td>
<td>1 字节</td>
</tr>
<tr>
<td>numeric(p,s)或 decimal(p,s)</td>
<td>定点精度和小数位数。使用最大精度时，有效值从 –1038 +1 到 1038 -1。其中，s 为精度，指定小数点左边和右边可以存储的十进制数字的最大个数。精度必须是从 1 到最大精度之间的值。最大精度为 38。s 为小数位数，指定小数点右边可以存储的十进制数字的最大个数，0 &lt;= s &lt;= p。s 的默认值为 0</td>
<td>最多 17 字节</td>
</tr>
</tbody></table>
<h1 id="近似数值数类型"><a href="#近似数值数类型" class="headerlink" title="近似数值数类型"></a>近似数值数类型</h1><table>
<thead>
<tr>
<th>近似数值类型</th>
<th>说明</th>
<th>存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>float[(n)]</td>
<td>存储从-1.79E + 308 至-2.23E –308、0 以及 2.23E–308 至 1.79E + 308 范围的浮点数。n 有两个值，如果指定的 n 在 1 ~ 24 之间，则使用 24，占用 4 字节空间；如果指定的 n 在 25~53 之间，则使用 53，占用 8 字节空间。若省略(n)，则默认为 53</td>
<td>4 字节或 8 字节</td>
</tr>
<tr>
<td>real</td>
<td>存储从–3.40E + 38 到 3.40E + 38 范围的浮点型数</td>
<td>4 字节</td>
</tr>
</tbody></table>
<h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><h2 id="普通编码字符串类型"><a href="#普通编码字符串类型" class="headerlink" title="普通编码字符串类型"></a>普通编码字符串类型</h2><table>
<thead>
<tr>
<th>普通编码字符串类型</th>
<th>说明</th>
<th>存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>char(n)</td>
<td>固定长度的普通编码字符串类型，n 表示字符串的最大长度，取值范围为 1 ～ 8000</td>
<td>n 个字节。当实际字符串所需空间小于 n 时，系统自动在后边补空格</td>
</tr>
<tr>
<td>varchar(n)</td>
<td>可变长度的字符串类型，n 表示字符串的最大长度，取值范围为 1 ～ 8000</td>
<td>字符数＋ 2 字节额外开销</td>
</tr>
<tr>
<td>text</td>
<td>最多可存储 231-1 (2,147,483,647) 个字符</td>
<td>每个字符 1 个字节</td>
</tr>
<tr>
<td>varchar(max)</td>
<td>最多可存储 231-1 个字符</td>
<td>字符数＋ 2 字节额外开销</td>
</tr>
</tbody></table>
<p><strong>说明：</strong>如果在使用 char(n)或 varchar(n)类型时未指定 n，则默认长度为 1。如果在使用 CAST 和 CONVERT 函数时未指定 n，则默认长度为 30。</p>
<h2 id="统一字符编码字符串类型"><a href="#统一字符编码字符串类型" class="headerlink" title="统一字符编码字符串类型"></a>统一字符编码字符串类型</h2><table>
<thead>
<tr>
<th>统一编码字符串类型</th>
<th>说明</th>
<th>存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>nchar(n)</td>
<td>固定长度的统一编码字符串类型，n 表示字符串的最大长度，取值范围为 1 ～ 4000</td>
<td>2n 字节。当实际字符串所需空间小于 2n 时，系统自动在后边补空格</td>
</tr>
<tr>
<td>nvarchar(n)</td>
<td>可变长度的统一编码字符串类型，n 表示字符串的最大长度，取值范围为 1 ～ 4000</td>
<td>2*字符数＋ 2 字节额外开销</td>
</tr>
<tr>
<td>ntext</td>
<td>最多可存储 230-1 (1,073,741,823) 个统一字符编码的字符</td>
<td>每个字符 2 个字节</td>
</tr>
<tr>
<td>nvarchar(max)</td>
<td>最多可存储 230-1 个统一字符编码的字符</td>
<td>2*字符数＋ 2 字节额外开销</td>
</tr>
</tbody></table>
<h2 id="二进制字符串类型"><a href="#二进制字符串类型" class="headerlink" title="二进制字符串类型"></a>二进制字符串类型</h2><table>
<thead>
<tr>
<th>二进制字符串类型</th>
<th>说明</th>
<th>存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>binary(n)</td>
<td>固定长度的二进制数据，n 的取值范围为 1 ～ 8000</td>
<td>n 字节</td>
</tr>
<tr>
<td>varbinary(n)</td>
<td>可变长度的二进制数据，n 的取值范围为 1 ～ 8000。</td>
<td>字符数＋ 2 字节额外开销</td>
</tr>
<tr>
<td>image</td>
<td>可变长度的二进制数据，最多为 231-1 (2,147,483,647)个十六进制数字</td>
<td>每个字符 1 个字节</td>
</tr>
<tr>
<td>varbinary(max)</td>
<td>可变长度的二进制数据，最多为 231-1 (2,147,483,647)个十六进制数字</td>
<td>字符数＋ 2 字节额外开销</td>
</tr>
</tbody></table>
<h1 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h1><table>
<thead>
<tr>
<th>日期时间类型</th>
<th>说明</th>
<th>存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>定义一个日期，范围为 到 。字符长度 10 位，默认格式为：YYYY-MM-DD。YYYY 表示 4 位年份数字，范围从 0001 到 9999；MM 表示 2 位月份数字，范围从 01 到 12；DD 表示 2 位日的数字，范围从 01 到 31（最大值取决于具体月份）</td>
<td>3 字节</td>
</tr>
<tr>
<td>time[(n)]</td>
<td>定义一天中的某个时间，该时间基于 24 小时制。默认格式为：hh:mm:ss[.nnnnnnn]，范围为 00:00:00.0000000 到 23:59:59.9999999。精确到 100 纳秒。<br> n 为秒的小数位数，取值范围是 0 到 7 的整数。默认秒的小数位数是 7(100ns)</td>
<td>3~5 字节</td>
</tr>
<tr>
<td>datetime</td>
<td>定义一个采用 24 小时制并带有秒的小数部分的日期和时间，范围为到-，时间范围是 00:00:00 到 23:59:59.997。默认格式为：YYYY-MM-DD hh:mm:ss.nnn，n 为数字，表示秒的小数部分（精确到 0.00333 秒）</td>
<td>8 字节</td>
</tr>
<tr>
<td>smalldatetime</td>
<td>定义一个采用 24 小时制并且秒始终为零(:00)的日期和时间，范围为到。默认格式为：YYYY-MM-DD hh:mm:00。精确到 1 分钟</td>
<td>4 字节</td>
</tr>
<tr>
<td>datetime2</td>
<td>定义一个结合了 24 小时制时间的日期。可将该类型看成是 datetime 类型的扩展，其数据范围更大，默认的小数精度更高，并具有可选的用户定义的精度。默认格式是：YYYY-MM-DD hh:mm:ss[.nnnnnnn]，n 为数字，表示秒的小数位数（最多精确到 100 纳秒），默认精度是 7 位小数。该类型的字符串长度最少 19 位（YYYY-MM-DD hh:mm:ss），最多 27 位(YYYY-MM-DD hh:mm:ss.0000000)</td>
<td>6 ~ 8 字节</td>
</tr>
<tr>
<td>datetimeoffset</td>
<td>定义一个与采用 24 小时制并与可识别时区的一日内时间相组合的日期，该数据类型使用户存储的日期和时间（24 小时制）是时区一致的。语法格式为：datetimeoffset [(n)]，n 为秒的精度，最大为 7。默认格式为：YYYY-MM-DD hh:mm:ss[.nnnnnnn] [{+ | -}hh1:mm1]，其中 hh1 的取值范围为-14 到 +14，mm1 的取值范围为 00 到 59。该类型的日期范围为到，时间范围为 00:00:00 到 23:59:59.9999999。时区偏移量范围为-14:00 到+14:00。该类型的字符串长度为：最少 26 位(YYYY-MM-DD hh:mm:ss {+ | -}hh:mm)，最多 34 位 (YYYY-MM-DD hh:mm:ss.nnnnnnn {+ | -}hh:mm)</td>
<td>8 ~ 10 字节</td>
</tr>
</tbody></table>
<h1 id="货币类型"><a href="#货币类型" class="headerlink" title="货币类型"></a>货币类型</h1><table>
<thead>
<tr>
<th>货币类型</th>
<th>说明</th>
<th>存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>money</td>
<td>存储–922,337,203,685,477.5808 到 922,337,203,685,477.5807 范围的数值，精确到小数点后 4 位</td>
<td>8 字节</td>
</tr>
<tr>
<td>smallmoney</td>
<td>存储-214,748.3648 到 214,748.3647 范围的数值，精确到小数点后 4 位</td>
<td>4 字节</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>PhantomJS</title>
    <url>/2020/09/11/tools/PhantomJS/</url>
    <content><![CDATA[<h1 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>有时，我们需要浏览器处理网页，但并不需要浏览，比如生成网页的截图、抓取网页数据等操作。<a href="http://phantomjs.org/">PhantomJS</a>的功能，就是提供一个浏览器环境的命令行接口，你可以把它看作一个“虚拟浏览器”，除了不能浏览，其他与正常浏览器一样。它的内核是 WebKit 引擎，不提供图形界面，只能在命令行下使用，我们可以用它完成一些特殊的用途。</p>
<p>PhantomJS 是二进制程序，需要<a href="http://phantomjs.org/download.html">安装</a>后使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install phantomjs -g</span><br></pre></td></tr></table></figure>

<p>使用下面的命令，查看是否安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phantomjs --version</span><br></pre></td></tr></table></figure>

<h2 id="REPL-环境"><a href="#REPL-环境" class="headerlink" title="REPL 环境"></a>REPL 环境</h2><p>phantomjs 提供了一个完整的 REPL 环境，允许用户通过命令行与 PhantomJS 互动。键入 phantomjs，就进入了该环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phantomjs</span><br></pre></td></tr></table></figure>

<p>这时会跳出一个 phantom 提示符，就可以输入 Javascript 命令了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">phantomjs&gt; 1+2</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">phantomjs&gt; <span class="keyword">function</span> add(a,b) &#123; <span class="built_in">return</span> a+b; &#125;</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">phantomjs&gt; add(1,2)</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>按 ctrl+c 可以退出该环境。</p>
<p>下面，我们把上面的 add()函数写成一个文件 add.js 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">phantom.exit();</span><br></pre></td></tr></table></figure>

<p>上面的代码中，console.log()的作用是在终端窗口显示，phantom.exit()则表示退出 phantomjs 环境。一般来说，不管什么样的程序，exit 这一行都不能少。</p>
<p>现在，运行该程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phantomjs add.js</span><br></pre></td></tr></table></figure>

<p>终端窗口就会显示结果为 3。</p>
<p>下面是更多的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">phantomjs&gt; phantom.version</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;major&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;minor&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="string">&quot;patch&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">phantomjs&gt; <span class="built_in">console</span>.log(<span class="string">&quot;phantom is awesome&quot;</span>)</span><br><span class="line">phantom is awesome</span><br><span class="line"></span><br><span class="line">phantomjs&gt; <span class="built_in">window</span>.navigator</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;cookieEnabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;language&quot;</span>: <span class="string">&quot;en-GB&quot;</span>,</span><br><span class="line">  <span class="string">&quot;productSub&quot;</span>: <span class="string">&quot;20030107&quot;</span>,</span><br><span class="line">  <span class="string">&quot;product&quot;</span>: <span class="string">&quot;Gecko&quot;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="webpage-模块"><a href="#webpage-模块" class="headerlink" title="webpage 模块"></a>webpage 模块</h2><p>webpage 模块是 PhantomJS 的核心模块，用于网页操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> page = webPage.create();</span><br></pre></td></tr></table></figure>

<p>上面代码表示加载 PhantomJS 的 webpage 模块，并创建一个实例。</p>
<p>下面是 webpage 实例的属性和方法介绍。</p>
<h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><p>open 方法用于打开具体的网页。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>).create();</span><br><span class="line"></span><br><span class="line">page.open(<span class="string">&quot;http://slashdot.org&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s);</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，open()方法，用于打开具体的网页。它接受两个参数。第一个参数是网页的网址，这里打开的是著名新闻网站<a href="http://slashdot.org/">Slashdot</a>，第二个参数是回调函数，网页打开后该函数将会运行，它的参数是一个表示状态的字符串，如果打开成功就是 success，否则就是 fail。</p>
<p>注意，只要接收到服务器返回的结果，PhantomJS 就会报告网页打开成功，而不管服务器是否返回 404 或 500 错误。</p>
<p>open 方法默认使用 GET 方法，与服务器通信，但是也可以使用其他方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> page = webPage.create();</span><br><span class="line"><span class="keyword">var</span> postBody = <span class="string">&quot;user=username&amp;password=password&quot;</span>;</span><br><span class="line"></span><br><span class="line">page.open(<span class="string">&quot;http://www.google.com/&quot;</span>, <span class="string">&quot;POST&quot;</span>, postBody, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Status: &quot;</span> + status);</span><br><span class="line">  <span class="comment">// Do other things here...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，使用 POST 方法向服务器发送数据。open 方法的第二个参数用来指定 HTTP 方法，第三个参数用来指定该方法所要使用的数据。</p>
<p>open 方法还允许提供配置对象，对 HTTP 请求进行更详细的配置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> page = webPage.create();</span><br><span class="line"><span class="keyword">var</span> settings = &#123;</span><br><span class="line">  operation: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  encoding: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    some: <span class="string">&quot;data&quot;</span>,</span><br><span class="line">    another: [<span class="string">&quot;custom&quot;</span>, <span class="string">&quot;data&quot;</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">page.open(<span class="string">&quot;http://your.custom.api&quot;</span>, settings, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Status: &quot;</span> + status);</span><br><span class="line">  <span class="comment">// Do other things here...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="evaluate"><a href="#evaluate" class="headerlink" title="evaluate()"></a>evaluate()</h3><p>evaluate 方法用于打开网页以后，在页面中执行 JavaScript 代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>).create();</span><br><span class="line"></span><br><span class="line">page.open(url, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> title = page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.title;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Page title is &quot;</span> + title);</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>网页内部的 console 语句，以及 evaluate 方法内部的 console 语句，默认不会显示在命令行。这时可以采用 onConsoleMessage 回调函数，上面的例子可以改写如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>).create();</span><br><span class="line"></span><br><span class="line">page.onConsoleMessage = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Page title is &quot;</span> + msg);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">page.open(url, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.title);</span><br><span class="line">  &#125;);</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，evaluate 方法内部有 console 语句，默认不会输出在命令行。这时，可以用 onConsoleMessage 方法监听这个事件，进行处理。</p>
<h3 id="includeJs"><a href="#includeJs" class="headerlink" title="includeJs()"></a>includeJs()</h3><p>includeJs 方法用于页面加载外部脚本，加载结束后就调用指定的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>).create();</span><br><span class="line">page.open(<span class="string">&quot;http://www.sample.com&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  page.includeJs(<span class="string">&quot;http://path/to/jquery.min.js&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="string">&quot;button&quot;</span>).click();</span><br><span class="line">    &#125;);</span><br><span class="line">    phantom.exit();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的例子在页面中注入 jQuery 脚本，然后点击所有的按钮。需要注意的是，由于是异步加载，所以<code>phantom.exit()</code>语句要放在<code>page.includeJs()</code>方法的回调函数之中，否则页面会过早退出。</p>
<h3 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h3><p>render 方法用于将网页保存成图片，参数就是指定的文件名。该方法根据后缀名，将网页保存成不同的格式，目前支持 PNG、GIF、JPEG 和 PDF。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> page = webPage.create();</span><br><span class="line"></span><br><span class="line">page.viewportSize = &#123; <span class="attr">width</span>: <span class="number">1920</span>, <span class="attr">height</span>: <span class="number">1080</span> &#125;;</span><br><span class="line">page.open(<span class="string">&quot;http://www.google.com&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">  page.render(<span class="string">&quot;google_home.jpeg&quot;</span>, &#123; <span class="attr">format</span>: <span class="string">&quot;jpeg&quot;</span>, <span class="attr">quality</span>: <span class="string">&quot;100&quot;</span> &#125;);</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>该方法还可以接受一个配置对象，format 字段用于指定图片格式，quality 字段用于指定图片质量，最小为 0，最大为 100。</p>
<h3 id="viewportSize，zoomFactor"><a href="#viewportSize，zoomFactor" class="headerlink" title="viewportSize，zoomFactor"></a>viewportSize，zoomFactor</h3><p>viewportSize 属性指定浏览器视口的大小，即网页加载的初始浏览器窗口大小。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> page = webPage.create();</span><br><span class="line"></span><br><span class="line">page.viewportSize = &#123;</span><br><span class="line">  width: <span class="number">480</span>,</span><br><span class="line">  height: <span class="number">800</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>viewportSize 的 Height 字段必须指定，不可省略。</p>
<p>zoomFactor 属性用来指定渲染时（render 方法和 renderBase64 方法）页面的放大系数，默认是 1（即 100%）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> page = webPage.create();</span><br><span class="line"></span><br><span class="line">page.zoomFactor = <span class="number">0.25</span>;</span><br><span class="line">page.render(<span class="string">&quot;capture.png&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="onResourceRequested"><a href="#onResourceRequested" class="headerlink" title="onResourceRequested"></a>onResourceRequested</h3><p>onResourceRequested 属性用来指定一个回调函数，当页面请求一个资源时，会触发这个回调函数。它的第一个参数是 HTTP 请求的元数据对象，第二个参数是发出的网络请求对象。</p>
<p>HTTP 请求包括以下字段。</p>
<ul>
<li>id：所请求资源的编号</li>
<li>method：使用的 HTTP 方法</li>
<li>url：所请求的资源 URL</li>
<li>time：一个包含请求时间的 Date 对象</li>
<li>headers：HTTP 头信息数组</li>
</ul>
<p>网络请求对象包含以下方法。</p>
<ul>
<li>abort()：终止当前的网络请求，这会导致调用 onResourceError 回调函数。</li>
<li>changeUrl(newUrl)：改变当前网络请求的 URL。</li>
<li>setHeader(key, value)：设置 HTTP 头信息。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> page = webPage.create();</span><br><span class="line"></span><br><span class="line">page.onResourceRequested = <span class="function"><span class="keyword">function</span> (<span class="params">requestData, networkRequest</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;Request (#&quot;</span> + requestData.id + <span class="string">&quot;): &quot;</span> + <span class="built_in">JSON</span>.stringify(requestData)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="onResourceReceived"><a href="#onResourceReceived" class="headerlink" title="onResourceReceived"></a>onResourceReceived</h3><p>onResourceReceived 属性用于指定一个回调函数，当网页收到所请求的资源时，就会执行该回调函数。它的参数就是服务器发来的 HTTP 回应的元数据对象，包括以下字段。</p>
<ul>
<li>id：所请求的资源编号</li>
<li>url：所请求的资源的 URL<br>r- time：包含 HTTP 回应时间的 Date 对象</li>
<li>headers：HTTP 头信息数组</li>
<li>bodySize：解压缩后的收到的内容大小</li>
<li>contentType：接到的内容种类</li>
<li>redirectURL：重定向 URL（如果有的话）</li>
<li>stage：对于多数据块的 HTTP 回应，头一个数据块为 start，最后一个数据块为 end。</li>
<li>status：HTTP 状态码，成功时为 200。</li>
<li>statusText：HTTP 状态信息，比如 OK。</li>
</ul>
<p>如果 HTTP 回应非常大，分成多个数据块发送，onResourceReceived 会在收到每个数据块时触发回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> page = webPage.create();</span><br><span class="line"></span><br><span class="line">page.onResourceReceived = <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;Response (#&quot;</span> +</span><br><span class="line">      response.id +</span><br><span class="line">      <span class="string">&#x27;, stage &quot;&#x27;</span> +</span><br><span class="line">      response.stage +</span><br><span class="line">      <span class="string">&#x27;&quot;): &#x27;</span> +</span><br><span class="line">      <span class="built_in">JSON</span>.stringify(response)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="system-模块"><a href="#system-模块" class="headerlink" title="system 模块"></a>system 模块</h2><p>system 模块可以加载操作系统变量，system.args 就是参数数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>).create(),</span><br><span class="line">  system = <span class="built_in">require</span>(<span class="string">&quot;system&quot;</span>),</span><br><span class="line">  t,</span><br><span class="line">  address;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果命令行没有给出网址</span></span><br><span class="line"><span class="keyword">if</span> (system.args.length === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Usage: page.js &lt;some URL&gt;&quot;</span>);</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t = <span class="built_in">Date</span>.now();</span><br><span class="line">address = system.args[<span class="number">1</span>];</span><br><span class="line">page.open(address, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (status !== <span class="string">&quot;success&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;FAIL to load the address&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    t = <span class="built_in">Date</span>.now() - t;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Loading time &quot;</span> + t + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ phantomjs page.js http://www.google.com</span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>Phantomjs 可以实现多种应用。</p>
<h3 id="过滤资源"><a href="#过滤资源" class="headerlink" title="过滤资源"></a>过滤资源</h3><p>处理页面的时候，有时不希望加载某些特定资源。这时，可以对 URL 进行匹配，一旦符合规则，就中断对资源的连接。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">page.onResourceRequested = <span class="function"><span class="keyword">function</span> (<span class="params">requestData, request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/http:\/\/.+?\.css$/gi</span>.test(requestData[<span class="string">&quot;url&quot;</span>])) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Skipping&quot;</span>, requestData[<span class="string">&quot;url&quot;</span>]);</span><br><span class="line">    request.abort();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码一旦发现加载的资源是 CSS 文件，就会使用<code>request.abort</code>方法中断连接。</p>
<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p>最简单的生成网页截图的方法如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>).create();</span><br><span class="line">page.open(<span class="string">&quot;http://google.com&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  page.render(<span class="string">&quot;google.png&quot;</span>);</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>page 对象代表一个网页实例；open 方法表示打开某个网址，它的第一个参数是目标网址，第二个参数是网页载入成功后，运行的回调函数;render 方法则是渲染页面，然后以图片格式输出，该方法的参数就是输出的图片文件名。</p>
<p>除了简单截图以外，还可以设置各种截图参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>).create();</span><br><span class="line">page.open(<span class="string">&quot;http://google.com&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  page.zoomFactor = <span class="number">0.25</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(page.renderBase64());</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>zoomFactor 表示将截图缩小至原图的 25%大小；renderBase64 方法则是表示将截图（PNG 格式）编码成 Base64 格式的字符串输出。</p>
<p>下面的例子则是使用了更多参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>).create();</span><br><span class="line"></span><br><span class="line">page.settings.userAgent = <span class="string">&quot;WebKit/534.46 Mobile/9A405 Safari/7534.48.3&quot;</span>;</span><br><span class="line">page.settings.viewportSize = &#123; <span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">600</span> &#125;;</span><br><span class="line"></span><br><span class="line">page.open(<span class="string">&quot;http://slashdot.org&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (status !== <span class="string">&quot;success&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Unable to load!&quot;</span>);</span><br><span class="line">    phantom.exit();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> title = page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> posts = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;article&quot;</span>);</span><br><span class="line">      posts[<span class="number">0</span>].style.backgroundColor = <span class="string">&quot;#FFF&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.title;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      page.clipRect = &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">width</span>: <span class="number">600</span>, <span class="attr">height</span>: <span class="number">700</span> &#125;;</span><br><span class="line">      page.render(title + <span class="string">&quot;1.png&quot;</span>);</span><br><span class="line">      page.clipRect = &#123; <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">top</span>: <span class="number">600</span>, <span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">600</span> &#125;;</span><br><span class="line">      page.render(title + <span class="string">&quot;2.png&quot;</span>);</span><br><span class="line">      phantom.exit();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中的几个属性和方法解释如下：</p>
<ul>
<li>settings.userAgent：指定 HTTP 请求的 userAgent 头信息，上面例子是手机浏览器的 userAgent。</li>
<li>settings.viewportSize：指定浏览器窗口的大小，这里是 400x600。</li>
<li>evaluate()：用来在网页上运行 Javascript 代码。在这里，我们抓取第一条新闻，然后修改背景颜色，并返回该条新闻的标题。</li>
<li>clipRect：用来指定网页截图的大小，这里的截图左上角从网页的(0. 0)坐标开始，宽 600 像素，高 700 像素。如果不指定这个值，就表示对整张网页截图。</li>
<li>render()：根据 clipRect 的范围，在当前目录下生成以第一条新闻的名字命名的截图。</li>
</ul>
<h3 id="抓取图片"><a href="#抓取图片" class="headerlink" title="抓取图片"></a>抓取图片</h3><p>使用官方网站提供的<a href="https://github.com/ariya/phantomjs/blob/master/examples/rasterize.js">rasterize.js</a>，可以抓取网络上的图片，将其保存在本地。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">phantomjs rasterize.js http:<span class="regexp">//</span>ariya.github.com<span class="regexp">/svg/</span>tiger.svg tiger.png</span><br></pre></td></tr></table></figure>

<p>使用<a href="https://github.com/ariya/phantomjs/blob/master/examples/rasterize.js">rasterize.js</a>，还可以将网页保存为 pdf 文件。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">phantomjs</span> rasterize.js <span class="string">&#x27;http://en.wikipedia.org/w/index.php?title=Jakarta&amp;printable=yes&#x27;</span> jakarta.pdf</span><br></pre></td></tr></table></figure>

<h3 id="生成网页"><a href="#生成网页" class="headerlink" title="生成网页"></a>生成网页</h3><p>phantomjs 可以生成网页，使用 content 方法指定网页的 HTML 代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">&quot;webpage&quot;</span>).create();</span><br><span class="line">page.viewportSize = &#123; <span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">400</span> &#125;;</span><br><span class="line">page.content = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;canvas id=&quot;surface&quot;&gt;&lt;/canvas&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>;</span><br><span class="line">phantom.exit();</span><br></pre></td></tr></table></figure>

<p>官方网站有一个<a href="https://github.com/ariya/phantomjs/blob/master/examples/colorwheel.js">例子</a>，通过创造 svg 图片，然后截图保存成 png 文件。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Bower：客户端库管理工具</title>
    <url>/2020/09/04/tools/bower/</url>
    <content><![CDATA[<h1 id="Bower：客户端库管理工具"><a href="#Bower：客户端库管理工具" class="headerlink" title="Bower：客户端库管理工具"></a>Bower：客户端库管理工具</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>随着网页功能变得越来越复杂，同一张网页加载多个 JavaScript 函数库早已是家常便饭。开发者越来越需要一个工具，对浏览器端的各种库进行管理，比如搜索、自动安装\卸载、检查更新、确保依赖关系等等。Bower 就是为了解决这个问题而诞生的针对浏览器端的库管理工具。</p>
<p>Bower 基于 node.js，所以安装之前，必须先确保已安装 node.js。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install bower --global</span><br></pre></td></tr></table></figure>

<p>运行上面的命令以后，Bower 就已经安装在你的系统中了。运行帮助命令，查看 Bower 是否安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower <span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>下面的命令可以更新或卸载 Bower。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo npm update -g bower</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">sudo npm uninstall --global bower</span><br></pre></td></tr></table></figure>

<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>在项目根目录下，运行下面的命令，进行初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower init</span><br></pre></td></tr></table></figure>

<p>通过回答几个问题，就会自动生成 bower.json 文件。这是项目的配置文件，下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-name&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: [<span class="string">&quot;path/to/app.html&quot;</span>, <span class="string">&quot;path/to/app.css&quot;</span>, <span class="string">&quot;path/to/app.js&quot;</span>],</span><br><span class="line">  <span class="string">&quot;ignore&quot;</span>: [<span class="string">&quot;.jshintrc&quot;</span>,<span class="string">&quot;**/*.txt&quot;</span>],</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;sass-bootstrap&quot;</span>: <span class="string">&quot;~3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;modernizr&quot;</span>: <span class="string">&quot;~2.6.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;latests&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;<span class="string">&quot;qunit&quot;</span>: <span class="string">&quot;&gt;1.11.0&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了 bower.json 文件以后，就可以用 bower install 命令，一下子安装所有库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower install</span><br></pre></td></tr></table></figure>

<p>bower.json 文件存放在库的根目录下，它的作用是（1）保存项目的库信息，供项目安装时使用，（2）向 Bower.com 提交你的库，该网站会读取 bower.json，列入在线索引。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower register &lt;my-package-name&gt; &lt;git-endpoint&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例：在 bower.com 登记jquery</span></span><br><span class="line">bower register jquery git://github.com/jquery/jquery</span><br></pre></td></tr></table></figure>

<p>注意，如果你的库与现有的库重名，就会提交失败。</p>
<h3 id="库的安装"><a href="#库的安装" class="headerlink" title="库的安装"></a>库的安装</h3><p>bower install 命令用于安装某个库，需要指明库的名字。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower install backbone</span><br></pre></td></tr></table></figure>

<p>Bower 会使用库的名字，去在线索引中搜索该库的网址。某些情况下，如果一个库很新（或者你不想使用默认网址），可能需要我们手动指定该库的网址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower install git://github.com/documentcloud/backbone.git</span><br><span class="line">bower install http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js</span><br><span class="line">bower install ./some/path/relative/to/this/directory/backbone.js</span><br></pre></td></tr></table></figure>

<p>上面的命令说明，指定的网址可以是 github 地址、http 网址、本地文件。</p>
<p>默认情况下，会安装该库的最新版本，但是也可以手动指定版本号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower install jquery-ui<span class="comment">#1.10.1</span></span><br></pre></td></tr></table></figure>

<p>上面的命令指定安装 jquery-ui 的 1.10.1 版。</p>
<p>如果某个库依赖另一个库，安装时默认将所依赖的库一起安装。比如，jquery-ui 依赖 jquery，安装时会连 jquery 一起安装。</p>
<p>安装后的库默认存放在项目的 bower_components 子目录，如果要指定其他位置，可在.bowerrc 文件的 directory 属性设置。</p>
<h3 id="库的搜索和查看"><a href="#库的搜索和查看" class="headerlink" title="库的搜索和查看"></a>库的搜索和查看</h3><p>bower search 命令用于使用关键字，从在线索引中搜索相关库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower search jquery</span><br></pre></td></tr></table></figure>

<p>上面命令会得到下面这样的结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Search results:</span><br><span class="line"></span><br><span class="line">    jquery git://github.com/components/jquery.git</span><br><span class="line">    jquery-ui git://github.com/components/jqueryui</span><br><span class="line">    jquery.cookie git://github.com/carhartl/jquery-cookie.git</span><br><span class="line">    jquery-placeholder git://github.com/mathiasbynens/jquery-placeholder.git</span><br><span class="line">    jquery-file-upload git://github.com/blueimp/jQuery-File-Upload.git</span><br><span class="line">    jasmine-jquery git://github.com/velesin/jasmine-jquery</span><br><span class="line">    jquery.ui git://github.com/jquery/jquery-ui.git</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>bower info 命令用于查看某个库的详细信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower info jquery-ui</span><br></pre></td></tr></table></figure>

<p>查看结果会列出该库的依赖关系（dependencies），以及可以得到的版本（Available versions）。</p>
<h3 id="库的更新和卸载"><a href="#库的更新和卸载" class="headerlink" title="库的更新和卸载"></a>库的更新和卸载</h3><p>bower update 用于更新一个库，将其更新为最新版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower update jquery-ui</span><br></pre></td></tr></table></figure>

<p>如果不给出库名，则更新所有库。</p>
<p>bower uninstall 命令用于卸载指定的库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bower uninstall jquery-ui</span><br></pre></td></tr></table></figure>

<p>注意，默认情况下会连所依赖的库一起卸载。比如，jquery-ui 依赖 jquery，卸载时会连 jquery 一起卸载，除非还有别的库依赖 jquery。</p>
<h3 id="列出所有库"><a href="#列出所有库" class="headerlink" title="列出所有库"></a>列出所有库</h3><p>bower list 或 bower ls 命令，用于列出项目所使用的所有库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Bower list</span><br><span class="line">Bower ls</span><br></pre></td></tr></table></figure>

<h2 id="配置文件-bowerrc"><a href="#配置文件-bowerrc" class="headerlink" title="配置文件.bowerrc"></a>配置文件.bowerrc</h2><p>项目根目录下（也可以放在用户的主目录下）的.bowerrc 文件是 Bower 的配置文件，它大概像下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;directory&quot;</span> : <span class="string">&quot;components&quot;</span>,</span><br><span class="line">  <span class="string">&quot;json&quot;</span>      : <span class="string">&quot;bower.json&quot;</span>,</span><br><span class="line">  <span class="string">&quot;endpoint&quot;</span>  : <span class="string">&quot;https://Bower.herokuapp.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;searchpath&quot;</span>  : <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;shorthand_resolver&quot;</span> : <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的属性含义如下。</p>
<ul>
<li>directory：存放库文件的子目录名。</li>
<li>json：描述各个库的 json 文件名。</li>
<li>endpoint：在线索引的网址，用来搜索各种库。</li>
<li>searchpath：一个数组，储存备选的在线索引网址。如果某个库在 endpoint 中找不到，则继续搜索该属性指定的网址，通常用于放置某些不公开的库。</li>
<li>shorthand_resolver：定义各个库名称简写形式。</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Browserify：浏览器加载Node.js模块</title>
    <url>/2020/09/11/tools/browserify/</url>
    <content><![CDATA[<h1 id="Browserify：浏览器加载-Node-js-模块"><a href="#Browserify：浏览器加载-Node-js-模块" class="headerlink" title="Browserify：浏览器加载 Node.js 模块"></a>Browserify：浏览器加载 Node.js 模块</h1><p>随着 JavaScript 程序逐渐模块化，在 ECMAScript 6 推出官方的模块处理方案之前，有两种方案在实践中广泛采用：一种是 AMD 模块规范，针对模块的异步加载，主要用于浏览器端；另一种是 CommonJS 规范，针对模块的同步加载，主要用于服务器端，即 node.js 环境。</p>
<p>Browserify 是一个 node.js 模块，主要用于改写现有的 CommonJS 模块，使得浏览器端也可以使用这些模块。使用下面的命令，在全局环境下安装 Browserify。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g browserify</span><br></pre></td></tr></table></figure>

<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>先看一个例子。假定有一个很简单的 CommonJS 模块文件 foo.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后，还有一个 main.js 文件，用来加载 foo 模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">&quot;./foo&quot;</span>);</span><br><span class="line">foo(<span class="string">&quot;Hi&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>使用 Browserify，将 main.js 转化为浏览器可以加载的脚本 compiled.js。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">browserify main.js &gt; compiled.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">browserify main &gt; compiled.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">browserify main.js -o compiled.js</span><br></pre></td></tr></table></figure>

<p>之所以转化后的文件叫做 compiled.js，是因为该文件不仅包括了 main.js，还包括了它所依赖的 foo.js。两者打包在一起，保证浏览器加载时的依赖关系。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;compiled.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用上面的命令，在浏览器中运行 compiled.js，控制台会显示 Hi。</p>
<p>我们再看一个在服务器端的 backbone 模块转为客户端 backbone 模块的例子。先安装 backbone 和它所依赖的 jQuery 模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install backbone jquery</span><br></pre></td></tr></table></figure>

<p>然后，新建一个 main.js 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Backbone = <span class="built_in">require</span>(<span class="string">&quot;backbone&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> $ = (Backbone.$ = <span class="built_in">require</span>(<span class="string">&quot;jquery/dist/jquery&quot;</span>)(<span class="built_in">window</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AppView = Backbone.View.extend(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;main&quot;</span>).append(<span class="string">&quot;&lt;h1&gt;Browserify is a great tool.&lt;/h1&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appView = <span class="keyword">new</span> AppView();</span><br><span class="line">appView.render();</span><br></pre></td></tr></table></figure>

<p>接着，使用 browserify 将 main.js 转为 app.js。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">browserify main.js -o app.js</span><br></pre></td></tr></table></figure>

<p>app.js 就可以直接插入 HTML 网页了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，只要插入 app.js 一个文件就可以了，完全不需要再加载 backbone.js 和 jQuery 了。</p>
<h2 id="管理前端模块"><a href="#管理前端模块" class="headerlink" title="管理前端模块"></a>管理前端模块</h2><p>Browserify 的主要作用是将 CommonJS 模块转为浏览器可以调用的格式，但是纯粹的前端模块，也可以用它打包。</p>
<p>首先，新建一个项目目录，添加 package.json 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;demo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，新建 index.html。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>npm and jQuery demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title-tipso tipso_style&quot;</span> <span class="attr">title</span>=<span class="string">&quot;This is a loaded TIPSO!&quot;</span>&gt;</span></span><br><span class="line">      Roll over to see the tip</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./bundle.js&quot;</span> /&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>

<p>上面代码中的 bundle.js，就是 Browserify 打包后将生成的文件。</p>
<p>然后，安装 jquery 和它的插件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ npm install --save jquery tipso</span><br></pre></td></tr></table></figure>

<p>接着，新建一个文件 entry.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">global</span>.jQuery = <span class="built_in">require</span>(<span class="string">&quot;jquery&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;tipso&quot;</span>);</span><br><span class="line"></span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  jQuery(<span class="string">&quot;.title-tipso&quot;</span>).tipso();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的文件中，第一行之所以要把 jQuery 写成 global 的属性，是为了转码之后，它可以变成一个全局变量。</p>
<p>最后，Browserify 打包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ browserify entry.js --debug &gt; bundle.js</span><br></pre></td></tr></table></figure>

<p>上面代码中，–debug 参数表示在打包后的文件中加入 source map 以便除错。</p>
<p>这时，浏览器打开 index.html，脚本已经可以运行。如果不希望将 jQuery 一起打包，而是通过 CDN 加载，可以使用 browserify-shim 模块。</p>
<p>另外一个问题是，某些 jQuery 插件还有自带的 CSS 文件，这时可以安装 parcelify 模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g parcelify</span><br></pre></td></tr></table></figure>

<p>然后，在 package.json 中写入规则，声明 CSS 文件的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;style&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;./node_modules/tipso/src/tipso.css&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>接着，运行 parcelify 进行 CSS 打包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ parcelify entry.js -c bundle.css</span><br></pre></td></tr></table></figure>

<p>最后，将打包后的 CSS 文件插入 index.html。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bundle.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="生成前端模块"><a href="#生成前端模块" class="headerlink" title="生成前端模块"></a>生成前端模块</h2><p>有时，我们只是希望将 node.js 的模块，移植到浏览器，使得浏览器端可以调用。这时，可以采用 browserify 的-r 参数（–require 的简写）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">browserify -r through -r ./my-file.js:my-module &gt; bundle.js</span><br></pre></td></tr></table></figure>

<p>上面代码将 through 和 my-file.js（后面的冒号表示指定模块名为 my-module）都做成了模块，可以在其他 script 标签中调用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> through = <span class="built_in">require</span>(<span class="string">&quot;through&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">&quot;my-module&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="comment">/* ... */</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，-r 参数的另一个作用，就是为浏览器端提供 require 方法。</p>
<h2 id="脚本文件的实时生成"><a href="#脚本文件的实时生成" class="headerlink" title="脚本文件的实时生成"></a>脚本文件的实时生成</h2><p>Browserify 还可以实时生成脚本文件。</p>
<p>下面是一个服务器端脚本，启动 Web 服务器之后，外部用户每次访问这个脚本，它的内容是实时生成的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">&quot;browserify&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">&quot;/bundle.js&quot;</span>) &#123;</span><br><span class="line">    res.setHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/javascript&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> b = browserify(__dirname + <span class="string">&quot;/main.js&quot;</span>).bundle();</span><br><span class="line">    b.on(<span class="string">&quot;error&quot;</span>, <span class="built_in">console</span>.error);</span><br><span class="line">    b.pipe(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> res.writeHead(<span class="number">404</span>, <span class="string">&quot;not found&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="browserify-middleware-模块"><a href="#browserify-middleware-模块" class="headerlink" title="browserify-middleware 模块"></a>browserify-middleware 模块</h2><p>上面是将服务器端模块直接转为客户端脚本，然后在网页中调用这个转化后的脚本文件。还有一种思路是，在运行时动态转换模块，这就需要用到<a href="https://github.com/ForbesLindesay/browserify-middleware">browserify-middleware 模块</a>。</p>
<p>比如，网页中需要加载 app.js，它是从 main.js 转化过来的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可以在服务器端静态生成一个 app.js 文件，也可以让它动态生成。这就需要用 browserify-middleware 模块，服务器端脚本要像下面这样写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">&quot;browserify-middleware&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/app.js&quot;</span>, browserify(<span class="string">&quot;./client/main.js&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Lint 工具</title>
    <url>/2020/09/11/tools/lint/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Lint 工具用于检查代码的语法是否正确、风格是否符合要求。</p>
<p>JavaScript 语言的最早的 Lint 工具，是 Douglas Crockford 开发的 JSLint。由于该工具所有的语法规则，都是预设的，用户无法改变。所以，很快就有人抱怨，JSLint 不是让你写成正确的 JavaScript，而是让你像 Douglas Crockford 一样写 JavaScript。</p>
<p>JSHint 可以看作是 JSLint 的后继者，最大特定就是允许用户自定义自己的语法规则，写在项目根目录下面的<code>.jshintrc</code>文件。</p>
<p>JSLint 和 JSHint 同时检查你的语法和风格。另一个工具 JSCS 则是只检查语法风格。</p>
<p>最新的工具 ESLint 不仅允许你自定义语法规则，还允许用户创造插件，改变默认的 JavaScript 语法，比如支持 ES6 和 JSX 的语法。</p>
<h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>首先，安装 ESLint。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -g eslint</span><br></pre></td></tr></table></figure>

<p>其次，在项目根目录下面新建一个<code>.eslintrc</code>文件，里面定义了你的语法规则。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;indent&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;no-unused-vars&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;no-alert&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的<code>.eslintrc</code>文件是 JSON 格式，里面首先定义，这些规则只适用于浏览器环境。如果要定义，同时适用于浏览器环境和 Node 环境，可以写成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;node&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，上面的<code>.eslintrc</code>文件定义了三条语法规则。每个语法规则后面，表示这个规则的级别。</p>
<ul>
<li>0：关闭该条规则。</li>
<li>1：违反这条规则，会抛出一个警告。</li>
<li>2：违反这条规则，会抛出一个错误。</li>
</ul>
<p>接下来，新建一个<code>index.js</code>文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> unusued = <span class="string">&quot;I have no purpose!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">  alert(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet();</span><br></pre></td></tr></table></figure>

<p>然后，运行 ESLint 检查该文件，结果如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ eslint index.js</span><br><span class="line"></span><br><span class="line">index.js</span><br><span class="line">  1:5  error    unusued is defined but never used  no-unused-vars</span><br><span class="line">  5:5  warning  Unexpected alert                   no-alert</span><br><span class="line"></span><br><span class="line">✖ 2 problems (1 error, 1 warning)</span><br></pre></td></tr></table></figure>

<p>上面代码检查出两个问题，一个是定义了变量却没有使用，二是存在 alert。</p>
<h3 id="预置规则"><a href="#预置规则" class="headerlink" title="预置规则"></a>预置规则</h3><p>自己设置所有语法规则，是非常麻烦的。所以，ESLint 提供了预设的语法样式，比较常用的 Airbnb 的语法规则。由于这个规则集涉及 ES6，所以还需要安装 Babel 插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -g babel-eslint eslint-config-airbnb</span><br></pre></td></tr></table></figure>

<p>安装完成后，在<code>.eslintrc</code>文件中注明，使用 Airbnb 语法规则。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;eslint-config-airbnb&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你也可以用自己的规则，覆盖预设的语法规则。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;eslint-config-airbnb&quot;</span>,</span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;no-alert&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>（1）indent</p>
<p>indent 规则设定行首的缩进，默认是四个空格。下面的几种写法，可以改变这个设置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缩进为4个空格（默认值）</span></span><br><span class="line"><span class="string">&quot;indent&quot;</span>: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进为2个空格</span></span><br><span class="line"><span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进为1个tab键</span></span><br><span class="line"><span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;tab&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进为2个空格，</span></span><br><span class="line"><span class="comment">// 同时，switch...case结构的case也必须缩进，默认是不打开的</span></span><br><span class="line"> <span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">2</span>, &#123;<span class="string">&quot;SwitchCase&quot;</span>: <span class="number">1</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>（2）no-unused-vars</p>
<p>不允许声明了变量，却不使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123;<span class="string">&quot;vars&quot;</span>: <span class="string">&quot;local&quot;</span>, <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>上面代码中，vars 字段表示只检查局部变量，允许全局变量声明了却不使用；args 字段表示函数的参数，只要求使用最后一个参数，前面的参数可以不使用。</p>
<p>（3）no-alert</p>
<p>不得使用 alert、confirm 和 prompt。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Gulp：任务自动管理工具</title>
    <url>/2020/09/11/tools/gulp/</url>
    <content><![CDATA[<blockquote>
<p>Gulp 与 Grunt 一样，也是一个自动任务运行器。它充分借鉴了 Unix 操作系统的管道（pipe）思想，很多人认为，在操作上，它要比 Grunt 简单。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Gulp 需要全局安装，然后再在项目的开发目录中安装为本地模块。先进入项目目录，运行下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g gulp</span><br><span class="line"></span><br><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure>

<p>除了安装 gulp 以外，不同的任务还需要安装不同的 gulp 插件模块。举例来说，下面代码安装了 gulp-uglify 模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-uglify</span><br></pre></td></tr></table></figure>

<h2 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h2><p>项目根目录中的 gulpfile.js，是 Gulp 的配置文件。下面就是一个典型的 gulpfile.js 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&quot;minify&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">&quot;js/app.js&quot;</span>).pipe(uglify()).pipe(gulp.dest(<span class="string">&quot;build&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，gulpfile.js 加载 gulp 和 gulp-uglify 模块之后，使用 gulp 模块的 task 方法指定任务 minify。task 方法有两个参数，第一个是任务名，第二个是任务函数。在任务函数中，使用 gulp 模块的 src 方法，指定所要处理的文件，然后使用 pipe 方法，将上一步的输出转为当前的输入，进行链式处理。</p>
<p>task 方法的回调函数使用了两次 pipe 方法，也就是说做了两种处理。第一种处理是使用 gulp-uglify 模块，压缩源码；第二种处理是使用 gulp 模块的 dest 方法，将上一步的输出写入本地文件，这里是 build.js（代码中省略了后缀名 js）。</p>
<p>执行 minify 任务时，就在项目目录中执行下面命令就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp minify</span><br></pre></td></tr></table></figure>

<p>从上面的例子中可以看到，gulp 充分使用了“管道”思想，就是一个数据流（stream）：src 方法读入文件产生数据流，dest 方法将数据流写入文件，中间是一些中间步骤，每一步都对数据流进行一些处理。</p>
<p>下面是另一个数据流的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&quot;js&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;js/*.js&quot;</span>)</span><br><span class="line">    .pipe(jshint())</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(concat(<span class="string">&quot;app.js&quot;</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;build&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码使用 pipe 命令，分别进行 jshint、uglify、concat 三步处理。</p>
<h2 id="gulp-模块的方法"><a href="#gulp-模块的方法" class="headerlink" title="gulp 模块的方法"></a>gulp 模块的方法</h2><h3 id="src"><a href="#src" class="headerlink" title="src()"></a>src()</h3><p>gulp 模块的 src 方法，用于产生数据流。它的参数表示所要处理的文件，这些指定的文件会转换成数据流。参数的写法一般有以下几种形式。</p>
<ul>
<li>js/app.js：指定确切的文件名。</li>
<li>js/*.js：某个目录所有后缀名为 js 的文件。</li>
<li>js/**/*.js：某个目录及其所有子目录中的所有后缀名为 js 的文件。</li>
<li>!js/app.js：除了 js/app.js 以外的所有文件。</li>
<li>*.+(js|css)：匹配项目根目录下，所有后缀名为 js 或 css 的文件。</li>
</ul>
<p>src 方法的参数还可以是一个数组，用来指定多个成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.src([<span class="string">&quot;js/**/*.js&quot;</span>, <span class="string">&quot;!js/**/*.min.js&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="dest"><a href="#dest" class="headerlink" title="dest()"></a>dest()</h3><p>dest 方法将管道的输出写入文件，同时将这些输出继续输出，所以可以依次调用多次 dest 方法，将输出写入多个目录。如果有目录不存在，将会被新建。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp</span><br><span class="line">  .src(<span class="string">&quot;./client/templates/*.jade&quot;</span>)</span><br><span class="line">  .pipe(jade())</span><br><span class="line">  .pipe(gulp.dest(<span class="string">&quot;./build/templates&quot;</span>))</span><br><span class="line">  .pipe(minify())</span><br><span class="line">  .pipe(gulp.dest(<span class="string">&quot;./build/minified_templates&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>dest 方法还可以接受第二个参数，表示配置对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.dest(<span class="string">&quot;build&quot;</span>, &#123;</span><br><span class="line">  cwd: <span class="string">&quot;./app&quot;</span>,</span><br><span class="line">  mode: <span class="string">&quot;0644&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>配置对象有两个字段。cwd 字段指定写入路径的基准目录，默认是当前目录；mode 字段指定写入文件的权限，默认是 0777。</p>
<h3 id="task"><a href="#task" class="headerlink" title="task()"></a>task()</h3><p>task 方法用于定义具体的任务。它的第一个参数是任务名，第二个参数是任务函数。下面是一个非常简单的任务函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&quot;greet&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>task 方法还可以指定按顺序运行的一组任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&quot;build&quot;</span>, [<span class="string">&quot;css&quot;</span>, <span class="string">&quot;js&quot;</span>, <span class="string">&quot;imgs&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>上面代码先指定 build 任务，它由 css、js、imgs 三个任务所组成，task 方法会并发执行这三个任务。注意，由于每个任务都是异步调用，所以没有办法保证 js 任务的开始运行的时间，正是 css 任务运行结束。</p>
<p>如果希望各个任务严格按次序运行，可以把前一个任务写成后一个任务的依赖模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&quot;css&quot;</span>, [<span class="string">&quot;greet&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Deal with CSS here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码表明，css 任务依赖 greet 任务，所以 css 一定会在 greet 运行完成后再运行。</p>
<p>task 方法的回调函数，还可以接受一个函数作为参数，这对执行异步任务非常有用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行shell命令</span></span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).exec;</span><br><span class="line">gulp.task(<span class="string">&quot;jekyll&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// build Jekyll</span></span><br><span class="line">  exec(<span class="string">&quot;jekyll build&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> cb(err); <span class="comment">// return error</span></span><br><span class="line">    cb(); <span class="comment">// finished task</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果一个任务的名字为 default，就表明它是“默认任务”，在命令行直接输入 gulp 命令，就会运行该任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&quot;default&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Your default task</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&quot;default&quot;</span>, [<span class="string">&quot;styles&quot;</span>, <span class="string">&quot;jshint&quot;</span>, <span class="string">&quot;watch&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>执行的时候，直接使用 gulp，就会运行 styles、jshint、watch 三个任务。</p>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch()"></a>watch()</h3><p>watch 方法用于指定需要监视的文件。一旦这些文件发生变动，就运行指定任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&quot;watch&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.watch(<span class="string">&quot;templates/*.tmpl.html&quot;</span>, [<span class="string">&quot;build&quot;</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码指定，一旦 templates 目录中的模板文件发生变化，就运行 build 任务。</p>
<p>watch 方法也可以用回调函数，代替指定的任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.watch(<span class="string">&quot;templates/*.tmpl.html&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Event type: &quot;</span> + event.type);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Event path: &quot;</span> + event.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>另一种写法是 watch 方法所监控的文件发生变化时（修改、增加、删除文件），会触发 change 事件。可以对 change 事件指定回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> watcher = gulp.watch(<span class="string">&quot;templates/*.tmpl.html&quot;</span>, [<span class="string">&quot;build&quot;</span>]);</span><br><span class="line"></span><br><span class="line">watcher.on(<span class="string">&quot;change&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Event type: &quot;</span> + event.type);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Event path: &quot;</span> + event.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>除了 change 事件，watch 方法还可能触发以下事件。</p>
<ul>
<li>end：回调函数运行完毕时触发。</li>
<li>error：发生错误时触发。</li>
<li>ready：当开始监听文件时触发。</li>
<li>nomatch：没有匹配的监听文件时触发。</li>
</ul>
<p>watcher 对象还包含其他一些方法。</p>
<ul>
<li>watcher.end()：停止 watcher 对象，不会再调用任务或回调函数。</li>
<li>watcher.files()：返回 watcher 对象监视的文件。</li>
<li>watcher.add(glob)：增加所要监视的文件，它还可以附件第二个参数，表示回调函数。</li>
<li>watcher.remove(filepath)：从 watcher 对象中移走一个监视的文件。</li>
</ul>
<h2 id="gulp-load-plugins-模块"><a href="#gulp-load-plugins-模块" class="headerlink" title="gulp-load-plugins 模块"></a>gulp-load-plugins 模块</h2><p>一般情况下，gulpfile.js 中的模块需要一个个加载。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>),</span><br><span class="line">  jshint = <span class="built_in">require</span>(<span class="string">&quot;gulp-jshint&quot;</span>),</span><br><span class="line">  uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>),</span><br><span class="line">  concat = <span class="built_in">require</span>(<span class="string">&quot;gulp-concat&quot;</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&quot;js&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;js/*.js&quot;</span>)</span><br><span class="line">    .pipe(jshint())</span><br><span class="line">    .pipe(jshint.reporter(<span class="string">&quot;default&quot;</span>))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(concat(<span class="string">&quot;app.js&quot;</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;build&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，除了 gulp 模块以外，还加载另外三个模块。</p>
<p>这种一一加载的写法，比较麻烦。使用 gulp-load-plugins 模块，可以加载 package.json 文件中所有的 gulp 模块。上面的代码用 gulp-load-plugins 模块改写，就是下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>),</span><br><span class="line">  gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">&quot;gulp-load-plugins&quot;</span>),</span><br><span class="line">  plugins = gulpLoadPlugins();</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&quot;js&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;js/*.js&quot;</span>)</span><br><span class="line">    .pipe(plugins.jshint())</span><br><span class="line">    .pipe(plugins.jshint.reporter(<span class="string">&quot;default&quot;</span>))</span><br><span class="line">    .pipe(plugins.uglify())</span><br><span class="line">    .pipe(plugins.concat(<span class="string">&quot;app.js&quot;</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;build&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码假设 package.json 文件包含以下内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;gulp-concat&quot;</span>: <span class="string">&quot;~2.2.0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;gulp-uglify&quot;</span>: <span class="string">&quot;~0.2.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;gulp-jshint&quot;</span>: <span class="string">&quot;~1.5.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;gulp&quot;</span>: <span class="string">&quot;~3.5.6&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="gulp-livereload-模块"><a href="#gulp-livereload-模块" class="headerlink" title="gulp-livereload 模块"></a>gulp-livereload 模块</h2><p>gulp-livereload 模块用于自动刷新浏览器，反映出源码的最新变化。它除了模块以外，还需要在浏览器中安装插件，用来配合源码变化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>),</span><br><span class="line">  less = <span class="built_in">require</span>(<span class="string">&quot;gulp-less&quot;</span>),</span><br><span class="line">  livereload = <span class="built_in">require</span>(<span class="string">&quot;gulp-livereload&quot;</span>),</span><br><span class="line">  watch = <span class="built_in">require</span>(<span class="string">&quot;gulp-watch&quot;</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&quot;less&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp</span><br><span class="line">    .src(<span class="string">&quot;less/*.less&quot;</span>)</span><br><span class="line">    .pipe(watch())</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;css&quot;</span>))</span><br><span class="line">    .pipe(livereload());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码监视 less 文件，一旦编译完成，就自动刷新浏览器。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>RequireJS和AMD规范</title>
    <url>/2020/09/11/tools/require-AMD/</url>
    <content><![CDATA[<h1 id="RequireJS-和-AMD-规范"><a href="#RequireJS-和-AMD-规范" class="headerlink" title="RequireJS 和 AMD 规范"></a>RequireJS 和 AMD 规范</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>RequireJS 是一个工具库，主要用于客户端的模块管理。它可以让客户端的代码分成一个个模块，实现异步或动态加载，从而提高代码的性能和可维护性。它的模块管理遵守<a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD 规范</a>（Asynchronous Module Definition）。</p>
<p>RequireJS 的基本思想是，通过 define 方法，将代码定义为模块；通过 require 方法，实现代码的模块加载。</p>
<p>首先，将 require.js 嵌入网页，然后就能在网页中进行模块化编程了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">&quot;scripts/main&quot;</span> <span class="attr">src</span>=<span class="string">&quot;scripts/require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码的 data-main 属性不可省略，用于指定主代码所在的脚本文件，在上例中为 scripts 子目录下的 main.js 文件。用户自定义的代码就放在这个 main.js 文件中。</p>
<h3 id="define-方法：定义模块"><a href="#define-方法：定义模块" class="headerlink" title="define 方法：定义模块"></a>define 方法：定义模块</h3><p>define 方法用于定义模块，RequireJS 要求每个模块放在一个单独的文件里。</p>
<p>按照是否依赖其他模块，可以分成两种情况讨论。第一种情况是定义独立模块，即所定义的模块不依赖其他模块；第二种情况是定义非独立模块，即所定义的模块依赖于其他模块。</p>
<p><strong>（1）独立模块</strong></p>
<p>如果被定义的模块是一个独立模块，不需要依赖任何其他模块，可以直接用 define 方法生成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(&#123;</span><br><span class="line">  method1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  method2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码生成了一个拥有 method1、method2 两个方法的模块。</p>
<p>另一种等价的写法是，把对象写成一个函数，该函数的返回值就是输出的模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    method1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    method2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>后一种写法的自由度更高一点，可以在函数体内写一些模块初始化代码。</p>
<p>值得指出的是，define 定义的模块可以返回任何值，不限于对象。</p>
<p><strong>（2）非独立模块</strong></p>
<p>如果被定义的模块需要依赖其他模块，则 define 方法必须采用下面的格式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&#x27;module1&#x27;</span>, <span class="string">&#x27;module2&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>) </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>define 方法的第一个参数是一个数组，它的成员是当前模块所依赖的模块。比如，[‘module1’, ‘module2’]表示我们定义的这个新模块依赖于 module1 模块和 module2 模块，只有先加载这两个模块，新模块才能正常运行。一般情况下，module1 模块和 module2 模块指的是，当前目录下的 module1.js 文件和 module2.js 文件，等同于写成[‘./module1’, ‘./module2’]。</p>
<p>define 方法的第二个参数是一个函数，当前面数组的所有成员加载成功后，它将被调用。它的参数与数组的成员一一对应，比如 function(m1, m2)就表示，这个函数的第一个参数 m1 对应 module1 模块，第二个参数 m2 对应 module2 模块。这个函数必须返回一个对象，供其他模块调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&quot;module1&quot;</span>, <span class="string">&quot;module2&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">m1, m2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      m1.methodA();</span><br><span class="line">      m2.methodB();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码表示新模块返回一个对象，该对象的 method 方法就是外部调用的接口，menthod 方法内部调用了 m1 模块的 methodA 方法和 m2 模块的 methodB 方法。</p>
<p>需要注意的是，回调函数必须返回一个对象，这个对象就是你定义的模块。</p>
<p>如果依赖的模块很多，参数与模块一一对应的写法非常麻烦。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(</span><br><span class="line">    [       <span class="string">&#x27;dep1&#x27;</span>, <span class="string">&#x27;dep2&#x27;</span>, <span class="string">&#x27;dep3&#x27;</span>, <span class="string">&#x27;dep4&#x27;</span>, <span class="string">&#x27;dep5&#x27;</span>, <span class="string">&#x27;dep6&#x27;</span>, <span class="string">&#x27;dep7&#x27;</span>, <span class="string">&#x27;dep8&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">dep1,   dep2,   dep3,   dep4,   dep5,   dep6,   dep7,   dep8</span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>为了避免像上面代码那样繁琐的写法，RequireJS 提供一种更简单的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dep1 = <span class="built_in">require</span>(<span class="string">&#x27;dep1&#x27;</span>),</span><br><span class="line">        dep2 = <span class="built_in">require</span>(<span class="string">&#x27;dep2&#x27;</span>),</span><br><span class="line">        dep3 = <span class="built_in">require</span>(<span class="string">&#x27;dep3&#x27;</span>),</span><br><span class="line">        dep4 = <span class="built_in">require</span>(<span class="string">&#x27;dep4&#x27;</span>),</span><br><span class="line">        dep5 = <span class="built_in">require</span>(<span class="string">&#x27;dep5&#x27;</span>),</span><br><span class="line">        dep6 = <span class="built_in">require</span>(<span class="string">&#x27;dep6&#x27;</span>),</span><br><span class="line">        dep7 = <span class="built_in">require</span>(<span class="string">&#x27;dep7&#x27;</span>),</span><br><span class="line">        dep8 = <span class="built_in">require</span>(<span class="string">&#x27;dep8&#x27;</span>);</span><br><span class="line">        <span class="comment">// ···</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下面是一个 define 实际运用的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&#x27;math&#x27;</span>, <span class="string">&#x27;graph&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"> math, graph </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      plot: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> graph.drawPie(math.randomGrid(x,y));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码定义的模块依赖 math 和 graph 两个库，然后返回一个具有 plot 接口的对象。</p>
<p>另一个实际的例子是，通过判断浏览器是否为 IE，而选择加载 zepto 或 jQuery。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="string">&quot;__proto__&quot;</span> <span class="keyword">in</span> &#123;&#125; ? [<span class="string">&quot;zepto&quot;</span>] : [<span class="string">&quot;jquery&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个中间模块，该模块先判断浏览器是否支持<strong>proto</strong>属性（除了 IE，其他浏览器都支持），如果返回 true，就加载 zepto 库，否则加载 jQuery 库。</p>
<h3 id="require-方法：调用模块"><a href="#require-方法：调用模块" class="headerlink" title="require 方法：调用模块"></a>require 方法：调用模块</h3><p>require 方法用于调用模块。它的参数与 define 方法类似。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">foo, bar</span>) </span>&#123;</span><br><span class="line">  foo.doSomething();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面方法表示加载 foo 和 bar 两个模块，当这两个模块都加载成功后，执行一个回调函数。该回调函数就用来完成具体的任务。</p>
<p>require 方法的第一个参数，是一个表示依赖关系的数组。这个数组可以写得很灵活，请看下面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="built_in">window</span>.JSON ? <span class="literal">undefined</span> : <span class="string">&quot;util/json2&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">JSON</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">JSON</span> = <span class="built_in">JSON</span> || <span class="built_in">window</span>.JSON;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123; &quot;JSON&quot; : &quot;HERE&quot; &#125;&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码加载 JSON 模块时，首先判断浏览器是否原生支持 JSON 对象。如果是的，则将 undefined 传入回调函数，否则加载 util 目录下的 json2 模块。</p>
<p>require 方法也可以用在 define 方法内部。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> otherModule = <span class="built_in">require</span>(<span class="string">&quot;otherModule&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下面的例子显示了如何动态加载模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isReady = <span class="literal">false</span>,</span><br><span class="line">    foobar;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">require</span>([<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">foo, bar</span>) </span>&#123;</span><br><span class="line">    isReady = <span class="literal">true</span>;</span><br><span class="line">    foobar = foo() + bar();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isReady: isReady,</span><br><span class="line">    foobar: foobar</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码所定义的模块，内部加载了 foo 和 bar 两个模块，在没有加载完成前，isReady 属性值为 false，加载完成后就变成了 true。因此，可以根据 isReady 属性的值，决定下一步的动作。</p>
<p>下面的例子是模块的输出结果是一个 promise 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&quot;lib/Deferred&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Deferred</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> defer = <span class="keyword">new</span> Deferred();</span><br><span class="line">  <span class="built_in">require</span>([<span class="string">&quot;lib/templates/?index.html&quot;</span>, <span class="string">&quot;lib/data/?stats&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    template,</span></span></span><br><span class="line"><span class="function"><span class="params">    data</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    defer.resolve(&#123; <span class="attr">template</span>: template, <span class="attr">data</span>: data &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> defer.promise();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码的 define 方法返回一个 promise 对象，可以在该对象的 then 方法，指定下一步的动作。</p>
<p>如果服务器端采用 JSONP 模式，则可以直接在 require 中调用，方法是指定 JSONP 的 callback 参数为 define。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;http://someapi.com/foo?callback=define&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>require 方法允许添加第三个参数，即错误处理的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;backbone&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Backbone</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Backbone.View.extend(&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>require 方法的第三个参数，即处理错误的回调函数，接受一个 error 对象作为参数。</p>
<p>require 对象还允许指定一个全局性的 Error 事件的监听函数。所有没有被上面的方法捕获的错误，都会被触发这个监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">requirejs.onError = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="AMD-模式小结"><a href="#AMD-模式小结" class="headerlink" title="AMD 模式小结"></a>AMD 模式小结</h3><p>define 和 require 这两个定义模块、调用模块的方法，合称为 AMD 模式。它的模块定义的方法非常清晰，不会污染全局环境，能够清楚地显示依赖关系。</p>
<p>AMD 模式可以用于浏览器环境，并且允许非同步加载模块，也可以根据需要动态加载模块。</p>
<h2 id="配置-require-js：config-方法"><a href="#配置-require-js：config-方法" class="headerlink" title="配置 require.js：config 方法"></a>配置 require.js：config 方法</h2><p>require 方法本身也是一个对象，它带有一个 config 方法，用来配置 require.js 运行参数。config 方法接受一个对象作为参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line">    jquery: [</span><br><span class="line">      <span class="string">&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.0/jquery.min.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lib/jquery&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>config 方法的参数对象有以下主要成员：</p>
<p><strong>（1）paths</strong></p>
<p>paths 参数指定各个模块的位置。这个位置可以是同一个服务器上的相对位置，也可以是外部网址。可以为每个模块定义多个位置，如果第一个位置加载失败，则加载第二个位置，上面的示例就表示如果 CDN 加载失败，则加载服务器上的备用脚本。需要注意的是，指定本地文件路径时，可以省略文件最后的 js 后缀名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;jquery&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码加载 jquery 模块，因为 jquery 的路径已经在 paths 参数中定义了，所以就会到事先设定的位置下载。</p>
<p><strong>（2）baseUrl</strong></p>
<p>baseUrl 参数指定本地模块位置的基准目录，即本地模块的路径是相对于哪个目录的。该属性通常由 require.js 加载时的 data-main 属性指定。</p>
<p><strong>（3）shim</strong></p>
<p>有些库不是 AMD 兼容的，这时就需要指定 shim 属性的值。shim 可以理解成“垫片”，用来帮助 require.js 加载非 AMD 规范的库。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line">    backbone: <span class="string">&quot;vendor/backbone&quot;</span>,</span><br><span class="line">    underscore: <span class="string">&quot;vendor/underscore&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  shim: &#123;</span><br><span class="line">    backbone: &#123;</span><br><span class="line">      deps: [<span class="string">&quot;underscore&quot;</span>],</span><br><span class="line">      <span class="built_in">exports</span>: <span class="string">&quot;Backbone&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    underscore: &#123;</span><br><span class="line">      <span class="built_in">exports</span>: <span class="string">&quot;_&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中的 backbone 和 underscore 就是非 AMD 规范的库。shim 指定它们的依赖关系（backbone 依赖于 underscore），以及输出符号（backbone 为“Backbone”，underscore 为“_”）。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>RequireJS 允许使用插件，加载各种格式的数据。完整的插件清单可以查看<a href="https://github.com/jrburke/requirejs/wiki/Plugins">官方网站</a>。</p>
<p>下面是插入文本数据所使用的 text 插件的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&quot;backbone&quot;</span>, <span class="string">&quot;text!templates.html&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Backbone, template</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码加载的第一个模块是 backbone，第二个模块则是一个文本，用’text!’表示。该文本作为字符串，存放在回调函数的 template 变量中。</p>
<h2 id="优化器-r-js"><a href="#优化器-r-js" class="headerlink" title="优化器 r.js"></a>优化器 r.js</h2><p>RequireJS 提供一个基于 node.js 的命令行工具 r.js，用来压缩多个 js 文件。它的主要作用是将多个模块文件压缩合并成一个脚本文件，以减少网页的 HTTP 请求数。</p>
<p>第一步是安装 r.js（假设已经安装了 node.js）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g requirejs</span><br></pre></td></tr></table></figure>

<p>然后，使用的时候，直接在命令行键入以下格式的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node r.js -o &lt;arguments&gt;</span><br></pre></td></tr></table></figure>

<p>&lt;argument&gt;表示命令运行时，所需要的一系列参数，比如像下面这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node r.js -o baseUrl=. name=main out=main-built.js</span><br></pre></td></tr></table></figure>

<p>除了直接在命令行提供参数设置，也可以将参数写入一个文件，假定文件名为 build.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(&#123;</span><br><span class="line">  baseUrl: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">  name: <span class="string">&quot;main&quot;</span>,</span><br><span class="line">  out: <span class="string">&quot;main-built.js&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后，在命令行下用 r.js 运行这个参数文件，就 OK 了，不需要其他步骤了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node r.js -o build.js</span><br></pre></td></tr></table></figure>

<p>下面是一个参数文件的范例，假定位置就在根目录下，文件名为 build.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(&#123;</span><br><span class="line">  appDir: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">  baseUrl: <span class="string">&quot;./js&quot;</span>,</span><br><span class="line">  dir: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">  modules: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&quot;main&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  fileExclusionRegExp: <span class="regexp">/^(r|build)\.js$/</span>,</span><br><span class="line">  optimizeCss: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">  removeCombined: <span class="literal">true</span>,</span><br><span class="line">  paths: &#123;</span><br><span class="line">    jquery: <span class="string">&quot;lib/jquery&quot;</span>,</span><br><span class="line">    underscore: <span class="string">&quot;lib/underscore&quot;</span>,</span><br><span class="line">    backbone: <span class="string">&quot;lib/backbone/backbone&quot;</span>,</span><br><span class="line">    backboneLocalstorage: <span class="string">&quot;lib/backbone/backbone.localStorage&quot;</span>,</span><br><span class="line">    text: <span class="string">&quot;lib/require/text&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  shim: &#123;</span><br><span class="line">    underscore: &#123;</span><br><span class="line">      <span class="built_in">exports</span>: <span class="string">&quot;_&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    backbone: &#123;</span><br><span class="line">      deps: [<span class="string">&quot;underscore&quot;</span>, <span class="string">&quot;jquery&quot;</span>],</span><br><span class="line">      <span class="built_in">exports</span>: <span class="string">&quot;Backbone&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    backboneLocalstorage: &#123;</span><br><span class="line">      deps: [<span class="string">&quot;backbone&quot;</span>],</span><br><span class="line">      <span class="built_in">exports</span>: <span class="string">&quot;Store&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码将多个模块压缩合并成一个 main.js。</p>
<p>参数文件的主要成员解释如下：</p>
<ul>
<li><p><strong>appDir</strong>：项目目录，相对于参数文件的位置。</p>
</li>
<li><p><strong>baseUrl</strong>：js 文件的位置。</p>
</li>
<li><p><strong>dir</strong>：输出目录。</p>
</li>
<li><p><strong>modules</strong>：一个包含对象的数组，每个对象就是一个要被优化的模块。</p>
</li>
<li><p><strong>fileExclusionRegExp</strong>：凡是匹配这个正则表达式的文件名，都不会被拷贝到输出目录。</p>
</li>
<li><p><strong>optimizeCss</strong>: 自动压缩 CSS 文件，可取的值包括“none”, “standard”, “standard.keepLines”, “standard.keepComments”, “standard.keepComments.keepLines”。</p>
</li>
<li><p><strong>removeCombined</strong>：如果为 true，合并后的原文件将不保留在输出目录中。</p>
</li>
<li><p><strong>paths</strong>：各个模块的相对路径，可以省略 js 后缀名。</p>
</li>
<li><p><strong>shim</strong>：配置依赖性关系。如果某一个模块不是 AMD 模式定义的，就可以用 shim 属性指定模块的依赖性关系和输出值。</p>
</li>
<li><p><strong>generateSourceMaps</strong>：是否要生成 source map 文件。</p>
</li>
</ul>
<p>更详细的解释可以参考<a href="https://github.com/jrburke/r.js/blob/master/build/example.build.js">官方文档</a>。</p>
<p>运行优化命令后，可以前往 dist 目录查看优化后的文件。</p>
<p>下面是另一个 build.js 的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(&#123;</span><br><span class="line">  mainConfigFile: <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">  baseUrl: <span class="string">&quot;js&quot;</span>,</span><br><span class="line">  removeCombined: <span class="literal">true</span>,</span><br><span class="line">  findNestedDependencies: <span class="literal">true</span>,</span><br><span class="line">  dir: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">  modules: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&quot;main&quot;</span>,</span><br><span class="line">      exclude: [<span class="string">&quot;infrastructure&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&quot;infrastructure&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码将模块文件压缩合并成两个文件，第一个是 main.js（指定排除 infrastructure.js），第二个则是 infrastructure.js。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Source Map</title>
    <url>/2020/09/11/tools/source-map/</url>
    <content><![CDATA[<h1 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>随着 JavaScript 脚本变得越来越复杂，大部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。</p>
<p>常见的源码转换，主要是以下三种情况：</p>
<ul>
<li>压缩，减小体积。比如 jQuery 1.9 的源码，压缩前是 252KB，压缩后是 32KB。</li>
<li>多个文件合并，减少 HTTP 请求数。</li>
<li>其他语言编译成 JavaScript。最常见的例子就是 CoffeeScript。</li>
</ul>
<p>这三种情况，都使得实际运行的代码不同于开发代码，除错（debug）变得困难重重。</p>
<p>通常，JavaScript 的解释器会告诉你，第几行第几列代码出错。但是，这对于转换后的代码毫无用处。举例来说，jQuery 1.9 压缩后只有 3 行，每行 3 万个字符，所有内部变量都改了名字。你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。</p>
<p>这就是 Source map 想要解决的问题。</p>
<p>简单说，Source map 就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。</p>
<p>有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。</p>
<p>目前，暂时只有 Chrome 浏览器支持这个功能。在 Developer Tools 的 Setting 设置中，确认选中”Enable source maps”。</p>
<h2 id="生成和启用"><a href="#生成和启用" class="headerlink" title="生成和启用"></a>生成和启用</h2><p>生成 Source Map 的最常用方法，是使用 Google 的<a href="https://developers.google.com/closure/compiler/">Closure 编译器</a>。</p>
<p>生成命令的格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar compiler.jar \</span><br><span class="line">　　--js script.js \</span><br><span class="line">　　--create_source_map ./script-min.js.map \</span><br><span class="line">　　--source_map_format=V3 \</span><br><span class="line">　　--js_output_file script-min.js</span><br></pre></td></tr></table></figure>

<p>各个参数的意义如下：</p>
<ul>
<li>js： 转换前的代码文件</li>
<li>create_source_map： 生成的 source map 文件</li>
<li>source_map_format：source map 的版本，目前一律采用 V3。</li>
<li>js_output_file： 转换后的代码文件。</li>
</ul>
<p>其他的生成方法可以参考<a href="http://net.tutsplus.com/tutorials/tools-and-tips/source-maps-101/">这篇文章</a>。</p>
<p>启用 Source map 的方法很简单，只要在转换后的代码头部或尾部，加上一行就可以了。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span><span class="comment"># sourceMappingURL=/path/to/file.js.map</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/*# sourceMappingURL=/</span>path<span class="regexp">/to/</span>file.js.map */</span><br></pre></td></tr></table></figure>

<p>map 文件可以放在网络上，也可以放在本地文件系统。</p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>打开 Source map 文件，它大概是这个样子：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;out.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sourceRoot&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [<span class="string">&quot;foo.js&quot;</span>, <span class="string">&quot;bar.js&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;names&quot;</span>: [<span class="string">&quot;src&quot;</span>, <span class="string">&quot;maps&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;fun&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: <span class="string">&quot;AAgBC,SAAQ,CAAEA&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个文件就是一个 JavaScript 对象，可以被解释器读取。它主要有以下几个属性：</p>
<ul>
<li>version：Source map 的版本，目前为 3。</li>
<li>file：转换后的文件名。</li>
<li>sourceRoot：转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空。</li>
<li>sources：转换前的文件。该项是一个数组，表示可能存在多个文件合并。</li>
<li>names：转换前的所有变量名和属性名。</li>
<li>mappings：记录位置信息的字符串。</li>
</ul>
<h2 id="mappings-属性"><a href="#mappings-属性" class="headerlink" title="mappings 属性"></a>mappings 属性</h2><p>转换前后的代码一一对应的关键，就是 map 文件的 mappings 属性。这是一个很长的字符串，它分成三层。</p>
<p>第一层是行对应，以分号（;）表示，每个分号对应转换后源码的一行。所以，第一个分号前的内容，就对应源码的第一行，以此类推。</p>
<p>第二层是位置对应，以逗号（,）表示，每个逗号对应转换后源码的一个位置。所以，第一个逗号前的内容，就对应该行源码的第一个位置，以此类推。</p>
<p>第三层是位置转换，以<a href="http://en.wikipedia.org/wiki/Variable-length_quantity">VLQ 编码</a>表示，代表该位置对应的转换前的源码位置。</p>
<p>举例来说，假定 mappings 属性的内容如下：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">mappings:</span><span class="string">&quot;AAAAA,BBBBB;CCCCC&quot;</span></span><br></pre></td></tr></table></figure>

<p>它表示，转换后的源码分成两行，第一行有两个位置，第二行有一个位置。</p>
<p>每个位置使用五位，表示五个字段。从左边算起，</p>
<ul>
<li>第一位，表示这个位置在（转换后的代码的）的第几列。</li>
<li>第二位，表示这个位置属于 sources 属性中的哪一个文件。</li>
<li>第三位，表示这个位置属于转换前代码的第几行。</li>
<li>第四位，表示这个位置属于转换前代码的第几列。</li>
<li>第五位，表示这个位置属于 names 属性中的哪一个变量。</li>
</ul>
<p>有几点需要说明。首先，所有的值都是以 0 作为基数的。其次，第五位不是必需的，如果该位置没有对应 names 属性中的变量，可以省略第五位。再次，每一位都采用 VLQ 编码表示；由于 VLQ 编码是变长的，所以每一位可以由多个字符构成。</p>
<p>如果某个位置是 AAAAA，由于 A 在 VLQ 编码中表示 0，因此这个位置的五个位实际上都是 0。它的意思是，该位置在转换后代码的第 0 列，对应 sources 属性中第 0 个文件，属于转换前代码的第 0 行第 0 列，对应 names 属性中的第 0 个变量。</p>
<h2 id="VLQ-编码"><a href="#VLQ-编码" class="headerlink" title="VLQ 编码"></a>VLQ 编码</h2><p>这种编码最早用于 MIDI 文件，后来被多种格式采用。它的特点就是可以非常精简地表示很大的数值。</p>
<p>VLQ 编码是变长的。如果（整）数值在-15 到+15 之间（含两个端点），用一个字符表示；超出这个范围，就需要用多个字符表示。它规定，每个字符使用 6 个两进制位，正好可以借用<a href="http://en.wikipedia.org/wiki/Base_64">Base 64 编码</a>的字符表。</p>
<p>在这 6 个位中，左边的第一位（最高位）表示是否”连续”（continuation）。如果是 1，代表这６个位后面的 6 个位也属于同一个数；如果是 0，表示该数值到这 6 个位结束。</p>
<p>这 6 个位中的右边最后一位（最低位）的含义，取决于这 6 个位是否是某个数值的 VLQ 编码的第一个字符。如果是的，这个位代表”符号”（sign），0 为正，1 为负（Source map 的符号固定为 0）；如果不是，这个位没有特殊含义，被算作数值的一部分。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">Continuation</span><br><span class="line">|<span class="string">　　　　　Sign</span></span><br><span class="line">|<span class="string">　　　　　</span>|</span><br><span class="line">V　　　　　V</span><br><span class="line">１０１０１１</span><br></pre></td></tr></table></figure>

<p>下面举例如何对数值 16 进行 VLQ 编码。</p>
<p>(1) 将 16 改写成二进制形式 10000。</p>
<p>(2) 在最右边补充符号位。因为 16 大于 0，所以符号位为 0，整个数变成 100000。</p>
<p>(3) 从右边的最低位开始，将整个数每隔 5 位，进行分段，即变成 1 和 00000 两段。如果最高位所在的段不足 5 位，则前面补 0，因此两段变成 00001 和 00000。</p>
<p>(4) 将两段的顺序倒过来，即 00000 和 00001。</p>
<p>(5) 在每一段的最前面添加一个”连续位”，除了最后一段为 0，其他都为 1，即变成 100000 和 000001。</p>
<p>(6) 将每一段转成 Base 64 编码。查表可知，100000 为 g，000001 为 B。因此，数值 16 的 VLQ 编码为 gB。</p>
<p>上面的过程，看上去好像很复杂，做起来其实很简单，具体的实现可以参考官方的<a href="https://github.com/mozilla/source-map/blob/master/lib/source-map/base64-vlq.js">base64-vlq.js</a>文件，里面有详细的注释。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 高级用法</title>
    <url>/2020/12/10/typescript/advanced/</url>
    <content><![CDATA[<h1 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h1><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>注：交叉类型是将多个类型合并为一个类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">first: T, second: U</span>): <span class="title">T</span> &amp; <span class="title">U</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> first) &#123;</span><br><span class="line">    (&lt;<span class="built_in">any</span>&gt;result)[id] = (&lt;<span class="built_in">any</span>&gt;first)[id];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> second) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!result.hasOwnProperty(id)) &#123;</span><br><span class="line">      (&lt;<span class="built_in">any</span>&gt;result)[id] = (&lt;<span class="built_in">any</span>&gt;second)[id];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>注：联合类型是不确定的多个类型中的一个。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>注：类型别名会给一个类型起个新名字，不会新建一个类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Container&lt;T&gt; = &#123; value: T &#125;;</span><br><span class="line"><span class="keyword">type</span> Tree&lt;T&gt; = &#123;</span><br><span class="line">  value: T;</span><br><span class="line">  left: Tree&lt;T&gt;;</span><br><span class="line">  right: Tree&lt;T&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><p>注：使用索引类型，编译器能够检查使用了动态属性名的代码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pluck</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">o: T, names: K[]</span>): <span class="title">T</span>[<span class="title">K</span>][] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> names.map(<span class="function"><span class="params">n</span> =&gt;</span> o[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person: Person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Jarid&quot;</span>,</span><br><span class="line">  age: <span class="number">35</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> strings: <span class="built_in">string</span>[] = pluck(person, [<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h2><p>注：新类型以相同的形式去转换旧类型里每个属性。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> PersonPartial &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PersonReadonly &#123;</span><br><span class="line">  <span class="keyword">readonly</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><h2 id="不同文件的命名空间"><a href="#不同文件的命名空间" class="headerlink" title="不同文件的命名空间"></a>不同文件的命名空间</h2><p>注：避免同名冲突，隐藏实现细节。</p>
<p><strong>A 文件：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Validation &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> StringValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>B 文件：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Validation &#123;</span><br><span class="line">  <span class="keyword">const</span> lettersRegexp = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> LettersOnlyValidator <span class="keyword">implements</span> StringValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> lettersRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>注：简化命名空间。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Shapes &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> Polygons &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Triangle &#123;&#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Square &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> polygons = Shapes.Polygons;</span><br><span class="line"><span class="keyword">let</span> sq = <span class="keyword">new</span> polygons.Square();</span><br></pre></td></tr></table></figure>

<h2 id="外部命名空间"><a href="#外部命名空间" class="headerlink" title="外部命名空间"></a>外部命名空间</h2><p>注：引入外部 JS 库，使用外部命名空间声明，declare 关键字代表声明。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> D3 &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> Selectors &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      (selector: <span class="built_in">string</span>): Selection;</span><br><span class="line">      (element: EventTarget): Selection;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> Event &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> Base <span class="keyword">extends</span> Selectors &#123;</span><br><span class="line">    event: Event;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> d3: D3.Base;</span><br></pre></td></tr></table></figure>

<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>前置：tsconfig.json 中启用 experimentalDecorators。<br>注：装饰器使用 @expression 这种形式，expression 求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p>
<h2 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h2><p>注： 装饰器工厂就是一个简单的函数，它返回一个表达式，以供装饰器在运行时调用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">color</span>(<span class="params">value: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这是一个装饰器工厂</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这是装饰器</span></span><br><span class="line">    <span class="comment">// do something with &quot;target&quot; and &quot;value&quot;...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="装饰器组合"><a href="#装饰器组合" class="headerlink" title="装饰器组合"></a>装饰器组合</h2><p>注：装饰器工厂就是一个简单的函数，它返回一个表达式，以供装饰器在运行时调用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;f(): evaluated&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    target,</span></span></span><br><span class="line"><span class="function"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;f(): called&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;g(): evaluated&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    target,</span></span></span><br><span class="line"><span class="function"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;g(): called&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  <span class="meta">@f</span>()</span><br><span class="line">  <span class="meta">@g</span>()</span><br><span class="line">  method() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="装饰器调用顺序"><a href="#装饰器调用顺序" class="headerlink" title="装饰器调用顺序"></a>装饰器调用顺序</h2><ol>
<li>参数装饰器，然后依次是方法装饰器，访问符装饰器，或属性装饰器应用到每个实例成员。</li>
<li>参数装饰器，然后依次是方法装饰器，访问符装饰器，或属性装饰器应用到每个静态成员。</li>
<li>参数装饰器应用到构造函数。</li>
<li>类装饰器应用到类。</li>
</ol>
<h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>注：类装饰器在类声明之前被声明（紧靠着类声明）。 类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。 类装饰器不能用在声明文件中( .d.ts)，也不能用在任何外部上下文中（比如 declare 的类）。类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数。如果类装饰器返回一个值，它会使用提供的构造函数来替换类的声明。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@sealed</span></span><br><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  greeting: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="built_in">this</span>.greeting;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sealed</span>(<span class="params">constructor: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.seal(<span class="keyword">constructor</span>);</span><br><span class="line">  <span class="built_in">Object</span>.seal(constructor.prototype);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><p>注：方法装饰器声明在一个方法的声明之前（紧靠着方法声明）。 它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。 方法装饰器不能用在声明文件( .d.ts)，重载或者任何外部上下文（比如 declare 的类）中。如果方法装饰器返回一个值，它会被用作方法的属性描述符。<br>方法装饰器表达式会在运行时当作函数被调用，传入下列 3 个参数：</p>
<p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>成员的名字。<br>成员的属性描述符。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  greeting: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@enumerable</span>(<span class="literal">false</span>)</span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="built_in">this</span>.greeting;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enumerable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    descriptor.enumerable = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h2><p>注：访问器装饰器声明在一个访问器的声明之前（紧靠着访问器声明）。 访问器装饰器应用于访问器的 属性描述符并且可以用来监视，修改或替换一个访问器的定义。 访问器装饰器不能用在声明文件中（.d.ts），或者任何外部上下文（比如 declare 的类）里。<br>访问器装饰器表达式会在运行时当作函数被调用，传入下列 3 个参数：</p>
<p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>成员的名字。<br>成员的属性描述符。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">  <span class="keyword">private</span> _x: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> _y: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._x = x;</span><br><span class="line">    <span class="built_in">this</span>._y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">  get x() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">  get y() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configurable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    descriptor.configurable = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><p>注：属性装饰器声明在一个属性声明之前（紧靠着属性声明）。 属性装饰器不能用在声明文件中（.d.ts），或者任何外部上下文（比如 declare 的类）里。<br>属性装饰器表达式会在运行时当作函数被调用，传入下列 2 个参数：</p>
<p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>成员的名字。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  <span class="meta">@format</span>(<span class="string">&quot;Hello, %s&quot;</span>)</span><br><span class="line">  greeting: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">let</span> formatString = getFormat(<span class="built_in">this</span>, <span class="string">&quot;greeting&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> formatString.replace(<span class="string">&quot;%s&quot;</span>, <span class="built_in">this</span>.greeting);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatMetadataKey = <span class="built_in">Symbol</span>(<span class="string">&quot;format&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">formatString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Reflect</span>.metadata(formatMetadataKey, formatString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormat</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Reflect</span>.getMetadata(formatMetadataKey, target, propertyKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h2><p>注：参数装饰器声明在一个参数声明之前（紧靠着参数声明）。 参数装饰器应用于类构造函数或方法声明。 参数装饰器不能用在声明文件（.d.ts），重载或其它外部上下文（比如 declare 的类）里。参数装饰器只能用来监视一个方法的参数是否被传入。<br>参数装饰器表达式会在运行时当作函数被调用，传入下列 3 个参数：</p>
<p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。<br>成员的名字。<br>参数在函数参数列表中的索引。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  greeting: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@validate</span></span><br><span class="line">  greet(<span class="meta">@required</span> name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;, &quot;</span> + <span class="built_in">this</span>.greeting;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requiredMetadataKey = <span class="built_in">Symbol</span>(<span class="string">&quot;required&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">required</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  propertyKey: <span class="built_in">string</span> | symbol,</span></span></span><br><span class="line"><span class="function"><span class="params">  parameterIndex: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> existingRequiredParameters: <span class="built_in">number</span>[] =</span><br><span class="line">    <span class="built_in">Reflect</span>.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];</span><br><span class="line">  existingRequiredParameters.push(parameterIndex);</span><br><span class="line">  <span class="built_in">Reflect</span>.defineMetadata(</span><br><span class="line">    requiredMetadataKey,</span><br><span class="line">    existingRequiredParameters,</span><br><span class="line">    target,</span><br><span class="line">    propertyKey</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  propertyName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  descriptor: TypedPropertyDescriptor&lt;<span class="built_in">Function</span>&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> method = descriptor.value;</span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> requiredParameters: <span class="built_in">number</span>[] = <span class="built_in">Reflect</span>.getOwnMetadata(</span><br><span class="line">      requiredMetadataKey,</span><br><span class="line">      target,</span><br><span class="line">      propertyName</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (requiredParameters) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> parameterIndex <span class="keyword">of</span> requiredParameters) &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          parameterIndex &gt;= <span class="built_in">arguments</span>.length ||</span><br><span class="line">          <span class="built_in">arguments</span>[parameterIndex] === <span class="literal">undefined</span></span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Missing required argument.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> method.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 基础用法</title>
    <url>/2020/12/10/typescript/base/</url>
    <content><![CDATA[<h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>注：支持十进制、十六进制、ECMAScript 2015 中引入的二进制和八进制</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">&quot;bob&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h2><p>注：symbol 类型的值是通过 Symbol 构造函数创建的，Symbols 是不可改变且唯一的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>(<span class="string">&quot;key&quot;</span>); <span class="comment">// 可选的字符串 key</span></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// number 代表数组中每个元素的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newList: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 泛型，同上</span></span><br></pre></td></tr></table></figure>

<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>注：元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>注：元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green,</span><br><span class="line">  Blue</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"><span class="built_in">console</span>.log(Color); <span class="comment">// Green</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> newColor &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green = <span class="number">2</span>,</span><br><span class="line">  Blue = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: newColor = newColor[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(newColor); <span class="comment">// Green</span></span><br></pre></td></tr></table></figure>

<h2 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h2><p>注：代表任意类型，它会跳过编译类型检查，新手往往会把 TypeScript 强行写成 AnyScript</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">let</span> newAnyThing: <span class="built_in">any</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h2><p>注：与 any 相反，代表没有任何类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 代表没有返回值</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;This is my warning message&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>; <span class="comment">// 声明是只能赋值为 undefined 和 null</span></span><br></pre></td></tr></table></figure>

<h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><p>注：默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。<br>你指定了–strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h2><p>注：表示那些永不存在的值的类型。never 类型是任何类型的子类型，也可以赋值给任何类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 返回 never 的函数必须存在无法达到的终点</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>注：表示非原始类型，也就是除 number，string，boolean，symbol，null 或 undefined 之外的类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: <span class="built_in">object</span> | <span class="literal">null</span></span>): <span class="title">void</span></span>;</span><br><span class="line">create(&#123; prop: <span class="number">0</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>注：把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 返回值的类型与传入参数的类型相同</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  <span class="comment">// 泛型类型</span></span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// 泛型类</span></span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 泛型约束</span></span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>&lt;<span class="title">T</span>&gt;(<span class="params">c: &#123; <span class="keyword">new</span> (): T &#125;</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 类类型</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>注：以预期的类型编译，相当于类型转换。<br>在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newSomeValue: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> newStrLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length; <span class="comment">// as 等价于前边的泛型</span></span><br></pre></td></tr></table></figure>

<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类的实质是一种引用数据类型，类的实例称为对象。</p>
<h2 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h2><p>注：constructor 定义构造函数， 这个函数会在 new 创建类实例的时候被调用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  greeting: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="built_in">this</span>.greeting;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>注：继承的关键字 extends。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  bark() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Woof! Woof!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(<span class="number">10</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure>

<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><blockquote>
<p>注：public（默认），代表公有的，可以自由访问。<br>private 代表私有的，只能在类的内部访问。<br>protected 与 private 相似，但可以在派生类中访问。<br>readonly 只读属性必须在声明时或构造函数里被初始化。<br>static 静态属性，存在于类的本身，而不是实例化。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> sex: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">type</span> = <span class="string">&quot;big&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = theName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> move(distanceInMeters: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.department = department;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> getElevatorPitch() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="built_in">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">&quot;Howard&quot;</span>, <span class="string">&quot;Sales&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(howard.getElevatorPitch());</span><br></pre></td></tr></table></figure>

<h2 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h2><p>注：在参数中定义并初始化一个成员。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">  <span class="keyword">readonly</span> numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">readonly</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><p>注：通过 getters/setters 来截取对对象成员的访问。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> passcode = <span class="string">&quot;secret passcode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  <span class="keyword">private</span> _fullName: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  get fullName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._fullName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set fullName(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">&quot;secret passcode&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>._fullName = newName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Error: Unauthorized update of employee!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">&quot;Bob Smith&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">  alert(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>注：抽象类做为其它派生类的基类使用，abstract 关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Department &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  printName(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Department name: &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> printMeeting(): <span class="built_in">void</span>; <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AccountingDepartment <span class="keyword">extends</span> Department &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;Accounting and Auditing&quot;</span>); <span class="comment">// 在派生类的构造函数中必须调用 super()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printMeeting(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;The Accounting Department meets each Monday at 10am.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  generateReports(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Generating accounting reports...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> department: Department; <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line">department = <span class="keyword">new</span> Department(); <span class="comment">// 错误: 不能创建一个抽象类的实例</span></span><br><span class="line">department = <span class="keyword">new</span> AccountingDepartment(); <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.printName();</span><br><span class="line">department.printMeeting();</span><br><span class="line">department.generateReports(); <span class="comment">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure>

<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口的作用就是为例规范 Object 的类型</p>
<h2 id="普通接口"><a href="#普通接口" class="headerlink" title="普通接口"></a>普通接口</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabelledValue &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">&quot;Size 10 Object&quot;</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure>

<h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><p>注：带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123; color: <span class="built_in">string</span>; area: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; color: <span class="string">&quot;white&quot;</span>, area: <span class="number">100</span> &#125;;</span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; color: <span class="string">&quot;black&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>注：只在创建的时候可以赋值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">  <span class="keyword">readonly</span> x: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p: Point = &#123; x: <span class="number">10</span>, y: <span class="number">20</span> &#125;;</span><br><span class="line">p.x = <span class="number">5</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure>

<h2 id="ReadonlyArray"><a href="#ReadonlyArray" class="headerlink" title="ReadonlyArray"></a>ReadonlyArray</h2><p>注：把所有可变方法去掉，确保数组创建后再也不能被修改。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure>

<h2 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h2><p>注：避免可选属性接口中额外的属性导致的错误。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> squareOptions = &#123; colour: <span class="string">&quot;red&quot;</span>, width: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(squareOptions);</span><br></pre></td></tr></table></figure>

<h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>注：规范函数的参数列表和返回值。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span> (<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h2><p>注：规范通过索引得到的类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Fred&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<h2 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h2><p>注：规范类的类型。实现类型的关键字 implements。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.currentTime = d;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><p>注：一个接口可以继承多个接口，创建出多个接口的合成接口。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">  penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">  sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line">square.penWidth = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h2><p>注：一个对象可以同时做为函数和对象使用，并带有额外的属性。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">  (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  interval: <span class="built_in">number</span>;</span><br><span class="line">  reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) </span>&#123;&#125;;</span><br><span class="line">  counter.interval = <span class="number">123</span>;</span><br><span class="line">  counter.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h2><p>注：当接口继承了一个类类型时，它会继承类的成员但不包括其实现，接口同样会继承到类的 private 和 protected 成员。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">  <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">  select(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">  select() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TextBox <span class="keyword">extends</span> Control &#123;</span><br><span class="line">  select() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：“Image”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> Image <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">  select() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的类与接口</title>
    <url>/2021/04/22/typescript/class-interface/</url>
    <content><![CDATA[<h1 id="interface-与-class-的区别"><a href="#interface-与-class-的区别" class="headerlink" title="interface 与 class 的区别"></a>interface 与 class 的区别</h1><blockquote>
<p>typescript 有接口的概念，这个接口和类有什么关系吗？<br>interface： 接口只声明成员方法，不做实现。<br>class： 类声明并实现方法</p>
</blockquote>
<ol>
<li>interface 只是定义了这个接口会有什么，但是没有告诉你具体是什么。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">  lng: <span class="built_in">number</span>;</span><br><span class="line">  lat: <span class="built_in">number</span>;</span><br><span class="line">  sayPosition(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：Point interface 中包含数值类型的经纬度和一个 sayPosition 函数，但是<code>具体内容没有定义</code>，需要你自己<code>在子类中实现</code></p>
<ol start="2">
<li>class 是完整的实现</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">lng, lat</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.lng = lng;</span><br><span class="line">    <span class="built_in">this</span>.lat = lat;</span><br><span class="line">  &#125;</span><br><span class="line">  sayPosition() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;point:&quot;</span>, <span class="built_in">this</span>.lng, <span class="built_in">this</span>.lat);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意点</strong></p>
<ol>
<li>接口不能实现接口或者类，所以实现只能用于类身上,即类可以实现接口或类</li>
<li>接口可以继承接口或类</li>
<li>类不可以继承接口，类只能继承类</li>
<li>可多继承或者多实现</li>
</ol>
<h1 id="extends-与-implement"><a href="#extends-与-implement" class="headerlink" title="extends 与 implement"></a>extends 与 implement</h1><blockquote>
<p>在 typescript 上遇到过实例化对象的两种写法：<code>implement</code> 和 <code>extends</code>。<code>extends</code> 很明显就是 ES6 里面的类继承，那么 <code>implement</code> 又是做什么的呢？它和 <code>extends</code> 有什么不同？<br>extends 是继承父类，只要那个类不是声明为 final 或者那个类定义为 abstract 的就能继承。<br>java 中不支持多重继承，但是可以用接口来实现，这样就要用到 implements，继承只能继承一个类，但 implements 可以实现多个接口，用逗号分开就行了，如：<code>class A extends B implements C,D,E</code></p>
</blockquote>
<ol>
<li>implements</li>
</ol>
<p>implements 实现，一个新的类，从父类或者接口实现所有的属性和方法，同时可以重写属性和方法，包含一些新的功能。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B &#123;</span><br><span class="line">  <span class="keyword">public</span> user: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Imp <span class="keyword">implements</span> A, B &#123;</span><br><span class="line">  name = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  user = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Imps <span class="keyword">implements</span> Imp &#123;</span><br><span class="line">  name = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  user = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>extends</li>
</ol>
<p>extends 继承，一个新的接口或者类，从父类或者接口继承所有的属性和方法，不可以重写属性，但可以重写方法。但是要注意的是，如果父类是抽象类，内部有抽象的方法，子类在 extends 的时候，如果子类不是抽象类，那么子类就一定要对父类中的抽象方法进行重写。但如果子类也是抽象类，则可以不可考虑重写。extends 支持子类，孙类……即可以继承多代。</p>
<p><strong>Java 版的 implements 与 extends</strong></p>
<p>Java 作为老牌面向对象语言，对比学习下，看下差异点。</p>
<ol>
<li>同上，接口不能实现接口或者类，类不可以继承接口，类只能继承类,可多继承或者多实现</li>
<li>与 TS 有所区别的是，接口不能继承类，接口只能继承接口</li>
</ol>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的数据类型</title>
    <url>/2021/01/12/typescript/data-type/</url>
    <content><![CDATA[<blockquote>
<p>typescript 中为了使编写的代码更规范，更有利于维护，增加了类型校验，在 typescript 中主要给我们提供了以下数据类型</p>
</blockquote>
<ul>
<li>布尔类型（boolean）</li>
<li>数字类型（number）</li>
<li>字符串类型(string)</li>
<li>数组类型（array）</li>
<li>元组类型（tuple）</li>
<li>枚举类型（enum）</li>
<li>任意类型（any）</li>
<li>null 和 undefined</li>
<li>void 类型</li>
<li>never 类型</li>
</ul>
<h1 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5的写法 （正确写法）  ts中（错误写法）</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">flag = <span class="number">456</span>;</span><br></pre></td></tr></table></figure>

<p>typescript 中为了使编写的代码更规范，更有利于维护，增加了类型校验</p>
<p>写 ts 代码<code>必须指定类型</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag = 123;  //错误</span></span><br><span class="line"></span><br><span class="line">flag = <span class="literal">false</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br></pre></td></tr></table></figure>

<h1 id="数字类型（number）"><a href="#数字类型（number）" class="headerlink" title="数字类型（number）"></a>数字类型（number）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="built_in">number</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">num = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line">num = <span class="string">&quot;str&quot;</span>; <span class="comment">//错误</span></span><br></pre></td></tr></table></figure>

<h1 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型(string)"></a>字符串类型(string)</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str: <span class="built_in">string</span> = <span class="string">&quot;this is ts&quot;</span>;</span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;haha&quot;</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">str = <span class="literal">true</span>; <span class="comment">//错误</span></span><br></pre></td></tr></table></figure>

<h1 id="数组类型（array）"><a href="#数组类型（array）" class="headerlink" title="数组类型（array）"></a>数组类型（array）</h1><p>ts 中定义数组有两种方式</p>
<ol>
<li>第一种定义数组的方式</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr: <span class="built_in">number</span>[] = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二种定义数组的方式</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>]; <span class="comment">//es5 定义数组</span></span><br></pre></td></tr></table></figure>

<h1 id="元组类型（tuple）"><a href="#元组类型（tuple）" class="headerlink" title="元组类型（tuple）"></a>元组类型（tuple）</h1><blockquote>
<p>属于数组的一种</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">123</span>, <span class="string">&quot;this is ts&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<h1 id="枚举类型（enum）"><a href="#枚举类型（enum）" class="headerlink" title="枚举类型（enum）"></a>枚举类型（enum）</h1><p>随着计算机的不断普及，程序不仅只用于数值计算，还更广泛地用于处理非数值的数据。<br>例如：性别、月份、星期几、颜色、单位名、学历、职业等，都不是数值数据。<br>在其它程序设计语言中，一般用一个数值来代表某一状态，这种处理方法不直观，易读性差。<br>如果能在程序中用自然语言中有相应含义的单词来代表某一状态，则程序就很容易阅读和理解。<br>也就是说，事先考虑到某一变量可能取的值，尽量用自然语言中含义清楚的单词来表示它的每一个值，<br>这种方法称为枚举方法，用这种方法定义的类型称枚举类型。</p>
<p>enum 枚举名{<br>标识符[=整型常数],<br>标识符[=整型常数],<br>…<br>标识符[=整型常数],<br>};</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Flag &#123;</span><br><span class="line">  success = <span class="number">1</span>,</span><br><span class="line">  error = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s: Flag = Flag.success;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Flag &#123;</span><br><span class="line">  success = <span class="number">1</span>,</span><br><span class="line">  error = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f: Flag = Flag.error;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  blue,</span><br><span class="line">  red,</span><br><span class="line">  <span class="string">&quot;orange&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c: Color = Color.red;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//1  如果标识符没有赋值 它的值就是下标</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  blue,</span><br><span class="line">  red = <span class="number">3</span>,</span><br><span class="line">  <span class="string">&quot;orange&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c: Color = Color.red;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c: Color = Color.orange;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Err &#123;</span><br><span class="line">  <span class="string">&quot;undefined&quot;</span> = <span class="number">-1</span>,</span><br><span class="line">  <span class="string">&quot;null&quot;</span> = <span class="number">-2</span>,</span><br><span class="line">  <span class="string">&quot;success&quot;</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e: Err = Err.success;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br></pre></td></tr></table></figure>

<h1 id="任意类型（any）"><a href="#任意类型（any）" class="headerlink" title="任意类型（any）"></a>任意类型（any）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBox: <span class="built_in">any</span> = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"></span><br><span class="line">oBox.style.color = <span class="string">&quot;red&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h1><blockquote>
<p>其他（never 类型）数据类型的子类型</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//输出：undefined   报错</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//输出：undefined  //正确</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure>

<p>定义没有赋值就是 undefined</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num: <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">num = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>一个元素可能是 number 类型 可能是 null 可能是 undefined</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">num = <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure>

<h1 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h1><blockquote>
<p>typescript 中的 void 表示没有任何类型，一般用于定义方法的时候方法没有返回值。</p>
</blockquote>
<h2 id="es5-的定义方法"><a href="#es5-的定义方法" class="headerlink" title="es5 的定义方法"></a>es5 的定义方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run();</span><br></pre></td></tr></table></figure>

<h2 id="表示方法没有返回任何类型"><a href="#表示方法没有返回任何类型" class="headerlink" title="表示方法没有返回任何类型"></a>表示方法没有返回任何类型</h2><p><strong>正确写法</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run();</span><br></pre></td></tr></table></figure>

<p><strong>错误写法</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run();</span><br></pre></td></tr></table></figure>

<p><strong>正确写法</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run();</span><br></pre></td></tr></table></figure>

<h1 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h1><blockquote>
<p>never 类型是其他类型 （包括 null 和 undefined）的子类型，代表从不会出现的值。这意味着声明 never 的变量只能被 never 类型所赋值。</p>
</blockquote>
<p>这意味着声明 never 的变量只能被 never 类型所赋值。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b: <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">b = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = 123; // 错误的写法</span></span><br><span class="line">a = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的装饰器</title>
    <url>/2021/01/12/typescript/decorator/</url>
    <content><![CDATA[<h1 id="装饰器的定义"><a href="#装饰器的定义" class="headerlink" title="装饰器的定义"></a>装饰器的定义</h1><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法，属性或参数上，可以修改类的行为。</p>
<p>通俗的讲装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。</p>
<p>常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器</p>
<p>装饰器的写法：普通装饰器（无法传参） 、 装饰器工厂（可传参）</p>
<p>装饰器是过去几年中 js 最大的成就之一，已是 Es7 的标准特性之一</p>
<h1 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h1><blockquote>
<p>类装饰器在类声明之前被声明（紧靠着类声明）。 类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。 传入一个参数</p>
</blockquote>
<h2 id="普通装饰器（无法传参）"><a href="#普通装饰器（无法传参）" class="headerlink" title="普通装饰器（无法传参）"></a>普通装饰器（无法传参）</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params);</span><br><span class="line">  <span class="comment">// params 就是当前类</span></span><br><span class="line">  params.prototype.apiUrl = <span class="string">&quot;动态扩展的属性&quot;</span>;</span><br><span class="line">  params.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是一个run方法&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  getData() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> http: <span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl);</span><br><span class="line">http.run();</span><br></pre></td></tr></table></figure>

<h2 id="装饰器工厂（可传参）"><a href="#装饰器工厂（可传参）" class="headerlink" title="装饰器工厂（可传参）"></a>装饰器工厂（可传参）</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">    target.prototype.apiUrl = params;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span>(<span class="string">&quot;http://www.itying.com/api&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getData() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http: <span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl);</span><br></pre></td></tr></table></figure>

<h2 id="重载构造函数"><a href="#重载构造函数" class="headerlink" title="重载构造函数"></a>重载构造函数</h2><blockquote>
<p>类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数。<br>如果类装饰器返回一个值，它会使用提供的构造函数来替换类的声明。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> target &#123;</span><br><span class="line">    apiUrl: <span class="built_in">any</span> = <span class="string">&quot;我是修改后的数据&quot;</span>;</span><br><span class="line">    getData() &#123;</span><br><span class="line">      <span class="built_in">this</span>.apiUrl = <span class="built_in">this</span>.apiUrl + <span class="string">&quot;----&quot;</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.apiUrl);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="keyword">public</span> apiUrl: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.apiUrl = <span class="string">&quot;我是构造函数里面的apiUrl&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.apiUrl);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData();</span><br></pre></td></tr></table></figure>

<h1 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h1><p>属性装饰器表达式会在运行时当作函数被调用，传入下列 2 个参数：</p>
<ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>成员的名字。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(target);</span></span><br><span class="line">    <span class="comment">// console.log(params);</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">params: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, attr: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(attr);</span><br><span class="line">    target[attr] = params;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@logClass</span>(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="meta">@logProperty</span>(<span class="string">&quot;http://itying.com&quot;</span>)</span><br><span class="line">  <span class="keyword">public</span> url: <span class="built_in">any</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData();</span><br></pre></td></tr></table></figure>

<h1 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h1><p>它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。</p>
<p>方法装饰会在运行时传入下列 3 个参数：</p>
<ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>成员的名字。</li>
<li>成员的属性描述符。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法装饰器一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">params: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, methodName: <span class="built_in">any</span>, desc: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(methodName);</span><br><span class="line">    <span class="built_in">console</span>.log(desc);</span><br><span class="line">    target.apiUrl = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line">    target.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="keyword">public</span> url: <span class="built_in">any</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@get</span>(<span class="string">&quot;http://www.itying,com&quot;</span>)</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http: <span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl);</span><br><span class="line">http.run();</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法装饰器二</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">params: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, methodName: <span class="built_in">any</span>, desc: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(methodName);</span><br><span class="line">    <span class="built_in">console</span>.log(desc.value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改装饰器的方法  把装饰器方法里面传入的所有参数改为string类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、保存当前的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> oMethod = desc.value;</span><br><span class="line">    desc.value = <span class="function"><span class="keyword">function</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">      args = args.map(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(value);</span><br><span class="line">      &#125;);</span><br><span class="line">      oMethod.apply(<span class="built_in">this</span>, args);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="keyword">public</span> url: <span class="built_in">any</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@get</span>(<span class="string">&quot;http://www.itying,com&quot;</span>)</span><br><span class="line">  getData(...args: <span class="built_in">any</span>[]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是getData里面的方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData(<span class="number">123</span>, <span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="方法参数装饰器"><a href="#方法参数装饰器" class="headerlink" title="方法参数装饰器"></a>方法参数装饰器</h1><p>参数装饰器表达式会在运行时当作函数被调用，可以使用参数装饰器为类的原型增加一些元素数据 ，传入下列 3 个参数：</p>
<ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>方法的名字。</li>
<li>参数在函数参数列表中的索引。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logParams</span>(<span class="params">params: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, methodName: <span class="built_in">any</span>, paramsIndex: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(methodName);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(paramsIndex);</span><br><span class="line"></span><br><span class="line">    target.apiUrl = params;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="keyword">public</span> url: <span class="built_in">any</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  getData(<span class="meta">@logParams</span>(<span class="string">&quot;xxxxx&quot;</span>) uuid: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(uuid);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http: <span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData(<span class="number">123456</span>);</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl);</span><br></pre></td></tr></table></figure>

<h1 id="装饰器执行顺序"><a href="#装饰器执行顺序" class="headerlink" title="装饰器执行顺序"></a>装饰器执行顺序</h1><blockquote>
<p>属性&gt;方法&gt;方法参数&gt;类</p>
</blockquote>
<p><strong>如果有多个同样的装饰器，它会先执行后面的</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass1</span>(<span class="params">params: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;类装饰器1&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass2</span>(<span class="params">params: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;类装饰器2&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logAttribute1</span>(<span class="params">params?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, attrName: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;属性装饰器1&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logAttribute2</span>(<span class="params">params?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, attrName: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;属性装饰器2&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethod1</span>(<span class="params">params?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, attrName: <span class="built_in">any</span>, desc: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;方法装饰器1&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethod2</span>(<span class="params">params?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, attrName: <span class="built_in">any</span>, desc: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;方法装饰器2&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logParams1</span>(<span class="params">params?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, attrName: <span class="built_in">any</span>, desc: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;方法参数装饰器1&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logParams2</span>(<span class="params">params?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, attrName: <span class="built_in">any</span>, desc: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;方法参数装饰器2&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass1</span>(<span class="string">&quot;http://www.itying.com/api&quot;</span>)</span><br><span class="line"><span class="meta">@logClass2</span>(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="meta">@logAttribute1</span>()</span><br><span class="line">  <span class="meta">@logAttribute2</span>()</span><br><span class="line">  <span class="keyword">public</span> apiUrl: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@logMethod1</span>()</span><br><span class="line">  <span class="meta">@logMethod2</span>()</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setData(<span class="meta">@logParams1</span>() attr1: <span class="built_in">any</span>, <span class="meta">@logParams2</span>() attr2: <span class="built_in">any</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http: <span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的枚举类型详解</title>
    <url>/2021/04/21/typescript/enum/</url>
    <content><![CDATA[<blockquote>
<p>本文以活动状态为例介绍 ts 中的枚举类型</p>
</blockquote>
<h1 id="js-定义"><a href="#js-定义" class="headerlink" title="js 定义"></a>js 定义</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> statusObj = &#123;</span><br><span class="line">  unplayed: <span class="number">0</span>,</span><br><span class="line">  underway: <span class="number">1</span>,</span><br><span class="line">  end: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getServe</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (status === statusObj.unplayed) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;未开始&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === statusObj.underway) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;进行中&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === statusObj.end) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;已结束&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resultJs = getServe(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`当前活动状态为<span class="subst">$&#123;resultJs&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<h1 id="ts-枚举"><a href="#ts-枚举" class="headerlink" title="ts 枚举"></a>ts <a href="%3C!--swig%EF%BF%BC2--%3E#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%EF%BC%88enum%EF%BC%89">枚举</a></h1><blockquote>
<p>枚举中默认值为下标，即 index 值，从 0 开始</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> StatusEnum &#123;</span><br><span class="line">  unplayed = <span class="number">1</span>,</span><br><span class="line">  underway,</span><br><span class="line">  end</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getServeTs</span>(<span class="params">status: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (status === StatusEnum.unplayed) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;未开始&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === StatusEnum.underway) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;进行中&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === StatusEnum.end) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;已结束&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;未匹配到该活动&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(StatusEnum.unplayed); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(StatusEnum.underway); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(StatusEnum.end); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resultTs = getServeTs(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`当前活动状态为  <span class="subst">$&#123;resultTs&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的类</title>
    <url>/2021/01/12/typescript/class/</url>
    <content><![CDATA[<h1 id="es5-里面的类"><a href="#es5-里面的类" class="headerlink" title="es5 里面的类"></a>es5 里面的类</h1><h2 id="最简单的类"><a href="#最简单的类" class="headerlink" title="最简单的类"></a>最简单的类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">alert(p.name);</span><br></pre></td></tr></table></figure>

<h2 id="构造函数和原型链里面增加方法"><a href="#构造函数和原型链里面增加方法" class="headerlink" title="构造函数和原型链里面增加方法"></a>构造函数和原型链里面增加方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;张三&quot;</span>; <span class="comment">/*属性*/</span></span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name + <span class="string">&quot;在运动&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>//原型链上面的属性会被多个实例共享 构造函数不会</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Person.prototype.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name + <span class="string">&quot;在工作&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// alert(p.name);</span></span><br><span class="line"><span class="comment">// p.run();</span></span><br><span class="line">p.work();</span><br></pre></td></tr></table></figure>

<h2 id="类里面的静态方法"><a href="#类里面的静态方法" class="headerlink" title="类里面的静态方法"></a>类里面的静态方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;张三&quot;</span>; <span class="comment">/*属性*/</span></span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*实例方法*/</span></span><br><span class="line"></span><br><span class="line">    alert(<span class="built_in">this</span>.name + <span class="string">&quot;在运动&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;我是静态方法&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>//原型链上面的属性会被多个实例共享 构造函数不会</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Person.prototype.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name + <span class="string">&quot;在工作&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.work();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用静态方法</span></span><br><span class="line">Person.getInfo();</span><br></pre></td></tr></table></figure>

<h2 id="es5-里面的继承-对象冒充实现继承"><a href="#es5-里面的继承-对象冒充实现继承" class="headerlink" title="es5 里面的继承 对象冒充实现继承"></a>es5 里面的继承 对象冒充实现继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;张三&quot;</span>; <span class="comment">/*属性*/</span></span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*实例方法*/</span></span><br><span class="line">    alert(<span class="built_in">this</span>.name + <span class="string">&quot;在运动&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name + <span class="string">&quot;在工作&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Web 类 继承 Person 类 原型链+对象冒充的组合继承模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>); <span class="comment">/*对象冒充实现继承*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web();</span><br><span class="line"><span class="comment">// w.run();  //对象冒充可以继承构造函数里面的属性和方法</span></span><br><span class="line"></span><br><span class="line">w.work(); <span class="comment">//对象冒充可以继承构造函数里面的属性和方法   但是没法继承原型链上面的属性和方法</span></span><br></pre></td></tr></table></figure>

<h2 id="es5-里面的继承-原型链实现继承"><a href="#es5-里面的继承-原型链实现继承" class="headerlink" title="es5 里面的继承 原型链实现继承"></a>es5 里面的继承 原型链实现继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;张三&quot;</span>; <span class="comment">/*属性*/</span></span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*实例方法*/</span></span><br><span class="line">    alert(<span class="built_in">this</span>.name + <span class="string">&quot;在运动&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name + <span class="string">&quot;在工作&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Web 类 继承 Person 类 原型链+对象冒充的组合继承模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Web.prototype = <span class="keyword">new</span> Person(); <span class="comment">//原型链实现继承</span></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web();</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型链实现继承:可以继承构造函数里面的属性和方法 也可以继承原型链上面的属性和方法</span></span><br><span class="line"><span class="comment">//w.run();</span></span><br><span class="line"></span><br><span class="line">w.work();</span><br></pre></td></tr></table></figure>

<h2 id="原型链实现继承的问题？"><a href="#原型链实现继承的问题？" class="headerlink" title="原型链实现继承的问题？"></a>原型链实现继承的问题？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name; <span class="comment">/*属性*/</span></span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*实例方法*/</span></span><br><span class="line">    alert(<span class="built_in">this</span>.name + <span class="string">&quot;在运动&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name + <span class="string">&quot;在工作&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>);</span><br><span class="line">p.run();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name; <span class="comment">/*属性*/</span></span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*实例方法*/</span></span><br><span class="line">    alert(<span class="built_in">this</span>.name + <span class="string">&quot;在运动&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name + <span class="string">&quot;在工作&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params">name, age</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Web.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;赵四&quot;</span>, <span class="number">20</span>); <span class="comment">//实例化子类的时候没法给父类传参</span></span><br><span class="line"></span><br><span class="line">w.run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// var w1=new Web(&#x27;王五&#x27;,22);</span></span><br></pre></td></tr></table></figure>

<h2 id="原型链-对象冒充的组合继承模式"><a href="#原型链-对象冒充的组合继承模式" class="headerlink" title="原型链 + 对象冒充的组合继承模式"></a>原型链 + 对象冒充的组合继承模式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name; <span class="comment">/*属性*/</span></span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*实例方法*/</span></span><br><span class="line">    alert(<span class="built_in">this</span>.name + <span class="string">&quot;在运动&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name + <span class="string">&quot;在工作&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age); <span class="comment">//对象冒充继承   实例化子类可以给父类传参</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Web.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;赵四&quot;</span>, <span class="number">20</span>); <span class="comment">//实例化子类的时候没法给父类传参</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// w.run();</span></span><br><span class="line">w.work();</span><br><span class="line"></span><br><span class="line"><span class="comment">// var w1=new Web(&#x27;王五&#x27;,22);</span></span><br></pre></td></tr></table></figure>

<h2 id="原型链-对象冒充继承的另一种方式"><a href="#原型链-对象冒充继承的另一种方式" class="headerlink" title="原型链+对象冒充继承的另一种方式"></a>原型链+对象冒充继承的另一种方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name; <span class="comment">/*属性*/</span></span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*实例方法*/</span></span><br><span class="line">    alert(<span class="built_in">this</span>.name + <span class="string">&quot;在运动&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name + <span class="string">&quot;在工作&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age); <span class="comment">//对象冒充继承  可以继承构造函数里面的属性和方法、实例化子类可以给父类传参</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Web.prototype = Person.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;赵四&quot;</span>, <span class="number">20</span>); <span class="comment">//实例化子类的时候没法给父类传参</span></span><br><span class="line"></span><br><span class="line">w.run();</span><br><span class="line"><span class="comment">// w.work();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var w1=new Web(&#x27;王五&#x27;,22);</span></span><br></pre></td></tr></table></figure>

<h1 id="typescript-中的类"><a href="#typescript-中的类" class="headerlink" title="typescript 中的类"></a>typescript 中的类</h1><h2 id="ts-中类的定义"><a href="#ts-中类的定义" class="headerlink" title="ts 中类的定义"></a>ts 中类的定义</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>; <span class="comment">//属性  前面省略了public关键词</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">n: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">//构造函数   实例化类的时候触发的方法</span></span><br><span class="line">    <span class="built_in">this</span>.name = n;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(): <span class="built_in">void</span> &#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">p.run();</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">//构造函数   实例化类的时候触发的方法</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(p.getName());</span><br><span class="line"></span><br><span class="line">p.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(p.getName());</span><br></pre></td></tr></table></figure>

<h2 id="ts-中实现继承-extends、-super"><a href="#ts-中实现继承-extends、-super" class="headerlink" title="ts 中实现继承 extends、 super"></a>ts 中实现继承 extends、 super</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var p=new Person(&#x27;王五&#x27;);</span></span><br><span class="line"><span class="comment">// alert(p.run())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">/*初始化父类的构造函数*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">alert(w.run());</span><br></pre></td></tr></table></figure>

<p>ts 中继承的探讨 父类的方法和子类的方法一致</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var p=new Person(&#x27;王五&#x27;);</span></span><br><span class="line"><span class="comment">// alert(p.run())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">/*初始化父类的构造函数*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动-子类`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  work() &#123;</span><br><span class="line">    alert(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在工作`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"><span class="comment">// alert(w.run());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// w.work();</span></span><br><span class="line"></span><br><span class="line">alert(w.run());</span><br></pre></td></tr></table></figure>

<h2 id="类里面的修饰符"><a href="#类里面的修饰符" class="headerlink" title="类里面的修饰符"></a>类里面的修饰符</h2><p>typescript 里面定义属性的时候给我们提供了 三种修饰符</p>
<blockquote>
<p>属性如果不加修饰符 默认就是 公有 （public）</p>
</blockquote>
<ul>
<li>public :公有 在当前类里面、 子类 、类外面都可以访问</li>
<li>protected：保护类型 在当前类里面、子类里面可以访问 ，在类外部没法访问</li>
<li>private ：私有 在当前类里面可以访问，子类、类外部都没法访问</li>
</ul>
<h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><blockquote>
<p>公有 在类里面、 子类 、类外面都可以访问</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>; <span class="comment">/*公有属性*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var p=new Person(&#x27;王五&#x27;);</span></span><br><span class="line"><span class="comment">// alert(p.run())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">/*初始化父类的构造函数*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动-子类`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  work() &#123;</span><br><span class="line">    alert(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在工作`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">w.work();</span><br></pre></td></tr></table></figure>

<p><strong>类外部访问公有属性</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>; <span class="comment">/*公有属性*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(p.name);</span><br></pre></td></tr></table></figure>

<h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><blockquote>
<p>保护类型 在类里面、子类里面可以访问 ，在类外部没法访问</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>; <span class="comment">/*公有属性*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">alert(p.run());</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">/*初始化父类的构造函数*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  work() &#123;</span><br><span class="line">    alert(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在工作`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;李四11&quot;</span>);</span><br><span class="line"></span><br><span class="line">w.work();</span><br><span class="line"></span><br><span class="line">alert(w.run());</span><br></pre></td></tr></table></figure>

<p><strong>类外部没法访问保护类型的属性</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>; <span class="comment">/*保护类型*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(p.name);</span><br></pre></td></tr></table></figure>

<h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><blockquote>
<p>私有 在类里面可以访问，子类、类外部都没法访问</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span>; <span class="comment">/*私有*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  work() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在工作`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span>; <span class="comment">/*私有*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(p.run());</span><br></pre></td></tr></table></figure>

<h2 id="静态属性-静态方法"><a href="#静态属性-静态方法" class="headerlink" title="静态属性 静态方法"></a>静态属性 静态方法</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.run1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Person.name = <span class="string">&quot;哈哈哈&quot;</span>;</span><br><span class="line"></span><br><span class="line">Person.run2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">Person.run2(); <span class="comment">// 静态方法的调用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Per &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> age: <span class="built_in">number</span> = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">//静态属性</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="comment">/*实例方法*/</span></span><br><span class="line"></span><br><span class="line">    alert(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在运动`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  work() &#123;</span><br><span class="line">    alert(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在工作`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> print() &#123;</span><br><span class="line">    <span class="comment">/*静态方法  里面没法直接调用类里面的属性*/</span></span><br><span class="line"></span><br><span class="line">    alert(<span class="string">&quot;print方法&quot;</span> + Per.sex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var p=new Per(&#x27;张三&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p.run();</span></span><br><span class="line"></span><br><span class="line">Per.print();</span><br><span class="line"></span><br><span class="line">alert(Per.sex);</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote>
<p>父类定义一个方法不去实现，让继承它的子类去实现 每一个子类有不同的表现<br>多态属于继承</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="comment">// 具体吃什么  不知道，</span></span><br><span class="line">    <span class="comment">// 具体吃什么？继承它的子类去实现，每一个子类的表现不一样</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;吃的方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&quot;吃粮食&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&quot;吃老鼠&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote>
<p>它是提供其他类继承的基类，不能直接被实例化。<br>用 abstract 关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。<br>abstract 抽象方法只能放在抽象类里面<br>抽象类和抽象方法用来定义标准 。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标准：Animal 这个类要求它的子类必须包含 eat 方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> eat(): <span class="built_in">any</span>; <span class="comment">// 抽象方法不包含具体实现并且必须在派生类中实现。</span></span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;其他方法可以不实现&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var a = new Animal(); /*错误的写法*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="comment">// 抽象类的子类必须实现抽象类里面的抽象方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;吃粮食&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Dog(<span class="string">&quot;小花花&quot;</span>);</span><br><span class="line">d.eat();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="comment">// 抽象类的子类必须实现抽象类里面的抽象方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  run() &#123;&#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;吃老鼠&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Cat(<span class="string">&quot;小花猫&quot;</span>);</span><br><span class="line">c.eat();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的函数</title>
    <url>/2021/01/12/typescript/function/</url>
    <content><![CDATA[<h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><h2 id="es5-定义函数的方法"><a href="#es5-定义函数的方法" class="headerlink" title="es5 定义函数的方法"></a>es5 定义函数的方法</h2><h3 id="函数声明法"><a href="#函数声明法" class="headerlink" title="函数声明法"></a>函数声明法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;run&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> run2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;run2&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="ts-中定义函数的方法"><a href="#ts-中定义函数的方法" class="headerlink" title="ts 中定义函数的方法"></a>ts 中定义函数的方法</h2><h3 id="函数声明法-1"><a href="#函数声明法-1" class="headerlink" title="函数声明法"></a>函数声明法</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;run&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>错误写法</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数-1"><a href="#匿名函数-1" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(fun2()); <span class="comment">/*调用方法*/</span></span><br></pre></td></tr></table></figure>

<h2 id="ts-中定义方法传参"><a href="#ts-中定义方法传参" class="headerlink" title="ts 中定义方法传参"></a>ts 中定义方法传参</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getInfo = <span class="function"><span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">40</span>));</span><br></pre></td></tr></table></figure>

<p><strong>没有返回值的方法</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure>

<h1 id="方法可选参数"><a href="#方法可选参数" class="headerlink" title="方法可选参数"></a>方法可选参数</h1><p>es5 里面方法的实参和行参可以不一样，但是 ts 中必须一样，如果不一样就需要配置可选参数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: <span class="built_in">string</span>, age?: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> ---年龄保密`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">123</span>));</span><br></pre></td></tr></table></figure>

<p>注意:可选参数必须配置到参数的最后面</p>
<p>错误写法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name?: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> ---年龄保密`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="string">&quot;zhangsan&quot;</span>));</span><br></pre></td></tr></table></figure>

<h1 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h1><p>es5 里面没法设置默认参数，es6 和 ts 中都可以设置默认参数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> = 20</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> ---年龄保密`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// alert( getInfo(&#x27;张三&#x27;));</span></span><br><span class="line">alert(getInfo(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>));</span><br></pre></td></tr></table></figure>

<h1 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, c: <span class="built_in">number</span>, d: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<p><code>三点运算符</code> 接受新参传过来的值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...result: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">    sum += result[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, ...result: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = a + b;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">    sum += result[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<h1 id="ts-函数重载"><a href="#ts-函数重载" class="headerlink" title="ts 函数重载"></a>ts 函数重载</h1><p>java 中方法的重载：重载指的是两个或者两个以上同名函数，但它们的参数不一样，这时会出现函数重载的情况。</p>
<p>typescript 中的重载：通过为同一个函数提供多个函数类型定义来试下多种功能的目的。</p>
<p>ts 为了兼容 es5 以及 es6 重载的写法和 java 中有区别。</p>
<p>es5 中出现同名方法，下面的会替换上面的方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">config</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">config, value</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ts 中的重载</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">age: <span class="built_in">number</span></span>): <span class="title">string</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">str: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我叫：&quot;</span> + str;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我的年龄是&quot;</span> + str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="string">&quot;张三&quot;</span>)); <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="number">20</span>)); <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="literal">true</span>)); <span class="comment">//错误写法</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: <span class="built_in">any</span>, age?: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我叫：&quot;</span> + name + <span class="string">&quot;我的年龄是&quot;</span> + age;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我叫：&quot;</span> + name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="string">&quot;zhangsan&quot;</span>)); <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="number">123</span>)); <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line">alert(getInfo(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>

<h1 id="箭头函数-es6"><a href="#箭头函数-es6" class="headerlink" title="箭头函数 es6"></a>箭头函数 es6</h1><blockquote>
<p>this 指向的问题 箭头函数里面的 this 指向上下文</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  alert(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的泛型</title>
    <url>/2021/04/21/typescript/generics/</url>
    <content><![CDATA[<h1 id="泛型的定义"><a href="#泛型的定义" class="headerlink" title="泛型的定义"></a>泛型的定义</h1><blockquote>
<p>泛型：软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。<br>在像 C#和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。<br>通俗理解：泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持(类型校验)</p>
</blockquote>
<h2 id="只能返回-string-类型的数据"><a href="#只能返回-string-类型的数据" class="headerlink" title="只能返回 string 类型的数据"></a>只能返回 string 类型的数据</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="同时返回-string-类型-和-number-类型-（代码冗余）"><a href="#同时返回-string-类型-和-number-类型-（代码冗余）" class="headerlink" title="同时返回 string 类型 和 number 类型 （代码冗余）"></a>同时返回 string 类型 和 number 类型 （代码冗余）</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData1</span>(<span class="params">value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData2</span>(<span class="params">value: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="同时返回-string-类型-和-number-类型-any-可以解决这个问题"><a href="#同时返回-string-类型-和-number-类型-any-可以解决这个问题" class="headerlink" title="同时返回 string 类型 和 number 类型 any 可以解决这个问题"></a>同时返回 string 类型 和 number 类型 any 可以解决这个问题</h2><blockquote>
<p><code>any</code> 放弃了类型检查,传入什么 返回什么。比如:传入 number 类型必须返回 number 类型 传入 string 类型必须返回 string 类型</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;哈哈哈&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">getData(<span class="string">&quot;str&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>传入的参数类型和返回的参数类型可以不一致</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;哈哈哈&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h1><blockquote>
<p>可以支持不特定的数据类型 要求：传入的参数和返回的参数一直</p>
</blockquote>
<p><code>T</code> 表示泛型，具体什么类型是调用这个方法的时候决定的</p>
<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">getData&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;1214231&quot;</span>);</span><br><span class="line"></span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="string">&quot;2112&quot;</span>); <span class="comment">/*错误的写法*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;2145214214&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>); <span class="comment">//参数必须是number</span></span><br><span class="line"></span><br><span class="line">getData&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;这是一个泛型&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>&lt;<span class="title">T</span>&gt;(<span class="params">first: T, second: T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">join&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">join&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="多个泛型的定义"><a href="#多个泛型的定义" class="headerlink" title="多个泛型的定义"></a>多个泛型的定义</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joinMul</span>&lt;<span class="title">T</span>, <span class="title">P</span>&gt;(<span class="params">first: T, second: P</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">joinMul&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;(<span class="string">&quot;a&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 泛型的类型推断</span></span><br><span class="line">joinMul(<span class="string">&quot;a&quot;</span>, <span class="number">2</span>); <span class="comment">// function joinMul&lt;string, number&gt;(first: string, second: number): string</span></span><br></pre></td></tr></table></figure>

<h2 id="泛型中数组的使用"><a href="#泛型中数组的使用" class="headerlink" title="泛型中数组的使用"></a>泛型中数组的使用</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrFun</span>&lt;<span class="title">T</span>&gt;(<span class="params">params: <span class="built_in">Array</span>&lt;T&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arrFun&lt;<span class="built_in">number</span>&gt;([<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line">arrFun&lt;<span class="built_in">string</span>&gt;([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><h2 id="基础用法-1"><a href="#基础用法-1" class="headerlink" title="基础用法"></a>基础用法</h2><blockquote>
<p>例：比如有个最小堆算法，需要同时支持返回数字和字符串 a - z 两种类型。 通过类的泛型来实现</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> MinClass &#123;</span><br><span class="line">  <span class="keyword">public</span> list: <span class="built_in">number</span>[] = [];</span><br><span class="line">  add(num: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(num);</span><br><span class="line">  &#125;</span><br><span class="line">  min(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> minNum = <span class="built_in">this</span>.list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (minNum &gt; <span class="built_in">this</span>.list[i]) &#123;</span><br><span class="line">        minNum = <span class="built_in">this</span>.list[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minNum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> MinClass();</span><br><span class="line"></span><br><span class="line">m.add(<span class="number">3</span>);</span><br><span class="line">m.add(<span class="number">22</span>);</span><br><span class="line">m.add(<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">alert(m.min());</span><br></pre></td></tr></table></figure>

<p><strong>类的泛型</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> MinClas&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> list: T[] = [];</span><br><span class="line"></span><br><span class="line">  add(value: T): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  min(): T &#123;</span><br><span class="line">    <span class="keyword">var</span> minNum = <span class="built_in">this</span>.list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (minNum &gt; <span class="built_in">this</span>.list[i]) &#123;</span><br><span class="line">        minNum = <span class="built_in">this</span>.list[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minNum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m1 = <span class="keyword">new</span> MinClas&lt;<span class="built_in">number</span>&gt;(); <span class="comment">/*实例化类 并且制定了类的T代表的类型是number*/</span></span><br><span class="line">m1.add(<span class="number">11</span>);</span><br><span class="line">m1.add(<span class="number">3</span>);</span><br><span class="line">m1.add(<span class="number">2</span>);</span><br><span class="line">alert(m1.min());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m2 = <span class="keyword">new</span> MinClas&lt;<span class="built_in">string</span>&gt;(); <span class="comment">/*实例化类 并且制定了类的T代表的类型是string*/</span></span><br><span class="line"></span><br><span class="line">m2.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">m2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">m2.add(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">alert(m2.min());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>例：获取用户身份</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Id&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> people: T[]</span>) &#123;&#125;</span><br><span class="line">  getId(index: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.people[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userId = <span class="keyword">new</span> Id&lt;<span class="built_in">string</span>&gt;([<span class="string">&quot;教师&quot;</span>, <span class="string">&quot;学生&quot;</span>, <span class="string">&quot;医生&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(userId.getId(<span class="number">0</span>)); <span class="comment">// 教师</span></span><br></pre></td></tr></table></figure>

<h2 id="泛型中的继承"><a href="#泛型中的继承" class="headerlink" title="泛型中的继承"></a>泛型中的继承</h2><h3 id="interface-接口定义"><a href="#interface-接口定义" class="headerlink" title="interface 接口定义"></a>interface 接口定义</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IdModel &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> IdExtends&lt;T <span class="keyword">extends</span> IdModel&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> people: T[]</span>) &#123;&#125;</span><br><span class="line">  getId(index: <span class="built_in">number</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.people[index].name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userIdExtends = <span class="keyword">new</span> IdExtends&lt;IdModel&gt;([</span><br><span class="line">  &#123; name: <span class="string">&quot;教师&quot;</span> &#125;,</span><br><span class="line">  &#123; name: <span class="string">&quot;学生&quot;</span> &#125;,</span><br><span class="line">  &#123; name: <span class="string">&quot;医生&quot;</span> &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(userIdExtends.getId(<span class="number">1</span>)); <span class="comment">// 学生</span></span><br></pre></td></tr></table></figure>

<h3 id="泛型类型约束"><a href="#泛型类型约束" class="headerlink" title="泛型类型约束"></a>泛型类型约束</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> GenConstraint&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> people: T[]</span>) &#123;&#125;</span><br><span class="line">  getId(index: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.people[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userGenConstraint = <span class="keyword">new</span> GenConstraint&lt;<span class="built_in">string</span>&gt;([<span class="string">&quot;教师&quot;</span>, <span class="string">&quot;学生&quot;</span>, <span class="string">&quot;医生&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(userId.getId(<span class="number">2</span>)); <span class="comment">// 医生</span></span><br></pre></td></tr></table></figure>

<h1 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> ConfigFn &#123;</span><br><span class="line">  &lt;T&gt;(value: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getData: ConfigFn = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getData&lt;string&gt;(&#x27;张三&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getData&lt;string&gt;(1243); //错误</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> ConfigFn&lt;T&gt; &#123;</span><br><span class="line">  (value: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myGetData: ConfigFn&lt;<span class="built_in">string</span>&gt; = getData;</span><br><span class="line"></span><br><span class="line">myGetData(<span class="string">&quot;20&quot;</span>); <span class="comment">/*正确*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// myGetData(20)  //错误</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的接口</title>
    <url>/2021/01/12/typescript/interface/</url>
    <content><![CDATA[<blockquote>
<p>接口的作用：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种限制和规范的作用。接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供某些方法，提供这些方法的类就可以满足实际需要。 typescrip 中的接口类似于 java，同时还增加了更灵活的接口类型，包括属性、函数、可索引和类等。<br>定义标准。</p>
</blockquote>
<h1 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h1><h2 id="对-json-的约束"><a href="#对-json-的约束" class="headerlink" title="对 json 的约束"></a>对 json 的约束</h2><p>ts 中定义方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;printLabel&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">printLabel();</span><br></pre></td></tr></table></figure>

<p>ts 中定义方法传入参数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">label: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;printLabel&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLabel(<span class="string">&quot;hahah&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>ts 中自定义方法传入参数, 对 json 进行约束;</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelInfo: &#123; label: <span class="built_in">string</span> &#125;</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;printLabel&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLabel(<span class="string">&quot;hahah&quot;</span>); <span class="comment">//错误写法</span></span><br><span class="line"></span><br><span class="line">printLabel(&#123; name: <span class="string">&quot;张三&quot;</span> &#125;); <span class="comment">//错误的写法</span></span><br><span class="line"></span><br><span class="line">printLabel(&#123; label: <span class="string">&quot;张三&quot;</span> &#125;); <span class="comment">//正确的写法</span></span><br></pre></td></tr></table></figure>

<h2 id="对批量方法传入参数进行约束"><a href="#对批量方法传入参数进行约束" class="headerlink" title="对批量方法传入参数进行约束"></a>对批量方法传入参数进行约束</h2><blockquote>
<p>接口：行为和动作的规范，对批量方法进行约束</p>
</blockquote>
<p>就是传入对象的约束 属性接口</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span>; <span class="comment">//注意;结束</span></span><br><span class="line">  secondName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">name: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 必须传入对象  firstName  secondName</span></span><br><span class="line">  <span class="built_in">console</span>.log(name.firstName + <span class="string">&quot;--&quot;</span> + name.secondName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// printName(&#x27;1213&#x27;);  //错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="comment">/*传入的参数必须包含 firstName  secondName*/</span> age: <span class="number">20</span>,</span><br><span class="line">  firstName: <span class="string">&quot;张&quot;</span>,</span><br><span class="line">  secondName: <span class="string">&quot;三&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">printName(obj);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span>; <span class="comment">//注意;结束</span></span><br><span class="line">  secondName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">name: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 必须传入对象  firstName  secondName</span></span><br><span class="line">  <span class="built_in">console</span>.log(name.firstName + <span class="string">&quot;--&quot;</span> + name.secondName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printInfo</span>(<span class="params">info: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 必须传入对象  firstName  secondName</span></span><br><span class="line">  <span class="built_in">console</span>.log(info.firstName + info.secondName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="comment">/*传入的参数必须包含 firstName  secondName*/</span> age: <span class="number">20</span>,</span><br><span class="line">  firstName: <span class="string">&quot;张&quot;</span>,</span><br><span class="line">  secondName: <span class="string">&quot;三&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">printName(obj);</span><br><span class="line"></span><br><span class="line">printInfo(&#123;</span><br><span class="line">  firstName: <span class="string">&quot;李&quot;</span>,</span><br><span class="line">  secondName: <span class="string">&quot;四&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span>;</span><br><span class="line">  secondName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数的顺序可以不一样</span></span><br><span class="line">getName(&#123;</span><br><span class="line">  secondName: <span class="string">&quot;secondName&quot;</span>,</span><br><span class="line">  firstName: <span class="string">&quot;firstName&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span>;</span><br><span class="line">  secondName?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">getName(&#123;</span><br><span class="line">  firstName: <span class="string">&quot;firstName&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="例：-对-ajax-请求参数的定义"><a href="#例：-对-ajax-请求参数的定义" class="headerlink" title="例： 对 ajax 请求参数的定义"></a>例： 对 ajax 请求参数的定义</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  url: <span class="string">&quot;test.json&quot;</span>,</span><br><span class="line">  data: &#123; <span class="attr">username</span>: $(<span class="string">&quot;#username&quot;</span>).val(), <span class="attr">content</span>: $(<span class="string">&quot;#content&quot;</span>).val() &#125;,</span><br><span class="line">  dataType: <span class="string">&quot;json&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  url: <span class="built_in">string</span>;</span><br><span class="line">  data?: <span class="built_in">string</span>;</span><br><span class="line">  dataType: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生js封装的ajax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">config: Config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">  xhr.open(config.type, config.url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  xhr.send(config.data);</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;chengong&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (config.dataType == <span class="string">&quot;json&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  data: <span class="string">&quot;name=zhangsan&quot;</span>,</span><br><span class="line">  url: <span class="string">&quot;http://a.itying.com/api/productlist&quot;</span>, <span class="comment">//api</span></span><br><span class="line">  dataType: <span class="string">&quot;json&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h1><blockquote>
<p>对方法传入的参数 以及返回值进行约束 批量约束</p>
</blockquote>
<p>加密的函数类型接口</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> encrypt &#123;</span><br><span class="line">  (key: <span class="built_in">string</span>, value: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> md5: encrypt = <span class="function"><span class="keyword">function</span> (<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 模拟操作</span></span><br><span class="line">  <span class="keyword">return</span> key + value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(md5(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sha1: encrypt = <span class="function"><span class="keyword">function</span> (<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 模拟操作</span></span><br><span class="line">  <span class="keyword">return</span> key + <span class="string">&quot;----&quot;</span> + value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sha1(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lisi&quot;</span>));</span><br></pre></td></tr></table></figure>

<h1 id="可索引接口：数组、对象的约束-（不常用）"><a href="#可索引接口：数组、对象的约束-（不常用）" class="headerlink" title="可索引接口：数组、对象的约束 （不常用）"></a>可索引接口：数组、对象的约束 （不常用）</h1><p>ts 定义数组的方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr: <span class="built_in">number</span>[] = [<span class="number">2342</span>, <span class="number">235325</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>];</span><br></pre></td></tr></table></figure>

<h2 id="可索引接口-对数组的约束"><a href="#可索引接口-对数组的约束" class="headerlink" title="可索引接口 对数组的约束"></a>可索引接口 对数组的约束</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserArr &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var arr:UserArr=[&#x27;aaa&#x27;,&#x27;bbb&#x27;];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(arr[0]);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr: UserArr = [<span class="number">123</span>, <span class="string">&quot;bbb&quot;</span>]; <span class="comment">/*错误*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="可索引接口-对对象的约束"><a href="#可索引接口-对对象的约束" class="headerlink" title="可索引接口 对对象的约束"></a>可索引接口 对对象的约束</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserObj &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr: UserObj = &#123; name: <span class="string">&quot;张三&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h1><blockquote>
<p>对类的约束 和 抽象类抽象有点相似</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  eat(str: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;吃粮食&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Dog(<span class="string">&quot;小黑&quot;</span>);</span><br><span class="line">d.eat();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 类型“Cat”中的属性“eat”不可分配给基类型“Animal”中的同一属性。</span></span><br><span class="line">  <span class="comment">// 不能将类型“(food: string) =&gt; void”分配给类型“&#123; (str: string): void; (): void; (): void; &#125;”。</span></span><br><span class="line">  eat(food: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;吃&quot;</span> + food);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Cat(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line">c.eat(<span class="string">&quot;老鼠&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h1><blockquote>
<p>接口可以继承接口</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  work(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">implements</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;喜欢吃馒头&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  work() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;写代码&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line"></span><br><span class="line">w.eat();</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  work(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Programmer &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  coding(code: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + code);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">extends</span> Programmer <span class="keyword">implements</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;喜欢吃馒头&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  work() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;写代码&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// w.eat();</span></span><br><span class="line"></span><br><span class="line">w.coding(<span class="string">&quot;写ts代码&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 初体验</title>
    <url>/2021/01/12/typescript/intro/</url>
    <content><![CDATA[<h1 id="Typescript-介绍"><a href="#Typescript-介绍" class="headerlink" title="Typescript 介绍"></a>Typescript 介绍</h1><ul>
<li>typescript 是由微软开发的一款开源的编程语言。</li>
<li>typescript 是 Javascript 的超集，遵循最新的 ES6、Es5 规范。TypeScript 扩展了 JavaScript 的语法。</li>
<li>typescript 更像后端 java、C#这样的面向对象语言，可以让 js 开发大型企业项目。</li>
<li>谷歌也在大力支持 Typescript 的推广，谷歌的 angular2.x+就是基于 Typescript 语法。</li>
<li>最新的 Vue 、React 也可以集成 TypeScript。</li>
<li>Nodejs 框架 Nestjs、midway 中用的就是 TypeScript 语法。</li>
</ul>
<h1 id="为什么要使用-TypeScript"><a href="#为什么要使用-TypeScript" class="headerlink" title="为什么要使用 TypeScript"></a>为什么要使用 TypeScript</h1><ul>
<li>类型推演与类型匹配</li>
<li>开发编译时报错</li>
<li>极大程度的避免了低级错误</li>
<li>支持 JavaScript 最新特性（包含 ES6\7\8）</li>
</ul>
<h1 id="Typescript-安装-编译"><a href="#Typescript-安装-编译" class="headerlink" title="Typescript 安装 编译"></a>Typescript 安装 编译</h1><p>在使用 npm 命令之前电脑必须得安装 nodejs</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br><span class="line">或者</span><br><span class="line">cnpm install -g typescript</span><br><span class="line">或者</span><br><span class="line">yarn global add typescript</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc helloworld.ts</span><br></pre></td></tr></table></figure>

<p>注意：如果电脑上面没有安装过 cnpm，请先安装 cnpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>注意：如果电脑上面没有安装过 yarn 请先安装 yarn:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yarn</span><br><span class="line">或者</span><br><span class="line">cnpm install -g yarn</span><br></pre></td></tr></table></figure>

<h1 id="Typescript-开发工具-Vscode-自动编译-ts-文件"><a href="#Typescript-开发工具-Vscode-自动编译-ts-文件" class="headerlink" title="Typescript 开发工具 Vscode 自动编译.ts 文件"></a>Typescript 开发工具 Vscode 自动编译.ts 文件</h1><h2 id="创建-tsconfig-json-文件"><a href="#创建-tsconfig-json-文件" class="headerlink" title="创建 tsconfig.json 文件"></a>创建 tsconfig.json 文件</h2><p><code>tsc --init</code> 生成配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<p>修改编译后的 js 输出目录 <code>outDir: &quot;./js&quot;</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">/* Visit https://aka.ms/tsconfig.json to read more about this file */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Basic Options */</span></span><br><span class="line">    <span class="comment">// &quot;incremental&quot;: true,                   /* Enable incremental compilation */</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span> <span class="comment">/* Specify ECMAScript target version: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, &#x27;ES2018&#x27;, &#x27;ES2019&#x27;, &#x27;ES2020&#x27;, or &#x27;ESNEXT&#x27;. */</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span> <span class="comment">/* Specify module code generation: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, or &#x27;ESNext&#x27;. */</span>,</span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [],                             /* Specify library files to be included in the compilation. */</span></span><br><span class="line">    <span class="comment">// &quot;allowJs&quot;: true,                       /* Allow javascript files to be compiled. */</span></span><br><span class="line">    <span class="comment">// &quot;checkJs&quot;: true,                       /* Report errors in .js files. */</span></span><br><span class="line">    <span class="comment">// &quot;jsx&quot;: &quot;preserve&quot;,                     /* Specify JSX code generation: &#x27;preserve&#x27;, &#x27;react-native&#x27;, or &#x27;react&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;declaration&quot;: true,                   /* Generates corresponding &#x27;.d.ts&#x27; file. */</span></span><br><span class="line">    <span class="comment">// &quot;declarationMap&quot;: true,                /* Generates a sourcemap for each corresponding &#x27;.d.ts&#x27; file. */</span></span><br><span class="line">    <span class="comment">// &quot;sourceMap&quot;: true,                     /* Generates corresponding &#x27;.map&#x27; file. */</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;./&quot;,                       /* Concatenate and emit output to single file. */</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;./js&quot;</span> <span class="comment">/* Redirect output structure to the directory. */</span>,</span><br><span class="line">    <span class="comment">// &quot;rootDir&quot;: &quot;./&quot;,                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */</span></span><br><span class="line">    <span class="comment">// &quot;composite&quot;: true,                     /* Enable project compilation */</span></span><br><span class="line">    <span class="comment">// &quot;tsBuildInfoFile&quot;: &quot;./&quot;,               /* Specify file to store incremental compilation information */</span></span><br><span class="line">    <span class="comment">// &quot;removeComments&quot;: true,                /* Do not emit comments to output. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmit&quot;: true,                        /* Do not emit outputs. */</span></span><br><span class="line">    <span class="comment">// &quot;importHelpers&quot;: true,                 /* Import emit helpers from &#x27;tslib&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;downlevelIteration&quot;: true,            /* Provide full support for iterables in &#x27;for-of&#x27;, spread, and destructuring when targeting &#x27;ES5&#x27; or &#x27;ES3&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;isolatedModules&quot;: true,               /* Transpile each file as a separate module (similar to &#x27;ts.transpileModule&#x27;). */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Strict Type-Checking Options */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span> <span class="comment">/* Enable all strict type-checking options. */</span>,</span><br><span class="line">    <span class="comment">// &quot;noImplicitAny&quot;: true,                 /* Raise error on expressions and declarations with an implied &#x27;any&#x27; type. */</span></span><br><span class="line">    <span class="comment">// &quot;strictNullChecks&quot;: true,              /* Enable strict null checks. */</span></span><br><span class="line">    <span class="comment">// &quot;strictFunctionTypes&quot;: true,           /* Enable strict checking of function types. */</span></span><br><span class="line">    <span class="comment">// &quot;strictBindCallApply&quot;: true,           /* Enable strict &#x27;bind&#x27;, &#x27;call&#x27;, and &#x27;apply&#x27; methods on functions. */</span></span><br><span class="line">    <span class="comment">// &quot;strictPropertyInitialization&quot;: true,  /* Enable strict checking of property initialization in classes. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitThis&quot;: true,                /* Raise error on &#x27;this&#x27; expressions with an implied &#x27;any&#x27; type. */</span></span><br><span class="line">    <span class="comment">// &quot;alwaysStrict&quot;: true,                  /* Parse in strict mode and emit &quot;use strict&quot; for each source file. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Additional Checks */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedLocals&quot;: true,                /* Report errors on unused locals. */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedParameters&quot;: true,            /* Report errors on unused parameters. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitReturns&quot;: true,             /* Report error when not all code paths in function return a value. */</span></span><br><span class="line">    <span class="comment">// &quot;noFallthroughCasesInSwitch&quot;: true,    /* Report errors for fallthrough cases in switch statement. */</span></span><br><span class="line">    <span class="comment">// &quot;noUncheckedIndexedAccess&quot;: true,      /* Include &#x27;undefined&#x27; in index signature results */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Module Resolution Options */</span></span><br><span class="line">    <span class="comment">// &quot;moduleResolution&quot;: &quot;node&quot;,            /* Specify module resolution strategy: &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; (TypeScript pre-1.6). */</span></span><br><span class="line">    <span class="comment">// &quot;baseUrl&quot;: &quot;./&quot;,                       /* Base directory to resolve non-absolute module names. */</span></span><br><span class="line">    <span class="comment">// &quot;paths&quot;: &#123;&#125;,                           /* A series of entries which re-map imports to lookup locations relative to the &#x27;baseUrl&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDirs&quot;: [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */</span></span><br><span class="line">    <span class="comment">// &quot;typeRoots&quot;: [],                       /* List of folders to include type definitions from. */</span></span><br><span class="line">    <span class="comment">// &quot;types&quot;: [],                           /* Type declaration files to be included in compilation. */</span></span><br><span class="line">    <span class="comment">// &quot;allowSyntheticDefaultImports&quot;: true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span> <span class="comment">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies &#x27;allowSyntheticDefaultImports&#x27;. */</span>,</span><br><span class="line">    <span class="comment">// &quot;preserveSymlinks&quot;: true,              /* Do not resolve the real path of symlinks. */</span></span><br><span class="line">    <span class="comment">// &quot;allowUmdGlobalAccess&quot;: true,          /* Allow accessing UMD globals from modules. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="comment">// &quot;sourceRoot&quot;: &quot;&quot;,                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */</span></span><br><span class="line">    <span class="comment">// &quot;mapRoot&quot;: &quot;&quot;,                         /* Specify the location where debugger should locate map files instead of generated locations. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSourceMap&quot;: true,               /* Emit a single file with source maps instead of having a separate file. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSources&quot;: true,                 /* Emit the source alongside the sourcemaps within a single file; requires &#x27;--inlineSourceMap&#x27; or &#x27;--sourceMap&#x27; to be set. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Experimental Options */</span></span><br><span class="line">    <span class="comment">// &quot;experimentalDecorators&quot;: true,        /* Enables experimental support for ES7 decorators. */</span></span><br><span class="line">    <span class="comment">// &quot;emitDecoratorMetadata&quot;: true,         /* Enables experimental support for emitting type metadata for decorators. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Advanced Options */</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span> <span class="comment">/* Skip type checking of declaration files. */</span>,</span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span> <span class="comment">/* Disallow inconsistently-cased references to the same file. */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="tsc-监视-tsconfig-json"><a href="#tsc-监视-tsconfig-json" class="headerlink" title="tsc:监视-tsconfig.json"></a>tsc:监视-tsconfig.json</h2><ul>
<li>老版本 vscode 点击: 任务-&gt;运行任务-&gt; tsc:监视-tsconfig.json 然后就可以自动生 成代码了</li>
<li>最新版本 vscode 点击: 终端-&gt;运行任务-&gt;typescript-&gt;tsc:监视-tsconfig.json 然后就 可以自动生成代码了</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<p>VSCode 自动编译 TypeScript 时一直报 typeconfig 配置文件路径找不到的错误。纠结很久，终于找到解决办法： 错误如下： error TS5058: The specified path does not exist：d:\typescripttsconfig.json 错误的</p>
</blockquote>
<p>错误的原因是修改了 vscode 默认的系统终端类型。我改为了 <code>git bash</code> 了，所以一直不成功。</p>
<p>解决办法就是<code>改回默认的终端类型</code>就能解决这个问题了。</p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的命名空间</title>
    <url>/2021/01/12/typescript/namespace/</url>
    <content><![CDATA[<p><strong>命名空间</strong></p>
<blockquote>
<p>在代码量较大的情况下，为了避免各种变量命名相冲突，可将相似功能的函数、类、接口等放置到命名空间内。<br>同 Java 的包、.Net 的命名空间一样，TypeScript 的命名空间可以将代码包裹起来，只对外暴露需要在外部访问的对象。命名空间内的对象通过 export 关键字对外暴露。</p>
</blockquote>
<p><strong>命名空间和模块的区别</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>特征</th>
</tr>
</thead>
<tbody><tr>
<td>命名空间</td>
<td>内部模块，主要用于组织代码，避免命名冲突。</td>
</tr>
<tr>
<td>模块</td>
<td>ts 的外部模块的简称，侧重代码的复用，一个模块里可能会有多个命名空间。</td>
</tr>
</tbody></table>
<p>示例代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">  <span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    eat(): <span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = theName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eat() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> 在吃狗粮。`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Cat <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = theName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eat() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> 吃猫粮。`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> B &#123;</span><br><span class="line">  <span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    eat(): <span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = theName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eat() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> 在吃狗粮。`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Cat <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = theName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eat() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> 在吃猫粮。`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> B.Cat(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line"></span><br><span class="line">c.eat();</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; A, B &#125; <span class="keyword">from</span> <span class="string">&quot;./modules/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> A.Dog(<span class="string">&quot;小黑&quot;</span>);</span><br><span class="line">d.eat();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> B.Dog(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line">dog.eat();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的联合类型和类型保护</title>
    <url>/2021/04/21/typescript/type/</url>
    <content><![CDATA[<blockquote>
<p>本节介绍 ts 中的联合类型和类型保护的几种方法</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> CustomModel &#123;</span><br><span class="line">  goods: <span class="built_in">boolean</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  buy: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> MerchantModel &#123;</span><br><span class="line">  goods: <span class="built_in">boolean</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  sell: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="as-断言"><a href="#as-断言" class="headerlink" title="as 断言"></a>as 断言</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgePeopleAs</span>(<span class="params">people: CustomModel | MerchantModel</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (people.goods) &#123;</span><br><span class="line">    (people <span class="keyword">as</span> MerchantModel).sell();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    (people <span class="keyword">as</span> CustomModel).buy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="in-断言"><a href="#in-断言" class="headerlink" title="in 断言"></a>in 断言</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgePeopleIn</span>(<span class="params">people: CustomModel | MerchantModel</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;buy&quot;</span> <span class="keyword">in</span> people) &#123;</span><br><span class="line">    people.buy();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    people.sell();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="typeof-类型检查"><a href="#typeof-类型检查" class="headerlink" title="typeof 类型检查"></a>typeof 类型检查</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addStrOrNum</span>(<span class="params">first: <span class="built_in">string</span> | <span class="built_in">number</span>, second: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&quot;string&quot;</span> || <span class="keyword">typeof</span> second === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span>  <span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="instanceof-（只能用在类中）"><a href="#instanceof-（只能用在类中）" class="headerlink" title="instanceof （只能用在类中）"></a>instanceof （只能用在类中）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> NumberObj &#123;</span><br><span class="line">  count: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddObj</span>(<span class="params">first: <span class="built_in">object</span> | NumberObj, second: <span class="built_in">object</span> | NumberObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (first <span class="keyword">instanceof</span> NumberObj &amp;&amp; second <span class="keyword">instanceof</span> NumberObj) &#123;</span><br><span class="line">    <span class="keyword">return</span> first.count + second.count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 常用扩展</title>
    <url>/2020/12/17/vscode/extensions/</url>
    <content><![CDATA[<blockquote>
<p>本文介绍使用 vscode 开发时常用的扩展，小伙伴可以根据自己的需求和喜好自己安装</p>
</blockquote>
<h1 id="Element-UI-智能提示"><a href="#Element-UI-智能提示" class="headerlink" title="Element-UI 智能提示"></a>Element-UI 智能提示</h1><ol>
<li><p>shenjiaolong.vue-helper</p>
</li>
<li><p>ss.element-ui-snippets</p>
</li>
</ol>
<h1 id="Vant-Snippets"><a href="#Vant-Snippets" class="headerlink" title="Vant Snippets"></a>Vant Snippets</h1><p>UI 库—– vant 智能提示</p>
<h1 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h1><blockquote>
<p>vetur 不断更新，但之后的更新代码格式化之后标签内部可能出现换行，个人表示不喜欢，这里推荐大家安装 <a href="/files/octref.vetur-0.24.0.zip">octref.vetur-0.24.0</a> 这个版本</p>
</blockquote>
<p>语法高亮、智能感知、Emmet 等<br>包含格式化功能， Alt+Shift+F （格式化全文），Ctrl+K Ctrl+F（格式化选中代码，两个 Ctrl 需要同时按着）</p>
<h1 id="GitLens—–-Git-Supercharged"><a href="#GitLens—–-Git-Supercharged" class="headerlink" title="GitLens—– Git Supercharged"></a>GitLens—– Git Supercharged</h1><blockquote>
<p>查看文件历史，出现 bug 后先把锅背好了</p>
</blockquote>
<p>查看 git 文件提交历史</p>
<h1 id="Git-Project-Manager"><a href="#Git-Project-Manager" class="headerlink" title="Git Project Manager"></a>Git Project Manager</h1><p>当开发很多项目时，常常需要切换项目，此扩展允许你直接从 VSCode 窗口打开一个针对 Git 仓库的新窗口</p>
<h1 id="TODO-Tree"><a href="#TODO-Tree" class="headerlink" title="TODO Tree"></a>TODO Tree</h1><p>这个扩展快速搜索(使用 ripgrep)您的评论标签如 TODO 和 FIXME 的工作空间，并在浏览器窗格的树视图中显示它们。单击树中的 TODO 将打开文件，并将光标放在包含 TODO 的行上</p>
<h1 id="EsLint"><a href="#EsLint" class="headerlink" title="EsLint"></a>EsLint</h1><p>语法纠错</p>
<h1 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h1><p>该插件十分简洁，编写者为 Esben Petersen，下载量近 1400 万次。它帮助开发者格式化代码，并提供颜色关键字以使代码更具可读性。</p>
<h1 id="Beautify"><a href="#Beautify" class="headerlink" title="Beautify"></a>Beautify</h1><p>它同 Prettier 十分类似，是一种出色的代码格式化扩展插件，近 1200 万的下载量足以说明一切。可以用它格式化以 JavaScript，JSON，CSS，Sass 和 HTML 编写的代码，用户可以根据自己的喜好选择对应的格式化工具</p>
<h1 id="markdown-formatter"><a href="#markdown-formatter" class="headerlink" title="markdown-formatter"></a>markdown-formatter</h1><p>这是一个提高 markdown 编写效率的工具，不仅为 markdown 用户提供了一个相对统一的格式，而且还提供了一些代码片段</p>
<h1 id="Debugger-for-Chrome"><a href="#Debugger-for-Chrome" class="headerlink" title="Debugger for Chrome"></a>Debugger for Chrome</h1><p>映射 vscode 上的断点到 chrome 上，方便调试（配置有点麻烦，其实我没用这个）</p>
<h1 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a>Auto Close Tag</h1><p>自动闭合 HTML/XML 标签</p>
<h1 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h1><p>自动完成另一侧标签的同步修改</p>
<h1 id="JavaScript-ES6-code-snippets"><a href="#JavaScript-ES6-code-snippets" class="headerlink" title="JavaScript(ES6) code snippets"></a>JavaScript(ES6) code snippets</h1><p>ES6 语法智能提示以及快速输入，除 js 外还支持.ts，.jsx，.tsx，.html，.vue，省去了配置其支持各种包含 js 代码文件的时间</p>
<h1 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h1><p>自动路劲补全</p>
<h1 id="HTML-CSS-Support"><a href="#HTML-CSS-Support" class="headerlink" title="HTML CSS Support"></a>HTML CSS Support</h1><p>让 html 标签上写 class 智能提示当前项目所支持的样式</p>
<h1 id="Better-Comments"><a href="#Better-Comments" class="headerlink" title="Better Comments"></a>Better Comments</h1><p>不同的注释显示不同的颜色，*，？，！起头然后开始写，你可以看到注释的颜色是不同的</p>
<h1 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h1><p>在代码中输入 emoji</p>
<h1 id="File-Peek"><a href="#File-Peek" class="headerlink" title="File Peek"></a>File Peek</h1><p>根据路径字符串，快速定位到文件</p>
<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p>运行 npm 命令</p>
<h1 id="npm-Intellisense"><a href="#npm-Intellisense" class="headerlink" title="npm Intellisense"></a>npm Intellisense</h1><p>导入模块时，提示已安装模块名称</p>
<h1 id="Partial-Diff"><a href="#Partial-Diff" class="headerlink" title="Partial Diff"></a>Partial Diff</h1><p>对比两段代码或文件</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 基本配置</title>
    <url>/2020/12/17/vscode/settings/</url>
    <content><![CDATA[<blockquote>
<p>本文介绍常用编辑器 vscode 的配置</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;editor.fontSize&quot;</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">&quot;editor.fontWeight&quot;</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.multiCursorModifier&quot;</span>: <span class="string">&quot;ctrlCmd&quot;</span>,</span><br><span class="line">  <span class="comment">// 行高</span></span><br><span class="line">  <span class="comment">// 通过使用鼠标滚轮同时按住 Ctrl 可缩放编辑器的字体</span></span><br><span class="line">  <span class="attr">&quot;editor.mouseWheelZoom&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// tab锁紧</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 空格变成......</span></span><br><span class="line">  <span class="attr">&quot;editor.renderWhitespace&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;window.zoomLevel&quot;</span>: <span class="number">2</span>, <span class="comment">// 调整窗口的缩放级别</span></span><br><span class="line">  <span class="comment">// 不同文件的格式化方式设置</span></span><br><span class="line">  <span class="attr">&quot;[jsonc]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[json]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[typescript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[less]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[scss]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[css]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;HookyQR.beautify&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[vue]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;octref.vetur&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[markdown]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;mervin.markdown-formatter&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;prettier.arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span>, <span class="comment">// 当箭头函数仅有一个参数时加上括号</span></span><br><span class="line">  <span class="attr">&quot;prettier.semi&quot;</span>: <span class="literal">true</span>, <span class="comment">//  #去掉代码结尾的分号</span></span><br><span class="line">  <span class="attr">&quot;prettier.singleQuote&quot;</span>: <span class="literal">false</span>, <span class="comment">//  #使用单引号替代双引号</span></span><br><span class="line">  <span class="attr">&quot;prettier.packageManager&quot;</span>: <span class="string">&quot;yarn&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;prettier.htmlWhitespaceSensitivity&quot;</span>: <span class="string">&quot;ignore&quot;</span>, <span class="comment">// 指定HTML文件的全局空白区域敏感度。 有效选项： &#x27;css&#x27; - 尊重CSS显示属性的默认值。 &#x27;strict&#x27; - 空格被认为是敏感的。 &#x27;ignore&#x27; - 空格被认为是不敏感的。</span></span><br><span class="line">  <span class="attr">&quot;prettier.trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>, <span class="comment">// 尽可能控制尾随逗号的输出。 有效选项： &#x27;无&#x27; - 无尾随逗号 &#x27; es5&#x27; - 在ES5中有效的尾随逗号（对象，数组等） &#x27;all&#x27; - 尾随逗号 尽可能（函数参数）</span></span><br><span class="line">  <span class="comment">// &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;,</span></span><br><span class="line">  <span class="comment">// &quot;vetur.format.defaultFormatterOptions&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//   &quot;js-beautify-html&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//     &quot;wrap_attributes&quot;: &quot;auto&quot;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">&quot;explorer.confirmDelete&quot;</span>: <span class="literal">false</span>, <span class="comment">// 控制资源管理器是否在把文件删除到废纸篓时进行确认。</span></span><br><span class="line">  <span class="attr">&quot;editor.cursorStyle&quot;</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;git.ignoreMissingGitWarning&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;editor.fontLigatures&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;git.enableSmartCommit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;emmet.includeLanguages&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;javascript&quot;</span>: <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;wxml&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.renderLineHighlight&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.activityBar.visible&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;editor.minimap.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;window.menuBarVisibility&quot;</span>: <span class="string">&quot;visible&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.statusBar.visible&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;breadcrumbs.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;liveServer.settings.donotShowInfoMsg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.sideBar.location&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">  <span class="comment">// vscode默认启用了根据文件类型自动设置tabsize的选项</span></span><br><span class="line">  <span class="attr">&quot;editor.detectIndentation&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;editor.renderControlCharacters&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;editor.cursorWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.startupEditor&quot;</span>: <span class="string">&quot;newUntitledFile&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dart.flutterSdkPath&quot;</span>: <span class="string">&quot;D:\\flutter&quot;</span>,</span><br><span class="line">  <span class="comment">// 编辑df器光标样式</span></span><br><span class="line">  <span class="attr">&quot;editor.cursorBlinking&quot;</span>: <span class="string">&quot;solid&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dart.debugExternalLibraries&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;dart.debugSdkLibraries&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;editor.suggestSelection&quot;</span>: <span class="string">&quot;first&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dart.warnWhenEditingFilesOutsideWorkspace&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;diffEditor.ignoreTrimWhitespace&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;editor.quickSuggestions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;other&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;comments&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;strings&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;projectManager.openInNewWindowWhenClickingInStatusBar&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;git.confirmSync&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;projectManager.git.baseFolders&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;workbench.editor.closeEmptyGroups&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;files.associations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;*.cjson&quot;</span>: <span class="string">&quot;jsonc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;*.wxss&quot;</span>: <span class="string">&quot;css&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;*.wxs&quot;</span>: <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;*.vue&quot;</span>: <span class="string">&quot;vue&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;javascript.preferences.quoteStyle&quot;</span>: <span class="string">&quot;single&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;javascript.implicitProjectConfig.experimentalDecorators&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;[dart]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnType&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;editor.rulers&quot;</span>: [<span class="number">80</span>],</span><br><span class="line">    <span class="attr">&quot;editor.selectionHighlight&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;editor.suggestSelection&quot;</span>: <span class="string">&quot;first&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.tabCompletion&quot;</span>: <span class="string">&quot;onlySnippets&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.wordBasedSuggestions&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;projectManager.git.ignoredFolders&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;*.lock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;out&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typings&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.haxelib&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// terminal 终端</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shell.windows&quot;</span>: <span class="string">&quot;D:\\Git\\bin\\bash.exe&quot;</span>,</span><br><span class="line">  <span class="comment">// &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\Windows\\System32\\cmd.exe&quot;,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.cursorBlinking&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;terminal.integrated.rendererType&quot;</span>: <span class="string">&quot;dom&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;editor.largeFileOptimizations&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;material-ui-snippets.showNotesOnStartup&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;todo-tree.tree.showScanModeButton&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;gitlens.advanced.messages&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;suppressCommitHasNoPreviousCommitWarning&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;suppressGitVersionWarning&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;search.followSymlinks&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;extensions.autoUpdate&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span>: <span class="string">&quot;onFocusChange&quot;</span>, <span class="comment">// 文件自动保存</span></span><br><span class="line">  <span class="attr">&quot;extensions.autoCheckUpdates&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;path-intellisense.mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/src&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@components&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/src/components&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;material-icon-theme&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;initHexoHead.postsPath&quot;</span>: <span class="string">&quot;E:\\blog\\source\\_posts\\&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;Default Dark+&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 实战技巧</title>
    <url>/2020/12/23/vue/actual/</url>
    <content><![CDATA[<h1 id="hookEvent，原来可以这样监听组件生命周期"><a href="#hookEvent，原来可以这样监听组件生命周期" class="headerlink" title="hookEvent，原来可以这样监听组件生命周期"></a>hookEvent，原来可以这样监听组件生命周期</h1><h2 id="内部监听生命周期函数"><a href="#内部监听生命周期函数" class="headerlink" title="内部监听生命周期函数"></a>内部监听生命周期函数</h2><blockquote>
<p>在 Vue 组件中，可以用过$on,$once 去监听所有的生命周期钩子函数，如监听组件的 updated 钩子函数可以写成 this.$on(‘hook:updated’, () =&gt; {})</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;echarts&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.chart = echarts.init(<span class="built_in">this</span>.$el);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 请求数据，赋值数据 等等一系列操作...</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监听窗口发生变化，resize组件</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="built_in">this</span>.$_handleResizeChart);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    updated() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">/*干了一堆活*/</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">/*干了一堆活*/</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 组件销毁时，销毁监听事件</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;resize&quot;</span>, <span class="built_in">this</span>.$_handleResizeChart);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      $_handleResizeChart() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.chart.resize();</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 其他一堆方法</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>将监听<code>resize</code>事件与销毁<code>resize</code>事件放到一起，现在两段代码分开而且相隔几百行代码，可读性比较差</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">this</span>.chart = echarts.init(<span class="built_in">this</span>.$el);</span><br><span class="line">    <span class="comment">// 请求数据，赋值数据 等等一系列操作...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听窗口发生变化，resize组件</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="built_in">this</span>.$_handleResizeChart);</span><br><span class="line">    <span class="comment">// 通过hook监听组件销毁钩子函数，并取消监听事件</span></span><br><span class="line">    <span class="built_in">this</span>.$once(<span class="string">&quot;hook:beforeDestroy&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;resize&quot;</span>, <span class="built_in">this</span>.$_handleResizeChart);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;&#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    $_handleResizeChart() &#123;</span><br><span class="line">      <span class="comment">// this.chart.resize()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="外部监听生命周期函数"><a href="#外部监听生命周期函数" class="headerlink" title="外部监听生命周期函数"></a>外部监听生命周期函数</h2><blockquote>
<p>情境：想在外部监听组件的生命周期函数，使用一个第三方组件，需要监听第三方组件数据的变化，但是组件又没有提供 change 事件。<br>Vue 支持在外部监听组件的生命周期钩子函数</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--通过@hook:updated监听组件的updated生命钩子函数--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组件的所有生命周期钩子都可以通过@hook:钩子函数名 来监听触发--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">custom-select</span> @<span class="attr">hook:updated</span>=<span class="string">&quot;$_handleSelectUpdated&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CustomSelect <span class="keyword">from</span> <span class="string">&quot;../components/custom-select&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      CustomSelect</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      $_handleSelectUpdated() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;custom-select组件的updated钩子函数被触发&quot;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="小项目还用-Vuex-用-Vue-observable-手写一个状态管理吧"><a href="#小项目还用-Vuex-用-Vue-observable-手写一个状态管理吧" class="headerlink" title="小项目还用 Vuex?用 Vue.observable 手写一个状态管理吧"></a>小项目还用 Vuex?用 Vue.observable 手写一个状态管理吧</h1><blockquote>
<p>在前端项目中，有许多数据需要在各个组件之间进行传递共享，这时候就需要有一个状态管理工具，一般情况下，我们都会使用 Vuex，但对于小型项目来说，就像 Vuex 官网所说：“如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex”。这时候我们就可以使用 Vue2.6 提供的新 API Vue.observable 手动打造一个 Vuex</p>
</blockquote>
<h2 id="创建-store"><a href="#创建-store" class="headerlink" title="创建 store"></a>创建 <code>store</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Vue.observable创建一个可响应的对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = Vue.observable(&#123;</span><br><span class="line">  userInfo: &#123;&#125;,</span><br><span class="line">  roleIds: []</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 mutations, 修改属性</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  setUserInfo(userInfo) &#123;</span><br><span class="line">    store.userInfo = userInfo;</span><br><span class="line">  &#125;,</span><br><span class="line">  setRoleIds(roleIds) &#123;</span><br><span class="line">    store.roleIds = roleIds;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="在组件中引用"><a href="#在组件中引用" class="headerlink" title="在组件中引用"></a>在组件中引用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; userInfo.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; store, mutations &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      userInfo() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> store.userInfo;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      mutations.setUserInfo(&#123;</span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;***&quot;</span></span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="开发全局组件，你可能需要了解一下-Vue-extend"><a href="#开发全局组件，你可能需要了解一下-Vue-extend" class="headerlink" title="开发全局组件，你可能需要了解一下 Vue.extend"></a>开发全局组件，你可能需要了解一下 Vue.extend</h1><p><code>Vue.extend</code>是一个全局 Api,平时我们在开发业务的时候很少会用到它，但有时候我们希望可以开发一些全局组件比如<code>Loading</code>,<code>Notify</code>,<code>Message</code> 等组件时，这时候就可以使用<code>Vue.extend</code>。<br>同学们在使用<code>element-ui</code>的<code>loading</code>时，在代码中可能会这样写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示loading</span></span><br><span class="line"><span class="keyword">const</span> loading = <span class="built_in">this</span>.$loading()</span><br><span class="line"><span class="comment">// 关闭loading</span></span><br><span class="line">loading.close()</span><br><span class="line"></span><br><span class="line">这样写可能没什么特别的，但是如果你这样写</span><br><span class="line"><span class="keyword">const</span> loading = <span class="built_in">this</span>.$loading()</span><br><span class="line"><span class="keyword">const</span> loading1 = <span class="built_in">this</span>.$loading()</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  loading.close()</span><br><span class="line">&#125;, <span class="number">1000</span> * <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>这时候你会发现，我调用了两次 loading,但是只出现了一个，而且我只关闭了 loading，但是 loading1 也被关闭了。这是怎么实现的呢？我们现在就是用 Vue.extend + 单例模式去实现一个 loading</p>
<h2 id="开发-loading-组件"><a href="#开发-loading-组件" class="headerlink" title="开发 loading 组件"></a>开发 loading 组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;custom-loading-fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--loading蒙版--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-loading-mask&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--loading中间的图标--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-loading-spinner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;custom-spinner-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--loading上面显示的文字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;custom-loading-text&quot;</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 是否显示loading</span></span></span><br><span class="line">      visible: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">// loading上面的显示文字</span></span></span><br><span class="line">      text: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开发出来<code>loading</code>组件之后，如果需要直接使用，就要这样去用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;component-code&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--其他一堆代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">custom-loading</span> <span class="attr">:visible</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">text</span>=<span class="string">&quot;加载中&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        visible: <span class="literal">false</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但这样使用并不能满足我们的需求</p>
<ol>
<li>可以通过 js 直接调用方法来显示关闭</li>
<li>loading 可以将整个页面全部遮罩起来</li>
</ol>
<h2 id="通过-Vue-extend-将组件转换为全局组件"><a href="#通过-Vue-extend-将组件转换为全局组件" class="headerlink" title="通过 Vue.extend 将组件转换为全局组件"></a>通过 Vue.extend 将组件转换为全局组件</h2><h3 id="改造-loading-组件，将组件的-props-改为-data"><a href="#改造-loading-组件，将组件的-props-改为-data" class="headerlink" title="改造 loading 组件，将组件的 props 改为 data"></a>改造 loading 组件，将组件的 props 改为 data</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      visible: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="通过-Vue-extend-改造组件"><a href="#通过-Vue-extend-改造组件" class="headerlink" title="通过 Vue.extend 改造组件"></a>通过 Vue.extend 改造组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// loading/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> LoadingComponent <span class="keyword">from</span> <span class="string">&quot;./loading.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Vue.extend将组件包装成一个子类</span></span><br><span class="line"><span class="keyword">const</span> LoadingConstructor = Vue.extend(LoadingComponent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loading = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">LoadingConstructor.prototype.close = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果loading 有引用，则去掉引用</span></span><br><span class="line">  <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">    loading = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 先将组件隐藏</span></span><br><span class="line">  <span class="built_in">this</span>.visible = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 延迟300毫秒，等待loading关闭动画执行完之后销毁组件</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 移除挂载的dom元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$el &amp;&amp; <span class="built_in">this</span>.$el.parentNode) &#123;</span><br><span class="line">      <span class="built_in">this</span>.$el.parentNode.removeChild(<span class="built_in">this</span>.$el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用组件的$destroy方法进行组件销毁</span></span><br><span class="line">    <span class="built_in">this</span>.$destroy();</span><br><span class="line">  &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Loading = <span class="function">(<span class="params">options = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果组件已渲染，则返回即可</span></span><br><span class="line">  <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">    <span class="keyword">return</span> loading;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 要挂载的元素</span></span><br><span class="line">  <span class="keyword">const</span> parent = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="comment">// 组件属性</span></span><br><span class="line">  <span class="keyword">const</span> opts = &#123;</span><br><span class="line">    text: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    ...options</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 通过构造函数初始化组件 相当于 new Vue()</span></span><br><span class="line">  <span class="keyword">const</span> instance = <span class="keyword">new</span> LoadingConstructor(&#123;</span><br><span class="line">    el: <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>),</span><br><span class="line">    data: opts</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 将loading元素挂在到parent上面</span></span><br><span class="line">  parent.appendChild(instance.$el);</span><br><span class="line">  <span class="comment">// 显示loading</span></span><br><span class="line">  Vue.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    instance.visible = <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 将组件实例赋值给loading</span></span><br><span class="line">  loading = instance;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Loading;</span><br></pre></td></tr></table></figure>

<h3 id="在页面使用-loading"><a href="#在页面使用-loading" class="headerlink" title="在页面使用 loading"></a>在页面使用 loading</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">&quot;./loading/index.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">const</span> loading = Loading(&#123; <span class="attr">text</span>: <span class="string">&quot;正在加载。。。&quot;</span> &#125;);</span><br><span class="line">    <span class="comment">// 三秒钟后关闭</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      loading.close();</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>通过上面的改造，<code>loading</code> 已经可以在全局使用了，如果需要像 <code>element-ui</code> 一样挂载到 <code>Vue.prototype</code> 上面，通过 <code>this.$loading</code> 调用，还需要改造一下</p>
<h3 id="将组件挂载到-Vue-prototype-上面"><a href="#将组件挂载到-Vue-prototype-上面" class="headerlink" title="将组件挂载到 Vue.prototype 上面"></a>将组件挂载到 <code>Vue.prototype</code> 上面</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$loading = Loading;</span><br><span class="line"><span class="comment">// 在export之前将Loading方法进行绑定</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Loading;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件内使用</span></span><br><span class="line"><span class="built_in">this</span>.$loading();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>高级组件</title>
    <url>/2020/08/12/vue/advanced-component/</url>
    <content><![CDATA[<h1 id="options"><a href="#options" class="headerlink" title="$options"></a>$options</h1><p>用于当前 Vue 实例的初始化选项。需要在选项中包含自定义属性时会有用处<br>使用代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$options.data(); <span class="comment">// 获取当前 vue 实例化的初始数据 data</span></span><br></pre></td></tr></table></figure>

<h1 id="attr"><a href="#attr" class="headerlink" title="$attr"></a>$attr</h1><p>包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。<br>使用代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- base-input 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">required</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h1><p>包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用。<br>使用代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- base-input 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">v-on:focus.native</span>=<span class="string">&quot;onFocus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h1><p>提供具名插槽或需要接收 prop 的插槽。<br>使用代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyFooter 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyFooter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- footer 具名插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>list<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyFooter</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios</title>
    <url>/2019/08/08/vue/axios/</url>
    <content><![CDATA[<h1 id="Axios-自定义请求封装"><a href="#Axios-自定义请求封装" class="headerlink" title="Axios 自定义请求封装"></a>Axios 自定义请求封装</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router/index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Notification &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_API_URL, <span class="comment">// 本地配置的代理，理论上可以不用baseURL</span></span><br><span class="line">  timeout: <span class="number">15000</span> <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">http.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// !!! 这里开始触发 loading 效果 !!!</span></span><br><span class="line">    store.dispatch(<span class="string">&quot;SetLoading&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 请求时添加token</span></span><br><span class="line">    <span class="comment">// 设置 token header</span></span><br><span class="line">    getToken() &amp;&amp; (config.headers[<span class="string">&quot;token&quot;</span>] = token);</span><br><span class="line">    <span class="comment">// if (localStorage.token) config.headers.Authorization = `Bearer $&#123;localStorage.token&#125;`;</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">http.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// !!! 关闭 loading !!!</span></span><br><span class="line">    store.dispatch(<span class="string">&quot;SetLoading&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">switch</span> (response.data.code) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//token过期 拦截在消息抵达之前做点什么--，</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;-5&quot;</span>:</span><br><span class="line">        axios.defaults.headers.common[<span class="string">&quot;token&quot;</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> storage = <span class="built_in">window</span>.localStorage;</span><br><span class="line">        storage.clear();</span><br><span class="line">        <span class="comment">//  用户信息是否超时，重定向到登录页面</span></span><br><span class="line">        router.replace(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        Notification.error(&#123;</span><br><span class="line">          title: <span class="string">&quot;请求错误&quot;</span>,</span><br><span class="line">          message: <span class="string">&quot;用户信息失效,请重新登陆&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&quot;用户信息失效,请重新登陆&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//redis 超时</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;-3&quot;</span>:</span><br><span class="line">        Notification.error(&#123; <span class="attr">title</span>: <span class="string">&quot;请求错误&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;服务器连接超时&quot;</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&quot;服务器连接超时&quot;</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        Notification.error(&#123;</span><br><span class="line">          title: <span class="string">&quot;请求错误&quot;</span>,</span><br><span class="line">          message: response.data.message</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response.data;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// !!! 关闭 loading !!!</span></span><br><span class="line">    store.dispatch(<span class="string">&quot;SetLoading&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http;</span><br></pre></td></tr></table></figure>

<h1 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h1><h2 id="在请求或响应被-then-或-catch-处理前拦截它们。"><a href="#在请求或响应被-then-或-catch-处理前拦截它们。" class="headerlink" title="在请求或响应被 then 或 catch 处理前拦截它们。"></a>在请求或响应被 then 或 catch 处理前拦截它们。</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="如果你想在稍后移除拦截器，可以这样："><a href="#如果你想在稍后移除拦截器，可以这样：" class="headerlink" title="如果你想在稍后移除拦截器，可以这样："></a>如果你想在稍后移除拦截器，可以这样：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure>

<h2 id="可以为自定义-axios-实例添加拦截器"><a href="#可以为自定义-axios-实例添加拦截器" class="headerlink" title="可以为自定义 axios 实例添加拦截器"></a>可以为自定义 axios 实例添加拦截器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>解析vue双向绑定原理</title>
    <url>/2021/07/05/vue/bidirectional-bindings/</url>
    <content><![CDATA[<h1 id="响应式数据-双向绑定原理"><a href="#响应式数据-双向绑定原理" class="headerlink" title="响应式数据/双向绑定原理"></a>响应式数据/双向绑定原理</h1><p>vue 的响应式数据/双向绑定主要是指：数据变化更新视图，视图变化更新数据。 将 data 中的 js 对象做遍历，利用 Object.defineProperty 将 data 中的数据全部转换成 getter/setter，每个组件都对应一个 Watcher 实例，收集数据中的依赖，当数据发生改变触发 setter 时，会通知对应的组件，组件通过虚拟 DOMdiff 算法再做改变，如官网的流程图所示：</p>
<img src="/images/source-img/bidirectional-bindings.png" />
<img src="/images/source-img/bidirectional-bindings2.png" />

<h1 id="监听器-observer"><a href="#监听器-observer" class="headerlink" title="监听器 observer"></a>监听器 observer</h1><p>对 data 里面的数据对象做遍历（子对象存在时做递归遍历），利用 <code>Object.defineProperty</code> 将 data 中的数据全部转换成 <code>getter/setter</code>，当某个属性和值发生改变时就能触发 setter，就会监听到数据的变化</p>
<h1 id="模板解析器-Compile"><a href="#模板解析器-Compile" class="headerlink" title="模板解析器 Compile"></a>模板解析器 Compile</h1><p>模板解析器主要通过遍历模板，查看都使用了哪些变量、指令，为数据添加订阅者 Watcher，一旦数据发生了改变，调用更新函数更新。</p>
<h1 id="订阅者-Watcher"><a href="#订阅者-Watcher" class="headerlink" title="订阅者 Watcher"></a>订阅者 Watcher</h1><p>Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新——这是一个典型的观察者模式</p>
<h1 id="订阅器-Dep"><a href="#订阅器-Dep" class="headerlink" title="订阅器 Dep"></a>订阅器 Dep</h1><p>订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>hash、chunkhash、contenthash三者区别</title>
    <url>/2020/12/29/vue/com-hash/</url>
    <content><![CDATA[<h1 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h1><blockquote>
<p>所有文件哈希值相同，只要改变内容跟之前的不一致，所有哈希值都改变，没有做到缓存意义</p>
</blockquote>
<p><code>hash</code> 是跟整个项目的构建相关，构建生成的文件 hash 值都是一样的，所以 hash 计算是跟整个项目的构建相关，同一次构建过程中生成的 hash 都是一样的，只要项目里有文件更改，整个项目构建的 hash 值都会更改。<br>如果出口是 hash，那么一旦针对项目中任何一个文件的修改，都会构建整个项目，重新获取 hash 值，缓存的目的将失效。</p>
<h1 id="chunkhash"><a href="#chunkhash" class="headerlink" title="chunkhash"></a>chunkhash</h1><blockquote>
<p>同一个模块，就算将 js 和 css 分离，其哈希值也是相同的，修改一处，js 和 css 哈希值都会变，同 hash，没有做到缓存意义</p>
</blockquote>
<p>它根据不同的入口文件(Entry)进行依赖文件解析、构建对应的 chunk，生成对应的 hash 值。我们在生产环境里把一些公共库和程序入口文件区分开，单独打包构建，接着我们采用 chunkhash 的方式生成 hash 值，那么只要我们不改动公共库的代码，就可以保证其 hash 值不会受影响。<br>由于采用 <code>chunkhash</code>，所以项目主入口文件 main.js 及其对应的依赖文件 main.css 由于被打包在同一个模块，所以共用相同的 chunkhash。<br>这样就会有个问题，只要对应 css 或则 js 改变，与其关联的文件 hash 值也会改变，但其内容并没有改变，所以没有达到缓存意义。</p>
<h1 id="contenthash"><a href="#contenthash" class="headerlink" title="contenthash"></a>contenthash</h1><blockquote>
<p>只要文件内容不一样，产生的哈希值就不一样</p>
</blockquote>
<p><code>contenthash</code> 表示由文件内容产生的 hash 值，内容不同产生的 contenthash 值也不一样。在项目中，通常做法是把项目中 css 都抽离出对应的 css 文件来加以引用。<br>所以 css 文件最好使用 contenthash。</p>
]]></content>
      <categories>
        <category>hash</category>
      </categories>
      <tags>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>$router 和 $route</title>
    <url>/2020/12/29/vue/com-route-router/</url>
    <content><![CDATA[<h1 id="router"><a href="#router" class="headerlink" title="router"></a>router</h1><p>router 是 VueRouter 的一个对象，通过 <code>Vue.use(VueRouter)</code> 和 <code>VueRouter</code> 构造函数得到一个 router 的实例对象，这个对象中是一个全局的对象，他包含了所有的路由包含了许多关键的对象和属性。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">举例：<span class="built_in">history</span> 对象</span><br></pre></td></tr></table></figure>

<p><code>$router.push(&#123;path:&#39;home&#39;&#125;);</code> 本质是向 history 栈中添加一个路由，在我们看来是 切换路由，但本质是在添加一个 history 记录<br><strong>方法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$router.replace(&#123; <span class="attr">path</span>: <span class="string">&quot;home&quot;</span> &#125;); <span class="comment">//替换路由，没有历史记录</span></span><br></pre></td></tr></table></figure>

<h1 id="route"><a href="#route" class="headerlink" title="route"></a>route</h1><p>route 是一个跳转的路由对象，每一个路由都会有一个 <code>route 对象</code>，是一个局部的对象，可以获取对应的 name,path,params,query 等<br>我们可以从 <code>vue devtools</code> 中看到每个路由对象的不同</p>
<p><strong>这两个不同的结构可以看出两者的区别，他们的一些属性是不同的。</strong></p>
<ul>
<li><code>$route.path</code> 字符串，等于当前路由对象的路径，会被解析为绝对路径，如 “/home/news” 。</li>
<li><code>$route.params</code> 对象，包含路由中的动态片段和全匹配片段的键值对</li>
<li><code>$route.query</code> 对象，包含路由中查询参数的键值对。例如，对于 /home/news/detail/01?favorite=yes ，会得到 $route.query.favorite == ‘yes’ 。</li>
<li><code>$route.router</code> 路由规则所属的路由器（以及其所属的组件）。</li>
<li><code>$route.matched</code> 数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。</li>
<li><code>$route.name</code> 当前路径的名字，如果没有使用具名路径，则名字为空。</li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中computed 和 watch 区别</title>
    <url>/2021/07/06/vue/computed-watch/</url>
    <content><![CDATA[<h1 id="computed：通过属性计算而得来的属性"><a href="#computed：通过属性计算而得来的属性" class="headerlink" title="computed：通过属性计算而得来的属性"></a>computed：通过属性计算而得来的属性</h1><blockquote>
<p>使用场景：当一个值受多个属性影响的时候</p>
</blockquote>
<ol>
<li>computed 是计算属性，也就是依赖某个值或者 props 通过计算得来得数据；</li>
<li>不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化；</li>
<li>computed 内部的函数在调用时不加()；</li>
<li>computed 的值是在 getter 执行之后进行缓存的，只有在它依赖的数据发生变化，会重新调用 getter 来计算；</li>
<li>computed 是依赖 vm 中 data 的属性变化而变化的，也就是说，当 data 中的属性发生改变的时候，当前函数才会执行，data 中的属性没有改变的时候，当前数不会执行；</li>
<li>computed 中的函数必须用 return 返回；</li>
<li>在 computed 中不要对 data 中的属性进行赋值操作。如果对 data 中的属性进行赋值操作了，就是 data 中的属性发生改变，从而触发 computed 中的函数，成死循环了；</li>
<li>当 computed 中的函数所依赖的属性没有发生改变，那么调用当前函数的时候会从缓存中读取。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; reversedMessage &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;test1&#x27;</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">      number: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 字符串反转</span></span><br><span class="line">    reversedMessage () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>) + <span class="built_in">this</span>.number</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在 <code>computed</code> 中定义的每一个计算属性，都会被缓存起来，只有当计算属性里面依赖的一个或多个属性变化了，才会重新计算当前计算属性的值。上面的代码片段中，在 <code>reversedMessage</code> 中，它依赖了 message 和 number 这两个属性，一旦其中一个变化了，reversedMessage 会立刻重新计算输出新值。</p>
<h1 id="watch：属性监听"><a href="#watch：属性监听" class="headerlink" title="watch：属性监听"></a>watch：属性监听</h1><blockquote>
<p>使用场景：当一条数据的更改影响到多条数据的时候</p>
</blockquote>
<ol>
<li>watch 是监听器，可以监听某一个数据，然后执行相应的操作；</li>
<li>不支持缓存，数据变直接会触发相应的操作；</li>
<li>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li>
<li>支持异步操作；</li>
<li>watch 中的函数名称必须要和 data 中的属性名一致，因为 watch 是依赖 data 中的属性，当 data 中的属性发生改变的时候，watch 中的函数就会执行；</li>
<li>watch 中的函数有两个参数，前者是 <code>newVal</code>，后者是 <code>oldVal</code>；</li>
<li>watch 中的函数是不需要调用的；</li>
<li>watch 只会监听数据的值是否发生改变，而不会去监听数据的地址是否发生改变。也就是说，watch 想要监听引用类型数据的变化，需要进行深度监听。<br><code>&quot;obj.name&quot;()&#123; &#125;</code>：如果 obj 的属性太多，这种方法的效率很低，<br><code>obj:&#123; handler(newVal)&#123; &#125;, deep: true &#125;</code>：用 <code>handler</code> + <code>deep</code> 的方式进行深度监听；</li>
<li>特殊情况下，watch 无法监听到数组的变化，特殊情况就是说更改数组中的数据时，数组已经更改，但是视图没有更新。更改数组必须要用 splice()或者$set。<br><code>this.arr.splice(0,1,100)</code>：修改arr中第0项开始的1个数据为100，<br><code>this.$set(this.arr,0,100)</code>：修改 arr 第 0 项值为 100；</li>
<li><code>immediate:true</code> 页面首次加载的时候做一次监听</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; <span class="built_in">this</span>.number &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;test1&#x27;</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      number: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.number = <span class="number">100</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    number (newVal, oldVal) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;number has changed: &#x27;</span>, newVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们在 watch 中监听了 number 属性，并且在实例创建后 2s 执行对 number 属性的值的更改。输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">number has changed: 100</span><br></pre></td></tr></table></figure>

<h1 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h1><ol>
<li>功能上：computed 是计算属性，watch 是监听一个值的变化，然后执行对应的回调。</li>
<li>是否调用缓存：computed 中的函数所依赖的属性没有发生变化，那么调用当前的函数的时候会从缓存中读取，而 watch 在每次监听的值发生变化的时候都会执行回调。</li>
<li>是否调用 return：computed 中的函数必须要用 return 返回，watch 中的函数不是必须要用 return。</li>
<li>使用场景：computed—-当一个属性受多个属性影响的时候，使用 computed——-购物车商品结算。watch—-当一条数据影响多条数据的时候，使用 watch——-搜索框。</li>
</ol>
<p>总结：computed 和 watch 的使用场景并不一样，computed 的话是通过几个数据的变化，来影响一个数据，而 watch，则是可以一个数据的变化，去影响多个数据。</p>
<p>补充：computed 跟 methods 里面的方法的区别，computed 的话访问的时候会直接返回已缓存的结果，而不会像 methods 一样再次计算</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue自定义指令</title>
    <url>/2021/01/14/vue/directive/</url>
    <content><![CDATA[<h1 id="V-Hotkey"><a href="#V-Hotkey" class="headerlink" title="V-Hotkey"></a>V-Hotkey</h1><p>仓库地址: <a href="https://github.com/Dafrok/v-hotkey">https://github.com/Dafrok/v-hotkey</a><br>Demo: <a href="https://dafrok.github.io/v-hotkey">https://dafrok.github.io/v-hotkey</a></p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save v-hotkey</span><br></pre></td></tr></table></figure>

<p>这个指令可以给组件绑定一个或多个快捷键。</p>
<blockquote>
<p>按下 Escape 键后隐藏某个组件，按住 Control 和回车键再显示它吗？小菜一碟：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-hotkey</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#x27;esc&#x27;: onClose,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#x27;ctrl+enter&#x27;: onShow</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    Press `esc` to close me!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        show: <span class="literal">true</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      onClose() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.show = <span class="literal">false</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      onShow() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.show = <span class="literal">true</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="V-Click-Outside"><a href="#V-Click-Outside" class="headerlink" title="V-Click-Outside"></a>V-Click-Outside</h1><p>仓库地址: <a href="https://github.com/ndelvalle/v-click-outside">https://github.com/ndelvalle/v-click-outside</a><br>Demo: <a href="https://codesandbox.io/s/zx7mx8y1ol?module=/src/components/HelloWorld.vue">https://codesandbox.io/s/zx7mx8y1ol?module=%2Fsrc%2Fcomponents%2FHelloWorld.vue</a></p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save v-click-outside</span><br></pre></td></tr></table></figure>

<p>你想要点击外部区域关掉某个组件吗？用这个指令可以轻松实现。这是我每个项目必用的指令之一，尤其在弹框和下拉菜单组件里非常好用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span> <span class="attr">v-click-outside</span>=<span class="string">&quot;onClickOutside&quot;</span>&gt;</span></span><br><span class="line">    Hide me when a click outside this element happens</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        show: <span class="literal">true</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      onClickOutside() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.show = <span class="literal">false</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明： 你也可以通过双击外部区域来触发，具体用法请参考文档。</p>
<h1 id="V-Clipboard"><a href="#V-Clipboard" class="headerlink" title="V-Clipboard"></a>V-Clipboard</h1><p>仓库地址: <a href="https://github.com/euvl/v-clipboard">https://github.com/euvl/v-clipboard</a></p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save v-clipboard</span><br></pre></td></tr></table></figure>

<p>这个指令用在任何静态或动态元素上。当元素被点击时，指令的值会被复制到剪贴板上。用户需要复制代码片段的时候，这个非常有用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-clipboard</span>=<span class="string">&quot;value&quot;</span>&gt;</span>Copy to clipboard<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-ScrollTo"><a href="#Vue-ScrollTo" class="headerlink" title="Vue-ScrollTo"></a>Vue-ScrollTo</h1><p>仓库地址: <a href="https://github.com/rigor789/vue-scrollTo">https://github.com/rigor789/vue-scrollTo</a><br>Demo: <a href="https://vue-scrollto.netlify.com/">https://vue-scrollto.netlify.com/</a></p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-scrollto</span><br></pre></td></tr></table></figure>

<p>这个指令监听元素的点击事件，然后滚动到指定位置。我通常用来处理文章目录跳转和导航跳转。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-scroll-to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    el: &#x27;#element&#x27;, // 滚动的目标位置元素</span></span></span><br><span class="line"><span class="tag"><span class="string">    container: &#x27;#container&#x27;, // 可滚动的容器元素</span></span></span><br><span class="line"><span class="tag"><span class="string">    duration: 500, // 滚动动效持续时长（毫秒）</span></span></span><br><span class="line"><span class="tag"><span class="string">    easing: &#x27;linear&#x27; // 动画曲线</span></span></span><br><span class="line"><span class="tag"><span class="string">  &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  Scroll to #element by clicking here</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明： 也可以通过代码动态设置，具体看文档。</p>
</blockquote>
<h1 id="Vue-Lazyload"><a href="#Vue-Lazyload" class="headerlink" title="Vue-Lazyload"></a>Vue-Lazyload</h1><p>仓库地址: <a href="https://github.com/hilongjw/vue-lazyload">https://github.com/hilongjw/vue-lazyload</a><br>Demo: <a href="http://hilongjw.github.io/vue-lazyload/">http://hilongjw.github.io/vue-lazyload/</a></p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-lazyload</span><br></pre></td></tr></table></figure>

<p>图片懒加载，非常方便。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-lazy</span>=<span class="string">&quot;https://www.domain.com/image.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="V-Tooltip"><a href="#V-Tooltip" class="headerlink" title="V-Tooltip"></a>V-Tooltip</h1><p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save v-tooltip</span><br></pre></td></tr></table></figure>

<p>几乎每个项目都会用到 tooltip。这个指令可以给元素添加响应式的 tooltip，并可控制显示位置、触发方式和监听事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-tooltip</span>=<span class="string">&quot;&#x27;You have &#x27; + count + &#x27; new messages.&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明： 还有一个比较流行的 tooltip 插件 vue-directive-tooltip.</p>
<h1 id="V-Scroll-Lock"><a href="#V-Scroll-Lock" class="headerlink" title="V-Scroll-Lock"></a>V-Scroll-Lock</h1><p>仓库地址: <a href="https://github.com/phegman/v-scroll-lock">https://github.com/phegman/v-scroll-lock</a><br>Demo: <a href="https://v-scroll-lock.peterhegman.com/">https://v-scroll-lock.peterhegman.com/</a></p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save v-scroll-lock</span><br></pre></td></tr></table></figure>

<p>基于 body-scroll-lock 开发，这个指令的作用是在打开模态浮层的时候防止下层的元素滚动。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;opened&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onCloseModal&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span> <span class="attr">v-scroll-lock</span>=<span class="string">&quot;opened&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>A bunch of scrollable modal content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        opened: <span class="literal">false</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onOpenModal() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.opened = <span class="literal">true</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      onCloseModal() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.opened = <span class="literal">false</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="V-Money"><a href="#V-Money" class="headerlink" title="V-Money"></a>V-Money</h1><p>仓库地址: <a href="https://github.com/vuejs-tips/v-money">https://github.com/vuejs-tips/v-money</a><br>Demo: <a href="https://vuejs-tips.github.io/v-money/">https://vuejs-tips.github.io/v-money/</a></p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save v-money</span><br></pre></td></tr></table></figure>

<p>如果你需要在输入框里加上货币前缀或后缀、保留小数点位数或者设置小数点符号——不用找了，就是它！一行代码搞定这些需求：</p>
<template>
  <div>
    <input v-model.lazy="price" v-money="money" /> 
  </div>
</template>

<script>
export default {
  data () {
    return {
      price: 123.45,
      money: {
        decimal: ',',
        thousands: '.',
        prefix: '$ ',
        precision: 2,
      }
    }
  }
}
</script>

<h1 id="Vue-Infinite-Scroll"><a href="#Vue-Infinite-Scroll" class="headerlink" title="Vue-Infinite-Scroll"></a>Vue-Infinite-Scroll</h1><p>仓库地址: <a href="https://github.com/ElemeFE/vue-infinite-scroll">https://github.com/ElemeFE/vue-infinite-scroll</a></p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-infinite-scroll</span><br></pre></td></tr></table></figure>

<p>无限滚动指令，当滚动到页面底部时会触发绑定的方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-infinite-scroll</span>=<span class="string">&quot;onLoadMore&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">infinite-scroll-disabled</span>=<span class="string">&quot;busy&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">infinite-scroll-distance</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        data [],</span><br><span class="line"><span class="javascript">        busy: <span class="literal">false</span>,</span></span><br><span class="line">        count: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      onLoadMore() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.busy = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">10</span>; i &lt; j; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.data.push(&#123; <span class="attr">name</span>: <span class="built_in">this</span>.count++ &#125;);</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.busy = <span class="literal">false</span>;</span></span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-Clampy"><a href="#Vue-Clampy" class="headerlink" title=". Vue-Clampy"></a>. Vue-Clampy</h1><p>仓库地址: vue-clampy.</p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save @clampy-js/vue-clampy</span><br></pre></td></tr></table></figure>

<p>这个指令会截断元素里的文本，并在末尾加上省略号。它是用 clampy.js 实现的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-clampy</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Long text to clamp here<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- displays: Long text to...--&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-InputMask"><a href="#Vue-InputMask" class="headerlink" title=". Vue-InputMask"></a>. Vue-InputMask</h1><p>仓库地址: vue-inputmask</p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-inputmask</span><br></pre></td></tr></table></figure>

<p>当你需要在输入框里格式化日期时，这个指令会自动生成格式化文本。基于 Inputmask library 开发。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-mask</span>=<span class="string">&quot;&#x27;99/99/9999&#x27;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-Ripple-Directive"><a href="#Vue-Ripple-Directive" class="headerlink" title=". Vue-Ripple-Directive"></a>. Vue-Ripple-Directive</h1><p>仓库地址: vue-ripple-directive</p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-ripple-directive</span><br></pre></td></tr></table></figure>

<p>Aduardo Marcos 写的这个指令可以给点击的元素添加波纹动效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-ripple</span> <span class="attr">class</span>=<span class="string">&quot;button is-primary&quot;</span>&gt;</span>This is a button<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-Focus"><a href="#Vue-Focus" class="headerlink" title=". Vue-Focus"></a>. Vue-Focus</h1><p>仓库地址: vue-focus</p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-focus</span><br></pre></td></tr></table></figure>

<p>有时候，用户在界面里操作，需要让某个输入框获得焦点。这个指令就是干这个的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;focused = true&quot;</span>&gt;</span>Focus the input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>=<span class="string">&quot;focused&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        focused: <span class="literal">false</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="V-Blur"><a href="#V-Blur" class="headerlink" title=". V-Blur"></a>. V-Blur</h1><p>仓库地址: v-blur<br>Demo: 戳这里</p>
<p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save v-blur</span><br></pre></td></tr></table></figure>

<p>假设你的页面在访客没有注册的时候，有些部分需要加上半透明遮罩。用这个指令可以轻松实现，还可以自定义透明度和过渡效果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;blurConfig.isBlurred = !blurConfig.isBlurred&quot;</span>&gt;</span></span><br><span class="line">    Toggle the content visibility</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-blur</span>=<span class="string">&quot;blurConfig&quot;</span>&gt;</span>Blurred content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span></span></span><br><span class="line">          blurConfig: &#123;</span><br><span class="line"><span class="javascript">            isBlurred: <span class="literal">false</span>,</span></span><br><span class="line">            opacity: 0.3,</span><br><span class="line"><span class="javascript">            filter: <span class="string">&#x27;blur(1.2px)&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            transition: <span class="string">&#x27;all .3s linear&#x27;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-Dummy"><a href="#Vue-Dummy" class="headerlink" title=". Vue-Dummy"></a>. Vue-Dummy</h1><p><strong>安装:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-dummy</span><br></pre></td></tr></table></figure>

<p>开发 app 的时候，偶尔会需要使用假文本数据，或者特定尺寸的占位图片。用这个指令可以轻松实现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- the content inside will have 150 words --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-dummy</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Display a placeholder image of 400x300--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-dummy</span>=<span class="string">&quot;&#x27;400x300&#x27;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>组件二次封装-选择日期季度</title>
    <url>/2020/05/26/vue/diy-ele-date-quarter/</url>
    <content><![CDATA[<h1 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h1><img src="/images/source-img/diy-ele-date-quarter.png" style="margin-left: 0">

<h1 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;conditionForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">condition-date-quarter</span></span></span><br><span class="line"><span class="tag">    <span class="attr">popper-class</span>=<span class="string">&quot;condition-picker&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;conditionForm.analysisDate&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;选择日期季度&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">condition-date-quarter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ConditionDateQuarter <span class="keyword">from</span> <span class="string">&quot;@/components/ConditionForm/ConditionDateQuarter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      conditionForm: &#123;</span><br><span class="line">        analysisDate: <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; ConditionDateQuarter &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="组件完整代码展示"><a href="#组件完整代码展示" class="headerlink" title="组件完整代码展示"></a>组件完整代码展示</h1><blockquote>
<p>该组件需要全局注入 element-ui 中的 Form，FormItem 组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Form, FormItem &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Form).use(FormItem);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 0;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:editable</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;week&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">format</span>=<span class="string">&quot;yyyy-WW&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">&quot;setValue&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DatePicker &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      inputValue: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    format: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">    event: <span class="string">&quot;change&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ElDatePicker: DatePicker</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setValue() &#123;</span><br><span class="line">      <span class="built_in">this</span>.$nextTick()</span><br><span class="line">        .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> value = <span class="built_in">this</span>.$el.children[<span class="number">0</span>].children[<span class="number">0</span>].children[<span class="number">0</span>].value;</span><br><span class="line">          <span class="built_in">this</span>.$emit(<span class="string">&quot;change&quot;</span>, value);</span><br><span class="line">          <span class="built_in">this</span>.dispatch(<span class="string">&quot;ElFormItem&quot;</span>, <span class="string">&quot;el.form.change&quot;</span>, [value]);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    dispatch(componentName, eventName, params) &#123;</span><br><span class="line">      <span class="keyword">let</span> parent = <span class="built_in">this</span>.$parent || <span class="built_in">this</span>.$root;</span><br><span class="line">      <span class="keyword">let</span> name = parent.$options.componentName;</span><br><span class="line">      <span class="keyword">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span><br><span class="line">        parent = parent.$parent;</span><br><span class="line">        <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">          name = parent.$options.componentName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        parent.$emit.apply(parent, [eventName].concat(params));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    value() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.value != <span class="built_in">this</span>.inputValue) &#123;</span><br><span class="line">        <span class="built_in">this</span>.inputValue == <span class="built_in">this</span>.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.quarter-popover</span><span class="selector-class">.el-popper</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="selector-class">.popover-body</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.popover-body</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.popover-item</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333333</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#2683ff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.disabled</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ddd</span>;</span><br><span class="line">      <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>组件二次封装-选择日期星期</title>
    <url>/2020/05/26/vue/diy-ele-date-week/</url>
    <content><![CDATA[<h1 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h1><img src="/images/source-img/diy-ele-date-week.png" style="margin-left: 0">

<h1 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;conditionForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">condition-date-week</span></span></span><br><span class="line"><span class="tag">    <span class="attr">popper-class</span>=<span class="string">&quot;condition-picker&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:picker-options</span>=<span class="string">&quot;pickerOptions&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;conditionForm.analysisDate&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;选择日期星期&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">condition-date-week</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ConditionDateWeek <span class="keyword">from</span> <span class="string">&quot;@/components/ConditionForm/ConditionDateWeek&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      conditionForm: &#123;</span><br><span class="line">        analysisDate: <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      pickerOptions: &#123;</span><br><span class="line">        disabledDate(date) &#123;</span><br><span class="line">          <span class="keyword">return</span> date &gt; <span class="keyword">new</span> <span class="built_in">Date</span>() || date &lt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;1999-12-31&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; ConditionDateWeek &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>picker-options</td>
<td>当前时间日期选择器特有的选项</td>
<td><code>object</code></td>
<td>{}</td>
</tr>
</tbody></table>
<h1 id="组件完整代码展示"><a href="#组件完整代码展示" class="headerlink" title="组件完整代码展示"></a>组件完整代码展示</h1><blockquote>
<p>该组件需要全局注入 element-ui 中的 Form，FormItem 组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Form, FormItem &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Form).use(FormItem);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 0;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-popover</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;popover&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">popper-class</span>=<span class="string">&quot;quarter-popover&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;popover&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placement</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">trigger</span>=<span class="string">&quot;focus&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;prev&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:style</span>=<span class="string">&quot;prevYearDisabled&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;el-date-picker__header-label&quot;</span>&gt;</span>&#123;&#123; year &#125;&#125;年<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;next&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:style</span>=<span class="string">&quot;nextYearDisabled&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popover-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;popover-item&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:class</span>=<span class="string">&quot;&#123; active: quarterValue == item.value, disabled: quarterDisabled(item.value) &#125;&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">&quot;item in quarterList&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;handleSetQuarterValue(item.value)&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">&quot;quarterInput&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">prefix-icon</span>=<span class="string">&quot;el-icon-date&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">slot</span>=<span class="string">&quot;reference&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">readonly</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">mouseenter.native</span>=<span class="string">&quot;inputHovering = true&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">mouseleave.native</span>=<span class="string">&quot;inputHovering = false&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;suffix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-if</span>=<span class="string">&quot;showClose&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;el-select__caret el-input__icon el-icon-circle-close&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;cursor: pointer;&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;handleClearClick&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-popover</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Popover &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">    event: <span class="string">&quot;change&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      popover: <span class="literal">false</span>,</span><br><span class="line">      year: <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear(),</span><br><span class="line">      quarterValue: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      quarterList: [</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">&quot;第一季度&quot;</span>,</span><br><span class="line">          value: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">&quot;第二季度&quot;</span>,</span><br><span class="line">          value: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">&quot;第三季度&quot;</span>,</span><br><span class="line">          value: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">&quot;第四季度&quot;</span>,</span><br><span class="line">          value: <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      inputValue: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      inputHovering: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    totalValue() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.year &amp;&amp; <span class="built_in">this</span>.quarterValue) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.year + <span class="string">&quot;-&quot;</span> + <span class="built_in">this</span>.quarterValue;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showClose() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.inputHovering &amp;&amp; <span class="built_in">this</span>.inputValue;</span><br><span class="line">    &#125;,</span><br><span class="line">    prevYearDisabled() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.year &lt;= <span class="number">2000</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">color</span>: <span class="string">&quot;#ddd&quot;</span>, <span class="attr">cursor</span>: <span class="string">&quot;not-allowed&quot;</span> &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    nextYearDisabled() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() &lt;= <span class="built_in">this</span>.year) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">color</span>: <span class="string">&quot;#ddd&quot;</span>, <span class="attr">cursor</span>: <span class="string">&quot;not-allowed&quot;</span> &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ElPopover: Popover</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    prev() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.year &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.year--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    next() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.year &lt; <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.year++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSetQuarterValue(value) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.quarterDisabled(value)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.quarterValue = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    quarterDisabled(value) &#123;</span><br><span class="line">      <span class="keyword">const</span> currMonth = <span class="keyword">new</span> <span class="built_in">Date</span>().getMonth() + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">const</span> quarter = <span class="built_in">Math</span>.floor(</span><br><span class="line">        currMonth % <span class="number">3</span> == <span class="number">0</span> ? currMonth / <span class="number">3</span> : currMonth / <span class="number">3</span> + <span class="number">1</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        <span class="built_in">this</span>.year &lt; <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() ||</span><br><span class="line">        (<span class="built_in">this</span>.year &gt;= <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() &amp;&amp; quarter &gt;= value)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClearClick() &#123;</span><br><span class="line">      <span class="built_in">this</span>.inputValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="built_in">this</span>.quarterValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;change&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.$refs.quarterInput.blur();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    totalValue() &#123;</span><br><span class="line">      <span class="built_in">this</span>.inputValue = <span class="built_in">this</span>.totalValue;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;change&quot;</span>, <span class="built_in">this</span>.inputValue);</span><br><span class="line">      <span class="built_in">this</span>.popover = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    value() &#123;</span><br><span class="line">      <span class="built_in">this</span>.year = <span class="built_in">this</span>.value.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">      <span class="built_in">this</span>.quarterValue = <span class="built_in">this</span>.value.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.quarter-popover</span><span class="selector-class">.el-popper</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="selector-class">.popover-body</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.popover-body</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.popover-item</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333333</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#2683ff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.disabled</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ddd</span>;</span><br><span class="line">      <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>组件二次封装-下拉框中进行复选框的勾选</title>
    <url>/2020/05/26/vue/diy-ele-select/</url>
    <content><![CDATA[<h1 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h1><img src="/images/source-img/diy-ele-condition-select.png" style="margin-left: 0">

<h1 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;conditionForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">condition-select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:max</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:disabled</span>=<span class="string">&quot;loading&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;conditionForm.type&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请选择***类型&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">selectSure</span>=<span class="string">&quot;selectSure&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">condition-option</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">condition-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">condition-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ConditionSelect <span class="keyword">from</span> <span class="string">&quot;@/components/ConditionForm/ConditionSelect&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ConditionOption <span class="keyword">from</span> <span class="string">&quot;@/components/ConditionForm/ConditionOption&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">&quot;a&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="string">&quot;b&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">&quot;c&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">value</span>: <span class="string">&quot;d&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">value</span>: <span class="string">&quot;e&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">value</span>: <span class="string">&quot;f&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">value</span>: <span class="string">&quot;g&quot;</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      conditionForm: &#123;</span><br><span class="line">        type: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ConditionSelect,</span><br><span class="line">    ConditionOption</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    selectSure() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>max</td>
<td>可被勾选的 checkbox 的最大数量</td>
<td><code>number</code></td>
<td>-1</td>
</tr>
<tr>
<td>disabled</td>
<td>是否禁用</td>
<td><code>boolean</code></td>
<td>false</td>
</tr>
</tbody></table>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>selectSure</td>
<td>点击确定按钮后触发的事件</td>
</tr>
</tbody></table>
<h1 id="组件完整代码展示"><a href="#组件完整代码展示" class="headerlink" title="组件完整代码展示"></a>组件完整代码展示</h1><blockquote>
<p>该组件需要全局注入 element-ui 中的 Form，FormItem 组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Form, FormItem &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Form).use(FormItem);</span><br></pre></td></tr></table></figure>

<ol>
<li>ConditionSelect</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;select-checkbox&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;selectValue&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">visible-change</span>=<span class="string">&quot;visibleChange&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">popper-class</span>=<span class="string">&quot;option-container&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">slot</span>=<span class="string">&quot;empty&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">&quot;$slots.default &amp;&amp; $slots.default.length&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;max-width: 400px;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox-group</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;checkList&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:max</span>=<span class="string">&quot;max &gt;= 0 ? max : $slots.default.length&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;select-btn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">          已选&#123;&#123; checkList.length &#125;&#125;/&#123;&#123; max &gt;= 0 ? max : $slots.default.length</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;selectTag&quot;</span>&gt;</span></span><br><span class="line">          确定</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;empty&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nodata&quot;</span> <span class="attr">v-else</span>&gt;</span>无数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Select, CheckboxGroup &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      checkList: [],</span><br><span class="line">      valueList: [],</span><br><span class="line">      selectValue: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    max: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">-1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">    event: <span class="string">&quot;change&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ElSelect: Select,</span><br><span class="line">    ElCheckboxGroup: CheckboxGroup</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    selectTag() &#123;</span><br><span class="line">      <span class="keyword">const</span> valueList = [];</span><br><span class="line">      <span class="keyword">const</span> selectValue = [];</span><br><span class="line">      <span class="built_in">this</span>.checkList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        valueList.push(<span class="built_in">JSON</span>.parse(item).value);</span><br><span class="line">        selectValue.push(<span class="built_in">JSON</span>.parse(item).label);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">this</span>.valueList = valueList.sort();</span><br><span class="line">      <span class="built_in">this</span>.selectValue = selectValue.join(<span class="string">&quot;，&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;change&quot;</span>, <span class="built_in">this</span>.valueList);</span><br><span class="line">      <span class="built_in">this</span>.$children[<span class="number">0</span>].blur();</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;selectSure&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    visibleChange() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.valueList.length) &#123;</span><br><span class="line">        <span class="keyword">const</span> checkList = [];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.$slots.default) &#123;</span><br><span class="line">          <span class="built_in">this</span>.valueList.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$slots.default.forEach(<span class="function"><span class="params">slot</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (slot.componentOptions.propsData.value == element) &#123;</span><br><span class="line">                checkList.push(<span class="built_in">JSON</span>.stringify(slot.componentOptions.propsData));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.checkList = checkList;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    value() &#123;</span><br><span class="line">      <span class="built_in">this</span>.valueList = <span class="built_in">this</span>.value;</span><br><span class="line">      <span class="built_in">this</span>.visibleChange();</span><br><span class="line">      <span class="keyword">const</span> selectValue = [];</span><br><span class="line">      <span class="built_in">this</span>.checkList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        selectValue.push(<span class="built_in">JSON</span>.parse(item).label);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">this</span>.selectValue = selectValue.join(<span class="string">&quot;，&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.select-checkbox</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="selector-class">.el-select</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/deep/ .option-container &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">0px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.07</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="selector-class">.select-btn</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4f5e70</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-button--mini</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.nodata</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/deep/ .el-form-item &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="selector-class">.el-form-item__content</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.select-btn</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>ConditionOption</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">:label</span>=<span class="string">&quot;JSON.stringify(&#123; label, value &#125;)&quot;</span>&gt;</span>&#123;&#123; label &#125;&#125;<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Checkbox &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    label: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ElCheckbox: Checkbox</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>组件二次封装-移动端时间段选择</title>
    <url>/2021/01/08/vue/diy-vant-date-picker/</url>
    <content><![CDATA[<h1 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h1><img src="/images/source-img/diy-vant-date-picker.png" style="margin-left: 0">

<h1 id="引入（全局注入组件）"><a href="#引入（全局注入组件）" class="headerlink" title="引入（全局注入组件）"></a>引入（全局注入组件）</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> diyDatePicker <span class="keyword">from</span> <span class="string">&quot;@/components/diy-vant-date-picker&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&quot;diyDatePicker&quot;</span>, diyDatePicker);</span><br></pre></td></tr></table></figure>

<h1 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">diy-date-picker</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:show-picker</span>=<span class="string">&quot;showPicker&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">confirm</span>=<span class="string">&quot;filterChange&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">closed</span>=<span class="string">&quot;showPicker = false&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      showPicker: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    filterChange(start, end) &#123;</span><br><span class="line">      <span class="keyword">let</span> startTime = start;</span><br><span class="line">      <span class="keyword">let</span> endTime = end;</span><br><span class="line">      <span class="keyword">if</span> (startTime &amp;&amp; !endTime) endTime = startTime;</span><br><span class="line">      <span class="keyword">if</span> (!startTime &amp;&amp; endTime) startTime = endTime;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.showPicker = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>show-picker</td>
<td>是否显示时间选择</td>
<td><code>Boolean</code></td>
<td>false</td>
</tr>
<tr>
<td>minDate</td>
<td>开始日期</td>
<td><code>Date</code></td>
<td>new Date(2019, 0, 1)</td>
</tr>
<tr>
<td>maxDate</td>
<td>截止日期</td>
<td><code>Date</code></td>
<td>new Date(2030, 0, 1)</td>
</tr>
<tr>
<td>defaultDate</td>
<td>默认日期</td>
<td><code>Date</code></td>
<td>new Date()</td>
</tr>
</tbody></table>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>confirm</td>
<td>点击确定按钮后触发的事件，该方法返回两个参数，开始时间和结束时间</td>
</tr>
<tr>
<td>closed</td>
<td>点击取消时触发的事件</td>
</tr>
</tbody></table>
<h1 id="组件完整代码展示"><a href="#组件完整代码展示" class="headerlink" title="组件完整代码展示"></a>组件完整代码展示</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;diyDatePicker-components&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;showPopup&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">&quot;&#123;top: $STOREX_GET.nav.total + &#x27;px&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">position</span>=<span class="string">&quot;top&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;picker-popup&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">closed</span>=<span class="string">&quot;closed&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popup-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>选择日期<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cancel-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picker-range&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;range-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;range-start&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:class</span>=<span class="string">&quot;&#123; active: activeRange == &#x27;start&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;rangeChange(&#x27;start&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          &#123;&#123; startDate ? $tools.timeF(startDate, &quot;YYYY年M月D日&quot;) :</span><br><span class="line">          &quot;请选择开始时间&quot; &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;range-separator&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;range-end&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:class</span>=<span class="string">&quot;&#123; active: activeRange == &#x27;end&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;rangeChange(&#x27;end&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          &#123;&#123; endDate ? $tools.timeF(endDate, &quot;YYYY年M月D日&quot;) : &quot;请选择结束时间&quot;</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-datetime-picker</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;currentDate&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:show-toolbar</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:visible-item-count</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:min-date</span>=<span class="string">&quot;minDate&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:max-date</span>=<span class="string">&quot;maxDate&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:formatter</span>=<span class="string">&quot;formatter&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">&quot;pickerChange&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picker-btns&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn reset-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;closed&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn success-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;confirm&quot;</span>&gt;</span>完成<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    minDate: &#123;</span><br><span class="line">      type: <span class="built_in">Date</span>,</span><br><span class="line">      <span class="keyword">default</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    maxDate: &#123;</span><br><span class="line">      type: <span class="built_in">Date</span>,</span><br><span class="line">      <span class="keyword">default</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2030</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    defaultDate: &#123;</span><br><span class="line">      type: <span class="built_in">Date</span>,</span><br><span class="line">      <span class="keyword">default</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showPicker: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      activeRange: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      startDate: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      endDate: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      showPopup: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    showPicker(val) &#123;</span><br><span class="line">      <span class="built_in">this</span>.showPopup = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">this</span>.currentDate = <span class="built_in">this</span>.defaultDate;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    formatter(type, val) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(type, val);</span><br><span class="line">      <span class="keyword">if</span> (type === <span class="string">&quot;year&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;val&#125;</span>年`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&quot;month&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;val&#125;</span>月`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&quot;day&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;val&#125;</span>日`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    pickerChange() &#123;</span><br><span class="line">      <span class="built_in">this</span>.activeRange = <span class="built_in">this</span>.activeRange || <span class="string">&quot;start&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.activeRange == <span class="string">&quot;start&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.startDate = <span class="built_in">this</span>.currentDate;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.activeRange == <span class="string">&quot;end&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.endDate = <span class="built_in">this</span>.currentDate;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    rangeChange(type) &#123;</span><br><span class="line">      <span class="built_in">this</span>.activeRange = type;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.activeRange == <span class="string">&quot;start&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.startDate) &#123;</span><br><span class="line">          <span class="built_in">this</span>.currentDate = <span class="built_in">this</span>.startDate;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.startDate = <span class="built_in">this</span>.currentDate;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.activeRange == <span class="string">&quot;end&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.endDate) &#123;</span><br><span class="line">          <span class="built_in">this</span>.currentDate = <span class="built_in">this</span>.endDate;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.endDate = <span class="built_in">this</span>.currentDate;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    confirm() &#123;</span><br><span class="line">      <span class="keyword">const</span> startDate = <span class="built_in">this</span>.startDate</span><br><span class="line">        ? <span class="built_in">this</span>.$tools.timeF(<span class="built_in">this</span>.startDate, <span class="string">&quot;YYYY-MM-DD&quot;</span>)</span><br><span class="line">        : <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">const</span> endDate = <span class="built_in">this</span>.endDate</span><br><span class="line">        ? <span class="built_in">this</span>.$tools.timeF(<span class="built_in">this</span>.endDate, <span class="string">&quot;YYYY-MM-DD&quot;</span>)</span><br><span class="line">        : <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(endDate);</span><br><span class="line">      <span class="keyword">if</span> (startDate &amp;&amp; endDate &amp;&amp; startDate &gt; endDate) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$toast(<span class="string">&quot;开始时间不能大于结束时间&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// if (!startDate &amp;&amp; !endDate) &#123;</span></span><br><span class="line">      <span class="comment">//   this.$toast(&quot;请选择开始时间或者结束时间&quot;);</span></span><br><span class="line">      <span class="comment">//   return false;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;confirm&quot;</span>, startDate, endDate);</span><br><span class="line">    &#125;,</span><br><span class="line">    closed() &#123;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;closed&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    reset() &#123;</span><br><span class="line">      <span class="built_in">this</span>.currentDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="built_in">this</span>.endDate = <span class="built_in">this</span>.startDate = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="built_in">this</span>.activeRange = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getMonthLastDay(time) &#123;</span><br><span class="line">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time || <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">      <span class="keyword">var</span> currentMonth = date.getMonth();</span><br><span class="line">      <span class="keyword">var</span> nextMonth = ++currentMonth;</span><br><span class="line">      <span class="keyword">var</span> nextMonthFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), nextMonth, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">var</span> oneDay = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$tools.timeF(</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Date</span>(nextMonthFirstDay - oneDay),</span><br><span class="line">        <span class="string">&quot;YYYY-MM-DD&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.diyDatePicker-components</span> &#123;</span><br><span class="line">  /deep/.van-overlay &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.picker-popup</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.popup-header</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">327px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">55px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">      <span class="attribute">text-align</span>: left;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e2e2e2</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.title</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">55px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#333333</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.cancel-btn</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">12px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">        <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">        <span class="attribute">color</span>: rgba(<span class="number">132</span>, <span class="number">146</span>, <span class="number">173</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.picker-range</span> &#123;</span><br><span class="line">      <span class="selector-class">.range-title</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">color</span>: rgba(<span class="number">51</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.range-info</span> &#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">32px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.range-start</span>,</span><br><span class="line">        <span class="selector-class">.range-end</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">123px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">          <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">          <span class="attribute">display</span>: inline-block;</span><br><span class="line">          <span class="attribute">text-align</span>: center;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#7a7a7a</span>;</span><br><span class="line">          <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#7a7a7a</span>;</span><br><span class="line">          <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line"></span><br><span class="line">          <span class="selector-tag">&amp;</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#427bfa</span>;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#427bfa</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.range-separator</span> &#123;</span><br><span class="line">          <span class="attribute">display</span>: inline-block;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">26px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="number">#979797</span>;</span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">27px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.picker-btns</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">24px</span>;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.btn</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">166px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: normal;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid rgba(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#0b1e53</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-class">.success-btn</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">          <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">          <span class="attribute">border</span>: <span class="number">1px</span> solid rgba(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, <span class="number">1</span>);</span><br><span class="line">          <span class="attribute">background</span>: rgba(<span class="number">66</span>, <span class="number">123</span>, <span class="number">250</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>动态组件，让页面渲染更灵活</title>
    <url>/2021/01/14/vue/dynamic-components/</url>
    <content><![CDATA[<blockquote>
<p>根据用户的权限不同，页面上要显示不同的内容<br>页面引入组件较多<br>如果逐个判断权限引入的话，v-if，v-else-if 使用太多，影响代码的美观</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;roleComponent&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;roleComponent&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> AdminInfo <span class="keyword">from</span> <span class="string">&quot;./admin-info&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> BookkeeperInfo <span class="keyword">from</span> <span class="string">&quot;./bookkeeper-info&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HrInfo <span class="keyword">from</span> <span class="string">&quot;./hr-info&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> UserInfo <span class="keyword">from</span> <span class="string">&quot;./user-info&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      AdminInfo,</span><br><span class="line">      BookkeeperInfo,</span><br><span class="line">      HrInfo,</span><br><span class="line">      UserInfo</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        roleComponents: &#123;</span><br><span class="line">          admin: AdminInfo,</span><br><span class="line">          bookkeeper: BookkeeperInfo,</span><br><span class="line">          hr: HrInfo,</span><br><span class="line">          user: UserInfo</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        role: <span class="string">&quot;user&quot;</span>,</span></span><br><span class="line"><span class="javascript">        roleComponent: <span class="literal">undefined</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; role, roleComponents &#125; = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.roleComponent = roleComponents[role];</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中 extend、mixins和extends的区别</title>
    <url>/2021/07/06/vue/extend-mixins-extends/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul>
<li>extend：扩展组件的构造器，当我们调用 <code>vue.component(&#39;a&#39;, &#123;...&#125;)</code> 时自动调用</li>
<li>mixins：接收对象数组（可理解为多继承），可以混入<strong>多个 mixin</strong></li>
<li>extends：接收的是对象或函数（可理解为单继承），extends <strong>只能继承一个</strong></li>
</ul>
<h1 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h1><p>Vue.extend 使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.extend</span></span><br><span class="line"><span class="comment">// 创建构造器</span></span><br><span class="line"><span class="keyword">var</span> Profile = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">&quot;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&quot;</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      firstName: <span class="string">&quot;Walter&quot;</span>,</span><br><span class="line">      lastName: <span class="string">&quot;White&quot;</span>,</span><br><span class="line">      alias: <span class="string">&quot;Heisenberg&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建 Profile 实例，并挂载到一个元素上。</span></span><br><span class="line"><span class="keyword">new</span> Profile().$mount(<span class="string">&quot;#mount-point&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h1><p>mixins 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 <code>Vue.extend()</code> 里最终选择使用相同的选项合并逻辑合并。</p>
<p>举例：如果你的混入包含一个钩子而创建组件本身也有一个，两个函数将被调用。<br>Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  mixins: [mixin]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure>

<h2 id="mixins-要点"><a href="#mixins-要点" class="headerlink" title="mixins 要点"></a>mixins 要点</h2><ul>
<li>data 混入组件<code>数据优先</code></li>
<li>钩子函数将混合为一个数组，混入对象的钩子将在组件自身钩子之前调用</li>
<li>值为对象的选项，例如 <code>methods</code>， <code>components</code> 和 <code>directives</code>，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对。</li>
<li>以上合并策略可以通过 <code>Vue.config.optionMergeStrategies</code> 修改</li>
</ul>
<h1 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h1><p>允许声明扩展另一个组件(可以是一个简单的选项对象或构造函数)，而无需使用 <code>Vue.extend</code>。这主要是为了便于扩展单文件组件。这和 mixins 类似。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> CompA = &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在没有调用 `Vue.extend` 时候继承 CompA</span></span><br><span class="line"><span class="keyword">var</span> CompB = &#123;</span><br><span class="line">  <span class="keyword">extends</span>: CompA,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>extend 用于创建 vue 实例</li>
<li>mixins 可以混入多个 mixin，extends 只能继承一个</li>
<li>mixins 类似于面向切面的编程（AOP），extends 类似于面向对象的编程</li>
<li>优先级 <code>Vue.extend</code> &gt; <code>extends</code> &gt; <code>mixins</code></li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>大图预览</title>
    <url>/2019/09/23/vue/image-preview/</url>
    <content><![CDATA[<p><code>el-image</code> 可通过 <code>previewSrcList</code> 开启预览大图的功能</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo-image__preview&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-image</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:src</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:preview-src-list</span>=<span class="string">&quot;srcList&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        url:</span><br><span class="line"><span class="javascript">          <span class="string">&quot;https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg&quot;</span>,</span></span><br><span class="line">        srcList: [</span><br><span class="line"><span class="javascript">          <span class="string">&quot;https://fuss10.elemecdn.com/8/27/f01c15bb73e1ef3793e64e6b7bbccjpeg.jpeg&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;https://fuss10.elemecdn.com/1/8e/aeffeb4de74e2fde4bd74fc7b4486jpeg.jpeg&quot;</span></span></span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>vue父子组件加载顺序</title>
    <url>/2019/08/08/vue/load-order/</url>
    <content><![CDATA[<pre class="mermaid">
graph TB
A(父组件 beforeCreated) --&gt; B(父组件 created) --&gt; C(父组件 beforeMounted) --&gt; D(子组件 beforeCreated) --&gt; E(子组件 created) --&gt; F(子组件 beforeMounted) --&gt; G(子组件 mounted) --&gt; H(父组件 mounted)
</pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>基于vue-cli搭建多模块且各模块独立打包</title>
    <url>/2020/10/28/vue/multi-module/</url>
    <content><![CDATA[<h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">|<span class="type">-- public</span> 静态资源目录（图片、文字等）</span><br><span class="line">    |<span class="type">-- images</span> 全局共用的img图片目录</span><br><span class="line">    |<span class="type">-- js</span> 存放JavaScript脚本</span><br><span class="line">    |<span class="type">-- css</span> 全局公用的样式表</span><br><span class="line">    |<span class="type">-- index</span>.html 首页入口文件（可添加meta 统计代码等）</span><br><span class="line">|<span class="type">-- dist</span> 打包项目</span><br><span class="line">		|<span class="type">-- [package</span>] 项目包名</span><br><span class="line">|<span class="type">-- node_modules</span> npm 加载的项目依赖</span><br><span class="line">|<span class="type">-- src</span></span><br><span class="line">    |<span class="type">-- assets</span></span><br><span class="line">       |<span class="type">-- config</span> 项目配置文件（包括OSS地址等公共用常量配置文件）</span><br><span class="line">           |<span class="type">-- less</span>.js  css 中使用的全局变量，如服务器上的图片 OSS_PATH</span><br><span class="line">       |<span class="type">-- images</span> 项目图片</span><br><span class="line">       |<span class="type">-- utils</span> js文件（全局api，公共方法，组件注册）</span><br><span class="line">    |<span class="type">-- components</span> 公共组件</span><br><span class="line">    |<span class="type">-- phjtWebTools</span> 项目公共组件，方法库</span><br><span class="line">    |<span class="type">-- views</span> 开发项目位置</span><br><span class="line">    		|<span class="type">-- base</span></span><br><span class="line">        |<span class="type">-- [package</span>]</span><br><span class="line">            |<span class="type">-- assets</span></span><br><span class="line">                |<span class="type">-- config</span> 项目配置文件</span><br><span class="line">                |<span class="type">-- css</span> 当前项目公共样式文件</span><br><span class="line">                |<span class="type">-- utils</span> 当前项目公共js文件，如 vuex | <span class="type">Vue</span>.observable 的注入</span><br><span class="line">            |<span class="type">-- views</span> 开发主体页面</span><br><span class="line">            |<span class="type">-- router</span> vue路由的目录</span><br><span class="line">            |<span class="type">-- store</span> Vuex</span><br><span class="line">            |<span class="type">-- App</span>.vue 项目文件入口</span><br><span class="line">            |<span class="type">-- main</span>.js 项目的核心文件</span><br><span class="line">|<span class="type">-- templates</span></span><br><span class="line">    |<span class="type">-- [package</span>].html</span><br><span class="line">|<span class="type">-- envs</span> 根据具体项目的不同公共配置</span><br><span class="line">|<span class="type">-- package</span>.json 项目的配置信息（比如名称、版本、许可证等元数据）</span><br><span class="line">|<span class="type">-- vue</span>.config.js 项目配置文件</span><br><span class="line">|<span class="type">-- README</span>.md</span><br></pre></td></tr></table></figure>

<h1 id="修改-webpack-配置"><a href="#修改-webpack-配置" class="headerlink" title="修改 webpack 配置"></a>修改 webpack 配置</h1><details>
<summary>代码如下</summary>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;babel-polyfill&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> argv = <span class="built_in">require</span>(<span class="string">&quot;yargs&quot;</span>).argv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> PRODUCTION = process.env.NODE_ENV === <span class="string">&quot;production&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0开发 1正式环境 2测试服务器</span></span><br><span class="line"><span class="keyword">const</span> serverType = PRODUCTION ? (argv[<span class="string">&quot;test_server&quot;</span>] ? <span class="number">2</span> : <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// APP 版本号（影响打包路径）</span></span><br><span class="line"><span class="keyword">const</span> APP_VERSION = (process.env.VUE_APP_VERSION =</span><br><span class="line">  process.env.npm_package_appVersion);</span><br><span class="line"></span><br><span class="line"><span class="comment">// H5  版本号（影响打包文件名）</span></span><br><span class="line"><span class="keyword">const</span> H5_VERSION = (process.env.VUE_APP_H5_VERSION =</span><br><span class="line">  process.env.npm_package_version);</span><br><span class="line"></span><br><span class="line"><span class="comment">// H5  包名称（只有生产环境和单项目开发环境才有值）</span></span><br><span class="line">process.env.VUE_APP_NAME = <span class="string">&quot;&quot;</span>;</span><br><span class="line">process.env.VUE_APP_VERSION_CODE = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产环境使用CDN加速域名，开发和测试环境使用OSS域名</span></span><br><span class="line">process.env.VUE_APP_HOST =</span><br><span class="line">  serverType == <span class="number">1</span> ? process.env.VUE_APP_CDN_HOST : process.env.VUE_APP_OSS_HOST;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lessVars = <span class="built_in">require</span>(<span class="string">&quot;./src/assets/config/less&quot;</span>);</span><br><span class="line">lessVars[<span class="string">&quot;TEST_SERVICE&quot;</span>] = process.env.VUE_APP_TEST_SERVICE = serverType; <span class="comment">// css 中使用的全局变量，如服务器上的图片 OSS_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 运行环境 &quot;</span>,</span><br><span class="line">  [<span class="string">&quot;开发环境&quot;</span>, <span class="string">&quot;正式环境&quot;</span>, <span class="string">&quot;测试服务器&quot;</span>][serverType]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有多入口文件</span></span><br><span class="line"><span class="keyword">const</span> getPages = <span class="function">(<span class="params">arr = [], toName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dirs = fs.readdirSync(<span class="string">&quot;./src/views&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> pages = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">of</span> dirs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &gt; <span class="number">0</span> &amp;&amp; !arr.includes(name)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">let</span> temPath = <span class="string">`templates/<span class="subst">$&#123;name&#125;</span>.html`</span>;</span><br><span class="line">    <span class="keyword">let</span> entryPath = <span class="string">`src/views/<span class="subst">$&#123;name&#125;</span>/main.js`</span>;</span><br><span class="line">    <span class="keyword">let</span> newName = name;</span><br><span class="line">    <span class="keyword">if</span> (arr.length == <span class="number">1</span> &amp;&amp; toName) &#123;</span><br><span class="line">      newName = toName;</span><br><span class="line">    &#125;</span><br><span class="line">    pages[newName] = &#123;</span><br><span class="line">      entry: entryPath, <span class="comment">// 入口</span></span><br><span class="line">      template: fs.existsSync(temPath) ? temPath : <span class="string">&quot;public/index.html&quot;</span>,</span><br><span class="line">      filename: PRODUCTION ? <span class="string">`index.html`</span> : <span class="string">`<span class="subst">$&#123;newName&#125;</span>.html`</span>,</span><br><span class="line">      title: newName,</span><br><span class="line">      <span class="comment">// 在这个页面中包含的块，默认情况下会包含,提取出来的通用 chunk 和 vendor chunk。</span></span><br><span class="line">      chunks: [<span class="string">&quot;chunk-vendors&quot;</span>, <span class="string">&quot;chunk-common&quot;</span>, newName]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pages;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> proPathName = PRODUCTION ? argv[<span class="string">&quot;test_server&quot;</span>] || process.argv[<span class="number">3</span>] : <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> proNewName =</span><br><span class="line">  (argv[<span class="string">&quot;test_server&quot;</span>] ? process.argv[<span class="number">5</span>] : process.argv[<span class="number">4</span>]) || proPathName;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(process.argv);</span><br><span class="line"><span class="keyword">let</span> devPathName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> page = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (!PRODUCTION) &#123;</span><br><span class="line">  <span class="keyword">if</span> (argv[<span class="string">&quot;project&quot;</span>] &amp;&amp; argv[<span class="string">&quot;project&quot;</span>] !== <span class="literal">true</span>) &#123;</span><br><span class="line">    devPathName = <span class="built_in">String</span>(argv[<span class="string">&quot;project&quot;</span>]).trim().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 运行项目 &quot;</span>, devPathName);</span><br><span class="line">    page = getPages(devPathName);</span><br><span class="line">    <span class="keyword">if</span> (devPathName.length == <span class="number">1</span>) &#123;</span><br><span class="line">      process.env.VUE_APP_NAME = devPathName[<span class="number">0</span>];</span><br><span class="line">      process.env.VUE_APP_VERSION_CODE = <span class="built_in">require</span>(<span class="string">`./src/views/<span class="subst">$&#123;devPathName[<span class="number">0</span>]&#125;</span>/assets/config/index`</span>).versionCode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 运行项目 &quot;</span>, <span class="string">&quot;全部&quot;</span>);</span><br><span class="line">    page = getPages();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (proPathName) &#123;</span><br><span class="line">  proPathName = proPathName.replace(<span class="regexp">/[^a-zA-Z|_\d]/gi</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  proNewName = proNewName.replace(<span class="regexp">/[^a-zA-Z|_\d]/gi</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 打包项目 &quot;</span>, proPathName, proNewName);</span><br><span class="line">  process.env.VUE_APP_NAME = proNewName;</span><br><span class="line">  process.env.VUE_APP_VERSION_CODE = <span class="built_in">require</span>(<span class="string">`./src/views/<span class="subst">$&#123;proPathName&#125;</span>/assets/config/index`</span>).versionCode;</span><br><span class="line">  page = getPages([proPathName], proNewName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;未写项目包名&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cssOptions = PRODUCTION</span><br><span class="line">  ? &#123;</span><br><span class="line">      extract: &#123;</span><br><span class="line">        filename: <span class="string">`css/[name]-<span class="subst">$&#123;H5_VERSION&#125;</span>-[hash:8].css`</span>,</span><br><span class="line">        chunkFilename: <span class="string">`css/[name]-<span class="subst">$&#123;H5_VERSION&#125;</span>-[hash:8].css`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  : &#123;&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: !PRODUCTION ? <span class="string">&quot;/m&quot;</span> : <span class="string">&quot;./&quot;</span>,</span><br><span class="line">  outputDir: <span class="string">&quot;./dist/&quot;</span> + proNewName,</span><br><span class="line">  filenameHashing: <span class="literal">true</span>,</span><br><span class="line">  pages: page,</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>, <span class="comment">// 生产环境 sourceMap</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    openPage: <span class="string">`<span class="subst">$&#123;proNewName || <span class="string">&quot;&quot;</span>&#125;</span>.html`</span>,</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 项目构建成功之后，自动弹出页面</span></span><br><span class="line">    host: <span class="string">&quot;0.0.0.0&quot;</span>, <span class="comment">// 主机名，也可以127.0.0.0 || 做真机测试时候0.0.0.0</span></span><br><span class="line">    port: <span class="number">8082</span>, <span class="comment">// 端口号，默认8080</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// 协议</span></span><br><span class="line">    hotOnly: <span class="literal">false</span>, <span class="comment">// 没啥效果，热模块，webpack已经做好了</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// target: &quot;https://test-mall-web.peogoo.com&quot;,</span></span><br><span class="line">        target: <span class="string">&quot;http://10.20.39.122:8082&quot;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// &quot;/foo&quot;: &#123;</span></span><br><span class="line">      <span class="comment">//   target: &quot;&lt;other_url&gt;&quot;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125; <span class="comment">// 配置多个代理</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置less全局变量</span></span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      less: &#123;</span><br><span class="line">        globalVars: lessVars</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...cssOptions</span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ES6转为ES5</span></span><br><span class="line">    <span class="keyword">if</span> (PRODUCTION &amp;&amp; proPathName) &#123;</span><br><span class="line">      config.entry[proNewName] = [</span><br><span class="line">        <span class="string">&quot;babel-polyfill&quot;</span>,</span><br><span class="line">        ...config.entry[proNewName]</span><br><span class="line">      ];</span><br><span class="line">      config.output.filename = <span class="string">`js/[name]-<span class="subst">$&#123;H5_VERSION&#125;</span>-[hash:8].js`</span>;</span><br><span class="line">      config.output.chunkFilename = <span class="string">`js/[name]-<span class="subst">$&#123;H5_VERSION&#125;</span>-[hash:8].js`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> plugins = [];</span><br><span class="line">    config.plugins.push(</span><br><span class="line">      <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">        <span class="comment">// 正在匹配需要压缩的文件后缀</span></span><br><span class="line">        test: <span class="regexp">/\.(js|css|svg|woff|ttf|json|html)$/</span>,</span><br><span class="line">        <span class="comment">// 大于10kb的会压缩</span></span><br><span class="line">        threshold: <span class="number">10240</span></span><br><span class="line">        <span class="comment">// 其余配置查看compression-webpack-plugin</span></span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 生成环境且非测试服务器需要移除console和debugger</span></span><br><span class="line">    <span class="keyword">if</span> (serverType == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 移除console和debugger`</span>);</span><br><span class="line">      config.plugins = [...config.plugins, ...plugins];</span><br><span class="line">      config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.drop_console = <span class="literal">true</span>; <span class="comment">// 删除console</span></span><br><span class="line">      config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.drop_debugger = <span class="literal">true</span>; <span class="comment">// 删除deubgger</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//忽略的打包文件</span></span><br><span class="line">    config.externals(&#123;</span><br><span class="line">      <span class="string">&quot;animate.css&quot;</span>: <span class="string">&quot;animate.css&quot;</span>,</span><br><span class="line">      vue: <span class="string">&quot;Vue&quot;</span>,</span><br><span class="line">      <span class="string">&quot;vue-router&quot;</span>: <span class="string">&quot;VueRouter&quot;</span>,</span><br><span class="line">      vuex: <span class="string">&quot;Vuex&quot;</span>,</span><br><span class="line">      axios: <span class="string">&quot;axios&quot;</span>,</span><br><span class="line">      moment: <span class="string">&quot;moment&quot;</span>,</span><br><span class="line">      vant: <span class="string">&quot;vant&quot;</span>,</span><br><span class="line">      <span class="string">&quot;vue-clipboard2&quot;</span>: <span class="string">&quot;vue-clipboard2&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 别名</span></span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">&quot;@&quot;</span>, resolve(<span class="string">&quot;src&quot;</span>))</span><br><span class="line">      .set(<span class="string">&quot;@assets&quot;</span>, resolve(<span class="string">&quot;src/assets&quot;</span>))</span><br><span class="line">      .set(<span class="string">&quot;@views&quot;</span>, resolve(<span class="string">&quot;src/views&quot;</span>))</span><br><span class="line">      .set(<span class="string">&quot;@components&quot;</span>, resolve(<span class="string">&quot;src/components&quot;</span>))</span><br><span class="line">      .set(<span class="string">&quot;@phjtWebTools&quot;</span>, resolve(<span class="string">&quot;src/phjtWebTools&quot;</span>))</span><br><span class="line">      .set(<span class="string">&quot;@utils&quot;</span>, resolve(<span class="string">&quot;src/assets/utils&quot;</span>));</span><br><span class="line"></span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">&quot;svg&quot;</span>)</span><br><span class="line">      .use(<span class="string">&quot;file-loader&quot;</span>)</span><br><span class="line">      .loader(<span class="string">&quot;file-loader&quot;</span>)</span><br><span class="line">      .options(&#123; <span class="attr">name</span>: <span class="string">`img/[name]-<span class="subst">$&#123;H5_VERSION&#125;</span>-[hash:8].[ext]`</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打包文件格式</span></span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">&quot;images&quot;</span>)</span><br><span class="line">      .test(<span class="regexp">/\.(png|jpe?g|gif|webp)(\?.*)?$/</span>)</span><br><span class="line">      .use(<span class="string">&quot;url-loader&quot;</span>)</span><br><span class="line">      .loader(<span class="string">&quot;url-loader&quot;</span>)</span><br><span class="line">      .tap(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">        options.fallback.options.name = <span class="string">`img/[name]-<span class="subst">$&#123;H5_VERSION&#125;</span>-[hash:8].[ext]`</span>;</span><br><span class="line">        options.limit = <span class="number">5120</span>; <span class="comment">//这是字节(Byte)限制，1KB = 1024Byte。</span></span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了补删除换行而加的配置</span></span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">&quot;vue&quot;</span>)</span><br><span class="line">      .use(<span class="string">&quot;vue-loader&quot;</span>)</span><br><span class="line">      .loader(<span class="string">&quot;vue-loader&quot;</span>)</span><br><span class="line">      .tap(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">        options.compilerOptions.preserveWhitespace = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>

<h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;script&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;vue-cli-service serve --project&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;vue-cli-service build --test_server&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="构建指令"><a href="#构建指令" class="headerlink" title="构建指令"></a>构建指令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build // 打包全部模块到一个资源包下面，每个模块的入口是module.html文件，静态资源都在static目录中，这种方式可以复用重复的资源</span><br><span class="line">npm run <span class="built_in">test</span> [moduleName] // 测试环境打包指定模块到一个资源包下面</span><br><span class="line">npm run build [moduleName] // 生产环境打包打包指定模块到一个资源包下面</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>简单理解Vue中的nextTick</title>
    <url>/2019/08/23/vue/nextTick/</url>
    <content><![CDATA[<p>Vue 中的 nextTick 涉及到 Vue 中 DOM 的异步更新</p>
<p>先来一个示例了解下关于 Vue 中的 DOM 更新以及 nextTick 的作用。</p>
<p>模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;msgDiv&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span>Message got outside $nextTick: &#123;&#123;msg1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;msg2&quot;</span>&gt;</span>Message got inside $nextTick: &#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;msg3&quot;</span>&gt;</span>Message got outside $nextTick: &#123;&#123;msg3&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span>Change the Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Vue 实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&quot;.app&quot;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">&quot;Hello Vue.&quot;</span>,</span><br><span class="line">    msg1: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    msg2: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    msg3: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeMsg() &#123;</span><br><span class="line">      <span class="built_in">this</span>.msg = <span class="string">&quot;Hello world.&quot;</span>;</span><br><span class="line">      <span class="built_in">this</span>.msg1 = <span class="built_in">this</span>.$refs.msgDiv.innerHTML;</span><br><span class="line">      <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg2 = <span class="built_in">this</span>.$refs.msgDiv.innerHTML;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">this</span>.msg3 = <span class="built_in">this</span>.$refs.msgDiv.innerHTML;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>点击前</p>
 <img src="/images/source-img/vue-nextTick-before.png" style="margin-left: 0">

<p>点击后</p>
 <img src="/images/source-img/vue-nextTick-after.png" style="margin-left: 0">

<p>从图中可以得知：msg1 和 msg3 显示的内容还是变换之前的，而 msg2 显示的内容是变换之后的。其根本原因是因为 Vue 中 DOM 更新是异步的</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常见问题点整理</title>
    <url>/2020/10/29/vue/notice/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>分类</th>
<th>常见问题</th>
<th>处理方案</th>
</tr>
</thead>
<tbody><tr>
<td>按钮类</td>
<td>快速点击，造成数据重复提交</td>
<td>增加 loading，防止重复点击</td>
</tr>
<tr>
<td>按钮类</td>
<td>禁用按钮点击时只是样式禁用，仍可点击</td>
<td>使用 disabled 属性禁用<br /> 1、重要业务增加 flag<br/> 2、建议后端增加防止重复提交</td>
</tr>
<tr>
<td>兼容类</td>
<td>低版本手机不支持 css3 语法<br />position: fixed; left 和 top 值</td>
<td>添加适配内核如：–webkit</td>
</tr>
<tr>
<td>兼容类</td>
<td>低版本手机不支持 ES6 语法</td>
<td>ES6 语法使用时注意是否使用 babel 转换</td>
</tr>
<tr>
<td>倒计时</td>
<td>倒计时结束不刷新数据</td>
<td>增加刷新</td>
</tr>
<tr>
<td>倒计时</td>
<td>倒计时结束前后端刷新数据频率不一致导致前端频繁刷新（频繁刷新多次后，数据正常显示）</td>
<td>倒计时结束后延迟刷新</td>
</tr>
<tr>
<td>倒计时</td>
<td>在页面切换或者变化时未重置数据</td>
<td>在页面切换或者变化时重置倒计时以及相关状态</td>
</tr>
<tr>
<td>文案展示类</td>
<td>值为数值类型 0，显示默认值([*/–])</td>
<td>值为 0 特殊判断，根据具体业务需求展示</td>
</tr>
<tr>
<td>数值计算</td>
<td>当数值在进行减法或除法计算时，出现浮点数</td>
<td>toFixed</td>
</tr>
<tr>
<td>样式类</td>
<td>移动端 line-height 不居中</td>
<td>line-height: normal;<br>display: flex;<br>align-item: center;</td>
</tr>
<tr>
<td>样式类</td>
<td>移动端元素固定定位时，内部元素动态控制展示，在页面滚动时部分手机出现元素错位（元素跟随屏幕滚动）</td>
<td>先将元素隐藏，内部元素动态判断加载出来之后在将固定定位元素展示出来</td>
</tr>
<tr>
<td>表单类</td>
<td>表单未添加校验（如：必填，正则等）</td>
<td>在一次开发写表单的时候顺手添加表单校验</td>
</tr>
<tr>
<td>图片</td>
<td>图片过大</td>
<td>图片在蓝湖上下载后使用 TinyPNG 对图片进行二次压缩</td>
</tr>
<tr>
<td>分页加载</td>
<td>连续点击导致加载数据异常问题，连续点击时，点击加载按钮状态还没变成加载中的时再次触发</td>
<td>在接口请求中添加 loading 阻止请求</td>
</tr>
<tr>
<td>活动类异常情况</td>
<td>全部活动状态判断</td>
<td>考虑全部活动状态（有时候产品并不考虑全部），例如活动未开始时的异常情况</td>
</tr>
<tr>
<td>活动类异常情况</td>
<td>活动默认展示【活动已结束】</td>
<td>在接口请求数据回来之前展示 loading</td>
</tr>
<tr>
<td>时间格式化</td>
<td>处理后台返回时间戳</td>
<td>时间轴数据比当前月小一个月<br />getUTCMonth() 方法可返回一个表示月份的数字（按照世界时 UTC）。（一月份为 0, 二月份为 1, 以此类推）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue设置本地代理</title>
    <url>/2019/12/26/vue/proxy/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">      target: <span class="string">&quot;https://www.aaa.com/&quot;</span>, <span class="comment">// 接口域名</span></span><br><span class="line">      changeOrigin: <span class="literal">true</span>, <span class="comment">//是否跨域</span></span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中，如何在方法中给data中的对象动态的添加字段</title>
    <url>/2019/08/21/vue/object-set/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote>
<p>vue 创建后的数据，自定义设置对象的属性，实现不了双向绑定</p>
</blockquote>
<p>当业务场景，需要在请求接口数据新增自定义的属性</p>
<h1 id="问题解决方式"><a href="#问题解决方式" class="headerlink" title="问题解决方式"></a>问题解决方式</h1><p>通过查资料，找到 Vue 提供的一种全局添加对象字段的方法。</p>
<h1 id="具体解决方式"><a href="#具体解决方式" class="headerlink" title="具体解决方式"></a>具体解决方式</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.$set([想要添加字段的对象], <span class="string">&quot;字段名&quot;</span>, 字段值);</span><br></pre></td></tr></table></figure>

<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foodList = [</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&quot;回锅肉&quot;</span>, <span class="attr">price</span>: <span class="number">99.0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&quot;油焖大虾&quot;</span>, <span class="attr">price</span>: <span class="number">199.0</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>我们要做数量增加时候，后自定义添加数量属性 quantity：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加自定义属性数量quantity</span></span><br><span class="line">foodList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  item.quantity = <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#123; title: &#x27;回锅肉&#x27;, price: 99, quantity: 0 &#125;,</span></span><br><span class="line"><span class="comment">  &#123; title: &#x27;油焖大虾&#x27;, price: 199, quantity: 0 &#125;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>我们需要对数量增加的时候，quantity 是实现不了双向绑定的，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 特殊菜数量添加</span></span><br><span class="line">quantityAction(type, item) &#123;</span><br><span class="line">  <span class="comment">// 加法</span></span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">    item.quantity++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 减法</span></span><br><span class="line">    <span class="keyword">if</span> (item.quantity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      item.quantity--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 几时 quantity 是在增减，实际页面是达不到双向绑定的</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方法：</strong><br>这时候需要用$set 方法，设置对象的属性。</p>
<p>如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.$set(target, key, value);</span><br></pre></td></tr></table></figure>

<ul>
<li>参数：<ul>
<li>{Object | Array} target</li>
<li>{string | number} key</li>
<li>{any} value</li>
<li>返回值：设置的值。</li>
</ul>
</li>
</ul>
<p><strong>用法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foodList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$set(item, <span class="string">&quot;quantity&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样后面创建的属性就可以达到双向绑定了！</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么vue中的data用return返回呢？</title>
    <url>/2021/07/06/vue/return-data/</url>
    <content><![CDATA[<h1 id="为什么要把-data-变成函数并-return-属性"><a href="#为什么要把-data-变成函数并-return-属性" class="headerlink" title="为什么要把 data 变成函数并 return 属性"></a>为什么要把 data 变成函数并 return 属性</h1><p>组件是一个可复用的实例，当你引用一个组件的时候，组件里的 data 是一个普通的对象，所有用到这个组件的都引用的同一个 data，就会造成数据污染。</p>
<h1 id="vue-中-data-是否使用-return-的区别"><a href="#vue-中-data-是否使用-return-的区别" class="headerlink" title="vue 中 data 是否使用 return 的区别"></a>vue 中 data 是否使用 return 的区别</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue实例中data属性是如下方式展示的：</span></span><br><span class="line"><span class="keyword">let</span> app = newVue(&#123;</span><br><span class="line">  el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  data: &#123; <span class="attr">msg</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 使用组件化的项目中是如下方式展示的:</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      showLogin: <span class="literal">true</span>,</span><br><span class="line">      msg: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将 data 封装成函数后，在实例化组件的时候，我们只是调用了 data 函数生成的数据副本，避免了数据污染。</p>
<p>不使用 return 包裹的数据会在项目的全局可见，会造成变量污染；使用 return 包裹后数据中变量只在当前组件中生效，不会影响其他组件。</p>
<p>当一个组件被定义， data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。</p>
<p>如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目内存溢出</title>
    <url>/2020/12/28/vue/rmcatch/</url>
    <content><![CDATA[<ol>
<li>removeCache.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@functionName: deleteFolder</span></span><br><span class="line"><span class="comment"> *@params1: 删除的文件路径</span></span><br><span class="line"><span class="comment"> *@description: 删除项目中的缓存文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> deleteFolder = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> files = [];</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(path)) &#123;</span><br><span class="line">    files = fs.readdirSync(path);</span><br><span class="line">    files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">file, index</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> curPath = path + <span class="string">&quot;/&quot;</span> + file;</span><br><span class="line">      <span class="keyword">if</span> (fs.statSync(curPath).isDirectory()) &#123;</span><br><span class="line">        <span class="comment">// recurse</span></span><br><span class="line">        deleteFolder(curPath);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// delete file</span></span><br><span class="line">        fs.unlinkSync(curPath);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> fs.rmdirSync(path);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">deleteFolder(<span class="string">&quot;./node_modules/.cache/compression-webpack-plugin&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>package.json</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;script&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;rmcatch&quot;</span>: <span class="string">&quot;node ./removeCache.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>路由优化</title>
    <url>/2019/10/11/vue/route/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简化router文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[String]&#125;</span> </span>path          定义路由路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[String]&#125;</span> </span>name          挂在文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[String]&#125;</span> </span>title         页面title</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Object&#125;</span> </span>[other=&#123;&#125;]    路由其他参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Array&#125;</span>  </span>[children=[]] 嵌套路由配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Object&#125;</span>               </span>返回router可用obj</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path</span>(<span class="params">path, name, title, other = &#123;&#125;, children = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(</span><br><span class="line">    &#123;</span><br><span class="line">      path: path,</span><br><span class="line">      name: name,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title: title</span><br><span class="line">      &#125;,</span><br><span class="line">      component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">&quot;../pages/&quot;</span> + name + <span class="string">&quot;.vue&quot;</span>], resolve),</span><br><span class="line">      children: children</span><br><span class="line">    &#125;,</span><br><span class="line">    other</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> page = [];</span><br><span class="line"><span class="comment">// 测试页</span></span><br><span class="line">page.push(</span><br><span class="line">  path(<span class="string">&quot;form&quot;</span>, <span class="string">&quot;test/form&quot;</span>, <span class="string">&quot;测试&quot;</span>),</span><br><span class="line">  path(<span class="string">&quot;table&quot;</span>, <span class="string">&quot;test/table&quot;</span>, <span class="string">&quot;acc&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 流程管理</span></span><br><span class="line">page.push(path(<span class="string">&quot;form&quot;</span>, <span class="string">&quot;process/list&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    path(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;index&quot;</span>, <span class="string">&quot;首页&quot;</span>, &#123; <span class="attr">redirect</span>: <span class="string">&quot;/home/index&quot;</span> &#125;),</span><br><span class="line">    path(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;public/login&quot;</span>, <span class="string">&quot;登录&quot;</span>),</span><br><span class="line">    <span class="comment">//嵌套结构页</span></span><br><span class="line">    path(<span class="string">&quot;/home&quot;</span>, <span class="string">&quot;home&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, [</span><br><span class="line">      path(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;public/home_index&quot;</span>, <span class="string">&quot;&quot;</span>), <span class="comment">// 上下结构</span></span><br><span class="line">      path(<span class="string">&quot;aside&quot;</span>, <span class="string">&quot;public/aside&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, page) <span class="comment">// 上左右结构</span></span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 路由传参的三种基本模式</title>
    <url>/2019/08/08/vue/router-apply/</url>
    <content><![CDATA[<h1 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getDescribe(id) &#123;</span><br><span class="line">  <span class="comment">// 直接调用$router.push 实现携带参数的跳转</span></span><br><span class="line">  <span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">    path: <span class="string">`/describe/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案一，需要对应路由配置如下：</span></span><br><span class="line">&#123;</span><br><span class="line">path: <span class="string">&#x27;/describe/:id&#x27;</span>,</span><br><span class="line">name: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">component: Describe</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 很显然，需要在 path 中添加/:id 来对应 $router.push 中path携带的参数。</span></span><br><span class="line"><span class="comment">// 在子组件中可以使用来获取传递的参数值。</span></span><br><span class="line"><span class="comment">// $route.params.id</span></span><br></pre></td></tr></table></figure>

<h1 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件中：通过路由属性中的 name 来确定匹配的路由，通过 params 来传递参数。</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">  name: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">      id: id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应路由配置: 注意这里不能使用:/id来传递参数了，因为父组件中，已经使用params来携带参数了。</span></span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/describe&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">    component: Describe</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子组件中: 这样来获取参数</span></span><br><span class="line"><span class="comment">// $route.params.id</span></span><br></pre></td></tr></table></figure>

<h1 id="方案三："><a href="#方案三：" class="headerlink" title="方案三："></a>方案三：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件：使用 path 来匹配路由，然后通过 query 来传递参数</span></span><br><span class="line"><span class="comment">// 这种情况下 query 传递的参数会显示在 url 后面?id=？</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">  path: <span class="string">&#x27;/describe&#x27;</span>,</span><br><span class="line">  query: &#123;</span><br><span class="line">      id: id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应路由配置：</span></span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/describe&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">    component: Describe</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对应子组件: 这样来获取参数</span></span><br><span class="line"><span class="comment">// $route.query.id</span></span><br><span class="line"><span class="comment">// 这里要特别注意 在子组件中 获取参数的时候是$route.params 而不是$router 这很重要~~~</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中使用svg矢量图</title>
    <url>/2020/08/14/vue/svg-sprite/</url>
    <content><![CDATA[<h1 id="安装-svg-sprite-loader"><a href="#安装-svg-sprite-loader" class="headerlink" title="安装 svg-sprite-loader"></a>安装 svg-sprite-loader</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -S svg-sprite-loader</span><br></pre></td></tr></table></figure>

<h1 id="更改-build-webpack-base-conf-js-配置文件"><a href="#更改-build-webpack-base-conf-js-配置文件" class="headerlink" title="更改 build/webpack.base.conf.js 配置文件"></a>更改 build/webpack.base.conf.js 配置文件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;svg-sprite-loader&#x27;</span>,</span><br><span class="line">  include: [path.resolve(__dirname, <span class="string">&#x27;../src/images/icons&#x27;</span>)],</span><br><span class="line">  options: &#123;</span><br><span class="line">      <span class="comment">//symbolId: &#x27;icon-[name]&#x27; //这个没有生效，生效的是默认的name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">  exclude: [resolve(<span class="string">&#x27;src/icons&#x27;</span>)],</span><br><span class="line">  query: &#123;</span><br><span class="line">    limit: <span class="number">10000</span>,</span><br><span class="line">    name: utils.assetsPath(<span class="string">&#x27;img/[name].[ext]&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="下载-svg-文件并放入-src-icons-svg-目录下"><a href="#下载-svg-文件并放入-src-icons-svg-目录下" class="headerlink" title="下载 svg 文件并放入 src/icons/svg/目录下"></a>下载 svg 文件并放入 src/icons/svg/目录下</h1><p>推荐阿里图标库 <a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p>
<h1 id="封装组件-components-common-SvgIcon-vue"><a href="#封装组件-components-common-SvgIcon-vue" class="headerlink" title="封装组件 components/common/SvgIcon.vue"></a>封装组件 components/common/SvgIcon.vue</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">:class</span>=<span class="string">&quot;svgClass&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">use</span> <span class="attr">:xlink:href</span>=<span class="string">&quot;iconName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;svg-icon&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      iconClass: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        required: <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      className: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      iconName() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`#icon-<span class="subst">$&#123;<span class="built_in">this</span>.iconClass&#125;</span>`</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      svgClass() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.className) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">&quot;svg-icon &quot;</span> + <span class="built_in">this</span>.className;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">&quot;svg-icon&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.svg-icon</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span>: 1<span class="selector-class">.5em</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span>: 1<span class="selector-class">.5em</span>;</span></span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    fill: currentColor;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="新建-src-icons-index-js-文件"><a href="#新建-src-icons-index-js-文件" class="headerlink" title="新建 src/icons/index.js 文件"></a>新建 src/icons/index.js 文件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">&quot;../../components/common/SvgIcon&quot;</span>;</span><br><span class="line"><span class="comment">//全局注册</span></span><br><span class="line">Vue.component(<span class="string">&quot;svg-icon&quot;</span>, SvgIcon);</span><br><span class="line"><span class="keyword">const</span> requireAll = <span class="function"><span class="params">requireContext</span> =&gt;</span> requireContext.keys().map(requireContext);</span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">&quot;./svg&quot;</span>, <span class="literal">false</span>, <span class="regexp">/\.svg$/</span>);</span><br><span class="line">requireAll(req);</span><br></pre></td></tr></table></figure>

<h1 id="main-js-中引入"><a href="#main-js-中引入" class="headerlink" title="main.js 中引入"></a>main.js 中引入</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./icons&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&quot;search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用.sync，更优雅的实现数据双向绑定</title>
    <url>/2021/01/14/vue/sync/</url>
    <content><![CDATA[<p>在 <code>Vue</code> 中，<code>props</code> 属性是单向数据传输的，父级的 prop 的更新会向下流动到子组件中，但是反过来不行。可是有些情况，我们需要对 prop 进行“双向绑定”。上文中，我们提到了使用 <code>v-model</code> 实现双向绑定。但有时候我们希望一个组件可以实现多个数据的“双向绑定”，而 v-model 一个组件只能有一个(Vue3.0 可以有多个)，这时候就需要使用到.sync。</p>
<h1 id="sync-与-v-model-的异同"><a href="#sync-与-v-model-的异同" class="headerlink" title=".sync 与 v-model 的异同"></a>.sync 与 v-model 的异同</h1><p><strong>相同点：</strong></p>
<p>两者的<code>本质</code>都是语法糖，目的都是实现组件与外部数据的双向绑定<br>两个都是通过属性+事件来实现的</p>
<p><strong>不同点：</strong></p>
<p>一个组件只能定义<code>一个 v-model</code>，但可以定义<code>多个.sync</code><br>v-model 与.sync 对于的事件名称不同，v-model 默认事件为 input，可以通过配置 model 来修改，<code>.sync</code> 事件名称固定为 update:属性名</p>
<h1 id="自定义-sync"><a href="#自定义-sync" class="headerlink" title="自定义.sync"></a>自定义.sync</h1><p>在开发业务时，有时候需要使用一个遮罩层来阻止用户的行为（更多会使用遮罩层+loading 动画），下面通过自定义<code>.sync</code> 来实现一个遮罩层</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-overlay&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;visible&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$_handleClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      visible: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      $_handleClick(e) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.target.value);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--调用方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">custom-overlay</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;visible&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        visible: <span class="literal">false</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>v-for 指令</title>
    <url>/2019/10/23/vue/v-for/</url>
    <content><![CDATA[<h1 id="v-for-遍历数组"><a href="#v-for-遍历数组" class="headerlink" title="v-for 遍历数组"></a>v-for 遍历<code>数组</code></h1><p><code>value in arr</code> 遍历数组中的元素<br>(value, index) in arr 遍历数组中的元素和数组下标</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in arr&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      　</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in arr&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;--&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&quot;.box&quot;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        arr: [<span class="string">&quot;哈哈&quot;</span>, <span class="string">&quot;嘻嘻&quot;</span>, <span class="string">&quot;哼哼&quot;</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="v-for-遍历-json-对象"><a href="#v-for-遍历-json-对象" class="headerlink" title="v-for 遍历 json 对象"></a>v-for 遍历 <code>json 对象</code></h1><p><code>value in json</code> 遍历 json 对象中的值<br>(value, key) in json 遍历 json 对象中的值和键<br>(value, key, index) in json 遍历 json 对象中的值、键和索引</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in json&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in json&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;--&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in json&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;--&#123;&#123;key&#125;&#125;--&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&quot;.box&quot;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        json: &#123;</span><br><span class="line"><span class="javascript">          baidu: <span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="javascript">          souhu: <span class="string">&quot;搜狐&quot;</span>,</span></span><br><span class="line"><span class="javascript">          sougou: <span class="string">&quot;搜狗&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义指令v-loading</title>
    <url>/2020/09/15/vue/v-loading/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> LoadingComponent <span class="keyword">from</span> <span class="string">&quot;./loading.vue&quot;</span>;</span><br><span class="line"><span class="comment">// 使用 Vue.extend构造组件子类</span></span><br><span class="line"><span class="keyword">const</span> LoadingContructor = Vue.extend(LoadingComponent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个名为loading的指令</span></span><br><span class="line">Vue.directive(<span class="string">&quot;loading&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 只调用一次，在指令第一次绑定到元素时调用，可以在这里做一些初始化的设置</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>el 指令要绑定的元素</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>binding 指令传入的信息，包括 &#123;name:&#x27;指令名称&#x27;, value: &#x27;指令绑定的值&#x27;,arg: &#x27;指令参数 v-bind:text 对应 text&#x27;&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  bind(el, binding) &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="keyword">new</span> LoadingContructor(&#123;</span><br><span class="line">      el: <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>),</span><br><span class="line">      data: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    el.appendChild(instance.$el);</span><br><span class="line">    el.instance = instance;</span><br><span class="line">    Vue.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      el.instance.visible = binding.value;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 所在组件的 VNode 更新时调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">el</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">binding</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  update(el, binding) &#123;</span><br><span class="line">    <span class="comment">// 通过对比值的变化判断loading是否显示</span></span><br><span class="line">    <span class="keyword">if</span> (binding.oldValue !== binding.value) &#123;</span><br><span class="line">      el.instance.visible = binding.value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 只调用一次，在 指令与元素解绑时调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">el</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  unbind(el) &#123;</span><br><span class="line">    <span class="keyword">const</span> mask = el.instance.$el;</span><br><span class="line">    <span class="keyword">if</span> (mask.parentNode) &#123;</span><br><span class="line">      mask.parentNode.removeChild(mask);</span><br><span class="line">    &#125;</span><br><span class="line">    el.instance.$destroy();</span><br><span class="line">    el.instance = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-loading</span> <span class="attr">v-if</span>=<span class="string">&quot;visible&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">&quot;vant&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        visible: <span class="literal">false</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      [Loading.name]: Loading</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义v-model，原来这么简单</title>
    <url>/2021/01/14/vue/v-model/</url>
    <content><![CDATA[<p>在用 Vue 开发前端时，不论使用原生还是封装好的 UI 库，对于表单组件，一般都会使用到 v-model。虽然 v-model 是一个语法糖，但是吃到嘴里挺甜的啊。学会自定义 v-model，还是很有必要的。</p>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>一个组件上的 v-model 默认是通过在组件上面定义一个名为 value 的 props，同时对外暴露一个名为 input 的事件。</p>
<p>源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;$_handleChange&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      $_handleChange(e) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.target.value);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用方式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue + Element UI 实现权限管理系统</title>
    <url>/2020/12/16/vue/vue-permission/</url>
    <content><![CDATA[<h1 id="在路由-router-js-里面声明权限为-admin-的路由-异步挂载的路由-asyncRouterMap"><a href="#在路由-router-js-里面声明权限为-admin-的路由-异步挂载的路由-asyncRouterMap" class="headerlink" title="在路由 router.js 里面声明权限为 admin 的路由(异步挂载的路由 asyncRouterMap)"></a>在路由 router.js 里面声明权限为 admin 的路由(异步挂载的路由 asyncRouterMap)</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Layout */</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;@/views/layout/Layout&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRouterMap = [</span><br><span class="line">  <span class="comment">// 登录</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;login&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/login/login&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/404&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/errorPage/404&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    redirect: <span class="string">&quot;/login&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRouterMap = [</span><br><span class="line">  <span class="comment">//  首页</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: <span class="string">&quot;/home/index&quot;</span>,</span><br><span class="line">    hidden: <span class="literal">false</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">      roles: [<span class="number">1</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/home/index&quot;</span>),</span><br><span class="line">        name: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        hidden: <span class="literal">false</span>,</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&quot;首页&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;home&quot;</span>, <span class="attr">noCache</span>: <span class="literal">true</span>, <span class="attr">roles</span>: [<span class="string">&quot;admin&quot;</span>] &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/404&quot;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">&quot;hash&quot;</span>,</span><br><span class="line">  routes: constantRouterMap</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>constantRouterMap 是默认加载的路由表，不需要进行权限验证。</li>
<li>asyncRouterMap 是异步加载的路由表，也就是说需要进行权限验证。</li>
<li>roles 是一个数组，用来存放当前路由可以访问的权限。</li>
<li>hidden 设置 boolean 值来判断是否在菜单栏渲染。</li>
<li>noCache 设置 boolean 值来判断是否开启 vue 组件缓存，这里就先不做演示了。</li>
<li>icon 用来设置菜单栏图标。</li>
</ul>
<h1 id="定义-permission-js-进行路由拦截，动态添加可访问路由表"><a href="#定义-permission-js-进行路由拦截，动态添加可访问路由表" class="headerlink" title="定义 permission.js 进行路由拦截，动态添加可访问路由表"></a>定义 permission.js 进行路由拦截，动态添加可访问路由表</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/auth&quot;</span>; <span class="comment">// getToken from localStorage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;404&quot;</span>]; <span class="comment">// no redirect whitelist</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (getToken()) &#123;</span><br><span class="line">    <span class="comment">/* has token*/</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        store</span><br><span class="line">          .dispatch(<span class="string">&quot;GetUserInfo&quot;</span>)</span><br><span class="line">          .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 拉取user_info</span></span><br><span class="line">            <span class="keyword">const</span> roles = res.data.roles; <span class="comment">// note: roles must be a array! such as: [&#x27;admin&#x27;,&#x27;market&#x27;]</span></span><br><span class="line">            store.dispatch(<span class="string">&quot;GenerateRoutes&quot;</span>, &#123; roles &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">              router.addRoutes(store.getters.addRouters); <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">              next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;); <span class="comment">// hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            store.dispatch(<span class="string">&quot;FedLogOut&quot;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              Message.error(err);</span><br><span class="line">              next(&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* has no token*/</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">      NProgress.done(); <span class="comment">// if current page is login will not trigger afterEach hook, so manually handle it</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>注意：permission.js 一定要在 main.js 中 import</strong></p>
<h1 id="使用-vuex-进行权限判断，动态生成对应权限的路由表"><a href="#使用-vuex-进行权限判断，动态生成对应权限的路由表" class="headerlink" title="使用 vuex 进行权限判断，动态生成对应权限的路由表"></a>使用 vuex 进行权限判断，动态生成对应权限的路由表</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; asyncRouterMap, constantRouterMap &#125; <span class="keyword">from</span> <span class="string">&quot;@/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过meta.role判断是否与当前用户权限匹配</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">roles</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">route</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPermission</span>(<span class="params">roles, route</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (route.meta &amp;&amp; route.meta.roles) &#123;</span><br><span class="line">    <span class="keyword">return</span> roles.some(<span class="function"><span class="params">role</span> =&gt;</span> route.meta.roles.includes(role));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归过滤异步路由表，返回符合用户角色权限的路由表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>routes asyncRouterMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">roles</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRouter</span>(<span class="params">routes, roles</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">  routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = &#123; ...route &#125;;</span><br><span class="line">    <span class="keyword">if</span> (hasPermission(roles, tmp)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tmp.children) &#123;</span><br><span class="line">        tmp.children = filterAsyncRouter(tmp.children, roles);</span><br><span class="line">      &#125;</span><br><span class="line">      res.push(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permission = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    routers: constantRouterMap,</span><br><span class="line">    addRouters: []</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_ROUTERS: <span class="function">(<span class="params">state, routers</span>) =&gt;</span> &#123;</span><br><span class="line">      state.addRouters = routers;</span><br><span class="line">      state.routers = constantRouterMap.concat(routers);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    GenerateRoutes(&#123; commit &#125;, data) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; roles &#125; = data;</span><br><span class="line">        <span class="keyword">let</span> accessedRouters;</span><br><span class="line">        accessedRouters = filterAsyncRouter(asyncRouterMap, roles);</span><br><span class="line">        commit(<span class="string">&quot;SET_ROUTERS&quot;</span>, accessedRouters);</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> permission;</span><br></pre></td></tr></table></figure>

<h1 id="使用-vuex-进行权限判断，动态生成对应权限的路由表-1"><a href="#使用-vuex-进行权限判断，动态生成对应权限的路由表-1" class="headerlink" title="使用 vuex 进行权限判断，动态生成对应权限的路由表"></a>使用 vuex 进行权限判断，动态生成对应权限的路由表</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/auth&quot;</span>; <span class="comment">// getToken from localStorage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;404&quot;</span>]; <span class="comment">// no redirect whitelist</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (getToken()) &#123;</span><br><span class="line">    <span class="comment">/* has token*/</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        store</span><br><span class="line">          .dispatch(<span class="string">&quot;GetUserInfo&quot;</span>)</span><br><span class="line">          .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 拉取user_info</span></span><br><span class="line">            <span class="keyword">const</span> roles = res.data.roles; <span class="comment">// note: roles must be a array! such as: [&#x27;admin&#x27;,&#x27;market&#x27;]</span></span><br><span class="line">            store.dispatch(<span class="string">&quot;GenerateRoutes&quot;</span>, &#123; roles &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">              router.addRoutes(store.getters.addRouters); <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">              next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;); <span class="comment">// hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            store.dispatch(<span class="string">&quot;FedLogOut&quot;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              Message.error(err);</span><br><span class="line">              next(&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* has no token*/</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">      NProgress.done(); <span class="comment">// if current page is login will not trigger afterEach hook, so manually handle it</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>注意：permission.js 一定要在 main.js 中 import</strong></p>
<h1 id="动态渲染菜单栏"><a href="#动态渲染菜单栏" class="headerlink" title="动态渲染菜单栏"></a>动态渲染菜单栏</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">wrapClass</span>=<span class="string">&quot;scrollbar-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu</span></span></span><br><span class="line"><span class="tag">      <span class="attr">mode</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:show-timeout</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:default-active</span>=<span class="string">&quot;$route.path&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">background-color</span>=<span class="string">&quot;#304156&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">text-color</span>=<span class="string">&quot;#bfcbd9&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">active-text-color</span>=<span class="string">&quot;#409EFF&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sidebar-item</span> <span class="attr">:routes</span>=<span class="string">&quot;permission_routers&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sidebar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> SidebarItem <span class="keyword">from</span> <span class="string">&quot;./SidebarItem&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123; SidebarItem &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="javascript">      ...mapGetters([<span class="string">&quot;permission_routers&quot;</span>])</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in routes&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">&quot;!item.hidden &amp;&amp; item.children&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">          hasOneShowingChildren(item.children) &amp;&amp;</span></span></span><br><span class="line"><span class="tag"><span class="string">          !item.children[0].children &amp;&amp;</span></span></span><br><span class="line"><span class="tag"><span class="string">          !item.alwaysShow</span></span></span><br><span class="line"><span class="tag"><span class="string">        &quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:to</span>=<span class="string">&quot;item.path + &#x27;/&#x27; + item.children[0].path&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;item.children[0].name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:class</span>=<span class="string">&quot;returnClass(index)&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;item.path + &#x27;/&#x27; + item.children[0].path&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg-icon</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;item.children[0].meta &amp;&amp; item.children[0].meta.icon&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:icon-class</span>=<span class="string">&quot;item.children[0].meta.icon&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;item.children[0].meta &amp;&amp; item.children[0].meta.title&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            &#123;&#123; generateTitle(item.children[0].meta.title) &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-else</span> <span class="attr">:index</span>=<span class="string">&quot;item.name || item.path&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg-icon</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;item.meta &amp;&amp; item.meta.icon&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:icon-class</span>=<span class="string">&quot;item.meta.icon&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.meta &amp;&amp; item.meta.title&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; generateTitle(item.meta.title) &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;child in item.children&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">sidebar-item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:is-nest</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;nest-menu&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;child.children &amp;&amp; child.children.length &gt; 0 &amp;&amp; !child.hidden&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:routes</span>=<span class="string">&quot;[child]&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;child.path&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">sidebar-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:to</span>=<span class="string">&quot;item.path + &#x27;/&#x27; + child.path&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;child.name&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;item.path + &#x27;/&#x27; + child.path&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">svg-icon</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-if</span>=<span class="string">&quot;child.meta &amp;&amp; child.meta.icon&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:icon-class</span>=<span class="string">&quot;child.meta.icon&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;child.meta &amp;&amp; child.meta.title&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123; generateTitle(child.meta.title) &#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; generateTitle &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/i18n&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;SidebarItem&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      routes: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      returnClass(index) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">&quot;item&quot;</span> + index;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      hasOneShowingChildren(children) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> showingChildren = children.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> !item.hidden;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        if (showingChildren.length === 1) &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      generateTitle</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3新特性简介</title>
    <url>/2021/02/04/vue/vue3/</url>
    <content><![CDATA[<h1 id="Compiler-原理篇"><a href="#Compiler-原理篇" class="headerlink" title="Compiler 原理篇"></a>Compiler 原理篇</h1><ul>
<li><p>静态 Node 不再作更新处理( hoiststatic-&gt;SSR 优化)</p>
</li>
<li><p>静态绑定的 class，id 不再作更新处理</p>
</li>
<li><p>结合打包标记 Patchflag,进行更新分析（动态绑定）</p>
</li>
<li><p>事件监听器 <code>Cache</code> 缓存处理(cacheHandlers)</p>
</li>
<li><p><code>hoiststatic</code> 自动针对多静态节点进行优化,输出字符串</p>
</li>
</ul>
<h1 id="vue2-中代码复用方法，如-Mixin，-Filters-都有缺陷"><a href="#vue2-中代码复用方法，如-Mixin，-Filters-都有缺陷" class="headerlink" title="vue2 中代码复用方法，如: Mixin， Filters 都有缺陷"></a>vue2 中代码复用方法，如: Mixin， Filters 都有缺陷</h1><ul>
<li>Mixin（命名空间冲突、逻辑不清晰、不易复用）</li>
<li>scoped slot 作用域插槽（配置项多、代码分裂、性能差）</li>
<li>vue2 对 TS 支持不充分</li>
</ul>
<h1 id="首先，先来看一些小的变化"><a href="#首先，先来看一些小的变化" class="headerlink" title="首先，先来看一些小的变化"></a>首先，先来看一些小的变化</h1><ul>
<li><p>生命周期更名：<br><code>destroyed</code> –&gt; <code>unmounted</code><br><code>beforeDestroy</code> –&gt; <code>beforeUnmount</code></p>
</li>
<li><p>data 选项始终声明为函数</p>
</li>
<li><p>删除 <code>$on</code>, <code>$off</code> 和 <code>$once</code> API</p>
</li>
<li><p>删除 <code>Filters API</code>，改用 <code>method</code> 和 <code>computed</code> 替换</p>
</li>
<li><p><code>v-on</code> 不再支持使用数字（即 <code>keyCodes</code>）作为修饰符，<code>config.keyCodes</code> 不再受支持</p>
</li>
<li><p>在 <code>v-enter</code> 过渡类已重命名为 <code>v-enter-from</code> 和 <code>v-leave</code> 过渡类已更名为 <code>v-leave-from</code></p>
</li>
</ul>
<h1 id="接下来看一些-Composition-API-的更改："><a href="#接下来看一些-Composition-API-的更改：" class="headerlink" title="接下来看一些 Composition API 的更改："></a>接下来看一些 Composition API 的更改：</h1><blockquote>
<p>为什么要用 Composition API？</p>
<p>组合式 API + 函数式编程（复杂组件逻辑进行分离）<br>组件间逻辑共享</p>
</blockquote>
<blockquote>
<p>Vue3.0 带来的变化</p>
<ul>
<li>性能提升 1.3 ~ 2x</li>
<li>TS 支持，新增: Fragment、 Teleport、 Suspense</li>
<li>按需加载（配合 vite） &amp; <code>组合 API</code></li>
</ul>
</blockquote>
<p><code>Fragment</code>: 不受根节点限制，渲染函数可接收 <code>Array</code><br><code>Teleport</code> 类似 <code>Portal</code>，随用随取，eg. 弹窗，Actions<br><code>Suspense</code> 嵌套的异步依赖，eg. <code>async setup()</code></p>
<p><strong>vue2 对于复杂逻辑组件，在后期变得无法维护。逻辑被拆分成：</strong></p>
<ul>
<li>components</li>
<li>props</li>
<li>data</li>
<li>computed</li>
<li>methods</li>
<li>生命周期的方法</li>
</ul>
<h2 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h2><p>vite：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init vite-app hello-vue3</span><br></pre></td></tr></table></figure>

<p>vue-cli：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create hello-vue3</span><br></pre></td></tr></table></figure>

<p>注：尤大写的 vite 捆绑了 rollup 进行打包，而且具有以下特性：</p>
<ul>
<li>快速启动冷服务器</li>
<li>即时热模块更换（HMR）</li>
<li>真正的按需编译</li>
<li>更详细的日志信息</li>
</ul>
<h2 id="v-for-Array-Refs"><a href="#v-for-Array-Refs" class="headerlink" title="v-for Array Refs"></a>v-for Array Refs</h2><blockquote>
<p>v-for 循环绑定的 ref 可以更加灵活，且定义非常方便</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">for</span>=<span class="string">&quot;item in list&quot;</span> :ref=<span class="string">&quot;setItemRef&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: []</span><br><span class="line">      itemRefs: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setItemRef(el) &#123;</span><br><span class="line">      <span class="built_in">this</span>.itemRefs.push(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    <span class="built_in">this</span>.itemRefs = []</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.itemRefs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="defineAsyncComponent"><a href="#defineAsyncComponent" class="headerlink" title="defineAsyncComponent"></a>defineAsyncComponent</h2><p>定义异步组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ErrorComponent <span class="keyword">from</span> <span class="string">&quot;./components/ErrorComponent.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> LoadingComponent <span class="keyword">from</span> <span class="string">&quot;./components/LoadingComponent.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncPage = defineAsyncComponent(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./NextPage.vue&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncPageWithOptions = defineAsyncComponent(&#123;</span><br><span class="line">  loader: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./NextPage.vue&quot;</span>),</span><br><span class="line">  delay: <span class="number">200</span>,</span><br><span class="line">  timeout: <span class="number">3000</span>,</span><br><span class="line">  errorComponent: ErrorComponent,</span><br><span class="line">  loadingComponent: LoadingComponent</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Custom-Directives"><a href="#Custom-Directives" class="headerlink" title="Custom Directives"></a>Custom Directives</h2><p><strong>v-for</strong> 循环绑定的 ref 可以更加灵活，切定义非常方便</p>
<p><strong>bind</strong>: 一旦该指令被绑定到元素时执行。仅执行一次。<br><strong>inserted</strong>: 在将元素插入父 DOM 中时执行。<br><strong>update</strong>: 元素更新时调用此挂钩，但是子组件尚未更新。<br><strong>componentUpdated</strong>: 组件和子组件更新后，将调用此挂钩。<br><strong>unbind</strong>: 删除指令后将调用此钩子。也仅调用一次。</p>
<p><strong>bind</strong> 更名为 beforeMount<br><strong>inserted</strong> 更名为 mounted<br><strong>beforeUpdate</strong>: 这在元素本身更新之前被调用，就像组件生命周期挂钩一样。<br><strong>update</strong> 已删除<br><strong>componentUpdated</strong> 更名为 updated<br><strong>beforeUnmount</strong> 与组件生命周期挂钩类似，这将在卸载元素之前立即调用。<br><strong>unbind</strong> 更名为 unmounted</p>
<h2 id="Data-Option"><a href="#Data-Option" class="headerlink" title="Data Option"></a>Data Option</h2><p>合并 data 来自 mixin 或扩展的多个返回值时，合并现在较浅而不是较深（仅合并了根级属性）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mixin = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        name: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">        id: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CompA = &#123;</span><br><span class="line">  mixins: [Mixin],</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        id: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$data); <span class="comment">// &#123;user: &#123; id: 2 &#125;&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h2><p>组件现在可以具有多个根节点！但是，这确实需要开发人员明确定义属性应在何处分发。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Global-API"><a href="#Global-API" class="headerlink" title="Global API"></a>Global API</h2><p>新增 createApp 返回一个应用程序实例，现在可以将全局更改 Vue 行为的所有 API 移至应用程序实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;&#125;);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>2.x Global API</th>
<th>3.x Instance API</th>
</tr>
</thead>
<tbody><tr>
<td>Vue.config</td>
<td>app.config</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td>已移除</td>
</tr>
<tr>
<td>Vue.config.ignoredElements</td>
<td>app.config.isCustomElement</td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>app.use</td>
</tr>
</tbody></table>
<h2 id="key-attribute"><a href="#key-attribute" class="headerlink" title="key attribute"></a>key attribute</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- key 应该将放在 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>在自定义组件上使用时，<code>v-model</code>、<code>prop</code> 和 <code>event</code> 的默认名称已更改：</p>
<p><code>prop value</code>-&gt; <code>modelValue</code><br><code>event input</code>-&gt; update: <code>modelValue</code><br><code>v-model</code> 现在可以在同一组件上进行多个绑定；<br><code>v-bind</code> 的 <code>.sync</code> 修饰符和组件 model 选项已删除，并替换为 v-model 的一个参数；<br>添加了创建自定义 <code>v-model</code> 修饰符的功能；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">v-model</span>=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ChildComponent</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    modelValue: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changePageTitle(title) &#123;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;update:modelValue&quot;</span>, title);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="最后，我们再来看一些重大的变化"><a href="#最后，我们再来看一些重大的变化" class="headerlink" title="最后，我们再来看一些重大的变化"></a>最后，我们再来看一些重大的变化</h1><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><p>Vue3 响应式实现原理是通过 ES6 的 Proxy 实现的，但是对于 IE 浏览器，Vue3 也使用了 Object.defineProperty。<br>vue3 将 Vue.observable()重命名为 reactive，并提供了单独的分离。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>对于一个独立的原始值，Vue3 也提供了对应的响应式 API。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count.value); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">count.value++;</span><br><span class="line"><span class="built_in">console</span>.log(count.value); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><p>ES6 解构会破坏响应式，对于这种情况可以使用 toRefs 去避免。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> book = reactive(&#123;</span><br><span class="line">  author: <span class="string">&quot;Vue Team&quot;</span>,</span><br><span class="line">  year: <span class="string">&quot;2020&quot;</span>,</span><br><span class="line">  title: <span class="string">&quot;Vue 3 Guide&quot;</span>,</span><br><span class="line">  description: <span class="string">&quot;You are reading this book right now ;)&quot;</span>,</span><br><span class="line">  price: <span class="string">&quot;free&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; author, title &#125; = toRefs(book);</span><br><span class="line"></span><br><span class="line">title.value = <span class="string">&quot;Vue 3 Detailed Guide&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.title); <span class="comment">// &#x27;Vue 3 Detailed Guide&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h2><p>有时我们想避免响应式更改，可以使用 readonly。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, readonly &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> original = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copy = readonly(original);</span><br><span class="line"></span><br><span class="line">original.count++;</span><br><span class="line"></span><br><span class="line">copy.count++; <span class="comment">// warning: &quot;Set operation on key &#x27;count&#x27; failed: target is readonly.&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>有时我们需要依赖于其他状态的状态，可以通过计算属性来处理的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> plusOne = computed(&#123;</span><br><span class="line">  get: <span class="function">() =&gt;</span> count.value + <span class="number">1</span>,</span><br><span class="line">  set: <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    count.value = val - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">plusOne.value = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(count.value); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><p>为了监听响应式更改，可以使用该 watchEffect 方法，它立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。它会返回一个停止函数，通过显式调用可以停止侦听。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stop = watchEffect(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(count.value));</span><br><span class="line"><span class="comment">// -&gt; logs 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  count.value++;</span><br><span class="line">  <span class="comment">// -&gt; logs 1</span></span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// later</span></span><br><span class="line">stop();</span><br></pre></td></tr></table></figure>

<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>setup 将可重复部分及其功能提取到可重用的代码段中。<br>setup 选项接受 props 和 context 的函数，返回的所有内容都将暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; readersNumber &#125;&#125; &#123;&#123; book.title &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> readersNumber = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> book = reactive(&#123; <span class="attr">title</span>: <span class="string">&#x27;Vue 3 Guide&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expose to template</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      readersNumber,</span><br><span class="line">      book</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Provide-Inject"><a href="#Provide-Inject" class="headerlink" title="Provide / Inject"></a>Provide / Inject</h2><ul>
<li>在 setup() 中使用 provide 时，我们首先从 vue 显式导入 provide 方法。这使我们能够调用 provide 时来定义每个 property。</li>
<li>provide 函数允许你通过两个参数定义 property：</li>
<li>property 的 name ( 类型)</li>
<li>property 的 value</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- src/components/MyMap.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;MyMarker /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MyMarker <span class="keyword">from</span> <span class="string">&#x27;./MyMarker.vue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  components: &#123;</span></span><br><span class="line"><span class="string">    MyMarker</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  setup() &#123;</span></span><br><span class="line"><span class="string">    provide(&#x27;</span>location<span class="string">&#x27;, &#x27;</span>North Pole<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    provide(&#x27;</span>geolocation<span class="string">&#x27;, &#123;</span></span><br><span class="line"><span class="string">      longitude: 90,</span></span><br><span class="line"><span class="string">      latitude: 135</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 setup() 中使用 inject 时，还需要从 vue 显式导入它。一旦我们这样做了，我们就可以调用它来定义如何将它暴露给我们的组件。</li>
<li>inject 函数有两个参数：</li>
<li>要注入的 property 的名称</li>
<li>一个默认的值 (可选)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- src/components/MyMarker.vue --&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> userLocation = inject(<span class="string">&#x27;location&#x27;</span>, <span class="string">&#x27;The Universe&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> userGeolocation = inject(<span class="string">&#x27;geolocation&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      userLocation,</span><br><span class="line">      userGeolocation</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex 实现数据状态持久化</title>
    <url>/2019/08/08/vue/vuex-data-persistence/</url>
    <content><![CDATA[<h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><ol>
<li>State：</li>
</ol>
<p>vuex 中的数据源，我们需要保存的数据就保存在这里，可以在页面通过 this.$store.state 来获取我们定义的数据；</p>
<ol start="2">
<li>Getters：</li>
</ol>
<p>Getter 相当于 vue 中的 computed 计算属性，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算，这里我们可以通过定义 vuex 的 Getter 来获取，Getters 可以用于监听、state 中的值的变化，返回计算后的结果</p>
<ol start="3">
<li>Mutations：</li>
</ol>
<p>需要修改 store 中的值唯一的方法就是提交 mutation 来修改</p>
<ol start="4">
<li>Actions：</li>
</ol>
<p>提交一个 actions，在 actions 中提交 mutation 再去修改状态值</p>
<ol start="5">
<li>Module：</li>
</ol>
<p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。<br>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割</p>
<h1 id="数据状态持久化"><a href="#数据状态持久化" class="headerlink" title="数据状态持久化"></a>数据状态持久化</h1><blockquote>
<p>用过 vuex 的肯定会有这样一个痛点，就是刷新以后 vuex 里面存储的 state 就会被浏览器释放掉，因为我们的 state 都是存储在内存中的。<br>所以我们通过 vuex-persistedstate 这个插件，来实现将数据存储到本地</p>
</blockquote>
<ol>
<li>vuex 初始化就开始引入：</li>
<li>每次我们更新 vuex 的状态，localstorage 中的 vuex 也会随之改变.</li>
<li>vuex-persistedstate 默认使用 localStorage 来固化数据.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex-persistedstate</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&quot;vuex-persistedstate&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    app,</span><br><span class="line">    user</span><br><span class="line">  &#125;,</span><br><span class="line">  getters,</span><br><span class="line">  plugins: [createPersistedState()] <span class="comment">//加上这个就可以了</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="自定义存储方式"><a href="#自定义存储方式" class="headerlink" title="自定义存储方式"></a>自定义存储方式</h1><h2 id="使用-sessionStorage"><a href="#使用-sessionStorage" class="headerlink" title="使用 sessionStorage"></a>使用 sessionStorage</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [persistedState(&#123; <span class="attr">storage</span>: <span class="built_in">window</span>.sessionStorage &#125;)];</span><br></pre></td></tr></table></figure>

<h2 id="使用-cookie"><a href="#使用-cookie" class="headerlink" title="使用 cookie"></a>使用 cookie</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&quot;vuex-persistedstate&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Cookies <span class="keyword">from</span> <span class="string">&quot;js-cookie&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    createPersistedState(&#123;</span><br><span class="line">      storage: &#123;</span><br><span class="line">        getItem: <span class="function"><span class="params">key</span> =&gt;</span> Cookies.get(key),</span><br><span class="line">        setItem: <span class="function">(<span class="params">key, value</span>) =&gt;</span></span><br><span class="line">          Cookies.set(key, value, &#123; <span class="attr">expires</span>: <span class="number">3</span>, <span class="attr">secure</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">        removeItem: <span class="function"><span class="params">key</span> =&gt;</span> Cookies.remove(key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>watch 深度监听的优化</title>
    <url>/2020/04/30/vue/watch/</url>
    <content><![CDATA[<h4 id="用字符串的方法来取代深度监听-deep：true，深度监听底层一个一个得遍历，很浪费性能"><a href="#用字符串的方法来取代深度监听-deep：true，深度监听底层一个一个得遍历，很浪费性能" class="headerlink" title="用字符串的方法来取代深度监听 deep：true，深度监听底层一个一个得遍历，很浪费性能"></a>用字符串的方法来取代深度监听 deep：true，深度监听底层一个一个得遍历，很浪费性能</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; pValue &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;userName.name&quot;</span> /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="string">&quot;111111111&quot;</span>,</span><br><span class="line">      pValue: <span class="string">&quot;12&quot;</span>,</span><br><span class="line">      userName: &#123;</span><br><span class="line">        name: <span class="string">&quot;Mir.Wang&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    value(a, b) &#123;</span><br><span class="line">      <span class="comment">//监听input值，发生变化就会触发</span></span><br><span class="line">      <span class="built_in">this</span>.pValue = a;</span><br><span class="line">    &#125;,</span><br><span class="line">    pValue(a, b) &#123;</span><br><span class="line">      <span class="comment">//监听p标签得值，当input值发生变化时，设置了p标签的值，该函数就会触发</span></span><br><span class="line">      <span class="comment">//console.log(a,b)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;userName.name&quot;</span>(a, b) &#123;</span><br><span class="line">      <span class="comment">// 用字符串的方法来取代深度监听deep：true,//深度监听底层一个一个得遍历，很浪费性能</span></span><br><span class="line">      <span class="built_in">console</span>.log(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>web性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack开发devServer代理配置</title>
    <url>/2020/12/16/webpack/devServer-proxy/</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍如何使用 webpack-devServer 提供的代理服务解决跨域问题。</p>
</blockquote>
<h1 id="devServerdialing-配置"><a href="#devServerdialing-配置" class="headerlink" title="devServerdialing 配置"></a>devServerdialing 配置</h1><p><strong>预备条件：</strong></p>
<ol>
<li>需要使用本地开发插件：webpack-dev-server。</li>
<li>webpack 版本： 3.0 以上</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//将接口域名印射为/api</span></span><br><span class="line">        target: <span class="string">&quot;http://192.168.1.155:5005&quot;</span>, <span class="comment">// 接口域名</span></span><br><span class="line">        secure: <span class="literal">true</span>, <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">//是否跨域</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">//需要rewrite的,</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack核心简介</title>
    <url>/2020/12/16/webpack/intro/</url>
    <content><![CDATA[<blockquote>
<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器</p>
</blockquote>
<h1 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h1><p>entry 属性指定一个入口起点（或多个入口起点）。默认值为 ./src。</p>
<h2 id="单个入口（简写）语法"><a href="#单个入口（简写）语法" class="headerlink" title="单个入口（简写）语法"></a>单个入口（简写）语法</h2><p>用法：entry: string | Array</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">&quot;./path/to/my/entry/file.js&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">&quot;./path/to/my/entry/file.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 注：当向 entry 传入一个数组时，将创建多个主入口，并且将它们的依赖导向到一个依赖图。</span></span><br></pre></td></tr></table></figure>

<h2 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h2><p>用法：entry: {[entryChunkName: string]: string|Array}</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// entry: string | Array</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">&quot;./src/app.js&quot;</span>,</span><br><span class="line">    vendors: <span class="string">&quot;./src/vendors.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="output"><a href="#output" class="headerlink" title="output"></a>output</h1><p>output 属性指定 webpack 在哪里输出它所创建的包，以及如何命名这些文件，默认值为 ./dist。</p>
<h2 id="单入口用法"><a href="#单入口用法" class="headerlink" title="单入口用法"></a>单入口用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&quot;./path/to/my/entry/file.js&quot;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(_dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 输出包的绝对路径</span></span><br><span class="line">    filename: <span class="string">&quot;my-first-webpack.bundle.js&quot;</span>, <span class="comment">// 输出包的文件名</span></span><br><span class="line">    publicPath: <span class="string">&quot;/&quot;</span> <span class="comment">// 输出包中解析文件的目录</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 注： path 模块是 Node.js 的 API，这里不作为重点</span></span><br></pre></td></tr></table></figure>

<h2 id="多入口用法"><a href="#多入口用法" class="headerlink" title="多入口用法"></a>多入口用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    search: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;[name].js&#x27;</span>, <span class="comment">// [name]将会编译为 app | search</span></span><br><span class="line">    path: _dirname + <span class="string">&#x27;/dist&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注：通过占位符使没个文件具有唯一的名称</span></span><br></pre></td></tr></table></figure>

<h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><p>loader 熟悉指定 webpack 解析那些非 JavaScript 文件，并转换为 webpack 能够处理的有效模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&quot;my-first-webpack.bundle.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&quot;raw-loader&quot;</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br><span class="line"><span class="comment">// 注：test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。use 属性，表示进行转换时，应该使用哪个 loader。</span></span><br></pre></td></tr></table></figure>

<h1 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h1><p>插件则用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&quot;raw-loader&quot;</span> &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span> &#125;) <span class="comment">// 需要使用 new 来创建实例</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure>

<h1 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h1><p>通过设置模式来启用相应模式下的 webpack 内置的优化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&quot;production&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>支持以下字符串值：</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>development</td>
<td>会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td>
</tr>
<tr>
<td>production</td>
<td>会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Android WebView 调试方法</title>
    <url>/2020/12/08/webview/debug/</url>
    <content><![CDATA[<h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>Android4.4+</p>
<h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol>
<li>在 APP 中启用 WebView 调试，开启调试后，Chrome DevTools 才能对 WebView 进行远程调试；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">WebView.setWebContentsDebuggingEnabled(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li>
<li>通过访问 chrome://inspect/#devices 访问已启用调试的 WebView 列表；</li>
<li>调试 Webview 与远程调试普通页面相同，远程调试普通页面也就是在安卓手机中安装 Chrome 浏览器，使用 USB 连接 PC，然后在 PC 的 Chrome 浏览器中打开 chrome://inspect/#devices 即可。</li>
</ol>
]]></content>
      <categories>
        <category>webview</category>
      </categories>
      <tags>
        <tag>webview</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序的iOS和Android兼容问题</title>
    <url>/2019/08/09/wechat-applet/compatibility/</url>
    <content><![CDATA[<h1 id="margin-在-IOS-中失效"><a href="#margin-在-IOS-中失效" class="headerlink" title="margin 在 IOS 中失效"></a>margin 在 IOS 中失效</h1><p>在页面中元素使用 margin 值，在某些 IOS 设备下会出现失效的情况，而安卓机则正常显示，此问题暂无直接的解决方案，当前使用空 DIV 控制间距。</p>
<h1 id="fixed-定位问题"><a href="#fixed-定位问题" class="headerlink" title="fixed 定位问题"></a>fixed 定位问题</h1><p>整个页面的 fixed 定位，在 ios 下下拉会触发下拉事件，但是没有动画效果。Android 就能正常运行<br>flex 中使用 绝对定位，ios 出现严重错位，导致父级元素也会变成绝对定位，Android 能达到理想效果<br>总而言之 尽量不用 fixed</p>
<h1 id="absolute-定位问题"><a href="#absolute-定位问题" class="headerlink" title="absolute 定位问题"></a>absolute 定位问题</h1><ul>
<li>使用 absolute 定位，并且宽带设置了 100% 并且设置了 padding 就会导致屏幕宽度溢出，出现页面左右可以移动的 bug，模拟器上是没有问题，但是真机上是有这个问题的。这个问题让我调试并痛苦了许久</li>
<li>使用 absolute 并且当前元素是 flex 容器这种情况在 Ios 下面布局不会起到左右，会出现所有元素转换成了 absloute 并且文字错位</li>
<li>总而言之 尽量不用 absolute</li>
</ul>
<h1 id="word-spacing-在-button-中的问题"><a href="#word-spacing-在-button-中的问题" class="headerlink" title="word-spacing 在 button 中的问题"></a>word-spacing 在 button 中的问题</h1><p>有时候在使用大按钮的时候两个字中间希望有段间距，但是目前没有找到能使用的占位符，所以使用了的 word-spacing 加空格 这个方法来设置文字的间距，但是在 iPhone6s 上两个字中间一个空格的时候整体会向右偏，必须设置两个空格。</p>
<h1 id="相同代码存在效果差异"><a href="#相同代码存在效果差异" class="headerlink" title="相同代码存在效果差异"></a>相同代码存在效果差异</h1><p>在真机测试或者模拟器测试，总汇出现各种样式上的差异，造成原因比较多，因为不同的手机呈现的效果或者它本身采用的技术均存在差异，最终呈现的效果有时候就会出现较大的差别。但是这些差别一般都是在可以接受的范围。</p>
<h1 id="手写一个日历，为什么在安卓能遍历显示，而苹果里却不显示？"><a href="#手写一个日历，为什么在安卓能遍历显示，而苹果里却不显示？" class="headerlink" title="手写一个日历，为什么在安卓能遍历显示，而苹果里却不显示？"></a>手写一个日历，为什么在安卓能遍历显示，而苹果里却不显示？</h1><p>首先确定这并不是遍历的 bug,肯定是兼容性问题，遍历这是最基本的语法，问题肯定出在遍历的数据处理阶段，看了代码果不其然，结论就是：ios 系统的问题，比如 newDate(“2018-08-08”)，在 ios 会出现 NaN 的情况，ios 只支持 newDate(“2018/08/08”)</p>
<h1 id="video-视频格式-m3u8-在-ios-里边儿不能播放，但是安卓能正常播放？"><a href="#video-视频格式-m3u8-在-ios-里边儿不能播放，但是安卓能正常播放？" class="headerlink" title="video 视频格式 m3u8,在 ios 里边儿不能播放，但是安卓能正常播放？"></a>video 视频格式 m3u8,在 ios 里边儿不能播放，但是安卓能正常播放？</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>官方给的例子，是 mp4 格式的文件，ios 可以播放，微信小程序开发者平台的论坛也有类似的问题，但是没有准确的答案，我开始考虑转换下格式，奈何，技术不够，尝试添加在 image 标签 添加 custom-cache= ,data 中添加 cache:false 问题解决了。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;sbDress&#125;&#125;&quot;</span> <span class="attr">controls</span> <span class="attr">custom-cache</span>=<span class="string">&quot;&#123;&#123;cache&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="微信小程序-WxParse-包含图片安卓端无法加载"><a href="#微信小程序-WxParse-包含图片安卓端无法加载" class="headerlink" title="微信小程序 WxParse 包含图片安卓端无法加载"></a>微信小程序 WxParse 包含图片安卓端无法加载</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>wxparse 是微信小程序用于解析富文本编辑器生成代码的插件，用于展示一般的图文。在安卓手机端如果内容包含图片的标签时整个内容都无法加载出来，在手机端查看 console，发现安卓机在 console.dir()的时候报错，这是由于安卓机不支持 console.dir()的语法。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这是安卓机不支持 console.dir()的语法,使用 console.log()代替。</p>
<h1 id="安卓上图片会出现卡顿，变形，然后才会显示正常的图片大小"><a href="#安卓上图片会出现卡顿，变形，然后才会显示正常的图片大小" class="headerlink" title="安卓上图片会出现卡顿，变形，然后才会显示正常的图片大小"></a>安卓上图片会出现卡顿，变形，然后才会显示正常的图片大小</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>开发文档里写明：注：image 组件默认宽度 300px、高度 225px，开发时所有 image 的小图标都使用了 mode=”widthFixed”,只设置了宽度，让高度自适应，就会出现图片加载时初始化高度位 225px,加载完毕才显示 mode 的高度，由于安卓机这个卡顿教明显，才会出现瞬时的变形。</p>
<h2 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h2><p>今后使用 image 标签，尽量固定宽高。</p>
<h1 id="navigationBar-在安卓机中位置为左边，在苹果中居中显示，那么标题字数多了之后苹果就会默认使用…代替剩余的文字"><a href="#navigationBar-在安卓机中位置为左边，在苹果中居中显示，那么标题字数多了之后苹果就会默认使用…代替剩余的文字" class="headerlink" title=". navigationBar 在安卓机中位置为左边，在苹果中居中显示，那么标题字数多了之后苹果就会默认使用…代替剩余的文字"></a>. navigationBar 在安卓机中位置为左边，在苹果中居中显示，那么标题字数多了之后苹果就会默认使用…代替剩余的文字</h1><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>这个也不是 bug，只不过时显示问题，目前版本 6.6.0 里支持在 window 属性里设置 navigationStyle 由默认样式修改为 custom,支持自定义样式。所谓的自定义样式，就是默认导航，只剩一个胶囊的导航。</p>
<h2 id="结论-2"><a href="#结论-2" class="headerlink" title="结论"></a>结论</h2><p>app.json 里边儿设置 window{“navitionStyle”:”custom”},后要自己使用在 wxml，and wxss 里写样式显示头部的导航栏。</p>
<h1 id="IOS-上微信在输入框弹出键盘后，页面不恢复，下方有留白"><a href="#IOS-上微信在输入框弹出键盘后，页面不恢复，下方有留白" class="headerlink" title=". IOS 上微信在输入框弹出键盘后，页面不恢复，下方有留白"></a>. IOS 上微信在输入框弹出键盘后，页面不恢复，下方有留白</h1><p>输入框失去焦点（即键盘隐藏时），手动调整页面<br>补充: 当在手机号与验证码之间切换输入时,会同时触发前输入框的 blur 和后输入框 focus,这个时候触发滚动,页面会出现较大跳跃,因此通过 inFocus 和 setTimeout 判断,是切换 input 还是真正 blur,真正 blur 的时候,再滚动页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.activeElement.scrollIntoViewIfNeeded(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blurAdjust</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="built_in">document</span>.activeElement.tagName == <span class="string">&quot;INPUT&quot;</span> ||</span><br><span class="line">      <span class="built_in">document</span>.activeElement.tagName == <span class="string">&quot;TEXTAREA&quot;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;pc&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(iPhone|iPad|iPod|iOS)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">      <span class="comment">//判断iPhone|iPad|iPod|iOS</span></span><br><span class="line">      result = <span class="string">&quot;ios&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/(Android)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">      <span class="comment">//判断Android</span></span><br><span class="line">      result = <span class="string">&quot;android&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((result = <span class="string">&quot;ios&quot;</span>)) &#123;</span><br><span class="line">      <span class="built_in">document</span>.activeElement.scrollIntoViewIfNeeded(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;input,select&quot;</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> scrollHeight =</span><br><span class="line">      <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="built_in">Math</span>.max(scrollHeight - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>获取容器高度，使页面滚动到容器底部</title>
    <url>/2019/10/17/wechat-applet/pageScrollToBottom/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取容器高度，使页面滚动到容器底部</span></span><br><span class="line">pageScrollToBottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  wx.createSelectorQuery().select(<span class="string">&#x27;#j_page&#x27;</span>).boundingClientRect(<span class="function"><span class="keyword">function</span>(<span class="params">rect</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 使页面滚动到底部</span></span><br><span class="line">    wx.pageScrollTo(&#123;</span><br><span class="line">      scrollTop: rect.bottom</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).exec()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;wc-mes&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scroll-view</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;height: &#123;&#123;height&#125;&#125;px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scroll-x</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scroll-y</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scroll-top</span>=<span class="string">&quot;&#123;&#123;scrollTop&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scroll-content&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;wc-bar&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算滚动区域的高度</span></span><br><span class="line">calHeight() &#123;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">  wx.createSelectorQuery().select(<span class="string">&#x27;.wc-bar&#x27;</span>).boundingClientRect(<span class="function"><span class="keyword">function</span> (<span class="params">rect</span>) </span>&#123;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      height: wx.getSystemInfoSync().windowHeight - rect.height</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).exec();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算滚动的距离</span></span><br><span class="line">calScrollTop() &#123;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">  wx.createSelectorQuery().select(<span class="string">&#x27;.scroll-content&#x27;</span>).boundingClientRect(<span class="function"><span class="keyword">function</span> (<span class="params">rect</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(rect.height, that.data.height)</span><br><span class="line">    <span class="keyword">if</span> (rect.height &gt; that.data.height) &#123;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        scrollTop: rect.height</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        scrollTop: <span class="number">0</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>签名错误</title>
    <url>/2019/09/18/wechat-applet/signature/</url>
    <content><![CDATA[<h1 id="关于微信公众号开发-config-invalid-signature-错误的解决方法"><a href="#关于微信公众号开发-config-invalid-signature-错误的解决方法" class="headerlink" title="关于微信公众号开发 config:invalid signature 错误的解决方法"></a>关于微信公众号开发 config:invalid signature 错误的解决方法</h1><ol>
<li>确认签名算法正确，可用 <a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a> 页面工具进行校验。</li>
<li>确认 config 中 nonceStr（js 中驼峰标准大写 S）, timestamp 与用以签名中的对应 noncestr, timestamp 一致。</li>
<li>确认 url 是页面完整的 url(请在当前页面 alert(location.href.split(‘#’)[0])确认)，包括’http(s)://‘部分，以及’？’后面的 GET 参数部分,但不包括’#’hash 后面的部分。</li>
<li>确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。</li>
<li>确保一定缓存 access_token 和 jsapi_ticket。</li>
<li>html 的静态页面在前端通过 ajax 将 url 传到后台签名，前端需要用 js 获取当前页面除去’#’hash 部分的链接（可用 location.href.split(‘#’)[0]获取,而且需要 encodeURIComponent），因为页面一旦分享，微信客户端会在你的链接末尾加入其它参数，如果不是动态获取当前链接，将导致分享后的页面签名失败。</li>
</ol>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ol>
<li>首先你在页面 alert(location.href.split(‘#’)[0])；</li>
<li>然后你再打印出动态获取的 url 是否和你 alert 的地址是否一样。一定要一模一样，包括大小写。<br>如果发现不一样，那就按照自己的需求改。反正要一样。验证签名一定可以通过的。</li>
</ol>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>使用分包</title>
    <url>/2019/08/23/wechat-applet/subpackages/</url>
    <content><![CDATA[<h1 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h1><p>假设支持分包的小程序目录结构如下：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">├── <span class="keyword">app</span>.js</span><br><span class="line">├── <span class="keyword">app</span>.json</span><br><span class="line">├── <span class="keyword">app</span>.wxss</span><br><span class="line">├── packageA</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── <span class="keyword">cat</span></span><br><span class="line">│       └── dog</span><br><span class="line">├── packageB</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── apple</span><br><span class="line">│       └── banana</span><br><span class="line">├── pages</span><br><span class="line">│   ├── index</span><br><span class="line">│   └── logs</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure>

<p>开发者通过在 app.json subpackages 字段声明项目分包结构：</p>
<blockquote>
<p>写成 subPackages 也支持。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;pages&quot;</span>: [<span class="string">&quot;pages/index&quot;</span>, <span class="string">&quot;pages/logs&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;subpackages&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;packageA&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;pages&quot;</span>: [<span class="string">&quot;pages/cat&quot;</span>, <span class="string">&quot;pages/dog&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;packageB&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;pack2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;pages&quot;</span>: [<span class="string">&quot;pages/apple&quot;</span>, <span class="string">&quot;pages/banana&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>subpackages 中，每个分包的配置有以下几项：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>root</td>
<td>String</td>
<td>分包根目录</td>
</tr>
<tr>
<td>name</td>
<td>String</td>
<td>分包别名，分包预下载时可以使用</td>
</tr>
<tr>
<td>pages</td>
<td>StringArray</td>
<td>分包页面路径，相对与分包根目录</td>
</tr>
<tr>
<td>independent</td>
<td>Boolean</td>
<td>分包是否是独立分包</td>
</tr>
</tbody></table>
<h1 id="打包原则"><a href="#打包原则" class="headerlink" title="打包原则"></a>打包原则</h1><ul>
<li>声明 subpackages 后，将按 subpackages 配置路径进行打包，subpackages 配置路径外的目录将被打包到 app（主包） 中</li>
<li>app（主包）也可以有自己的 pages（即最外层的 pages 字段）</li>
<li>subpackage 的根目录不能是另外一个 subpackage 内的子目录</li>
<li>tabBar 页面必须在 app（主包）内</li>
</ul>
<h1 id="引用原则"><a href="#引用原则" class="headerlink" title="引用原则"></a>引用原则</h1><ul>
<li>packageA 无法 require packageB JS 文件，但可以 require app、自己 package 内的 JS 文件</li>
<li>packageA 无法 import packageB 的 template，但可以 require app、自己 package 内的 template</li>
<li>packageA 无法使用 packageB 的资源，但可以使用 app、自己 package 内的资源</li>
</ul>
<h1 id="低版本兼容"><a href="#低版本兼容" class="headerlink" title="低版本兼容"></a>低版本兼容</h1><ul>
<li>由微信后台编译来处理旧版本客户端的兼容，后台会编译两份代码包，一份是分包后代码，另外一份是整包的兼容代码。 新客户端用分包，老客户端还是用的整包，完整包会把各个 subpackage 里面的路径放到 pages 中</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS常用知识点总结</title>
    <url>/2020/12/16/css/common/</url>
    <content><![CDATA[<h1 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.overflow-text</span> &#123;</span><br><span class="line">    display: -webkit-box; //将对象作为弹性伸缩盒子模型显示</span><br><span class="line">    -webkit-box-orient: vertical; //设置或检索伸缩盒对象的子元素的排列方式</span><br><span class="line">    -webkit-line-clamp: 3; //用来限制在一个块元素显示的文本的行数</span><br><span class="line">    overflow: hidden; //溢出隐藏</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="未知高度元素水平垂直居中"><a href="#未知高度元素水平垂直居中" class="headerlink" title="未知高度元素水平垂直居中"></a>未知高度元素水平垂直居中</h1><p>方法有很多，这里只介绍一种，子元素代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="不增加元素清除浮动影响"><a href="#不增加元素清除浮动影响" class="headerlink" title="不增加元素清除浮动影响"></a>不增加元素清除浮动影响</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="不增加元素解决外边距溢出影响"><a href="#不增加元素解决外边距溢出影响" class="headerlink" title="不增加元素解决外边距溢出影响"></a>不增加元素解决外边距溢出影响</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="卡片式四周阴影"><a href="#卡片式四周阴影" class="headerlink" title="卡片式四周阴影"></a>卡片式四周阴影</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shadow</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">148</span>, <span class="number">148</span>, <span class="number">148</span>, <span class="number">0.4</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="点击穿透"><a href="#点击穿透" class="headerlink" title="点击穿透"></a>点击穿透</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.forbid-events</span> &#123;</span><br><span class="line">    pointer-events: none; //禁止元素成为鼠标事件的 target</span><br><span class="line">    pointer-events: auto; //与 pointer-events 属性未指定时的表现效果相同</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 pointer-events 来阻止元素成为鼠标事件目标不一定意味着元素上的事件侦听器永不会触发<br>如果元素后代明确指定了 pointer-events 属性并允许其成为鼠标事件的目标，那么指向该元素的任何事件在事件传播过程中都将通过父元素，并以适当的方式触发其上的事件侦听器<br>当然位于屏幕上在父元素上但不在后代元素上的鼠标活动都不会被父元素和后代元素捕获（将会穿过父元素而指向位于其下面的元素）</p>
<h1 id="calc-函数的使用"><a href="#calc-函数的使用" class="headerlink" title="calc()函数的使用"></a>calc()函数的使用</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.calc</span> &#123;</span><br><span class="line">    width: calc(100% - 10px); //calc 函数接受的值必须是一个数学表达式（expression）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>calc() 函数用于动态计算长度值。</strong></p>
<ul>
<li>需要注意的是，运算符前后都需要保留一个空格；</li>
<li>任何长度值都可以使用 calc()函数进行计算；</li>
<li>calc()函数支持 “+”, “-“, “*”, “/“ 运算；</li>
<li>calc()函数使用标准的数学运算优先级规则；</li>
</ul>
<h1 id="vw-和-vh-单位的使用"><a href="#vw-和-vh-单位的使用" class="headerlink" title="vw 和 vh 单位的使用"></a>vw 和 vh 单位的使用</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.vh</span> &#123;</span><br><span class="line">    width: 50vw; //元素宽度为视窗宽度的 50%</span><br><span class="line">    height: 80vh; //元素高度为视窗高度的 80%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相对于视口的宽度，视口被均分为 100 单位的 vw<br>相对于视口的高度。视口被均分为 100 单位的 vh<br>vw 和 vh 可以理解为相对于视窗宽高的百分比单位而不是相对于父元素</p>
<h1 id="filter-滤镜-的使用"><a href="#filter-滤镜-的使用" class="headerlink" title="filter(滤镜)的使用"></a>filter(滤镜)的使用</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    -webkit-filter: grayscale(100%);/_ Chrome,</span><br><span class="line">    <span class="selector-tag">Safari</span>,</span><br><span class="line">    Opera _/ filter: grayscale(100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>filter 接受的值：</strong></p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认值，没有效果。</td>
</tr>
<tr>
<td>blur(px)</td>
<td>给图像设置高斯模糊。”radius”一值设定高斯函数的标准差，或者是屏幕上以多少像素融在一起， 所以值越大越模糊；如果没有设定值，则默认是 0；这个参数可设置 css 长度值，但不接受百分比值。</td>
</tr>
<tr>
<td>brightness(%)</td>
<td>给图片应用一种线性乘法，使其看起来更亮或更暗。如果值是 0%，图像会全黑。值是 100%，则图像无变化。其他的值对应线性乘数效果。值超过 100%也是可以的，图像会比原来更亮。如果没有设定值，默认是 1。</td>
</tr>
<tr>
<td>contrast(%)</td>
<td>调整图像的对比度。值是 0%的话，图像会全黑。值是 100%，图像不变。值可以超过 100%，意味着会运用更低的对比。若没有设置值，默认是 1。</td>
</tr>
<tr>
<td>drop-shadow(h-shadow v-shadow blur spread color)</td>
<td>给图像设置一个阴影效果。阴影是合成在图像下面，可以有模糊度的，可以以特定颜色画出的遮罩图的偏移版本。 函数接受<shadow>(在 CSS3 背景中定义)类型的值，除了”inset”关键字是不允许的。该函数与已有的 box-shadow box-shadow 属性很相似；不同之处在于，通过滤镜，一些浏览器为了更好的性能会提供硬件加速<shadow>参数如<offset-x> <offset-y> (必须)这是设置阴影偏移量的两个<length>值. <offset-x> 设定水平方向距离. 负值会使阴影出现在元素左边. <offset-y>设定垂直距离. 负值会使阴影出现在元素上方。查看<length>可能的单位. 如果两个值都是 0, 则阴影出现在元素正后面 (如果设置了 <blur-radius> and/or <spread-radius>，会有模糊效果).<blur-radius>(可选)这是第三个 code&gt;<length>值. 值越大，越模糊，则阴影会变得更大更淡. 不允许负值 若未设定，默认是 0 (则阴影的边界很锐利).<spread-radius>(可选)这是第四个<length>值. 正值会使阴影扩张和变大，负值会是阴影缩小. 若未设定，默认是 0 (阴影会与元素一样大小). 注意: Webkit, 以及一些其他浏览器 不支持第四个长度，如果加了也不会渲染。<color>(可选)查看<color>该值可能的关键字和标记。若未设定，颜色值基于浏览器。在 Gecko (Firefox), Presto (Opera)和 Trident (Internet Explorer)中， 会应用 colorcolor 属性的值。另外, 如果颜色值省略，WebKit 中阴影是透明的。</td>
</tr>
<tr>
<td>grayscale(%)</td>
<td>将图像转换为灰度图像。值定义转换的比例。值为 100%则完全转为灰度图像，值为 0%图像无变化。值在 0%到 100%之间，则是效果的线性乘子。若未设置，值默认是</td>
</tr>
<tr>
<td>hue-rotate(deg)</td>
<td>给图像应用色相旋转。”angle”一值设定图像会被调整的色环角度值。值为 0deg，则图像无变化。若值未设置，默认值是 0deg。该值虽然没有最大值，超过 360deg 的值相当于又绕一圈。</td>
</tr>
<tr>
<td>invert(%)</td>
<td>反转输入图像。值定义转换的比例。100%的价值是完全反转。值为 0%则图像无变化。值在 0%和 100%之间，则是效果的线性乘子。 若值未设置，值默认是</td>
</tr>
<tr>
<td>opacity(%)</td>
<td>转化图像的透明程度。值定义转换的比例。值为 0%则是完全透明，值为 100%则图像无变化。值在 0%和 100%之间，则是效果的线性乘子，也相当于图像样本乘以数量。 若值未设置，值默认是 1。该函数与已有的 opacity 属性很相似，不同之处在于通过 filter，一些浏览器为了提升性能会提供硬件加速。</td>
</tr>
<tr>
<td>saturate(%)</td>
<td>转换图像饱和度。值定义转换的比例。值为 0%则是完全不饱和，值为 100%则图像无变化。其他值，则是效果的线性乘子。超过 100%的值是允许的，则有更高的饱和度。 若值未设置，值默认是 1。</td>
</tr>
<tr>
<td>sepia(%)</td>
<td>将图像转换为深褐色。值定义转换的比例。值为 100%则完全是深褐色的，值为 0%图像无变化。值在 0%到 100%之间，则是效果的线性乘子。若未设置，值默认是</td>
</tr>
<tr>
<td>url()</td>
<td>URL 函数接受一个 XML 文件，该文件设置了 一个 SVG 滤镜，且可以包含一个锚点来指定一个具体的滤镜元素。例如：filter: url(svg-url#element-id)</td>
</tr>
<tr>
<td>initial</td>
<td>设置属性为默认值</td>
</tr>
<tr>
<td>inherit</td>
<td>从父元素继承该属性</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>filter(滤镜)的使用</title>
    <url>/2019/12/04/css/filter/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  <span class="comment">/* Chrome, Safari, Opera */</span></span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="filter-接受的值"><a href="#filter-接受的值" class="headerlink" title="filter 接受的值"></a>filter 接受的值</h1><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认值，没有效果。</td>
</tr>
<tr>
<td>blur(px)</td>
<td>给图像设置高斯模糊。”radius”一值设定高斯函数的标准差，或者是屏幕上以多少像素融在一起， 所以值越大越模糊；如果没有设定值，则默认是 0；这个参数可设置 css 长度值，但不接受百分比值。</td>
</tr>
<tr>
<td>brightness(%)</td>
<td>给图片应用一种线性乘法，使其看起来更亮或更暗。如果值是 0%，图像会全黑。值是 100%，则图像无变化。其他的值对应线性乘数效果。值超过 100%也是可以的，图像会比原来更亮。如果没有设定值，默认是 1。</td>
</tr>
<tr>
<td>contrast(%)</td>
<td>调整图像的对比度。值是 0%的话，图像会全黑。值是 100%，图像不变。值可以超过 100%，意味着会运用更低的对比。若没有设置值，默认是 1。</td>
</tr>
<tr>
<td>drop-shadow(h-shadow v-shadow blur spread color)</td>
<td>给图像设置一个阴影效果。阴影是合成在图像下面，可以有模糊度的，可以以特定颜色画出的遮罩图的偏移版本。 函数接受<shadow>(在 CSS3 背景中定义)类型的值，除了”inset”关键字是不允许的。该函数与已有的 box-shadow box-shadow 属性很相似；不同之处在于，通过滤镜，一些浏览器为了更好的性能会提供硬件加速<shadow>参数如<offset-x> <offset-y> (必须)这是设置阴影偏移量的两个<length>值. <offset-x> 设定水平方向距离. 负值会使阴影出现在元素左边. <offset-y>设定垂直距离. 负值会使阴影出现在元素上方。查看<length>可能的单位. 如果两个值都是 0, 则阴影出现在元素正后面 (如果设置了 <blur-radius> and/or <spread-radius>，会有模糊效果).<blur-radius>(可选)这是第三个 code&gt;<length>值. 值越大，越模糊，则阴影会变得更大更淡. 不允许负值 若未设定，默认是 0 (则阴影的边界很锐利).<spread-radius>(可选)这是第四个<length>值. 正值会使阴影扩张和变大，负值会是阴影缩小. 若未设定，默认是 0 (阴影会与元素一样大小). 注意: Webkit, 以及一些其他浏览器 不支持第四个长度，如果加了也不会渲染。<color>(可选)查看<color>该值可能的关键字和标记。若未设定，颜色值基于浏览器。在 Gecko (Firefox), Presto (Opera)和 Trident (Internet Explorer)中， 会应用 colorcolor 属性的值。另外, 如果颜色值省略，WebKit 中阴影是透明的。</td>
</tr>
<tr>
<td>grayscale(%)</td>
<td>将图像转换为灰度图像。值定义转换的比例。值为 100%则完全转为灰度图像，值为 0%图像无变化。值在 0%到 100%之间，则是效果的线性乘子。若未设置，值默认是 0；</td>
</tr>
<tr>
<td>hue-rotate(deg)</td>
<td>给图像应用色相旋转。”angle”一值设定图像会被调整的色环角度值。值为 0deg，则图像无变化。若值未设置，默认值是 0deg。该值虽然没有最大值，超过 360deg 的值相当于又绕一圈。</td>
</tr>
<tr>
<td>invert(%)</td>
<td>反转输入图像。值定义转换的比例。100%的价值是完全反转。值为 0%则图像无变化。值在 0%和 100%之间，则是效果的线性乘子。 若值未设置，值默认是 0。</td>
</tr>
<tr>
<td>opacity(%)</td>
<td>转化图像的透明程度。值定义转换的比例。值为 0%则是完全透明，值为 100%则图像无变化。值在 0%和 100%之间，则是效果的线性乘子，也相当于图像样本乘以数量。 若值未设置，值默认是 1。该函数与已有的 opacity 属性很相似，不同之处在于通过 filter，一些浏览器为了提升性能会提供硬件加速。</td>
</tr>
<tr>
<td>saturate(%)</td>
<td>转换图像饱和度。值定义转换的比例。值为 0%则是完全不饱和，值为 100%则图像无变化。其他值，则是效果的线性乘子。超过 100%的值是允许的，则有更高的饱和度。 若值未设置，值默认是 1。</td>
</tr>
<tr>
<td>sepia(%)</td>
<td>将图像转换为深褐色。值定义转换的比例。值为 100%则完全是深褐色的，值为 0%图像无变化。值在 0%到 100%之间，则是效果的线性乘子。若未设置，值默认是 0；</td>
</tr>
<tr>
<td>url()</td>
<td>URL 函数接受一个 XML 文件，该文件设置了 一个 SVG 滤镜，且可以包含一个锚点来指定一个具体的滤镜元素。例如：filter: url(svg-url#element-id)</td>
</tr>
<tr>
<td>initial</td>
<td>设置属性为默认值。</td>
</tr>
<tr>
<td>inherit</td>
<td>从父元素继承该属性。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS操作</title>
    <url>/2021/01/14/dom/css/</url>
    <content><![CDATA[<p>CSS 与 JavaScript 是两个有着明确分工的领域，前者负责页面的视觉效果，后者负责与用户的行为互动。但是，它们毕竟同属网页开发的前端，因此不可避免有着交叉和互相配合。本节介绍如何通过 JavaScript 操作 CSS。</p>
<h1 id="HTML-元素的-style-属性"><a href="#HTML-元素的-style-属性" class="headerlink" title="HTML 元素的 style 属性"></a>HTML 元素的 style 属性</h1><p>操作 CSS 样式最简单的方法，就是使用网页元素节点的<code>getAttribute</code>方法、<code>setAttribute</code>方法和<code>removeAttribute</code>方法，直接读写或删除网页元素的<code>style</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;background-color:red;&quot;</span> + <span class="string">&quot;border:1px solid black;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面的代码相当于下面的 HTML 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red; border:1px solid black;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="CSSStyleDeclaration-接口"><a href="#CSSStyleDeclaration-接口" class="headerlink" title="CSSStyleDeclaration 接口"></a>CSSStyleDeclaration 接口</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSSStyleDeclaration 接口用来操作元素的样式。三个地方部署了这个接口。</p>
<ul>
<li>元素节点的<code>style</code>属性（<code>Element.style</code>）</li>
<li><code>CSSStyle</code>实例的<code>style</code>属性</li>
<li><code>window.getComputedStyle()</code>的返回值</li>
</ul>
<p>CSSStyleDeclaration 接口可以直接读写 CSS 的样式属性，不过，连词号需要变成骆驼拼写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divStyle = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>).style;</span><br><span class="line"></span><br><span class="line">divStyle.backgroundColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">divStyle.border = <span class="string">&quot;1px solid black&quot;</span>;</span><br><span class="line">divStyle.width = <span class="string">&quot;100px&quot;</span>;</span><br><span class="line">divStyle.height = <span class="string">&quot;100px&quot;</span>;</span><br><span class="line">divStyle.fontSize = <span class="string">&quot;10em&quot;</span>;</span><br><span class="line"></span><br><span class="line">divStyle.backgroundColor; <span class="comment">// red</span></span><br><span class="line">divStyle.border; <span class="comment">// 1px solid black</span></span><br><span class="line">divStyle.height; <span class="comment">// 100px</span></span><br><span class="line">divStyle.width; <span class="comment">// 100px</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>style</code>属性的值是一个 CSSStyleDeclaration 实例。这个对象所包含的属性与 CSS 规则一一对应，但是名字需要改写，比如<code>background-color</code>写成<code>backgroundColor</code>。改写的规则是将横杠从 CSS 属性名中去除，然后将横杠后的第一个字母大写。如果 CSS 属性名是 JavaScript 保留字，则规则名之前需要加上字符串<code>css</code>，比如<code>float</code>写成<code>cssFloat</code>。</p>
<p>注意，该对象的属性值都是字符串，设置时必须包括单位，但是不含规则结尾的分号。比如，<code>divStyle.width</code>不能写为<code>100</code>，而要写为<code>100px</code>。</p>
<p>另外，<code>Element.style</code>返回的只是行内样式，并不是该元素的全部样式。通过样式表设置的样式，或者从父元素继承的样式，无法通过这个属性得到。元素的全部样式要通过<code>window.getComputedStyle()</code>得到。</p>
<h2 id="CSSStyleDeclaration-实例属性"><a href="#CSSStyleDeclaration-实例属性" class="headerlink" title="CSSStyleDeclaration 实例属性"></a>CSSStyleDeclaration 实例属性</h2><p><strong>（1）CSSStyleDeclaration.cssText</strong></p>
<p><code>CSSStyleDeclaration.cssText</code>属性用来读写当前规则的所有样式声明文本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divStyle = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>).style;</span><br><span class="line"></span><br><span class="line">divStyle.cssText =</span><br><span class="line">  <span class="string">&quot;background-color: red;&quot;</span> +</span><br><span class="line">  <span class="string">&quot;border: 1px solid black;&quot;</span> +</span><br><span class="line">  <span class="string">&quot;height: 100px;&quot;</span> +</span><br><span class="line">  <span class="string">&quot;width: 100px;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>注意，<code>cssText</code>的属性值不用改写 CSS 属性名。</p>
<p>删除一个元素的所有行内样式，最简便的方法就是设置<code>cssText</code>为空字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">divStyle.cssText = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>（2）CSSStyleDeclaration.length</strong></p>
<p><code>CSSStyleDeclaration.length</code>属性返回一个整数值，表示当前规则包含多少条样式声明。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;myDiv&quot;</span></span><br><span class="line"><span class="comment">//   style=&quot;margin: 0 10px; background-color: #CA1; border: 1px solid red;&quot;</span></span><br><span class="line"><span class="comment">// &gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> divStyle = myDiv.style;</span><br><span class="line">divStyles.length; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>myDiv</code>元素的行内样式共包含 3 条样式规则。</p>
<p><strong>（3）CSSStyleDeclaration.parentRule</strong></p>
<p><code>CSSStyleDeclaration.parentRule</code>属性返回当前规则所属的那个样式块（CSSRule 实例）。如果不存在所属的样式块，该属性返回<code>null</code>。</p>
<p>该属性只读，且只在使用 CSSRule 接口时有意义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> declaration = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].rules[<span class="number">0</span>].style;</span><br><span class="line">declaration.parentRule === <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].rules[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="CSSStyleDeclaration-实例方法"><a href="#CSSStyleDeclaration-实例方法" class="headerlink" title="CSSStyleDeclaration 实例方法"></a>CSSStyleDeclaration 实例方法</h2><p><strong>（1）CSSStyleDeclaration.getPropertyPriority()</strong></p>
<p><code>CSSStyleDeclaration.getPropertyPriority</code>方法接受 CSS 样式的属性名作为参数，返回一个字符串，表示有没有设置<code>important</code>优先级。如果有就返回<code>important</code>，否则返回空字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;myDiv&quot; style=&quot;margin: 10px!important; color: red;&quot;/&gt;</span></span><br><span class="line"><span class="keyword">var</span> style = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).style;</span><br><span class="line">style.margin; <span class="comment">// &quot;10px&quot;</span></span><br><span class="line">style.getPropertyPriority(<span class="string">&quot;margin&quot;</span>); <span class="comment">// &quot;important&quot;</span></span><br><span class="line">style.getPropertyPriority(<span class="string">&quot;color&quot;</span>); <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>margin</code>属性有<code>important</code>优先级，<code>color</code>属性没有。</p>
<p><strong>（2）CSSStyleDeclaration.getPropertyValue()</strong></p>
<p><code>CSSStyleDeclaration.getPropertyValue</code>方法接受 CSS 样式属性名作为参数，返回一个字符串，表示该属性的属性值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;myDiv&quot; style=&quot;margin: 10px!important; color: red;&quot;/&gt;</span></span><br><span class="line"><span class="keyword">var</span> style = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).style;</span><br><span class="line">style.margin; <span class="comment">// &quot;10px&quot;</span></span><br><span class="line">style.getPropertyValue(<span class="string">&quot;margin&quot;</span>); <span class="comment">// &quot;10px&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>（3）CSSStyleDeclaration.item()</strong></p>
<p><code>CSSStyleDeclaration.item</code>方法接受一个整数值作为参数，返回该位置的 CSS 属性名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;myDiv&quot; style=&quot;color: red; background-color: white;&quot;/&gt;</span></span><br><span class="line"><span class="keyword">var</span> style = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).style;</span><br><span class="line">style.item(<span class="number">0</span>); <span class="comment">// &quot;color&quot;</span></span><br><span class="line">style.item(<span class="number">1</span>); <span class="comment">// &quot;background-color&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>0</code>号位置的 CSS 属性名是<code>color</code>，<code>1</code>号位置的 CSS 属性名是<code>background-color</code>。</p>
<p>如果没有提供参数，这个方法会报错。如果参数值超过实际的属性数目，这个方法返回一个空字符值。</p>
<p><strong>（4）CSSStyleDeclaration.removeProperty()</strong></p>
<p><code>CSSStyleDeclaration.removeProperty</code>方法接受一个属性名作为参数，在 CSS 规则里面移除这个属性，返回这个属性原来的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;myDiv&quot; style=&quot;color: red; background-color: white;&quot;&gt;</span></span><br><span class="line"><span class="comment">//   111</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> style = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).style;</span><br><span class="line">style.removeProperty(<span class="string">&quot;color&quot;</span>); <span class="comment">// &#x27;red&#x27;</span></span><br><span class="line"><span class="comment">// HTML 代码变为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;myDiv&quot; style=&quot;background-color: white;&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，删除<code>color</code>属性以后，字体颜色从红色变成默认颜色。</p>
<p><strong>（5）CSSStyleDeclaration.setProperty()</strong></p>
<p><code>CSSStyleDeclaration.setProperty</code>方法用来设置新的 CSS 属性。该方法没有返回值。</p>
<p>该方法可以接受三个参数。</p>
<ul>
<li>第一个参数：属性名，该参数是必需的。</li>
<li>第二个参数：属性值，该参数可选。如果省略，则参数值默认为空字符串。</li>
<li>第三个参数：优先级，该参数可选。如果设置，唯一的合法值是<code>important</code>，表示 CSS 规则里面的<code>!important</code>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;myDiv&quot; style=&quot;color: red; background-color: white;&quot;&gt;</span></span><br><span class="line"><span class="comment">//   111</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> style = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).style;</span><br><span class="line">style.setProperty(<span class="string">&quot;border&quot;</span>, <span class="string">&quot;1px solid blue&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码执行后，<code>myDiv</code>元素就会出现蓝色的边框。</p>
<h1 id="CSS-模块的侦测"><a href="#CSS-模块的侦测" class="headerlink" title="CSS 模块的侦测"></a>CSS 模块的侦测</h1><p>CSS 的规格发展太快，新的模块层出不穷。不同浏览器的不同版本，对 CSS 模块的支持情况都不一样。有时候，需要知道当前浏览器是否支持某个模块，这就叫做“CSS 模块的侦测”。</p>
<p>一个比较普遍适用的方法是，判断元素的<code>style</code>对象的某个属性值是否为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> element.style.animationName === <span class="string">&quot;string&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> element.style.transform === <span class="string">&quot;string&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>如果该 CSS 属性确实存在，会返回一个字符串。即使该属性实际上并未设置，也会返回一个空字符串。如果该属性不存在，则会返回<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.style[<span class="string">&quot;maxWidth&quot;</span>]; <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="built_in">document</span>.body.style[<span class="string">&quot;maximumWidth&quot;</span>]; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>上面代码说明，这个浏览器支持<code>max-width</code>属性，但是不支持<code>maximum-width</code>属性。</p>
<p>注意，不管 CSS 属性名的写法带不带连词线，<code>style</code>属性上都能反映出该属性是否存在。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.style[<span class="string">&quot;backgroundColor&quot;</span>]; <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="built_in">document</span>.body.style[<span class="string">&quot;background-color&quot;</span>]; <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>另外，使用的时候，需要把不同浏览器的 CSS 前缀也考虑进去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"><span class="keyword">typeof</span> content.style[<span class="string">&quot;webkitAnimation&quot;</span>] === <span class="string">&quot;string&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>这种侦测方法可以写成一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPropertySupported</span>(<span class="params">property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (property <span class="keyword">in</span> <span class="built_in">document</span>.body.style) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> prefixes = [<span class="string">&quot;Moz&quot;</span>, <span class="string">&quot;Webkit&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;ms&quot;</span>, <span class="string">&quot;Khtml&quot;</span>];</span><br><span class="line">  <span class="keyword">var</span> prefProperty = property.charAt(<span class="number">0</span>).toUpperCase() + property.substr(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; prefixes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prefixes[i] + prefProperty <span class="keyword">in</span> <span class="built_in">document</span>.body.style) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isPropertySupported(<span class="string">&quot;background-clip&quot;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="CSS-对象"><a href="#CSS-对象" class="headerlink" title="CSS 对象"></a>CSS 对象</h1><p>浏览器原生提供 CSS 对象，为 JavaScript 操作 CSS 提供一些工具方法。</p>
<p>这个对象目前有两个静态方法。</p>
<h2 id="CSS-escape"><a href="#CSS-escape" class="headerlink" title="CSS.escape()"></a>CSS.escape()</h2><p><code>CSS.escape</code>方法用于转义 CSS 选择器里面的特殊字符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;foo#bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，该元素的<code>id</code>属性包含一个<code>#</code>号，该字符在 CSS 选择器里面有特殊含义。不能直接写成<code>document.querySelector(&#39;#foo#bar&#39;)</code>，只能写成<code>document.querySelector(&#39;#foo\\#bar&#39;)</code>。这里必须使用双斜杠的原因是，单引号字符串本身会转义一次斜杠。</p>
<p><code>CSS.escape</code>方法就用来转义那些特殊字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;#&quot;</span> + CSS.escape(<span class="string">&quot;foo#bar&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="CSS-supports"><a href="#CSS-supports" class="headerlink" title="CSS.supports()"></a>CSS.supports()</h2><p><code>CSS.supports</code>方法返回一个布尔值，表示当前环境是否支持某一句 CSS 规则。</p>
<p>它的参数有两种写法，一种是第一个参数是属性名，第二个参数是属性值；另一种是整个参数就是一行完整的 CSS 语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line">CSS.supports(<span class="string">&quot;transform-origin&quot;</span>, <span class="string">&quot;5px&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line">CSS.supports(<span class="string">&quot;display: table-cell&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>注意，第二种写法的参数结尾不能带有分号，否则结果不准确。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">CSS.supports(<span class="string">&quot;display: table-cell;&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h1 id="window-getComputedStyle"><a href="#window-getComputedStyle" class="headerlink" title="window.getComputedStyle()"></a>window.getComputedStyle()</h1><p>行内样式（inline style）具有最高的优先级，改变行内样式，通常会立即反映出来。但是，网页元素最终的样式是综合各种规则计算出来的。因此，如果想得到元素实际的样式，只读取行内样式是不够的，需要得到浏览器最终计算出来的样式规则。</p>
<p><code>window.getComputedStyle</code>方法，就用来返回浏览器计算后得到的最终规则。它接受一个节点对象作为参数，返回一个 CSSStyleDeclaration 实例，包含了指定节点的最终样式信息。所谓“最终样式信息”，指的是各种 CSS 规则叠加后的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> styleObj = <span class="built_in">window</span>.getComputedStyle(div);</span><br><span class="line">styleObj.backgroundColor;</span><br></pre></td></tr></table></figure>

<p>上面代码中，得到的背景色就是<code>div</code>元素真正的背景色。</p>
<p>注意，CSSStyleDeclaration 实例是一个活的对象，任何对于样式的修改，会实时反映到这个实例上面。另外，这个实例是只读的。</p>
<p><code>getComputedStyle</code>方法还可以接受第二个参数，表示当前元素的伪元素（比如<code>:before</code>、<code>:after</code>、<code>:first-line</code>、<code>:first-letter</code>等）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">window</span>.getComputedStyle(div, <span class="string">&quot;:before&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>下面的例子是如何获取元素的高度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;elem-container&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> styleObj = <span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> height = styleObj.height;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> height = styleObj[<span class="string">&quot;height&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> height = styleObj.getPropertyValue(<span class="string">&quot;height&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码得到的<code>height</code>属性，是浏览器最终渲染出来的高度，比其他方法得到的高度更可靠。由于<code>styleObj</code>是 CSSStyleDeclaration 实例，所以可以使用各种 CSSStyleDeclaration 的实例属性和方法。</p>
<p>有几点需要注意。</p>
<ul>
<li>CSSStyleDeclaration 实例返回的 CSS 值都是绝对单位。比如，长度都是像素单位（返回值包括<code>px</code>后缀），颜色是<code>rgb(#, #, #)</code>或<code>rgba(#, #, #, #)</code>格式。</li>
<li>CSS 规则的简写形式无效。比如，想读取<code>margin</code>属性的值，不能直接读，只能读<code>marginLeft</code>、<code>marginTop</code>等属性；再比如，<code>font</code>属性也是不能直接读的，只能读<code>font-size</code>等单个属性。</li>
<li>如果读取 CSS 原始的属性名，要用方括号运算符，比如<code>styleObj[&#39;z-index&#39;]</code>；如果读取骆驼拼写法的 CSS 属性名，可以直接读取<code>styleObj.zIndex</code>。</li>
<li>该方法返回的 CSSStyleDeclaration 实例的<code>cssText</code>属性无效，返回<code>undefined</code>。</li>
</ul>
<h1 id="CSS-伪元素"><a href="#CSS-伪元素" class="headerlink" title="CSS 伪元素"></a>CSS 伪元素</h1><p>CSS 伪元素是通过 CSS 向 DOM 添加的元素，主要是通过<code>:before</code>和<code>:after</code>选择器生成，然后用<code>content</code>属性指定伪元素的内容。</p>
<p>下面是一段 HTML 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>Test content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 添加伪元素<code>:before</code>的写法如下。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#test</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Before &quot;</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>节点元素的<code>style</code>对象无法读写伪元素的样式，这时就要用到<code>window.getComputedStyle()</code>。JavaScript 获取伪元素，可以使用下面的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">window</span>.getComputedStyle(test, <span class="string">&quot;:before&quot;</span>).content;</span><br><span class="line"><span class="keyword">var</span> color = <span class="built_in">window</span>.getComputedStyle(test, <span class="string">&quot;:before&quot;</span>).color;</span><br></pre></td></tr></table></figure>

<p>此外，也可以使用 CSSStyleDeclaration 实例的<code>getPropertyValue</code>方法，获取伪元素的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">window</span></span><br><span class="line">  .getComputedStyle(test, <span class="string">&quot;:before&quot;</span>)</span><br><span class="line">  .getPropertyValue(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> color = <span class="built_in">window</span>.getComputedStyle(test, <span class="string">&quot;:before&quot;</span>).getPropertyValue(<span class="string">&quot;color&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="StyleSheet-接口"><a href="#StyleSheet-接口" class="headerlink" title="StyleSheet 接口"></a>StyleSheet 接口</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>StyleSheet</code>接口代表网页的一张样式表，包括<code>&lt;link&gt;</code>元素加载的样式表和<code>&lt;style&gt;</code>元素内嵌的样式表。</p>
<p><code>document</code>对象的<code>styleSheets</code>属性，可以返回当前页面的所有<code>StyleSheet</code>实例（即所有样式表）。它是一个类似数组的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sheets = <span class="built_in">document</span>.styleSheets;</span><br><span class="line"><span class="keyword">var</span> sheet = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>];</span><br><span class="line">sheet <span class="keyword">instanceof</span> StyleSheet; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果是<code>&lt;style&gt;</code>元素嵌入的样式表，还有另一种获取<code>StyleSheet</code>实例的方法，就是这个节点元素的<code>sheet</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为 &lt;style id=&quot;myStyle&quot;&gt;&lt;/style&gt;</span></span><br><span class="line"><span class="keyword">var</span> myStyleSheet = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myStyle&quot;</span>).sheet;</span><br><span class="line">myStyleSheet <span class="keyword">instanceof</span> StyleSheet; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><p><code>StyleSheet</code>实例有以下属性。</p>
<p><strong>（1）StyleSheet.disabled</strong></p>
<p><code>StyleSheet.disabled</code>返回一个布尔值，表示该样式表是否处于禁用状态。手动设置<code>disabled</code>属性为<code>true</code>，等同于在<code>&lt;link&gt;</code>元素里面，将这张样式表设为<code>alternate stylesheet</code>，即该样式表将不会生效。</p>
<p>注意，<code>disabled</code>属性只能在 JavaScript 脚本中设置，不能在 HTML 语句中设置。</p>
<p><strong>（2）Stylesheet.href</strong></p>
<p><code>Stylesheet.href</code>返回样式表的网址。对于内嵌样式表，该属性返回<code>null</code>。该属性只读。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].href;</span><br></pre></td></tr></table></figure>

<p><strong>（3）StyleSheet.media</strong></p>
<p><code>StyleSheet.media</code>属性返回一个类似数组的对象（<code>MediaList</code>实例），成员是表示适用媒介的字符串。表示当前样式表是用于屏幕（screen），还是用于打印（print）或手持设备（handheld），或各种媒介都适用（all）。该属性只读，默认值是<code>screen</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].media.mediaText;</span><br><span class="line"><span class="comment">// &quot;all&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>MediaList</code>实例的<code>appendMedium</code>方法，用于增加媒介；<code>deleteMedium</code>方法用于删除媒介。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].media.appendMedium(<span class="string">&quot;handheld&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].media.deleteMedium(<span class="string">&quot;print&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>（4）StyleSheet.title</strong></p>
<p><code>StyleSheet.title</code>属性返回样式表的<code>title</code>属性。</p>
<p><strong>（5）StyleSheet.type</strong></p>
<p><code>StyleSheet.type</code>属性返回样式表的<code>type</code>属性，通常是<code>text/css</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].type; <span class="comment">// &quot;text/css&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>（6）StyleSheet.parentStyleSheet</strong></p>
<p>CSS 的<code>@import</code>命令允许在样式表中加载其他样式表。<code>StyleSheet.parentStyleSheet</code>属性返回包含了当前样式表的那张样式表。如果当前样式表是顶层样式表，则该属性返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (stylesheet.parentStyleSheet) &#123;</span><br><span class="line">  sheet = stylesheet.parentStyleSheet;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  sheet = stylesheet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（7）StyleSheet.ownerNode</strong></p>
<p><code>StyleSheet.ownerNode</code>属性返回<code>StyleSheet</code>对象所在的 DOM 节点，通常是<code>&lt;link&gt;</code>或<code>&lt;style&gt;</code>。对于那些由其他样式表引用的样式表，该属性为<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码为</span></span><br><span class="line"><span class="comment">// &lt;link rel=&quot;StyleSheet&quot; href=&quot;example.css&quot; type=&quot;text/css&quot; /&gt;</span></span><br><span class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].ownerNode; <span class="comment">// [object HTMLLinkElement]</span></span><br></pre></td></tr></table></figure>

<p><strong>（8）StyleSheet.cssRules</strong></p>
<p><code>StyleSheet.cssRules</code>属性指向一个类似数组的对象（<code>CSSRuleList</code>实例），里面每一个成员就是当前样式表的一条 CSS 规则。使用该规则的<code>cssText</code>属性，可以得到 CSS 规则对应的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sheet = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#styleElement&quot;</span>).sheet;</span><br><span class="line"></span><br><span class="line">sheet.cssRules[<span class="number">0</span>].cssText;</span><br><span class="line"><span class="comment">// &quot;body &#123; background-color: red; margin: 20px; &#125;&quot;</span></span><br><span class="line"></span><br><span class="line">sheet.cssRules[<span class="number">1</span>].cssText;</span><br><span class="line"><span class="comment">// &quot;p &#123; line-height: 1.4em; color: blue; &#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>每条 CSS 规则还有一个<code>style</code>属性，指向一个对象，用来读写具体的 CSS 命令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">styleSheet.cssRules[<span class="number">0</span>].style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">styleSheet.cssRules[<span class="number">1</span>].style.color = <span class="string">&quot;purple&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>（9）StyleSheet.ownerRule</strong></p>
<p>有些样式表是通过<code>@import</code>规则输入的，它的<code>ownerRule</code>属性会返回一个<code>CSSRule</code>实例，代表那行<code>@import</code>规则。如果当前样式表不是通过<code>@import</code>引入的，<code>ownerRule</code>属性返回<code>null</code>。</p>
<h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p><strong>（1）CSSStyleSheet.insertRule()</strong></p>
<p><code>CSSStyleSheet.insertRule</code>方法用于在当前样式表的插入一个新的 CSS 规则。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sheet = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#styleElement&quot;</span>).sheet;</span><br><span class="line">sheet.insertRule(<span class="string">&quot;#block &#123; color: white &#125;&quot;</span>, <span class="number">0</span>);</span><br><span class="line">sheet.insertRule(<span class="string">&quot;p &#123; color: red &#125;&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>该方法可以接受两个参数，第一个参数是表示 CSS 规则的字符串，这里只能有一条规则，否则会报错。第二个参数是该规则在样式表的插入位置（从 0 开始），该参数可选，默认为 0（即默认插在样式表的头部）。注意，如果插入位置大于现有规则的数目，会报错。</p>
<p>该方法的返回值是新插入规则的位置序号。</p>
<p>注意，浏览器对脚本在样式表里面插入规则有很多<a href="https://drafts.csswg.org/cssom/#insert-a-css-rule">限制</a>。所以，这个方法最好放在<code>try...catch</code>里使用。</p>
<p><strong>（2）CSSStyleSheet.deleteRule()</strong></p>
<p><code>CSSStyleSheet.deleteRule</code>方法用来在样式表里面移除一条规则，它的参数是该条规则在<code>cssRules</code>对象中的位置。该方法没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].deleteRule(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h1 id="实例：添加样式表"><a href="#实例：添加样式表" class="headerlink" title="实例：添加样式表"></a>实例：添加样式表</h1><p>网页添加样式表有两种方式。一种是添加一张内置样式表，即在文档中添加一个<code>&lt;style&gt;</code>节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">style.setAttribute(<span class="string">&quot;media&quot;</span>, <span class="string">&quot;screen&quot;</span>);</span><br><span class="line">style.innerHTML = <span class="string">&quot;body&#123;color:red&#125;&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(style);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">var</span> style = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.head.appendChild(style);</span><br><span class="line">  <span class="keyword">return</span> style;</span><br><span class="line">&#125;)();</span><br><span class="line">style.sheet.insertRule(<span class="string">&quot;.foo&#123;color:red;&#125;&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>另一种是添加外部样式表，即在文档中添加一个<code>&lt;link&gt;</code>节点，然后将<code>href</code>属性指向外部样式表的 URL。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> linkElm = <span class="built_in">document</span>.createElement(<span class="string">&quot;link&quot;</span>);</span><br><span class="line">linkElm.setAttribute(<span class="string">&quot;rel&quot;</span>, <span class="string">&quot;stylesheet&quot;</span>);</span><br><span class="line">linkElm.setAttribute(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text/css&quot;</span>);</span><br><span class="line">linkElm.setAttribute(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;reset-min.css&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.head.appendChild(linkElm);</span><br></pre></td></tr></table></figure>

<h1 id="CSSRuleList-接口"><a href="#CSSRuleList-接口" class="headerlink" title="CSSRuleList 接口"></a>CSSRuleList 接口</h1><p>CSSRuleList 接口是一个类似数组的对象，表示一组 CSS 规则，成员都是 CSSRule 实例。</p>
<p>获取 CSSRuleList 实例，一般是通过<code>StyleSheet.cssRules</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;style id=&quot;myStyle&quot;&gt;</span></span><br><span class="line"><span class="comment">//   h1 &#123; color: red; &#125;</span></span><br><span class="line"><span class="comment">//   p &#123; color: blue; &#125;</span></span><br><span class="line"><span class="comment">// &lt;/style&gt;</span></span><br><span class="line"><span class="keyword">var</span> myStyleSheet = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myStyle&quot;</span>).sheet;</span><br><span class="line"><span class="keyword">var</span> crl = myStyleSheet.cssRules;</span><br><span class="line">crl <span class="keyword">instanceof</span> CSSRuleList; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>CSSRuleList 实例里面，每一条规则（CSSRule 实例）可以通过<code>rules.item(index)</code>或者<code>rules[index]</code>拿到。CSS 规则的条数通过<code>rules.length</code>拿到。还是用上面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">crl[<span class="number">0</span>] <span class="keyword">instanceof</span> CSSRule; <span class="comment">// true</span></span><br><span class="line">crl.length; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>注意，添加规则和删除规则不能在 CSSRuleList 实例操作，而要在它的父元素 StyleSheet 实例上，通过<code>StyleSheet.insertRule()</code>和<code>StyleSheet.deleteRule()</code>操作。</p>
<h1 id="CSSRule-接口"><a href="#CSSRule-接口" class="headerlink" title="CSSRule 接口"></a>CSSRule 接口</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>一条 CSS 规则包括两个部分：CSS 选择器和样式声明。下面就是一条典型的 CSS 规则。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.myClass</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JavaScript 通过 CSSRule 接口操作 CSS 规则。一般通过 CSSRuleList 接口（<code>StyleSheet.cssRules</code>）获取 CSSRule 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;style id=&quot;myStyle&quot;&gt;</span></span><br><span class="line"><span class="comment">//   .myClass &#123;</span></span><br><span class="line"><span class="comment">//     color: red;</span></span><br><span class="line"><span class="comment">//     background-color: yellow;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &lt;/style&gt;</span></span><br><span class="line"><span class="keyword">var</span> myStyleSheet = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myStyle&quot;</span>).sheet;</span><br><span class="line"><span class="keyword">var</span> ruleList = myStyleSheet.cssRules;</span><br><span class="line"><span class="keyword">var</span> rule = ruleList[<span class="number">0</span>];</span><br><span class="line">rule <span class="keyword">instanceof</span> CSSRule; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="CSSRule-实例的属性"><a href="#CSSRule-实例的属性" class="headerlink" title="CSSRule 实例的属性"></a>CSSRule 实例的属性</h2><p><strong>（1）CSSRule.cssText</strong></p>
<p><code>CSSRule.cssText</code>属性返回当前规则的文本，还是使用上面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rule.cssText;</span><br><span class="line"><span class="comment">// &quot;.myClass &#123; color: red; background-color: yellow; &#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果规则是加载（<code>@import</code>）其他样式表，<code>cssText</code>属性返回<code>@import &#39;url&#39;</code>。</p>
<p><strong>（2）CSSRule.parentStyleSheet</strong></p>
<p><code>CSSRule.parentStyleSheet</code>属性返回当前规则所在的样式表对象（StyleSheet 实例），还是使用上面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rule.parentStyleSheet === myStyleSheet; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>（3）CSSRule.parentRule</strong></p>
<p><code>CSSRule.parentRule</code>属性返回包含当前规则的父规则，如果不存在父规则（即当前规则是顶层规则），则返回<code>null</code>。</p>
<p>父规则最常见的情况是，当前规则包含在<code>@media</code>规则代码块之中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;style id=&quot;myStyle&quot;&gt;</span></span><br><span class="line"><span class="comment">//   @supports (display: flex) &#123;</span></span><br><span class="line"><span class="comment">//     @media screen and (min-width: 900px) &#123;</span></span><br><span class="line"><span class="comment">//       article &#123;</span></span><br><span class="line"><span class="comment">//         display: flex;</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// &lt;/style&gt;</span></span><br><span class="line"><span class="keyword">var</span> myStyleSheet = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myStyle&quot;</span>).sheet;</span><br><span class="line"><span class="keyword">var</span> ruleList = myStyleSheet.cssRules;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rule0 = ruleList[<span class="number">0</span>];</span><br><span class="line">rule0.cssText;</span><br><span class="line"><span class="comment">// &quot;@supports (display: flex) &#123;</span></span><br><span class="line"><span class="comment">//    @media screen and (min-width: 900px) &#123;</span></span><br><span class="line"><span class="comment">//      article &#123; display: flex; &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">// &#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于这条规则内嵌其他规则，</span></span><br><span class="line"><span class="comment">// 所以它有 cssRules 属性，且该属性是 CSSRuleList 实例</span></span><br><span class="line">rule0.cssRules <span class="keyword">instanceof</span> CSSRuleList; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rule1 = rule0.cssRules[<span class="number">0</span>];</span><br><span class="line">rule1.cssText;</span><br><span class="line"><span class="comment">// &quot;@media screen and (min-width: 900px) &#123;</span></span><br><span class="line"><span class="comment">//   article &#123; display: flex; &#125;</span></span><br><span class="line"><span class="comment">// &#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rule2 = rule1.cssRules[<span class="number">0</span>];</span><br><span class="line">rule2.cssText;</span><br><span class="line"><span class="comment">// &quot;article &#123; display: flex; &#125;&quot;</span></span><br><span class="line"></span><br><span class="line">rule1.parentRule === rule0; <span class="comment">// true</span></span><br><span class="line">rule2.parentRule === rule1; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>（4）CSSRule.type</strong></p>
<p><code>CSSRule.type</code>属性返回一个整数值，表示当前规则的类型。</p>
<p>最常见的类型有以下几种。</p>
<ul>
<li>1：普通样式规则（CSSStyleRule 实例）</li>
<li>3：<code>@import</code>规则</li>
<li>4：<code>@media</code>规则（CSSMediaRule 实例）</li>
<li>5：<code>@font-face</code>规则</li>
</ul>
<h2 id="CSSStyleRule-接口"><a href="#CSSStyleRule-接口" class="headerlink" title="CSSStyleRule 接口"></a>CSSStyleRule 接口</h2><p>如果一条 CSS 规则是普通的样式规则（不含特殊的 CSS 命令），那么除了 CSSRule 接口，它还部署了 CSSStyleRule 接口。</p>
<p>CSSStyleRule 接口有以下两个属性。</p>
<p><strong>（1）CSSStyleRule.selectorText</strong></p>
<p><code>CSSStyleRule.selectorText</code>属性返回当前规则的选择器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stylesheet = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>];</span><br><span class="line">stylesheet.cssRules[<span class="number">0</span>].selectorText; <span class="comment">// &quot;.myClass&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意，这个属性是可写的。</p>
<p><strong>（2）CSSStyleRule.style</strong></p>
<p><code>CSSStyleRule.style</code>属性返回一个对象（CSSStyleDeclaration 实例），代表当前规则的样式声明，也就是选择器后面的大括号里面的部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;style id=&quot;myStyle&quot;&gt;</span></span><br><span class="line"><span class="comment">//   p &#123; color: red; &#125;</span></span><br><span class="line"><span class="comment">// &lt;/style&gt;</span></span><br><span class="line"><span class="keyword">var</span> styleSheet = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myStyle&quot;</span>).sheet;</span><br><span class="line">styleSheet.cssRules[<span class="number">0</span>].style <span class="keyword">instanceof</span> CSSStyleDeclaration;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>CSSStyleDeclaration 实例的<code>cssText</code>属性，可以返回所有样式声明，格式为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">styleSheet.cssRules[<span class="number">0</span>].style.cssText;</span><br><span class="line"><span class="comment">// &quot;color: red;&quot;</span></span><br><span class="line">styleSheet.cssRules[<span class="number">0</span>].selectorText;</span><br><span class="line"><span class="comment">// &quot;p&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSSMediaRule-接口"><a href="#CSSMediaRule-接口" class="headerlink" title="CSSMediaRule 接口"></a>CSSMediaRule 接口</h2><p>如果一条 CSS 规则是<code>@media</code>代码块，那么它除了 CSSRule 接口，还部署了 CSSMediaRule 接口。</p>
<p>该接口主要提供<code>media</code>属性和<code>conditionText</code>属性。前者返回代表<code>@media</code>规则的一个对象（MediaList 实例），后者返回<code>@media</code>规则的生效条件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;style id=&quot;myStyle&quot;&gt;</span></span><br><span class="line"><span class="comment">//   @media screen and (min-width: 900px) &#123;</span></span><br><span class="line"><span class="comment">//     article &#123; display: flex; &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &lt;/style&gt;</span></span><br><span class="line"><span class="keyword">var</span> styleSheet = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myStyle&quot;</span>).sheet;</span><br><span class="line">styleSheet.cssRules[<span class="number">0</span>] <span class="keyword">instanceof</span> CSSMediaRule;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">styleSheet.cssRules[<span class="number">0</span>].media;</span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    0: &quot;screen and (min-width: 900px)&quot;,</span></span><br><span class="line"><span class="comment">//    appendMedium: function,</span></span><br><span class="line"><span class="comment">//    deleteMedium: function,</span></span><br><span class="line"><span class="comment">//    item: function,</span></span><br><span class="line"><span class="comment">//    length: 1,</span></span><br><span class="line"><span class="comment">//    mediaText: &quot;screen and (min-width: 900px)&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">styleSheet.cssRules[<span class="number">0</span>].conditionText;</span><br><span class="line"><span class="comment">// &quot;screen and (min-width: 900px)&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="window-matchMedia"><a href="#window-matchMedia" class="headerlink" title="window.matchMedia()"></a>window.matchMedia()</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><code>window.matchMedia</code>方法用来将 CSS 的<a href="https://developer.mozilla.org/en-US/docs/DOM/Using_media_queries_from_code"><code>MediaQuery</code></a>条件语句，转换成一个 MediaQueryList 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mdl = <span class="built_in">window</span>.matchMedia(<span class="string">&quot;(min-width: 400px)&quot;</span>);</span><br><span class="line">mdl <span class="keyword">instanceof</span> MediaQueryList; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>注意，如果参数不是有效的<code>MediaQuery</code>条件语句，<code>window.matchMedia</code>不会报错，依然返回的一个 MediaQueryList 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.matchMedia(<span class="string">&quot;bad string&quot;</span>) <span class="keyword">instanceof</span> MediaQueryList; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="MediaQueryList-接口的实例属性"><a href="#MediaQueryList-接口的实例属性" class="headerlink" title="MediaQueryList 接口的实例属性"></a>MediaQueryList 接口的实例属性</h2><p>MediaQueryList 实例有三个属性。</p>
<p><strong>（1）MediaQueryList.media</strong></p>
<p><code>MediaQueryList.media</code>属性返回一个字符串，表示对应的 MediaQuery 条件语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mql = <span class="built_in">window</span>.matchMedia(<span class="string">&quot;(min-width: 400px)&quot;</span>);</span><br><span class="line">mql.media; <span class="comment">// &quot;(min-width: 400px)&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）MediaQueryList.matches</strong></p>
<p><code>MediaQueryList.matches</code>属性返回一个布尔值，表示当前页面是否符合指定的 MediaQuery 条件语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.matchMedia(<span class="string">&quot;(min-width: 400px)&quot;</span>).matches) &#123;</span><br><span class="line">  <span class="comment">/* 当前视口不小于 400 像素 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 当前视口小于 400 像素 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面的例子根据<code>mediaQuery</code>是否匹配当前环境，加载相应的 CSS 样式表。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">window</span>.matchMedia(<span class="string">&quot;(max-width: 700px)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result.matches) &#123;</span><br><span class="line">  <span class="keyword">var</span> linkElm = <span class="built_in">document</span>.createElement(<span class="string">&quot;link&quot;</span>);</span><br><span class="line">  linkElm.setAttribute(<span class="string">&quot;rel&quot;</span>, <span class="string">&quot;stylesheet&quot;</span>);</span><br><span class="line">  linkElm.setAttribute(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text/css&quot;</span>);</span><br><span class="line">  linkElm.setAttribute(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;small.css&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.head.appendChild(linkElm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（3）MediaQueryList.onchange</strong></p>
<p>如果 MediaQuery 条件语句的适配环境发生变化，会触发<code>change</code>事件。<code>MediaQueryList.onchange</code>属性用来指定<code>change</code>事件的监听函数。该函数的参数是<code>change</code>事件对象（MediaQueryListEvent 实例），该对象与 MediaQueryList 实例类似，也有<code>media</code>和<code>matches</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mql = <span class="built_in">window</span>.matchMedia(<span class="string">&quot;(max-width: 600px)&quot;</span>);</span><br><span class="line"></span><br><span class="line">mql.onchange = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.matches) &#123;</span><br><span class="line">    <span class="comment">/* 视口不超过 600 像素 */</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* 视口超过 600 像素 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>change</code>事件发生后，存在两种可能。一种是显示宽度从 700 像素以上变为以下，另一种是从 700 像素以下变为以上，所以在监听函数内部要判断一下当前是哪一种情况。</p>
<h2 id="MediaQueryList-接口的实例方法"><a href="#MediaQueryList-接口的实例方法" class="headerlink" title="MediaQueryList 接口的实例方法"></a>MediaQueryList 接口的实例方法</h2><p>MediaQueryList 实例有两个方法<code>MediaQueryList.addListener()</code>和<code>MediaQueryList.removeListener()</code>，用来为<code>change</code>事件添加或撤销监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mql = <span class="built_in">window</span>.matchMedia(<span class="string">&quot;(max-width: 600px)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定监听函数</span></span><br><span class="line">mql.addListener(mqCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销监听函数</span></span><br><span class="line">mql.removeListener(mqCallback);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mqCallback</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.matches) &#123;</span><br><span class="line">    <span class="comment">/* 视口不超过 600 像素 */</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* 视口超过 600 像素 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS-事件"><a href="#CSS-事件" class="headerlink" title="CSS 事件"></a>CSS 事件</h1><h2 id="transitionEnd-事件"><a href="#transitionEnd-事件" class="headerlink" title="transitionEnd 事件"></a>transitionEnd 事件</h2><p>CSS 的过渡效果（transition）结束后，触发<code>transitionEnd</code>事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">el.addEventListener(<span class="string">&quot;transitionend&quot;</span>, onTransitionEnd, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onTransitionEnd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Transition end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>transitionEnd</code>的事件对象具有以下属性。</p>
<ul>
<li><code>propertyName</code>：发生<code>transition</code>效果的 CSS 属性名。</li>
<li><code>elapsedTime</code>：<code>transition</code>效果持续的秒数，不含<code>transition-delay</code>的时间。</li>
<li><code>pseudoElement</code>：如果<code>transition</code>效果发生在伪元素，会返回该伪元素的名称，以“::”开头。如果不发生在伪元素上，则返回一个空字符串。</li>
</ul>
<p>实际使用<code>transitionend</code>事件时，可能需要添加浏览器前缀。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">el.addEventListener(<span class="string">&quot;webkitTransitionEnd&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  el.style.transition = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="animationstart-事件，animationend-事件，animationiteration-事件"><a href="#animationstart-事件，animationend-事件，animationiteration-事件" class="headerlink" title="animationstart 事件，animationend 事件，animationiteration 事件"></a>animationstart 事件，animationend 事件，animationiteration 事件</h2><p>CSS 动画有以下三个事件。</p>
<ul>
<li><p>animationstart 事件：动画开始时触发。</p>
</li>
<li><p>animationend 事件：动画结束时触发。</p>
</li>
<li><p>animationiteration 事件：开始新一轮动画循环时触发。如果 animation-iteration-count 属性等于 1，该事件不触发，即只播放一轮的 CSS 动画，不会触发 animationiteration 事件。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&quot;animationiteration&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;完成一次动画&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这三个事件的事件对象，都有 animationName 属性（返回产生过渡效果的 CSS 属性名）和 elapsedTime 属性（动画已经运行的秒数）。对于 animationstart 事件，elapsedTime 属性等于 0，除非 animation-delay 属性等于负值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;animation&quot;</span>);</span><br><span class="line"></span><br><span class="line">el.addEventListener(<span class="string">&quot;animationstart&quot;</span>, listener, <span class="literal">false</span>);</span><br><span class="line">el.addEventListener(<span class="string">&quot;animationend&quot;</span>, listener, <span class="literal">false</span>);</span><br><span class="line">el.addEventListener(<span class="string">&quot;animationiteration&quot;</span>, listener, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  <span class="keyword">switch</span> (e.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;animationstart&quot;</span>:</span><br><span class="line">      li.innerHTML = <span class="string">&quot;Started: elapsed time is &quot;</span> + e.elapsedTime;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;animationend&quot;</span>:</span><br><span class="line">      li.innerHTML = <span class="string">&quot;Ended: elapsed time is &quot;</span> + e.elapsedTime;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;animationiteration&quot;</span>:</span><br><span class="line">      li.innerHTML = <span class="string">&quot;New loop started at time &quot;</span> + e.elapsedTime;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;output&quot;</span>).appendChild(li);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的运行结果是下面的样子。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Started: elapsed time is 0 New loop started at time 3.01200008392334 New loop</span><br><span class="line">started at time 6.00600004196167 Ended: elapsed time is 9.234000205993652</span><br></pre></td></tr></table></figure>

<p>animation-play-state 属性可以控制动画的状态（暂停/播放），该属性需求加上浏览器前缀。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.style.webkitAnimationPlayState = <span class="string">&quot;paused&quot;</span>;</span><br><span class="line">element.style.webkitAnimationPlayState = <span class="string">&quot;running&quot;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>事件模型</title>
    <url>/2021/01/14/dom/event/</url>
    <content><![CDATA[<p>事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件，本章介绍 DOM 的事件编程。</p>
<h1 id="EventTarget-接口"><a href="#EventTarget-接口" class="headerlink" title="EventTarget 接口"></a>EventTarget 接口</h1><p>DOM 的事件操作（监听和触发），都定义在<code>EventTarget</code>接口。所有节点对象都部署了这个接口，其他一些需要事件通信的浏览器内置对象（比如，<code>XMLHttpRequest</code>、<code>AudioNode</code>、<code>AudioContext</code>）也部署了这个接口。</p>
<p>该接口主要提供三个实例方法。</p>
<ul>
<li><code>addEventListener</code>：绑定事件的监听函数</li>
<li><code>removeEventListener</code>：移除事件的监听函数</li>
<li><code>dispatchEvent</code>：触发事件</li>
</ul>
<h2 id="EventTarget-addEventListener"><a href="#EventTarget-addEventListener" class="headerlink" title="EventTarget.addEventListener()"></a>EventTarget.addEventListener()</h2><p><code>EventTarget.addEventListener()</code>用于在当前节点或对象上，定义一个特定事件的监听函数。一旦这个事件发生，就会执行监听函数。该方法没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">target.addEventListener(type, listener[, useCapture]);</span><br></pre></td></tr></table></figure>

<p>该方法接受三个参数。</p>
<ul>
<li><code>type</code>：事件名称，大小写敏感。</li>
<li><code>listener</code>：监听函数。事件发生时，会调用该监听函数。</li>
<li><code>useCapture</code>：布尔值，表示监听函数是否在捕获阶段（capture）触发（参见后文《事件的传播》部分），默认为<code>false</code>（监听函数只在冒泡阶段被触发）。该参数可选。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">button.addEventListener(<span class="string">&quot;click&quot;</span>, hello, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>button</code>节点的<code>addEventListener</code>方法绑定<code>click</code>事件的监听函数<code>hello</code>，该函数只在冒泡阶段触发。</p>
<p>关于参数，有两个地方需要注意。</p>
<p>首先，第二个参数除了监听函数，还可以是一个具有<code>handleEvent</code>方法的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">buttonElement.addEventListener(<span class="string">&quot;click&quot;</span>, &#123;</span><br><span class="line">  handleEvent: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>addEventListener</code>方法的第二个参数，就是一个具有<code>handleEvent</code>方法的对象。</p>
<p>其次，第三个参数除了布尔值<code>useCapture</code>，还可以是一个属性配置对象。该对象有以下属性。</p>
<blockquote>
<ul>
<li><code>capture</code>：布尔值，表示该事件是否在<code>捕获阶段</code>触发监听函数。</li>
<li><code>once</code>：布尔值，表示监听函数是否只触发一次，然后就自动移除。</li>
<li><code>passive</code>：布尔值，表示监听函数不会调用事件的<code>preventDefault</code>方法。如果监听函数调用了，浏览器将忽略这个要求，并在监控台输出一行警告。</li>
</ul>
</blockquote>
<p><code>addEventListener</code>方法可以为针对当前对象的同一个事件，添加多个不同的监听函数。这些函数按照添加顺序触发，即先添加先触发。如果为同一个事件多次添加同一个监听函数，该函数只会执行一次，多余的添加将自动被去除（不必使用<code>removeEventListener</code>方法手动去除）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>, hello, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>, hello, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>执行上面代码，点击文档只会输出一行<code>Hello world</code>。</p>
<p>如果希望向监听函数传递参数，可以用匿名函数包装一下监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">el.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    print(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码通过匿名函数，向监听函数<code>print</code>传递了一个参数。</p>
<p>监听函数内部的<code>this</code>，指向当前事件所在的那个对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;p id=&quot;para&quot;&gt;Hello&lt;/p&gt;</span></span><br><span class="line"><span class="keyword">var</span> para = <span class="built_in">document</span>.getElementById(<span class="string">&quot;para&quot;</span>);</span><br><span class="line">para.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.nodeName); <span class="comment">// &quot;P&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，监听函数内部的<code>this</code>指向事件所在的对象<code>para</code>。</p>
<h2 id="EventTarget-removeEventListener"><a href="#EventTarget-removeEventListener" class="headerlink" title="EventTarget.removeEventListener()"></a>EventTarget.removeEventListener()</h2><p><code>EventTarget.removeEventListener</code>方法用来移除<code>addEventListener</code>方法添加的事件监听函数。该方法没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&quot;click&quot;</span>, listener, <span class="literal">false</span>);</span><br><span class="line">div.removeEventListener(<span class="string">&quot;click&quot;</span>, listener, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p><code>removeEventListener</code>方法的参数，与<code>addEventListener</code>方法完全一致。它的第一个参数“事件类型”，大小写敏感。</p>
<p>注意，<code>removeEventListener</code>方法移除的监听函数，必须是<code>addEventListener</code>方法添加的那个监听函数，而且必须在同一个元素节点，否则无效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;, <span class="literal">false</span>);</span><br><span class="line">div.removeEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>removeEventListener</code>方法无效，因为监听函数不是同一个匿名函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.addEventListener(<span class="string">&quot;mousedown&quot;</span>, handleMouseDown, <span class="literal">true</span>);</span><br><span class="line">element.removeEventListener(<span class="string">&quot;mousedown&quot;</span>, handleMouseDown, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>removeEventListener</code>方法也是无效的，因为第三个参数不一样。</p>
<h2 id="EventTarget-dispatchEvent"><a href="#EventTarget-dispatchEvent" class="headerlink" title="EventTarget.dispatchEvent()"></a>EventTarget.dispatchEvent()</h2><p><code>EventTarget.dispatchEvent</code>方法在当前节点上触发指定事件，从而触发监听函数的执行。该方法返回一个布尔值，只要有一个监听函数调用了<code>Event.preventDefault()</code>，则返回值为<code>false</code>，否则为<code>true</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">target.dispatchEvent(event);</span><br></pre></td></tr></table></figure>

<p><code>dispatchEvent</code>方法的参数是一个<code>Event</code>对象的实例（详见《Event 对象》章节）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">para.addEventListener(<span class="string">&quot;click&quot;</span>, hello, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">para.dispatchEvent(event);</span><br></pre></td></tr></table></figure>

<p>上面代码在当前节点触发了<code>click</code>事件。</p>
<p>如果<code>dispatchEvent</code>方法的参数为空，或者不是一个有效的事件对象，将报错。</p>
<p>下面代码根据<code>dispatchEvent</code>方法的返回值，判断事件是否被取消了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canceled = !cb.dispatchEvent(event);</span><br><span class="line"><span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;事件取消&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;事件未取消&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="监听函数"><a href="#监听函数" class="headerlink" title="监听函数"></a>监听函数</h1><p>浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件，就会执行对应的监听函数。这是事件驱动编程模式（event-driven）的主要编程方式。</p>
<p>JavaScript 有三种方法，可以为事件绑定监听函数。</p>
<h2 id="HTML-的-on-属性"><a href="#HTML-的-on-属性" class="headerlink" title="HTML 的 on- 属性"></a>HTML 的 on- 属性</h2><p>HTML 语言允许在元素的属性中，直接定义某些事件的监听代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;doSomething()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;触发事件&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码为<code>body</code>节点的<code>load</code>事件、<code>div</code>节点的<code>click</code>事件，指定了监听代码。一旦事件发生，就会执行这段代码。</p>
<p>元素的事件监听属性，都是<code>on</code>加上事件名，比如<code>onload</code>就是<code>on + load</code>，表示<code>load</code>事件的监听代码。</p>
<p>注意，这些属性的值是将会执行的代码，而不是一个函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正确 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;doSomething()&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 错误 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一旦指定的事件发生，<code>on-</code>属性的值是原样传入 JavaScript 引擎执行。因此如果要执行函数，不要忘记加上一对圆括号。</p>
<p>使用这个方法指定的监听代码，只会在冒泡阶段触发。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&quot;console.log(2)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;console.log(1)&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;button&gt;</code>是<code>&lt;div&gt;</code>的子元素。<code>&lt;button&gt;</code>的<code>click</code>事件，也会触发<code>&lt;div&gt;</code>的<code>click</code>事件。由于<code>on-</code>属性的监听代码，只在冒泡阶段触发，所以点击结果是先输出<code>1</code>，再输出<code>2</code>，即事件从子元素开始冒泡到父元素。</p>
<p>直接设置<code>on-</code>属性，与通过元素节点的<code>setAttribute</code>方法设置<code>on-</code>属性，效果是一样的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">el.setAttribute(<span class="string">&quot;onclick&quot;</span>, <span class="string">&quot;doSomething()&quot;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// &lt;Element onclick=&quot;doSomething()&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="元素节点的事件属性"><a href="#元素节点的事件属性" class="headerlink" title="元素节点的事件属性"></a>元素节点的事件属性</h2><p>元素节点对象的事件属性，同样可以指定监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = doSomething;</span><br><span class="line"></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;触发事件&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用这个方法指定的监听函数，也是只会在冒泡阶段触发。</p>
<p>注意，这种方法与 HTML 的<code>on-</code>属性的差异是，它的值是函数名（<code>doSomething</code>），而不像后者，必须给出完整的监听代码（<code>doSomething()</code>）。</p>
<h2 id="EventTarget-addEventListener-1"><a href="#EventTarget-addEventListener-1" class="headerlink" title="EventTarget.addEventListener()"></a>EventTarget.addEventListener()</h2><p>所有 DOM 节点实例都有<code>addEventListener</code>方法，用来为该节点定义事件的监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>, doSomething, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p><code>addEventListener</code>方法的详细介绍，参见<code>EventTarget</code>章节。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面三种方法，第一种“HTML 的 on- 属性”，违反了 HTML 与 JavaScript 代码相分离的原则，将两者写在一起，不利于代码分工，因此不推荐使用。</p>
<p>第二种“元素节点的事件属性”的缺点在于，同一个事件只能定义一个监听函数，也就是说，如果定义两次<code>onclick</code>属性，后一次定义会覆盖前一次。因此，也不推荐使用。</p>
<p>第三种<code>EventTarget.addEventListener</code>是推荐的指定监听函数的方法。它有如下优点：</p>
<ul>
<li>同一个事件可以添加多个监听函数。</li>
<li>能够指定在哪个阶段（捕获阶段还是冒泡阶段）触发监听函数。</li>
<li>除了 DOM 节点，其他对象（比如<code>window</code>、<code>XMLHttpRequest</code>等）也有这个接口，它等于是整个 JavaScript 统一的监听函数接口。</li>
</ul>
<h1 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h1><p>监听函数内部的<code>this</code>指向触发事件的那个元素节点。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(this.id)&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行上面代码，点击后会输出<code>btn</code>。</p>
<p>其他两种监听函数的写法，<code>this</code>的指向也是如此。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">btn.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.id);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面两种写法，点击按钮以后也是输出<code>btn</code>。</p>
<h1 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h1><p>一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</p>
<ul>
<li><strong>第一阶段</strong>：从<code>window</code>对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。</li>
<li><strong>第二阶段</strong>：在目标节点上触发，称为“目标阶段”（target phase）。</li>
<li><strong>第三阶段</strong>：从目标节点传导回<code>window</code>对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。</li>
</ul>
<p>这种三阶段的传播模型，使得同一个事件会在多个节点上触发。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;div&gt;</code>节点之中有一个<code>&lt;p&gt;</code>节点。</p>
<p>如果对这两个节点，都设置<code>click</code>事件的监听函数（每个节点的捕获阶段和监听阶段，各设置一个监听函数），共计设置四个监听函数。然后，对<code>&lt;p&gt;</code>点击，<code>click</code>事件会触发四次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> phases = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;capture&quot;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&quot;target&quot;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&quot;bubble&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line">div.addEventListener(<span class="string">&quot;click&quot;</span>, callback, <span class="literal">true</span>);</span><br><span class="line">p.addEventListener(<span class="string">&quot;click&quot;</span>, callback, <span class="literal">true</span>);</span><br><span class="line">div.addEventListener(<span class="string">&quot;click&quot;</span>, callback, <span class="literal">false</span>);</span><br><span class="line">p.addEventListener(<span class="string">&quot;click&quot;</span>, callback, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tag = event.currentTarget.tagName;</span><br><span class="line">  <span class="keyword">var</span> phase = phases[event.eventPhase];</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Tag: &#x27;&quot;</span> + tag + <span class="string">&quot;&#x27;. EventPhase: &#x27;&quot;</span> + phase + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击以后的结果</span></span><br><span class="line"><span class="comment">// Tag: &#x27;DIV&#x27;. EventPhase: &#x27;capture&#x27;</span></span><br><span class="line"><span class="comment">// Tag: &#x27;P&#x27;. EventPhase: &#x27;target&#x27;</span></span><br><span class="line"><span class="comment">// Tag: &#x27;P&#x27;. EventPhase: &#x27;target&#x27;</span></span><br><span class="line"><span class="comment">// Tag: &#x27;DIV&#x27;. EventPhase: &#x27;bubble&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面代码表示，<code>click</code>事件被触发了四次：<code>&lt;div&gt;</code>节点的捕获阶段和冒泡阶段各 1 次，<code>&lt;p&gt;</code>节点的目标阶段触发了 2 次。</p>
<ol>
<li>捕获阶段：事件从<code>&lt;div&gt;</code>向<code>&lt;p&gt;</code>传播时，触发<code>&lt;div&gt;</code>的<code>click</code>事件；</li>
<li>目标阶段：事件从<code>&lt;div&gt;</code>到达<code>&lt;p&gt;</code>时，触发<code>&lt;p&gt;</code>的<code>click</code>事件；</li>
<li>冒泡阶段：事件从<code>&lt;p&gt;</code>传回<code>&lt;div&gt;</code>时，再次触发<code>&lt;div&gt;</code>的<code>click</code>事件。</li>
</ol>
<p>其中，<code>&lt;p&gt;</code>节点有两个监听函数（<code>addEventListener</code>方法第三个参数的不同，会导致绑定两个监听函数），因此它们都会因为<code>click</code>事件触发一次。所以，<code>&lt;p&gt;</code>会在<code>target</code>阶段有两次输出。</p>
<p>注意，浏览器总是假定<code>click</code>事件的目标节点，就是点击位置嵌套最深的那个节点（本例是<code>&lt;div&gt;</code>节点里面的<code>&lt;p&gt;</code>节点）。所以，<code>&lt;p&gt;</code>节点的捕获阶段和冒泡阶段，都会显示为<code>target</code>阶段。</p>
<p>事件传播的最上层对象是<code>window</code>，接着依次是<code>document</code>，<code>html</code>（<code>document.documentElement</code>）和<code>body</code>（<code>document.body</code>）。也就是说，上例的事件传播顺序，在捕获阶段依次为<code>window</code>、<code>document</code>、<code>html</code>、<code>body</code>、<code>div</code>、<code>p</code>，在冒泡阶段依次为<code>p</code>、<code>div</code>、<code>body</code>、<code>html</code>、<code>document</code>、<code>window</code>。</p>
<h1 id="事件的代理"><a href="#事件的代理" class="headerlink" title="事件的代理"></a>事件的代理</h1><p>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"></span><br><span class="line">ul.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.target.tagName.toLowerCase() === <span class="string">&quot;li&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>click</code>事件的监听函数定义在<code>&lt;ul&gt;</code>节点，但是实际上，它处理的是子节点<code>&lt;li&gt;</code>的<code>click</code>事件。这样做的好处是，只要定义一个监听函数，就能处理多个子节点的事件，而不用在每个<code>&lt;li&gt;</code>节点上定义监听函数。而且以后再添加子节点，监听函数依然有效。</p>
<p>如果希望事件到某个节点为止，不再传播，可以使用事件对象的<code>stopPropagation</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事件传播到 p 元素后，就不再向下传播了</span></span><br><span class="line">p.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件冒泡到 p 元素后，就不再向上冒泡了</span></span><br><span class="line">p.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>stopPropagation</code>方法分别在捕获阶段和冒泡阶段，阻止了事件的传播。</p>
<p>但是，<code>stopPropagation</code>方法只会阻止事件的传播，不会阻止该事件触发<code>&lt;p&gt;</code>节点的其他<code>click</code>事件的监听函数。也就是说，不是彻底取消<code>click</code>事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.stopPropagation();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 会触发</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>p</code>元素绑定了两个<code>click</code>事件的监听函数。<code>stopPropagation</code>方法只能阻止这个事件向其他元素传播。因此，第二个监听函数会触发。输出结果会先是 1，然后是 2。</p>
<p>如果想要彻底阻止这个事件的传播，不再触发后面所有<code>click</code>的监听函数，可以使用<code>stopImmediatePropagation</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.stopImmediatePropagation();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不会被触发</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>stopImmediatePropagation</code>方法可以彻底阻止这个事件传播，使得后面绑定的所有<code>click</code>监听函数都不再触发。所以，只会输出 1，不会输出 2。</p>
<h1 id="Event-对象概述"><a href="#Event-对象概述" class="headerlink" title="Event 对象概述"></a>Event 对象概述</h1><p>事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个<code>Event</code>对象，所有的事件都是这个对象的实例，或者说继承了<code>Event.prototype</code>对象。</p>
<p><code>Event</code>对象本身就是一个构造函数，可以用来生成新的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event = <span class="keyword">new</span> Event(type, options);</span><br></pre></td></tr></table></figure>

<p><code>Event</code>构造函数接受两个参数。第一个参数<code>type</code>是字符串，表示事件的名称；第二个参数<code>options</code>是一个对象，表示事件对象的配置。该对象主要有下面两个属性。</p>
<ul>
<li><code>bubbles</code>：布尔值，可选，默认为<code>false</code>，表示事件对象是否冒泡。</li>
<li><code>cancelable</code>：布尔值，可选，默认为<code>false</code>，表示事件是否可以被取消，即能否用<code>Event.preventDefault()</code>取消这个事件。一旦事件被取消，就好像从来没有发生过，不会触发浏览器对该事件的默认行为。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ev = <span class="keyword">new</span> Event(<span class="string">&quot;look&quot;</span>, &#123;</span><br><span class="line">  bubbles: <span class="literal">true</span>,</span><br><span class="line">  cancelable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(ev);</span><br></pre></td></tr></table></figure>

<p>上面代码新建一个<code>look</code>事件实例，然后使用<code>dispatchEvent</code>方法触发该事件。</p>
<p>注意，如果不是显式指定<code>bubbles</code>属性为<code>true</code>，生成的事件就只能在“捕获阶段”触发监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tag = event.currentTarget.tagName;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Tag: &quot;</span> + tag); <span class="comment">// 没有任何输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.addEventListener(<span class="string">&quot;click&quot;</span>, callback, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> click = <span class="keyword">new</span> Event(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">p.dispatchEvent(click);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>p</code>元素发出一个<code>click</code>事件，该事件默认不会冒泡。<code>div.addEventListener</code>方法指定在冒泡阶段监听，因此监听函数不会触发。如果写成<code>div.addEventListener(&#39;click&#39;, callback, true)</code>，那么在“捕获阶段”可以监听到这个事件。</p>
<p>另一方面，如果这个事件在<code>div</code>元素上触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.dispatchEvent(click);</span><br></pre></td></tr></table></figure>

<p>那么，不管<code>div</code>元素是在冒泡阶段监听，还是在捕获阶段监听，都会触发监听函数。因为这时<code>div</code>元素是事件的目标，不存在是否冒泡的问题，<code>div</code>元素总是会接收到事件，因此导致监听函数生效。</p>
<h1 id="Event-对象的实例属性"><a href="#Event-对象的实例属性" class="headerlink" title="Event 对象的实例属性"></a>Event 对象的实例属性</h1><h2 id="Event-bubbles，Event-eventPhase"><a href="#Event-bubbles，Event-eventPhase" class="headerlink" title="Event.bubbles，Event.eventPhase"></a>Event.bubbles，Event.eventPhase</h2><p><code>Event.bubbles</code>属性返回一个布尔值，表示当前事件是否会冒泡。该属性为只读属性，一般用来了解 Event 实例是否可以冒泡。前面说过，除非显式声明，<code>Event</code>构造函数生成的事件，默认是不冒泡的。</p>
<p><code>Event.eventPhase</code>属性返回一个整数常量，表示事件目前所处的阶段。该属性只读。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> phase = event.eventPhase;</span><br></pre></td></tr></table></figure>

<p><code>Event.eventPhase</code>的返回值有四种可能。</p>
<ul>
<li>0，事件目前没有发生。</li>
<li>1，事件目前处于捕获阶段，即处于从祖先节点向目标节点的传播过程中。</li>
<li>2，事件到达目标节点，即<code>Event.target</code>属性指向的那个节点。</li>
<li>3，事件处于冒泡阶段，即处于从目标节点向祖先节点的反向传播过程中。</li>
</ul>
<h2 id="Event-cancelable，Event-cancelBubble，event-defaultPrevented"><a href="#Event-cancelable，Event-cancelBubble，event-defaultPrevented" class="headerlink" title="Event.cancelable，Event.cancelBubble，event.defaultPrevented"></a>Event.cancelable，Event.cancelBubble，event.defaultPrevented</h2><p><code>Event.cancelable</code>属性返回一个布尔值，表示事件是否可以取消。该属性为只读属性，一般用来了解 Event 实例的特性。</p>
<p>大多数浏览器的原生事件是可以取消的。比如，取消<code>click</code>事件，点击链接将无效。但是除非显式声明，<code>Event</code>构造函数生成的事件，默认是不可以取消的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> evt = <span class="keyword">new</span> Event(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">evt.cancelable; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>当<code>Event.cancelable</code>属性为<code>true</code>时，调用<code>Event.preventDefault()</code>就可以取消这个事件，阻止浏览器对该事件的默认行为。</p>
<p>如果事件不能取消，调用<code>Event.preventDefault()</code>会没有任何效果。所以使用这个方法之前，最好用<code>Event.cancelable</code>属性判断一下是否可以取消。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preventEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.cancelable) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">&quot;This event couldn&#x27;t be canceled.&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.dir(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Event.cancelBubble</code>属性是一个布尔值，如果设为<code>true</code>，相当于执行<code>Event.stopPropagation()</code>，可以阻止事件的传播。</p>
<p><code>Event.defaultPrevented</code>属性返回一个布尔值，表示该事件是否调用过<code>Event.preventDefault</code>方法。该属性只读。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (event.defaultPrevented) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;该事件已经取消了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Event-currentTarget，Event-target"><a href="#Event-currentTarget，Event-target" class="headerlink" title="Event.currentTarget，Event.target"></a>Event.currentTarget，Event.target</h2><p><code>Event.currentTarget</code>属性返回事件当前所在的节点，即正在执行的监听函数所绑定的那个节点。</p>
<p><code>Event.target</code>属性返回原始触发事件的那个节点，即事件最初发生的节点。事件传播过程中，不同节点的监听函数内部的<code>Event.target</code>与<code>Event.currentTarget</code>属性的值是不一样的，前者总是不变的，后者则是指向监听函数所在的那个节点对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码为</span></span><br><span class="line"><span class="comment">// &lt;p id=&quot;para&quot;&gt;Hello &lt;em&gt;World&lt;/em&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === e.currentTarget); <span class="comment">// 总是 true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === e.target); <span class="comment">// 有可能不是 true</span></span><br><span class="line">  e.target.style.visibility = <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">para.addEventListener(<span class="string">&quot;click&quot;</span>, hide, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果在<code>para</code>节点的<code>&lt;em&gt;</code>子节点上面点击，则<code>e.target</code>指向<code>&lt;em&gt;</code>子节点，导致<code>&lt;em&gt;</code>子节点（即 World 部分）会不可见。如果点击 Hello 部分，则整个<code>para</code>都将不可见。</p>
<h2 id="Event-type"><a href="#Event-type" class="headerlink" title="Event.type"></a>Event.type</h2><p><code>Event.type</code>属性返回一个字符串，表示事件类型。事件的类型是在生成事件的时候。该属性只读。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> evt = <span class="keyword">new</span> Event(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">evt.type; <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Event-timeStamp"><a href="#Event-timeStamp" class="headerlink" title="Event.timeStamp"></a>Event.timeStamp</h2><p><code>Event.timeStamp</code>属性返回一个毫秒时间戳，表示事件发生的时间。它是相对于网页加载成功开始计算的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> evt = <span class="keyword">new</span> Event(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">evt.timeStamp; <span class="comment">// 3683.6999999995896</span></span><br></pre></td></tr></table></figure>

<p>它的返回值有可能是整数，也有可能是小数（高精度时间戳），取决于浏览器的设置。</p>
<p>下面是一个计算鼠标移动速度的例子，显示每秒移动的像素数量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> previousX;</span><br><span class="line"><span class="keyword">var</span> previousY;</span><br><span class="line"><span class="keyword">var</span> previousT;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    previousX !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">    previousY !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">    previousT !== <span class="literal">undefined</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">var</span> deltaX = event.screenX - previousX;</span><br><span class="line">    <span class="keyword">var</span> deltaY = event.screenY - previousY;</span><br><span class="line">    <span class="keyword">var</span> deltaD = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(deltaX, <span class="number">2</span>) + <span class="built_in">Math</span>.pow(deltaY, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deltaT = event.timeStamp - previousT;</span><br><span class="line">    <span class="built_in">console</span>.log((deltaD / deltaT) * <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  previousX = event.screenX;</span><br><span class="line">  previousY = event.screenY;</span><br><span class="line">  previousT = event.timeStamp;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Event-isTrusted"><a href="#Event-isTrusted" class="headerlink" title="Event.isTrusted"></a>Event.isTrusted</h2><p><code>Event.isTrusted</code>属性返回一个布尔值，表示该事件是否由真实的用户行为产生。比如，用户点击链接会产生一个<code>click</code>事件，该事件是用户产生的；<code>Event</code>构造函数生成的事件，则是脚本产生的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> evt = <span class="keyword">new</span> Event(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">evt.isTrusted; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>evt</code>对象是脚本产生的，所以<code>isTrusted</code>属性返回<code>false</code>。</p>
<h2 id="Event-detail"><a href="#Event-detail" class="headerlink" title="Event.detail"></a>Event.detail</h2><p><code>Event.detail</code>属性只有浏览器的 UI （用户界面）事件才具有。该属性返回一个数值，表示事件的某种信息。具体含义与事件类型相关。比如，对于<code>click</code>和<code>dbclick</code>事件，<code>Event.detail</code>是鼠标按下的次数（<code>1</code>表示单击，<code>2</code>表示双击，<code>3</code>表示三击）；对于鼠标滚轮事件，<code>Event.detail</code>是滚轮正向滚动的距离，负值就是负向滚动的距离，返回值总是 3 的倍数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;p&gt;Hello&lt;/p&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">giveDetails</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.detail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>).onclick = giveDetails;</span><br></pre></td></tr></table></figure>

<h1 id="Event-对象的实例方法"><a href="#Event-对象的实例方法" class="headerlink" title="Event 对象的实例方法"></a>Event 对象的实例方法</h1><h2 id="Event-preventDefault"><a href="#Event-preventDefault" class="headerlink" title="Event.preventDefault()"></a>Event.preventDefault()</h2><p><code>Event.preventDefault</code>方法取消浏览器对当前事件的默认行为。比如点击链接后，浏览器默认会跳转到另一个页面，使用这个方法以后，就不会跳转了；再比如，按一下空格键，页面向下滚动一段距离，使用这个方法以后也不会滚动了。该方法生效的前提是，事件对象的<code>cancelable</code>属性为<code>true</code>，如果为<code>false</code>，调用该方法没有任何效果。</p>
<p>注意，该方法只是取消事件对当前元素的默认影响，不会阻止事件的传播。如果要阻止传播，可以使用<code>stopPropagation()</code>或<code>stopImmediatePropagation()</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;input type=&quot;checkbox&quot; id=&quot;my-checkbox&quot; /&gt;</span></span><br><span class="line"><span class="keyword">var</span> cb = <span class="built_in">document</span>.getElementById(<span class="string">&quot;my-checkbox&quot;</span>);</span><br><span class="line"></span><br><span class="line">cb.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，浏览器的默认行为是单击会选中单选框，取消这个行为，就导致无法选中单选框。</p>
<p>利用这个方法，可以为文本输入框设置校验条件。如果用户的输入不符合条件，就无法将字符输入文本框。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;input type=&quot;text&quot; id=&quot;my-input&quot; /&gt;</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;my-input&quot;</span>);</span><br><span class="line">input.addEventListener(<span class="string">&quot;keypress&quot;</span>, checkName, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.charCode &lt; <span class="number">97</span> || e.charCode &gt; <span class="number">122</span>) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码为文本框的<code>keypress</code>事件设定监听函数后，将只能输入小写字母，否则输入事件的默认行为（写入文本框）将被取消，导致不能向文本框输入内容。</p>
<h2 id="Event-stopPropagation"><a href="#Event-stopPropagation" class="headerlink" title="Event.stopPropagation()"></a>Event.stopPropagation()</h2><p><code>stopPropagation</code>方法阻止事件在 DOM 中继续传播，防止再触发定义在别的节点上的监听函数，但是不包括在当前节点上其他的事件监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">el.addEventListener(<span class="string">&quot;click&quot;</span>, stopEvent, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>click</code>事件将不会进一步冒泡到<code>el</code>节点的父节点。</p>
<h2 id="Event-stopImmediatePropagation"><a href="#Event-stopImmediatePropagation" class="headerlink" title="Event.stopImmediatePropagation()"></a>Event.stopImmediatePropagation()</h2><p><code>Event.stopImmediatePropagation</code>方法阻止同一个事件的其他监听函数被调用，不管监听函数定义在当前节点还是其他节点。也就是说，该方法阻止事件的传播，比<code>Event.stopPropagation()</code>更彻底。</p>
<p>如果同一个节点对于同一个事件指定了多个监听函数，这些函数会根据添加的顺序依次调用。只要其中有一个监听函数调用了<code>Event.stopImmediatePropagation</code>方法，其他的监听函数就不会再执行了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">l1</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopImmediatePropagation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">l2</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">el.addEventListener(<span class="string">&quot;click&quot;</span>, l1, <span class="literal">false</span>);</span><br><span class="line">el.addEventListener(<span class="string">&quot;click&quot;</span>, l2, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码在<code>el</code>节点上，为<code>click</code>事件添加了两个监听函数<code>l1</code>和<code>l2</code>。由于<code>l1</code>调用了<code>event.stopImmediatePropagation</code>方法，所以<code>l2</code>不会被调用。</p>
<h2 id="Event-composedPath"><a href="#Event-composedPath" class="headerlink" title="Event.composedPath()"></a>Event.composedPath()</h2><p><code>Event.composedPath()</code>返回一个数组，成员是事件的最底层节点和依次冒泡经过的所有上层节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div&gt;</span></span><br><span class="line"><span class="comment">//   &lt;p&gt;Hello&lt;/p&gt;</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line">div.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.composedPath());</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// [p, div, body, html, document, Window]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>click</code>事件的最底层节点是<code>p</code>，向上依次是<code>div</code>、<code>body</code>、<code>html</code>、<code>document</code>、<code>Window</code>。</p>
<h1 id="CustomEvent-接口"><a href="#CustomEvent-接口" class="headerlink" title="CustomEvent 接口"></a>CustomEvent 接口</h1><p>CustomEvent 接口用于生成自定义的事件实例。那些浏览器预定义的事件，虽然可以手动生成，但是往往不能在事件上绑定数据。如果需要在触发事件的同时，传入指定的数据，就可以使用 CustomEvent 接口生成的自定义事件对象。</p>
<p>浏览器原生提供<code>CustomEvent()</code>构造函数，用来生成 CustomEvent 事件实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CustomEvent(type, options);</span><br></pre></td></tr></table></figure>

<p><code>CustomEvent()</code>构造函数接受两个参数。第一个参数是字符串，表示事件的名字，这是必须的。第二个参数是事件的配置对象，这个参数是可选的。<code>CustomEvent</code>的配置对象除了接受 Event 事件的配置属性，只有一个自己的属性。</p>
<ul>
<li><code>detail</code>：表示事件的附带数据，默认为<code>null</code>。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> CustomEvent(<span class="string">&quot;build&quot;</span>, &#123; <span class="attr">detail</span>: <span class="string">&quot;hello&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.detail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">&quot;build&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.detail);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.dispatchEvent(event);</span><br></pre></td></tr></table></figure>

<p>上面代码中，我们手动定义了<code>build</code>事件。该事件触发后，会被监听到，从而输出该事件实例的<code>detail</code>属性（即字符串<code>hello</code>）。</p>
<p>下面是另一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myEvent = <span class="keyword">new</span> CustomEvent(<span class="string">&quot;myevent&quot;</span>, &#123;</span><br><span class="line">  detail: &#123;</span><br><span class="line">    foo: <span class="string">&quot;bar&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  bubbles: <span class="literal">true</span>,</span><br><span class="line">  cancelable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">el.addEventListener(<span class="string">&quot;myevent&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello &quot;</span> + event.detail.foo);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">el.dispatchEvent(myEvent);</span><br></pre></td></tr></table></figure>

<p>上面代码也说明，CustomEvent 的事件实例，除了具有 Event 接口的实例属性，还具有<code>detail</code>属性。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li>Wilson Page, <a href="http://coding.smashingmagazine.com/2013/11/12/an-introduction-to-dom-events/">An Introduction To DOM Events</a></li>
<li>Mozilla Developer Network, <a href="https://developer.mozilla.org/en-US/docs/Using_Firefox_1.5_caching">Using Firefox 1.5 caching</a></li>
<li>Craig Buckler, <a href="http://www.sitepoint.com/css3-animation-javascript-event-handlers/">How to Capture CSS3 Animation Events in JavaScript</a></li>
<li>Ray Nicholus, <a href="http://blog.garstasio.com/you-dont-need-jquery/events/">You Don’t Need jQuery!: Events</a></li>
</ul>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>Array 对象</title>
    <url>/2020/09/10/javascript/array/</url>
    <content><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p><code>Array</code>是 JavaScript 的原生对象，同时也是一个构造函数，可以用它生成新的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>);</span><br><span class="line">arr.length; <span class="comment">// 2</span></span><br><span class="line">arr; <span class="comment">// [ empty x 2 ]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Array</code>构造函数的参数<code>2</code>，表示生成一个两个成员的数组，每个位置都是空值。</p>
<p>如果没有使用<code>new</code>，运行结果也是一样的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><code>Array</code>构造函数有一个很大的缺陷，就是不同的参数，会导致它的行为不一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参数时，返回一个空数组</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个正整数参数，表示返回的新数组的长度</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>); <span class="comment">// [ empty ]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>); <span class="comment">// [ empty x 2 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非正整数的数值作为参数，会报错</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3.2</span>); <span class="comment">// RangeError: Invalid array length</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-3</span>); <span class="comment">// RangeError: Invalid array length</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个非数值（比如字符串、布尔值、对象等）作为参数，</span></span><br><span class="line"><span class="comment">// 则该参数是返回的新数组的成员</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;abc&quot;</span>); <span class="comment">// [&#x27;abc&#x27;]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>([<span class="number">1</span>]); <span class="comment">// [Array[1]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多参数时，所有参数都是返回的新数组的成员</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>可以看到，<code>Array</code>作为构造函数，行为很不一致。因此，不建议使用它生成新数组，直接使用数组字面量是更好的做法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<p>注意，如果参数是一个正整数，返回数组的成员都是空位。虽然读取的时候返回<code>undefined</code>，但实际上该位置没有任何值。虽然可以取到<code>length</code>属性，但是取不到键名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> b = [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br><span class="line">b.length; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>]; <span class="comment">// undefined</span></span><br><span class="line">b[<span class="number">0</span>]; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a; <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> b; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>a</code>是一个长度为 3 的空数组，<code>b</code>是一个三个成员都是<code>undefined</code>的数组。读取键值的时候，<code>a</code>和<code>b</code>都返回<code>undefined</code>，但是<code>a</code>的键位都是空的，<code>b</code>的键位是有值的。</p>
<h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><p><code>Array.isArray</code>方法返回一个布尔值，表示参数是否为数组。它可以弥补<code>typeof</code>运算符的不足。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> arr; <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>typeof</code>运算符只能显示数组的类型是<code>Object</code>，而<code>Array.isArray</code>方法可以识别数组。</p>
<h1 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h1><h2 id="valueOf-，toString"><a href="#valueOf-，toString" class="headerlink" title="valueOf()，toString()"></a>valueOf()，toString()</h2><p><code>valueOf</code>方法是一个所有对象都拥有的方法，表示对该对象求值。不同对象的<code>valueOf</code>方法不尽一致，数组的<code>valueOf</code>方法返回数组本身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.valueOf(); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p><code>toString</code>方法也是对象的通用方法，数组的<code>toString</code>方法返回数组的字符串形式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.toString(); <span class="comment">// &quot;1,2,3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]];</span><br><span class="line">arr.toString(); <span class="comment">// &quot;1,2,3,4,5,6&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="push-，pop"><a href="#push-，pop" class="headerlink" title="push()，pop()"></a>push()，pop()</h2><p><code>push</code>方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line">arr.push(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line">arr.push(<span class="string">&quot;a&quot;</span>); <span class="comment">// 2</span></span><br><span class="line">arr.push(<span class="literal">true</span>, &#123;&#125;); <span class="comment">// 4</span></span><br><span class="line">arr; <span class="comment">// [1, &#x27;a&#x27;, true, &#123;&#125;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码使用<code>push</code>方法，往数组中添加了四个成员。</p>
<p><code>pop</code>方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.pop(); <span class="comment">// &#x27;c&#x27;</span></span><br><span class="line">arr; <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>对空数组使用<code>pop</code>方法，不会报错，而是返回<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[].pop(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p><code>push</code>和<code>pop</code>结合使用，就构成了“后进先出”的栈结构（stack）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.push(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">arr.push(<span class="number">3</span>);</span><br><span class="line">arr.pop();</span><br><span class="line">arr; <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>3</code>是最后进入数组的，但是最早离开数组。</p>
<h2 id="shift-，unshift"><a href="#shift-，unshift" class="headerlink" title="shift()，unshift()"></a>shift()，unshift()</h2><p><code>shift</code>方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line">a.shift(); <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line">a; <span class="comment">// [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><code>shift</code>方法可以遍历并清空一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((item = list.shift())) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list; <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<p><code>push</code>和<code>shift</code>结合使用，就构成了“先进先出”的队列结构（queue）。</p>
<p><code>unshift</code>方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line">a.unshift(<span class="string">&quot;x&quot;</span>); <span class="comment">// 4</span></span><br><span class="line">a; <span class="comment">// [&#x27;x&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><code>unshift</code>方法可以接受多个参数，这些参数都会添加到目标数组头部。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>];</span><br><span class="line">arr.unshift(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>); <span class="comment">// 4</span></span><br><span class="line">arr; <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27; ]</span></span><br></pre></td></tr></table></figure>

<h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p><code>join</code>方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">a.join(<span class="string">&quot; &quot;</span>); <span class="comment">// &#x27;1 2 3 4&#x27;</span></span><br><span class="line">a.join(<span class="string">&quot; | &quot;</span>); <span class="comment">// &quot;1 | 2 | 3 | 4&quot;</span></span><br><span class="line">a.join(); <span class="comment">// &quot;1,2,3,4&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果数组成员是<code>undefined</code>或<code>null</code>或空位，会被转成空字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="literal">undefined</span>, <span class="literal">null</span>].join(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>,, <span class="string">&#x27;b&#x27;</span>].join(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;a--b&#x27;</span></span><br></pre></td></tr></table></figure>

<p>通过<code>call</code>方法，这个方法也可以用于字符串或类似数组的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.join.call(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;h-e-l-l-o&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="attr">length</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.join.call(obj, <span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="comment">// &#x27;a-b&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><p><code>concat</code>方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;hello&#x27;</span>].concat([<span class="string">&#x27;world&#x27;</span>])</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, &quot;world&quot;]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>].concat([<span class="string">&#x27;world&#x27;</span>], [<span class="string">&#x27;!&#x27;</span>])</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, &quot;world&quot;, &quot;!&quot;]</span></span><br><span class="line"></span><br><span class="line">[].concat(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="comment">// [&#123; a: 1 &#125;, &#123; b: 2 &#125;]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>].concat(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">// [2, &#123;a: 1&#125;]</span></span><br></pre></td></tr></table></figure>

<p>除了数组作为参数，<code>concat</code>也接受其他类型的值作为参数，添加到目标数组尾部。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<p>如果数组成员包括对象，<code>concat</code>方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是新数组拷贝的是对象的引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> oldArray = [obj];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArray = oldArray.concat();</span><br><span class="line"></span><br><span class="line">obj.a = <span class="number">2</span>;</span><br><span class="line">newArray[<span class="number">0</span>].a; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，原数组包含一个对象，<code>concat</code>方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。</p>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p><code>reverse</code>方法用于颠倒排列数组元素，返回改变后的数组。注意，该方法将改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line">a.reverse(); <span class="comment">// [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br><span class="line">a; <span class="comment">// [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p><code>slice</code>方法用于提取目标数组的一部分，返回一个新数组，原数组不变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.slice(start, end);</span><br></pre></td></tr></table></figure>

<p>它的第一个参数为起始位置（从 0 开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line">a.slice(<span class="number">0</span>); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line">a.slice(<span class="number">1</span>); <span class="comment">// [&quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line">a.slice(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [&quot;b&quot;]</span></span><br><span class="line">a.slice(<span class="number">2</span>, <span class="number">6</span>); <span class="comment">// [&quot;c&quot;]</span></span><br><span class="line">a.slice(); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，最后一个例子<code>slice</code>没有参数，实际上等于返回一个原数组的拷贝。</p>
<p>如果<code>slice</code>方法的参数是负数，则表示倒数计算的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">a.slice(<span class="number">-2</span>); <span class="comment">// [&quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line">a.slice(<span class="number">-2</span>, <span class="number">-1</span>); <span class="comment">// [&quot;b&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>-2</code>表示倒数计算的第二个位置，<code>-1</code>表示倒数计算的第一个位置。</p>
<p>如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">a.slice(<span class="number">4</span>); <span class="comment">// []</span></span><br><span class="line">a.slice(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<p><code>slice</code>方法的一个重要应用，是将类似数组的对象转为真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call(&#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="attr">length</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>));</span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码的参数都不是数组，但是通过<code>call</code>方法，在它们上面调用<code>slice</code>方法，就可以把它们转为真正的数组。</p>
<h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><p><code>splice</code>方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.splice(start, count, addElement1, addElement2, ...);</span><br></pre></td></tr></table></figure>

<p><code>splice</code>的第一个参数是删除的起始位置（从 0 开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>];</span><br><span class="line">a.splice(<span class="number">4</span>, <span class="number">2</span>); <span class="comment">// [&quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line">a; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码从原数组 4 号位置，删除了两个数组成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>];</span><br><span class="line">a.splice(<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [&quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line">a; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, 1, 2]</span></span><br></pre></td></tr></table></figure>

<p>上面代码除了删除成员，还插入了两个新成员。</p>
<p>起始位置如果是负数，就表示从倒数位置开始删除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>];</span><br><span class="line">a.splice(<span class="number">-4</span>, <span class="number">2</span>); <span class="comment">// [&quot;c&quot;, &quot;d&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码表示，从倒数第四个位置<code>c</code>开始删除两个成员。</p>
<p>如果只是单纯地插入元素，<code>splice</code>方法的第二个参数可以设为<code>0</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">a.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>); <span class="comment">// []</span></span><br><span class="line">a; <span class="comment">// [1, 2, 1, 1]</span></span><br></pre></td></tr></table></figure>

<p>如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">a.splice(<span class="number">2</span>); <span class="comment">// [3, 4]</span></span><br><span class="line">a; <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>

<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p><code>sort</code>方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>]</span><br><span class="line">  .sort()</span><br><span class="line">  [</span><br><span class="line">    <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"></span><br><span class="line">    (<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">  ].sort()</span><br><span class="line">  [</span><br><span class="line">    <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">    (<span class="number">11</span>, <span class="number">101</span>)</span><br><span class="line">  ].sort()</span><br><span class="line">  [</span><br><span class="line">    <span class="comment">// [101, 11]</span></span><br><span class="line"></span><br><span class="line">    (<span class="number">10111</span>, <span class="number">1101</span>, <span class="number">111</span>)</span><br><span class="line">  ].sort();</span><br><span class="line"><span class="comment">// [10111, 1101, 111]</span></span><br></pre></td></tr></table></figure>

<p>上面代码的最后两个例子，需要特殊注意。<code>sort</code>方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以<code>101</code>排在<code>11</code>的前面。</p>
<p>如果想让<code>sort</code>方法按照自定义方式排序，可以传入一个函数作为参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">10111</span>, <span class="number">1101</span>, <span class="number">111</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [111, 1101, 10111]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>sort</code>的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于<code>0</code>，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;</span><br><span class="line">].sort(<span class="function"><span class="keyword">function</span> (<span class="params">o1, o2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> o1.age - o2.age;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; name: &quot;李四&quot;, age: 24 &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &quot;王五&quot;, age: 28  &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &quot;张三&quot;, age: 30 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure>

<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p><code>map</code>方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">numbers.map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">numbers;</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>numbers</code>数组的所有成员依次执行参数函数，运行结果组成一个新数组返回，原数组没有变化。</p>
<p><code>map</code>方法接受一个函数作为参数。该函数调用时，<code>map</code>方法向它传入三个参数：当前成员、当前位置和数组本身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elem * index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [0, 2, 6]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>map</code>方法的回调函数有三个参数，<code>elem</code>为当前成员的值，<code>index</code>为当前成员的位置，<code>arr</code>为原数组（<code>[1, 2, 3]</code>）。</p>
<p><code>map</code>方法还可以接受第二个参数，用来绑定回调函数内部的<code>this</code>变量（详见《this 变量》一章）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>[e];</span><br><span class="line">&#125;, arr);</span><br><span class="line"><span class="comment">// [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码通过<code>map</code>方法的第二个参数，将回调函数内部的<code>this</code>对象，指向<code>arr</code>数组。</p>
<p>如果数组有空位，<code>map</code>方法的回调函数在这个位置不会执行，会跳过数组的空位。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>].map(f) <span class="comment">// [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]</span></span><br><span class="line">[<span class="number">1</span>, <span class="literal">null</span>, <span class="number">2</span>].map(f) <span class="comment">// [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]</span></span><br><span class="line">[<span class="number">1</span>, , <span class="number">2</span>].map(f) <span class="comment">// [&quot;a&quot;, , &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>map</code>方法不会跳过<code>undefined</code>和<code>null</code>，但是会跳过空位。</p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p><code>forEach</code>方法与<code>map</code>方法很相似，也是对数组的所有成员依次执行参数函数。但是，<code>forEach</code>方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用<code>map</code>方法，否则使用<code>forEach</code>方法。</p>
<p><code>forEach</code>的用法与<code>map</code>方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;[&quot;</span> + index + <span class="string">&quot;] = &quot;</span> + element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>].forEach(log);</span><br><span class="line"><span class="comment">// [0] = 2</span></span><br><span class="line"><span class="comment">// [1] = 5</span></span><br><span class="line"><span class="comment">// [2] = 9</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>forEach</code>遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用<code>map</code>方法。</p>
<p><code>forEach</code>方法也可以接受第二个参数，绑定参数函数的<code>this</code>变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> out = [];</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.push(elem * elem);</span><br><span class="line">&#125;, out);</span><br><span class="line"></span><br><span class="line">out; <span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，空数组<code>out</code>是<code>forEach</code>方法的第二个参数，结果，回调函数内部的<code>this</code>关键字就指向<code>out</code>。</p>
<p>注意，<code>forEach</code>方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用<code>for</code>循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] === <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，执行到数组的第二个成员时，就会中断执行。<code>forEach</code>方法做不到这一点。</p>
<p><code>forEach</code>方法也会跳过数组的空位。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n + <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>].forEach(log)</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// NaN</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="literal">null</span>, <span class="number">2</span>].forEach(log)</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, , <span class="number">2</span>].forEach(log)</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>forEach</code>方法不会跳过<code>undefined</code>和<code>null</code>，但会跳过空位。</p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p><code>filter</code>方法用于过滤数组成员，满足条件的成员组成一个新数组返回。</p>
<p>它的参数是一个函数，所有数组成员依次执行该函数，返回结果为<code>true</code>的成员组成一个新数组返回。该方法不会改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [4, 5]</span></span><br></pre></td></tr></table></figure>

<p>上面代码将大于<code>3</code>的数组成员，作为一个新数组返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;a&quot;</span>, <span class="literal">false</span>];</span><br><span class="line"></span><br><span class="line">arr.filter(<span class="built_in">Boolean</span>);</span><br><span class="line"><span class="comment">// [1, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>filter</code>方法返回数组<code>arr</code>里面所有布尔值为<code>true</code>的成员。</p>
<p><code>filter</code>方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> index % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure>

<p>上面代码返回偶数位置的成员组成的新数组。</p>
<p><code>filter</code>方法还可以接受第二个参数，用来绑定参数函数内部的<code>this</code>变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">MAX</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> myFilter = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item &gt; <span class="built_in">this</span>.MAX) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>];</span><br><span class="line">arr.filter(myFilter, obj); <span class="comment">// [8, 4, 9]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，过滤器<code>myFilter</code>内部有<code>this</code>变量，它可以被<code>filter</code>方法的第二个参数<code>obj</code>绑定，返回大于<code>3</code>的成员。</p>
<h2 id="some-，every"><a href="#some-，every" class="headerlink" title="some()，every()"></a>some()，every()</h2><p>这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。</p>
<p>它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。</p>
<p><code>some</code>方法是只要一个成员的返回值是<code>true</code>，则整个<code>some</code>方法的返回值就是<code>true</code>，否则返回<code>false</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，如果数组<code>arr</code>有一个成员大于等于 3，<code>some</code>方法就返回<code>true</code>。</p>
<p><code>every</code>方法是所有成员的返回值都是<code>true</code>，整个<code>every</code>方法才返回<code>true</code>，否则返回<code>false</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，数组<code>arr</code>并非所有成员大于等于<code>3</code>，所以返回<code>false</code>。</p>
<p>注意，对于空数组，<code>some</code>方法返回<code>false</code>，<code>every</code>方法返回<code>true</code>，回调函数都不会执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEven</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x % <span class="number">2</span> === <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">[].some(isEven) <span class="comment">// false</span></span><br><span class="line">[].every(isEven) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>some</code>和<code>every</code>方法还可以接受第二个参数，用来绑定参数函数内部的<code>this</code>变量。</p>
<h2 id="reduce-，reduceRight"><a href="#reduce-，reduceRight" class="headerlink" title="reduce()，reduceRight()"></a>reduce()，reduceRight()</h2><p><code>reduce</code>方法和<code>reduceRight</code>方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，<code>reduce</code>是从左到右处理（从第一个成员到最后一个成员），<code>reduceRight</code>则是从右到左（从最后一个成员到第一个成员），其他完全一样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b);</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1 2</span></span><br><span class="line"><span class="comment">// 3 3</span></span><br><span class="line"><span class="comment">// 6 4</span></span><br><span class="line"><span class="comment">// 10 5</span></span><br><span class="line"><span class="comment">//最后结果：15</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>reduce</code>方法求出数组所有成员的和。第一次执行，<code>a</code>是数组的第一个成员<code>1</code>，<code>b</code>是数组的第二个成员<code>2</code>。第二次执行，<code>a</code>为上一轮的返回值<code>3</code>，<code>b</code>为第三个成员<code>3</code>。第三次执行，<code>a</code>为上一轮的返回值<code>6</code>，<code>b</code>为第四个成员<code>4</code>。第四次执行，<code>a</code>为上一轮返回值<code>10</code>，<code>b</code>为第五个成员<code>5</code>。至此所有成员遍历完成，整个方法的返回值就是最后一轮的返回值<code>15</code>。</p>
<p><code>reduce</code>方法和<code>reduceRight</code>方法的第一个参数都是一个函数。该函数接受以下四个参数。</p>
<ol>
<li>累积变量，默认为数组的第一个成员</li>
<li>当前变量，默认为数组的第二个成员</li>
<li>当前位置（从 0 开始）</li>
<li>原数组</li>
</ol>
<p>这四个参数之中，只有前两个是必须的，后两个则是可选的。</p>
<p>如果要对累积变量指定初值，可以把它放在<code>reduce</code>方法和<code>reduceRight</code>方法的第二个参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 25</span></span><br></pre></td></tr></table></figure>

<p>上面代码指定参数<code>a</code>的初值为 10，所以数组从 10 开始累加，最终结果为 25。注意，这时<code>b</code>是从数组的第一个成员开始遍历。</p>
<p>上面的第二个参数相当于设定了默认值，处理空数组时尤其有用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[].reduce(add)</span><br><span class="line"><span class="comment">// TypeError: Reduce of empty array with no initial value</span></span><br><span class="line">[].reduce(add, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，由于空数组取不到初始值，<code>reduce</code>方法会报错。这时，加上第二个参数，就能保证总是会返回一个值。</p>
<p>下面是一个<code>reduceRight</code>方法的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substract</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev - cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">  .reduce(substract) <span class="comment">// 0</span></span><br><span class="line">  [(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)].reduceRight(substract); <span class="comment">// -4</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>reduce</code>方法相当于<code>3</code>减去<code>2</code>再减去<code>1</code>，<code>reduceRight</code>方法相当于<code>1</code>减去<code>2</code>再减去<code>3</code>。</p>
<p>由于这两个方法会遍历数组，所以实际上还可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongest</span>(<span class="params">entries</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> entries.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">longest, entry</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> entry.length &gt; longest.length ? entry : longest;</span><br><span class="line">  &#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findLongest([<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;c&quot;</span>]); <span class="comment">// &quot;aaa&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>reduce</code>的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。</p>
<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><blockquote>
<p>将伪数组或可遍历对象转换为真数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(伪数组 / 可遍历的对象);</span><br></pre></td></tr></table></figure>

<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><blockquote>
<p>将一系列值转换成数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(value1, value2, value3);</span><br></pre></td></tr></table></figure>

<h2 id="find-和-findIndex"><a href="#find-和-findIndex" class="headerlink" title="find() 和 findIndex()"></a>find() 和 findIndex()</h2><p><strong>方法 1：找出第一个满足[指定条件返回 true]的元素</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">find(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>方法 2：找出第一个满足[指定条件返回 true]的元素的 index</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="indexOf-，lastIndexOf"><a href="#indexOf-，lastIndexOf" class="headerlink" title="indexOf()，lastIndexOf()"></a>indexOf()，lastIndexOf()</h2><p><code>indexOf</code>方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回<code>-1</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line">a.indexOf(<span class="string">&quot;b&quot;</span>); <span class="comment">// 1</span></span><br><span class="line">a.indexOf(<span class="string">&quot;y&quot;</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p><code>indexOf</code>方法还可以接受第二个参数，表示搜索的开始位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].indexOf(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p>上面代码从 1 号位置开始搜索字符<code>a</code>，结果为<code>-1</code>，表示没有搜索到。</p>
<p><code>lastIndexOf</code>方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回<code>-1</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line">a.lastIndexOf(<span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line">a.lastIndexOf(<span class="number">7</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p>注意，这两个方法不能用来搜索<code>NaN</code>的位置，即它们无法确定数组成员是否包含<code>NaN</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="literal">NaN</span>]</span><br><span class="line">  .indexOf(<span class="literal">NaN</span>) <span class="comment">// -1</span></span><br><span class="line">  [<span class="literal">NaN</span>].lastIndexOf(<span class="literal">NaN</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p>这是因为这两个方法内部，使用严格相等运算符（<code>===</code>）进行比较，而<code>NaN</code>是唯一一个不等于自身的值。</p>
<h2 id="链式使用"><a href="#链式使用" class="headerlink" title="链式使用"></a>链式使用</h2><p>上面这些数组方法之中，有不少返回的还是数组，所以可以链式使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;tom@example.com&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;peter&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;peter@example.com&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">users</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.email;</span><br><span class="line">  &#125;)</span><br><span class="line">  .filter(<span class="function"><span class="keyword">function</span> (<span class="params">email</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^t/</span>.test(email);</span><br><span class="line">  &#125;)</span><br><span class="line">  .forEach(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// &quot;tom@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，先产生一个所有 Email 地址组成的数组，然后再过滤出以<code>t</code>开头的 Email 地址。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6常用语法</title>
    <url>/2020/06/10/javascript/es6-grammar/</url>
    <content><![CDATA[<h1 id="ES6-的变量声明：-let-和-const"><a href="#ES6-的变量声明：-let-和-const" class="headerlink" title="ES6 的变量声明： let 和 const"></a>ES6 的变量声明： let 和 const</h1><p>ES6 中新增了 let 和 const 来定义变量：</p>
<ul>
<li><code>var</code>：ES5 和 ES6 中，定义<strong>全局变量</strong>（是 variable 的简写）。</li>
<li><code>let</code>：定义<strong>局部变量</strong>，替代 var。</li>
<li><code>const</code>：定义<strong>常量</strong>（定义后，不可修改）。</li>
</ul>
<h2 id="var：全局变量"><a href="#var：全局变量" class="headerlink" title="var：全局变量"></a>var：全局变量</h2><p>看下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//这里的 a，指的是 区块 里的 a</span></span><br></pre></td></tr></table></figure>

<p>上方代码是可以输出结果的，输出结果为 1。因为 var 是全局声明的，所以，即使是在区块里声明，但仍然在全局起作用。</p>
<p>再来看下面这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//这里的 a，指的是 区块 里的 a</span></span><br></pre></td></tr></table></figure>

<p>上方代码的输出结果为 2 ，因为 var 是全局声明的。</p>
<p><strong>总结：</strong></p>
<p>用 var 定义的全部变量，有时候会污染整个 js 的作用域。</p>
<h2 id="let：定义局部变量"><a href="#let：定义局部变量" class="headerlink" title="let：定义局部变量"></a>let：定义局部变量</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>上方代码的输出结果为 2。用 let 声明的变量，只在局部（<strong>块级作用域内</strong>）起作用。</p>
<p>let 是防止数据污染，我们来看下面这个 <strong>for 循环</strong>的例子，很经典。</p>
<p>1、用 var 声明变量：（）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;循环体中:&quot;</span> + i); <span class="comment">// 每循环一次，就会在 &#123; &#125; 所在的块级作用域中，重新定义一个新的 i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;循环体外:&quot;</span> + i);</span><br></pre></td></tr></table></figure>

<p>上方代码可以正常打印结果，且最后一行的打印结果是 10。说明循环体外定义的变量 i，是在全局起作用的。</p>
<p>2、用 let 声明变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;循环体中:&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;循环体外:&quot;</span> + i);</span><br></pre></td></tr></table></figure>

<p>上方代码的最后一行无法打印结果，也就是说打印会报错。因为用 let 定义的变量 i，只在<code>&#123; &#125;</code>这个<strong>块级作用域</strong>里生效。</p>
<p><strong>总结：</strong>我们要习惯用 let 声明，减少 var 声明带来的<strong>污染全局空间</strong>。</p>
<p>为了进一步说明 let 不会带来污染，需要说明的是：当我们定义了<code>let a = 1</code>时，如果我们在同一个作用域内继续定义<code>let a = 2</code>，是会报错的。</p>
<h2 id="const：定义常量"><a href="#const：定义常量" class="headerlink" title="const：定义常量"></a>const：定义常量</h2><p>在程序开发中，有些变量是希望声明后，在业务层就不再发生变化，此时可以用 const 来定义。</p>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;smyhvae&quot;</span>; <span class="comment">//定义常量</span></span><br></pre></td></tr></table></figure>

<p>用 const 声明的变量，只在局部（块级作用域内）起作用。</p>
<h3 id="let-和-const-的作用【重要】"><a href="#let-和-const-的作用【重要】" class="headerlink" title="let 和 const 的作用【重要】"></a>let 和 const 的作用【重要】</h3><p>let 和 const 的作用如下：</p>
<ul>
<li><p>禁止重复声明</p>
</li>
<li><p>支持块级作用域</p>
</li>
<li><p>控制修改</p>
</li>
</ul>
<p>相反， 用<code>var</code>声明的变量：可以重复声明、<strong>没有块级作用域</strong>、不能限制。</p>
<h4 id="for-循环举例【经典案例】"><a href="#for-循环举例【经典案例】" class="headerlink" title="for 循环举例【经典案例】"></a>for 循环举例【经典案例】</h4><p><strong>代码 1</strong>、我们先来看看如下代码：（用 var 定义变量 i）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bb&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cc&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dd&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> myBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myBtn.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        myBtn[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">          alert(i);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码中的运行效果如下：</p>
<p><img src="http://img.smyhvae.com/20190904_1030.gif"></p>
<p>你可能会感到诧异，为何点击任何一个按钮，弹出的内容都是 4 呢？这是因为，我们用 var 定义的变量 i，是在全局作用域声明的。整个代码中，自始至终只有一个变量。当我们还没点击按钮之前，变量 i 已经循环到 4 了。</p>
<p>也就是说，上面的 for 循环，相当于如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">myBtn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">myBtn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">myBtn[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">myBtn[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++; <span class="comment">// 到这里，i 的值已经是4了。因此，当我们点击按钮时，i的值一直都是4</span></span><br></pre></td></tr></table></figure>

<p><strong>代码 2</strong>、上面的代码中，如果我们改为用 let 定义变量 i：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bb&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cc&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dd&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> myBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myBtn.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        myBtn[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">          alert(i);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码中的运行效果如下：</p>
<p><img src="http://img.smyhvae.com/20190904_1040.gif"></p>
<p>上面这个运行结果，才是我们预期的效果。我们用 let 定义变量 i，在循环的过程中，每执行一次循环体，就会诞生一个新的 i。循环体执行 4 次，就会有四个 i。</p>
<h4 id="let-与-const-都是只在声明所在的块级作用域内有效。"><a href="#let-与-const-都是只在声明所在的块级作用域内有效。" class="headerlink" title="let 与 const 都是只在声明所在的块级作用域内有效。"></a>let 与 const 都是只在声明所在的块级作用域内有效。</h4><p>let 声明的变量可以改变，值和类型都可以改变，没有限制。而 const 声明的是常亮，值和类型都不能改变。<br>对于引用类型的变量，const 命令只是保证变量名指向的地址不变，并不保证该地址的数据不变。如果想让定义的对象或数组的内部数据也不能够修改和改变，可以使用 object.freeze(names)进行冻结，这样为对象添加新属性就不起作用。<br>Example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b; <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">c; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="number">4</span>;</span><br><span class="line">d = <span class="number">5</span>; <span class="comment">//TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<p><strong>本质</strong><br>const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const 只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop; <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: &quot;foo&quot; is read-only</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，常量 foo 储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把 foo 指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。<br>下面是另一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.push(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 可执行</span></span><br><span class="line">a.length = <span class="number">0</span>; <span class="comment">// 可执行</span></span><br><span class="line">a = [<span class="string">&quot;Dave&quot;</span>]; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，常量 a 是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给 a，就会报错。<br>如果真的想将对象冻结，应该使用 <code>Object.freeze</code> 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规模式时，下面一行不起作用；</span></span><br><span class="line"><span class="comment">// 严格模式时，该行会报错</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码中，常量 foo 指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。<br>除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> constantize = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      constantize(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构<br>Example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h2 id="数组嵌套解构"><a href="#数组嵌套解构" class="headerlink" title="数组嵌套解构"></a>数组嵌套解构</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [[b], c]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">a; <span class="comment">// 1</span></span><br><span class="line">b; <span class="comment">// 2</span></span><br><span class="line">c; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [, , third] = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">third; <span class="comment">// &quot;c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x; <span class="comment">// 1</span></span><br><span class="line">y; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head; <span class="comment">// 1</span></span><br><span class="line">tail; <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">&quot;a&quot;</span>];</span><br><span class="line">x; <span class="comment">// &quot;a&quot;</span></span><br><span class="line">y; <span class="comment">// undefined</span></span><br><span class="line">z; <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h3 id="数组解构设置默认值"><a href="#数组解构设置默认值" class="headerlink" title="数组解构设置默认值"></a>数组解构设置默认值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&quot;b&quot;</span>] = [<span class="string">&quot;a&quot;</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&quot;b&quot;</span>] = [<span class="string">&quot;a&quot;</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;bbb&quot;</span> &#125;;</span><br><span class="line">a; <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">b; <span class="comment">// &quot;bbb&quot;</span></span><br><span class="line"><span class="keyword">let</span> &#123; c &#125; = &#123; <span class="attr">a</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;bbb&quot;</span> &#125;;</span><br><span class="line">c; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">d</span>: e &#125; = &#123; <span class="attr">e</span>: <span class="string">&quot;eee&quot;</span>, <span class="attr">f</span>: <span class="string">&quot;fff&quot;</span> &#125;;</span><br><span class="line">e; <span class="comment">// &quot;eee&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="undefined和null的区别"><a href="#undefined和null的区别" class="headerlink" title="undefined和null的区别"></a><code>undefined</code>和<code>null</code>的区别</h3><p>如果我们在赋值时，采用的是 <code>undefined</code>或者<code>null</code>，那会有什么区别呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b = <span class="string">&quot;smyhvae&quot;</span>] = [<span class="string">&quot;生命壹号&quot;</span>, <span class="literal">undefined</span>]; <span class="comment">//b 虽然被赋值为 undefined，但是 b 会采用默认值</span></span><br><span class="line">  <span class="built_in">console</span>.log(a + <span class="string">&quot;,&quot;</span> + b); <span class="comment">//输出结果：生命壹号,smyhvae</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b = <span class="string">&quot;smyhvae&quot;</span>] = [<span class="string">&quot;生命壹号&quot;</span>, <span class="literal">null</span>]; <span class="comment">//b 被赋值为 null</span></span><br><span class="line">  <span class="built_in">console</span>.log(a + <span class="string">&quot;,&quot;</span> + b); <span class="comment">//输出结果：生命壹号,null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上方代码分析：</p>
<ul>
<li><p>undefined：相当于什么都没有，此时 b 采用默认值。</p>
</li>
<li><p>null：相当于有值，但值为 null。</p>
</li>
</ul>
<h3 id="对象解构设置默认值"><a href="#对象解构设置默认值" class="headerlink" title="对象解构设置默认值"></a>对象解构设置默认值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y = <span class="string">&quot;x&quot;</span> &#125; = &#123; <span class="attr">x</span>: <span class="string">&quot;x&quot;</span>, <span class="attr">y</span>: <span class="string">&quot;y&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&quot;y&quot;</span>] = &#123; <span class="attr">x</span>: <span class="string">&quot;x&quot;</span> &#125;; <span class="comment">// x=&#x27;x&#x27;, y=&#x27;y&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="圆括号的使用"><a href="#圆括号的使用" class="headerlink" title="圆括号的使用"></a>圆括号的使用</h4><p>如果变量 foo 在解构之前就已经定义了，此时你再去解构，就会出现问题。下面是错误的代码，编译会报错：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line">&#123; foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;smyhvae&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>要解决报错，只要在解构的语句外边，加一个圆括号即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">&quot;haha&quot;</span>;</span><br><span class="line">(&#123; foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">&quot;smyhvae&quot;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//输出结果：smyhvae</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h3><p>字符串也可以解构，这是因为，此时字符串被转换成了一个类似数组的对象。举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d] = <span class="string">&quot;smyhvae&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//输出结果：string</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p><img src="http://img.smyhvae.com/20180304_1626.png"></p>
<h1 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h1><p>ES6 中的字符串扩展，用得少，而且逻辑相对简单。如下：</p>
<ul>
<li><p><code>includes(str)</code>：判断是否包含指定的字符串</p>
</li>
<li><p><code>startsWith(str)</code>：判断是否以指定字符串开头</p>
</li>
<li><p><code>endsWith(str)</code>：判断是否以指定字符串结尾</p>
</li>
<li><p><code>repeat(count)</code>：重复指定次数</p>
</li>
</ul>
<p>举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;a&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;h&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//startsWith(str) : 判断是否以指定字符串开头</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;a&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;d&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//endsWith(str) : 判断是否以指定字符串结尾</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;g&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;d&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//repeat(count) : 重复指定次数a</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<p><img src="http://img.smyhvae.com/20180402_1050.png"></p>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>我们以前让字符串进行拼接的时候，是这样做的：（传统写法的字符串拼接）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;smyhvae&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="string">&quot;26&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;,age:&quot;</span> + age); <span class="comment">//传统写法</span></span><br></pre></td></tr></table></figure>

<p>这种写法，比较繁琐，而且容易出错。</p>
<p>现在有了 ES6 语法，字符串拼接可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;smyhvae&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="string">&quot;26&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;,age:&quot;</span> + age); <span class="comment">//传统写法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`name:<span class="subst">$&#123;name&#125;</span>,age:<span class="subst">$&#123;age&#125;</span>`</span>); <span class="comment">//ES6 写法</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>，上方代码中，倒数第二行用的符号是单引号，最后一行用的符号是反引号（在 tab 键的上方）。</p>
<h1 id="Number-的扩展"><a href="#Number-的扩展" class="headerlink" title="Number 的扩展"></a>Number 的扩展</h1><ul>
<li>二进制与八进制数值表示法: 二进制用<code>0b</code>, 八进制用<code>0o</code>。</li>
</ul>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0b1010</span>); <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0o56</span>); <span class="comment">//46</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>Number.isFinite(i)</code>：判断是否为有限大的数。比如<code>Infinity</code>这种无穷大的数，返回的就是 false。</p>
</li>
<li><p><code>Number.isNaN(i)</code>：判断是否为 NaN。</p>
</li>
<li><p><code>Number.isInteger(i)</code>：判断是否为整数。</p>
</li>
<li><p><code>Number.parseInt(str)</code>：将字符串转换为对应的数值。</p>
</li>
<li><p><code>Math.trunc(i)</code>：去除小数部分。</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Number.isFinite(i) : 判断是否是有限大的数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">5</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Number.isNaN(i) : 判断是否是NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">5</span>)); <span class="comment">//falsse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Number.isInteger(i) : 判断是否是整数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">5.23</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">5.0</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">5</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Number.parseInt(str) : 将字符串转换为对应的数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">&quot;123abc&quot;</span>)); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">&quot;a123abc&quot;</span>)); <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.trunc(i) : 直接去除小数部分</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">13.123</span>)); <span class="comment">//13</span></span><br></pre></td></tr></table></figure>

<h1 id="数组的新增方法"><a href="#数组的新增方法" class="headerlink" title="数组的新增方法"></a>数组的新增方法</h1><blockquote>
<p>数组的相关文档，可参考：<a href="/2020/09/10/javascript/array/" title="Array 对象">Array 对象</a></p>
</blockquote>
<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line">find 和 findIndex：</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="includes-value-index"><a href="#includes-value-index" class="headerlink" title="includes(value,index)"></a>includes(value,index)</h2><p>该方法的第二个参数表示搜索的起始位置，默认为 0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为 3），则会重置为从 0 开始。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  .includes(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">  [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)].includes(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line">  [(<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>)].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line">  [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)].includes(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter 方法"></a>filter 方法</h2><p>filter 用来过滤数组中不满足条件的元素, 把满足条件的元素放到新的数组里, 并且不会改变原数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> temp = array.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(temp); <span class="comment">//[4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">//[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h2 id="every-方法："><a href="#every-方法：" class="headerlink" title="every 方法："></a>every 方法：</h2><p>every 会遍历数组, 判读是否满足给定的条街, 如果每一项都是 true, 就会返回 true, 只要有一个是 false, 就会返回 false</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> bo = array.every(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(bo);</span><br></pre></td></tr></table></figure>

<h2 id="some-方法"><a href="#some-方法" class="headerlink" title="some 方法"></a>some 方法</h2><p>some 会遍历数组, 判读是否满足给定的条件, 只要有一项 true, 就会返回 true, 否则返回 false</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">array.some(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce 方法"></a>reduce 方法</h2><p>接收一个函数作为累加器, 数组中每个值(从左到右)开始缩减, 最终为一个值，也就是计算总合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> total = array.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + next;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>

<p>example:<br>输出字符串中每个字符出现的次数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="string">&quot;abcdaabc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; a: 3, b: 2, c: 2, d: 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> info = arr.split(<span class="string">&quot;&quot;</span>).reduce(<span class="function">(<span class="params">p, k</span>) =&gt;</span> (p[k]++ || (p[k] = <span class="number">1</span>), p), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br></pre></td></tr></table></figure>

<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;小张&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;小李&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;小孙&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;小周&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;小陈&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">person = person.reduce(<span class="function">(<span class="params">cur, next</span>) =&gt;</span> &#123;</span><br><span class="line">  obj[next.id] ? <span class="string">&quot;&quot;</span> : (obj[next.id] = <span class="literal">true</span> &amp;&amp; cur.push(next));</span><br><span class="line">  <span class="keyword">return</span> cur;</span><br><span class="line">&#125;, []); <span class="comment">//设置 cur 默认类型为数组，并且初始值为空的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure>

<h2 id="for-…-of-循环"><a href="#for-…-of-循环" class="headerlink" title="for … of 循环"></a>for … of 循环</h2><p>ES6 中，如果我们要遍历一个数组，可以这样做：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr1) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p><img src="http://img.smyhvae.com/20180304_2016.png"></p>
<p>for…of 的循环可以避免我们开拓内存空间，增加代码运行效率，所以建议大家在以后的工作中使用 for…of 循环。</p>
<p>注意，上面的数组中，<code>for ... of</code>获取的是数组里的值；<code>for ... in</code>获取的是 index 索引值。</p>
<h1 id="对象的新增方法"><a href="#对象的新增方法" class="headerlink" title="对象的新增方法"></a>对象的新增方法</h1><blockquote>
<p>对象的相关文档，可参考：<a href="/2020/09/10/javascript/object/" title="Object 对象">Object 对象</a></p>
</blockquote>
<h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(v1, v2);</span><br></pre></td></tr></table></figure>

<p>判断两个数据是否完全相等。底层是通过<strong>字符串</strong>来判断的</p>
<p>我们先来看下面这两行代码的打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="number">-0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，第一行代码的打印结果为 true，这个很好理解。第二行代码的打印结果为 false，因为 NaN 和任何值都不相等。</p>
<p>但是，如果换成下面这种方式来比较：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>));</span><br></pre></td></tr></table></figure>

<p>打印结果却是：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>代码解释：还是刚刚说的那样，<code>Object.is(v1, v2)</code>比较的是字符串是否相等。</p>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><p>Object.assign 用于对象的合并，方法的第一个参数是目标对象，后面的参数都是源对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target; <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-keys-和-Object-values"><a href="#Object-keys-和-Object-values" class="headerlink" title="Object.keys 和 Object.values"></a>Object.keys 和 Object.values</h2><p>Object.keys 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。<br>Object.values 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;bbb&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="comment">// [&quot;a&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj);</span><br><span class="line"><span class="comment">// [&quot;aaa&quot;, &quot;bbb&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-entries-和-Object-fromEntries"><a href="#Object-entries-和-Object-fromEntries" class="headerlink" title="Object.entries 和 Object.fromEntries"></a>Object.entries 和 Object.fromEntries</h2><p>Object.entries 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。<br>Object.fromEntries 方法是 Object.entries 的逆操作，用于将一个键值对数组转为对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;bbb&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.entries(obj);</span><br><span class="line"><span class="comment">// [[&quot;a&quot;, &quot;b&quot;],[&quot;aaa&quot;, &quot;bbb&quot;]]</span></span><br><span class="line"><span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h1><blockquote>
<p>Promise 对象的相关文档，可参考：<a href="/2019/08/08/javascript/promise/" title="Promise 对象">Promise 对象</a></p>
</blockquote>
<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。<br>Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态<br>基本用法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/_ 异步操作成功 _/</span>) &#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p>then 方法参数是 resolved 状态的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">&quot;/xxx&quot;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><p>catch 方法的参数是 reject 状态的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">&quot;/xxx&quot;</span>).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> err;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h2><p>finally 方法的参数是 reject 状态的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">&quot;/xxx&quot;</span>).finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;完成&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p>Promise.all 方法接受一个数组作为参数，p1、p2、p3 必须为 Promise 实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><p>Promise.resolve(result)会返回一个新的 Promise 实例，该实例的状态为 fulfilled。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="string">&quot;成功了&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><p>Promise.reject(err)会返回一个新的 Promise 实例，该实例的状态为 rejected。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.reject(<span class="string">&quot;出错了&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>Object 对象</title>
    <url>/2020/09/10/javascript/object/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JavaScript 原生提供<code>Object</code>对象（注意起首的<code>O</code>是大写），本章介绍该对象原生的各种方法。</p>
<p>JavaScript 的所有其他对象都继承自<code>Object</code>对象，即那些对象都是<code>Object</code>的实例。</p>
<p><code>Object</code>对象的原生方法分成两类：<code>Object</code>本身的方法与<code>Object</code>的实例方法。</p>
<p><strong>（1）<code>Object</code>对象本身的方法</strong></p>
<p>所谓“本身的方法”就是直接定义在<code>Object</code>对象的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.print = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(o);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>print</code>方法就是直接定义在<code>Object</code>对象上。</p>
<p><strong>（2）<code>Object</code>的实例方法</strong></p>
<p>所谓实例方法就是定义在<code>Object</code>原型对象<code>Object.prototype</code>上的方法。它可以被<code>Object</code>实例直接使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.print(); <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Object.prototype</code>定义了一个<code>print</code>方法，然后生成一个<code>Object</code>的实例<code>obj</code>。<code>obj</code>直接继承了<code>Object.prototype</code>的属性和方法，可以直接使用<code>obj.print</code>调用<code>print</code>方法。也就是说，<code>obj</code>对象的<code>print</code>方法实质上就是调用<code>Object.prototype.print</code>方法。</p>
<p>关于原型对象<code>object.prototype</code>的详细解释，参见《面向对象编程》章节。这里只要知道，凡是定义在<code>Object.prototype</code>对象上面的属性和方法，将被所有实例对象共享就可以了。</p>
<p>以下先介绍<code>Object</code>作为函数的用法，然后再介绍<code>Object</code>对象的原生方法，分成对象自身的方法（又称为”静态方法“）和实例方法两部分。</p>
<h2 id="Object"><a href="#Object" class="headerlink" title="Object()"></a>Object()</h2><p><code>Object</code>本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。</p>
<p>如果参数为空（或者为<code>undefined</code>和<code>null</code>），<code>Object()</code>返回一个空对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>(<span class="literal">undefined</span>);</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码的含义，是将<code>undefined</code>和<code>null</code>转为对象，结果得到了一个空对象<code>obj</code>。</p>
<p><code>instanceof</code>运算符用来验证，一个对象是否为指定的构造函数的实例。<code>obj instanceof Object</code>返回<code>true</code>，就表示<code>obj</code>对象是<code>Object</code>的实例。</p>
<p>如果参数是原始类型的值，<code>Object</code>方法将其转为对应的包装对象的实例（参见《原始类型的包装对象》一章）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>(<span class="number">1</span>);</span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true</span></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="built_in">Number</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true</span></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="built_in">String</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>(<span class="literal">true</span>);</span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true</span></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Object</code>函数的参数是各种原始类型的值，转换成对象就是原始类型值对应的包装对象。</p>
<p>如果<code>Object</code>方法的参数是一个对象，它总是返回该对象，即不用转换。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>(arr); <span class="comment">// 返回原数组</span></span><br><span class="line">obj === arr; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>(value); <span class="comment">// 返回原对象</span></span><br><span class="line">obj === value; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>(fn); <span class="comment">// 返回原函数</span></span><br><span class="line">obj === fn; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>利用这一点，可以写一个判断变量是否为对象的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value === <span class="built_in">Object</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isObject([]); <span class="comment">// true</span></span><br><span class="line">isObject(<span class="literal">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-构造函数"><a href="#Object-构造函数" class="headerlink" title="Object 构造函数"></a>Object 构造函数</h2><p><code>Object</code>不仅可以当作工具函数使用，还可以当作构造函数使用，即前面可以使用<code>new</code>命令。</p>
<p><code>Object</code>构造函数的首要用途，是直接通过它来生成新对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，通过<code>var obj = new Object()</code>的写法生成新对象，与字面量的写法<code>var obj = &#123;&#125;</code>是等价的。或者说，后者只是前者的一种简便写法。</p>
</blockquote>
<p><code>Object</code>构造函数的用法与工具方法很相似，几乎一模一样。使用时，可以接受一个参数，如果该参数是一个对象，则直接返回这个对象；如果是一个原始类型的值，则返回该值对应的包装对象（详见《包装对象》一章）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>(o1);</span><br><span class="line">o1 === o2; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(<span class="number">123</span>);</span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="built_in">Number</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>虽然用法相似，但是<code>Object(value)</code>与<code>new Object(value)</code>两者的语义是不同的，<code>Object(value)</code>表示将<code>value</code>转成一个对象，<code>new Object(value)</code>则表示新生成一个对象，它的值是<code>value</code>。</p>
<h2 id="Object-的静态方法"><a href="#Object-的静态方法" class="headerlink" title="Object 的静态方法"></a>Object 的静态方法</h2><p>所谓“静态方法”，是指部署在<code>Object</code>对象自身的方法。</p>
<h3 id="Object-keys-，Object-getOwnPropertyNames"><a href="#Object-keys-，Object-getOwnPropertyNames" class="headerlink" title="Object.keys()，Object.getOwnPropertyNames()"></a>Object.keys()，Object.getOwnPropertyNames()</h3><p><code>Object.keys</code>方法和<code>Object.getOwnPropertyNames</code>方法都用来遍历对象的属性。</p>
<p><code>Object.keys</code>方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  p1: <span class="number">123</span>,</span><br><span class="line">  p2: <span class="number">456</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;]</span></span><br></pre></td></tr></table></figure>

<p><code>Object.getOwnPropertyNames</code>方法与<code>Object.keys</code>类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  p1: <span class="number">123</span>,</span><br><span class="line">  p2: <span class="number">456</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;]</span></span><br></pre></td></tr></table></figure>

<p>对于一般的对象来说，<code>Object.keys()</code>和<code>Object.getOwnPropertyNames()</code>返回的结果是一样的。只有涉及不可枚举属性时，才会有不一样的结果。<code>Object.keys</code>方法只返回可枚举的属性（详见《对象属性的描述对象》一章），<code>Object.getOwnPropertyNames</code>方法还返回不可枚举的属性名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(a); <span class="comment">// [&quot;0&quot;, &quot;1&quot;]</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(a); <span class="comment">// [&quot;0&quot;, &quot;1&quot;, &quot;length&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，数组的<code>length</code>属性是不可枚举的属性，所以只出现在<code>Object.getOwnPropertyNames</code>方法的返回结果中。</p>
<p>由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  p1: <span class="number">123</span>,</span><br><span class="line">  p2: <span class="number">456</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj).length; <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj).length; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>一般情况下，几乎总是使用<code>Object.keys</code>方法，遍历数组的属性。</p>
<h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(v1, v2);</span><br></pre></td></tr></table></figure>

<p>判断两个数据是否完全相等。底层是通过<strong>字符串</strong>来判断的</p>
<p>我们先来看下面这两行代码的打印结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="number">-0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，第一行代码的打印结果为 true，这个很好理解。第二行代码的打印结果为 false，因为 NaN 和任何值都不相等。</p>
<p>但是，如果换成下面这种方式来比较：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>));</span><br></pre></td></tr></table></figure>

<p>打印结果却是：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>代码解释：还是刚刚说的那样，<code>Object.is(v1, v2)</code>比较的是字符串是否相等。</p>
<h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><p>Object.assign 用于对象的合并，方法的第一个参数是目标对象，后面的参数都是源对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target; <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-keys-和-Object-values"><a href="#Object-keys-和-Object-values" class="headerlink" title="Object.keys 和 Object.values"></a>Object.keys 和 Object.values</h3><p>Object.keys 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。<br>Object.values 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;bbb&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="comment">// [&quot;a&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj);</span><br><span class="line"><span class="comment">// [&quot;aaa&quot;, &quot;bbb&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-entries-和-Object-fromEntries"><a href="#Object-entries-和-Object-fromEntries" class="headerlink" title="Object.entries 和 Object.fromEntries"></a>Object.entries 和 Object.fromEntries</h3><p>Object.entries 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。<br>Object.fromEntries 方法是 Object.entries 的逆操作，用于将一个键值对数组转为对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;bbb&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.entries(obj);</span><br><span class="line"><span class="comment">// [[&quot;a&quot;, &quot;b&quot;],[&quot;aaa&quot;, &quot;bbb&quot;]]</span></span><br><span class="line"><span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>除了上面提到的两个方法，<code>Object</code>还有不少其他静态方法，将在后文逐一详细介绍。</p>
<p><strong>（1）对象属性模型的相关方法</strong></p>
<ul>
<li><code>Object.getOwnPropertyDescriptor()</code>：获取某个属性的描述对象。</li>
<li><code>Object.defineProperty()</code>：通过描述对象，定义某个属性。</li>
<li><code>Object.defineProperties()</code>：通过描述对象，定义多个属性。</li>
</ul>
<p><strong>（2）控制对象状态的方法</strong></p>
<ul>
<li><code>Object.preventExtensions()</code>：防止对象扩展。</li>
<li><code>Object.isExtensible()</code>：判断对象是否可扩展。</li>
<li><code>Object.seal()</code>：禁止对象配置。</li>
<li><code>Object.isSealed()</code>：判断一个对象是否可配置。</li>
<li><code>Object.freeze()</code>：冻结一个对象。</li>
<li><code>Object.isFrozen()</code>：判断一个对象是否被冻结。</li>
</ul>
<p><strong>（3）原型链相关方法</strong></p>
<ul>
<li><code>Object.create()</code>：该方法可以指定原型对象和属性，返回一个新的对象。</li>
<li><code>Object.getPrototypeOf()</code>：获取对象的<code>Prototype</code>对象。</li>
</ul>
<h2 id="Object-的实例方法"><a href="#Object-的实例方法" class="headerlink" title="Object 的实例方法"></a>Object 的实例方法</h2><p>除了静态方法，还有不少方法定义在<code>Object.prototype</code>对象。它们称为实例方法，所有<code>Object</code>的实例对象都继承了这些方法。</p>
<p><code>Object</code>实例对象的方法，主要有以下六个。</p>
<ul>
<li><code>Object.prototype.valueOf()</code>：返回当前对象对应的值。</li>
<li><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。</li>
<li><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式。</li>
<li><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</li>
<li><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</li>
<li><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。</li>
</ul>
<p>本节介绍前四个方法，另外两个方法将在后文相关章节介绍。</p>
<h3 id="Object-prototype-valueOf"><a href="#Object-prototype-valueOf" class="headerlink" title="Object.prototype.valueOf()"></a>Object.prototype.valueOf()</h3><p><code>valueOf</code>方法的作用是返回一个对象的“值”，默认情况下返回对象本身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.valueOf() === obj; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码比较<code>obj.valueOf()</code>与<code>obj</code>本身，两者是一样的。</p>
<p><code>valueOf</code>方法的主要用途是，JavaScript 自动类型转换时会默认调用这个方法（详见《数据类型转换》一章）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="number">1</span> + obj; <span class="comment">// &quot;1[object Object]&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码将对象<code>obj</code>与数字<code>1</code>相加，这时 JavaScript 就会默认调用<code>valueOf()</code>方法，求出<code>obj</code>的值再与<code>1</code>相加。所以，如果自定义<code>valueOf</code>方法，就可以得到想要的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.valueOf = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> + obj; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>上面代码自定义了<code>obj</code>对象的<code>valueOf</code>方法，于是<code>1 + obj</code>就得到了<code>3</code>。这种方法就相当于用自定义的<code>obj.valueOf</code>，覆盖<code>Object.prototype.valueOf</code>。</p>
<h3 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h3><p><code>toString</code>方法的作用是返回一个对象的字符串形式，默认情况下返回类型字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o1.toString(); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">o2.toString(); <span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码表示，对于一个对象调用<code>toString</code>方法，会返回字符串<code>[object Object]</code>，该字符串说明对象的类型。</p>
<p>字符串<code>[object Object]</code>本身没有太大的用处，但是通过自定义<code>toString</code>方法，可以让对象在自动类型转换时，得到想要的字符串形式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">obj.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj + <span class="string">&quot; &quot;</span> + <span class="string">&quot;world&quot;</span>; <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码表示，当对象用于字符串加法时，会自动调用<code>toString</code>方法。由于自定义了<code>toString</code>方法，所以返回字符串<code>hello world</code>。</p>
<p>数组、字符串、函数、Date 对象都分别部署了自定义的<code>toString</code>方法，覆盖了<code>Object.prototype.toString</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].toString(); <span class="comment">// &quot;1,2,3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br><span class="line">  .toString()(</span><br><span class="line">    <span class="comment">// &quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .toString()(</span><br><span class="line">    <span class="comment">// &quot;function () &#123;</span></span><br><span class="line">    <span class="comment">//   return 123;</span></span><br><span class="line">    <span class="comment">// &#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  )</span><br><span class="line">  .toString();</span><br><span class="line"><span class="comment">// &quot;Tue May 10 2016 09:11:31 GMT+0800 (CST)&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，数组、字符串、函数、Date 对象调用<code>toString</code>方法，并不会返回<code>[object Object]</code>，因为它们都自定义了<code>toString</code>方法，覆盖原始方法。</p>
<h3 id="toString-的应用：判断数据类型"><a href="#toString-的应用：判断数据类型" class="headerlink" title="toString() 的应用：判断数据类型"></a>toString() 的应用：判断数据类型</h3><p><code>Object.prototype.toString</code>方法返回对象的类型字符串，因此可以用来判断一个值的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.toString(); <span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码调用空对象的<code>toString</code>方法，结果返回一个字符串<code>object Object</code>，其中第二个<code>Object</code>表示该值的构造函数。这是一个十分有用的判断数据类型的方法。</p>
<p>由于实例对象可能会自定义<code>toString</code>方法，覆盖掉<code>Object.prototype.toString</code>方法，所以为了得到类型字符串，最好直接使用<code>Object.prototype.toString</code>方法。通过函数的<code>call</code>方法，可以在任意值上调用这个方法，帮助我们判断这个值的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(value);</span><br></pre></td></tr></table></figure>

<p>上面代码表示对<code>value</code>这个值调用<code>Object.prototype.toString</code>方法。</p>
<p>不同数据类型的<code>Object.prototype.toString</code>方法返回值如下。</p>
<ul>
<li>数值：返回<code>[object Number]</code>。</li>
<li>字符串：返回<code>[object String]</code>。</li>
<li>布尔值：返回<code>[object Boolean]</code>。</li>
<li>undefined：返回<code>[object Undefined]</code>。</li>
<li>null：返回<code>[object Null]</code>。</li>
<li>数组：返回<code>[object Array]</code>。</li>
<li>arguments 对象：返回<code>[object Arguments]</code>。</li>
<li>函数：返回<code>[object Function]</code>。</li>
<li>Error 对象：返回<code>[object Error]</code>。</li>
<li>Date 对象：返回<code>[object Date]</code>。</li>
<li>RegExp 对象：返回<code>[object RegExp]</code>。</li>
<li>其他对象：返回<code>[object Object]</code>。</li>
</ul>
<p>这就是说，<code>Object.prototype.toString</code>可以看出一个值到底是什么类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">2</span>); <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">&quot;&quot;</span>); <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>); <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>); <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>); <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Math</span>); <span class="comment">// &quot;[object Math]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]); <span class="comment">// &quot;[object Array]&quot;</span></span><br></pre></td></tr></table></figure>

<p>利用这个特性，可以写出一个比<code>typeof</code>运算符更准确的类型判断函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> type = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">Object</span>.prototype.toString.call(o);</span><br><span class="line">  <span class="keyword">return</span> s.match(<span class="regexp">/\[object (.*?)\]/</span>)[<span class="number">1</span>].toLowerCase();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type(&#123;&#125;); <span class="comment">// &quot;object&quot;</span></span><br><span class="line">type([]); <span class="comment">// &quot;array&quot;</span></span><br><span class="line">type(<span class="number">5</span>); <span class="comment">// &quot;number&quot;</span></span><br><span class="line">type(<span class="literal">null</span>); <span class="comment">// &quot;null&quot;</span></span><br><span class="line">type(); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line">type(<span class="regexp">/abcd/</span>); <span class="comment">// &quot;regex&quot;</span></span><br><span class="line">type(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// &quot;date&quot;</span></span><br></pre></td></tr></table></figure>

<p>在上面这个<code>type</code>函数的基础上，还可以加上专门判断某种类型数据的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> type = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">Object</span>.prototype.toString.call(o);</span><br><span class="line">  <span class="keyword">return</span> s.match(<span class="regexp">/\[object (.*?)\]/</span>)[<span class="number">1</span>].toLowerCase();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  <span class="string">&quot;Null&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Undefined&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Object&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Array&quot;</span>,</span><br><span class="line">  <span class="string">&quot;String&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Number&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Boolean&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Function&quot;</span>,</span><br><span class="line">  <span class="string">&quot;RegExp&quot;</span></span><br><span class="line">].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">  type[<span class="string">&quot;is&quot;</span> + t] = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type(o) === t.toLowerCase();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">type.isObject(&#123;&#125;); <span class="comment">// true</span></span><br><span class="line">type.isNumber(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br><span class="line">type.isRegExp(<span class="regexp">/abc/</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-prototype-toLocaleString"><a href="#Object-prototype-toLocaleString" class="headerlink" title="Object.prototype.toLocaleString()"></a>Object.prototype.toLocaleString()</h3><p><code>Object.prototype.toLocaleString</code>方法与<code>toString</code>的返回结果相同，也是返回一个值的字符串形式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.toString(obj); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line">obj.toLocaleString(obj); <span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个方法的主要作用是留出一个接口，让各种不同的对象实现自己版本的<code>toLocaleString</code>，用来返回针对某些地域的特定的值。目前，主要有三个对象自定义了<code>toLocaleString</code>方法。</p>
<ul>
<li>Array.prototype.toLocaleString()</li>
<li>Number.prototype.toLocaleString()</li>
<li>Date.prototype.toLocaleString()</li>
</ul>
<p>举例来说，日期的实例对象的<code>toString</code>和<code>toLocaleString</code>返回值就不一样，而且<code>toLocaleString</code>的返回值跟用户设定的所在地域相关。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.toString(); <span class="comment">// &quot;Tue Jan 01 2018 12:01:33 GMT+0800 (CST)&quot;</span></span><br><span class="line">date.toLocaleString(); <span class="comment">// &quot;1/01/2018, 12:01:33 PM&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a>Object.prototype.hasOwnProperty()</h3><p><code>Object.prototype.hasOwnProperty</code>方法接受一个字符串作为参数，返回一个布尔值，表示该实例对象自身是否具有该属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  p: <span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.hasOwnProperty(<span class="string">&quot;p&quot;</span>); <span class="comment">// true</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">&quot;toString&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，对象<code>obj</code>自身具有<code>p</code>属性，所以返回<code>true</code>。<code>toString</code>属性是继承的，所以返回<code>false</code>。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>TradingView + websocket 实现 k线图</title>
    <url>/2020/12/22/javascript/tradingview/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TVApi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _time = <span class="built_in">String</span>(+<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  <span class="comment">// 随机id生成</span></span><br><span class="line">  <span class="keyword">let</span> userID = <span class="built_in">window</span>.btoa(</span><br><span class="line">    _time.substr(_time.length - <span class="number">6</span>) + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">1e6</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> defaultData = &#123;</span><br><span class="line">    urls: <span class="string">&quot;wss://&quot;</span> + userID, <span class="comment">// 测试</span></span><br><span class="line">    maOrBollObj: &#123;</span><br><span class="line">      ma: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">&quot;MA5&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          day: <span class="number">5</span>,</span><br><span class="line">          color: <span class="string">&quot;#ECD58F&quot;</span>,</span><br><span class="line">          linewidth: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">&quot;MA10&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          day: <span class="number">10</span>,</span><br><span class="line">          color: <span class="string">&quot;#B8D8DB&quot;</span>,</span><br><span class="line">          linewidth: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">&quot;MA20&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          day: <span class="number">20</span>,</span><br><span class="line">          color: <span class="string">&quot;#4BA8FF&quot;</span>,</span><br><span class="line">          linewidth: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">&quot;MA60&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          day: <span class="number">60</span>,</span><br><span class="line">          color: <span class="string">&quot;#F8335E&quot;</span>,</span><br><span class="line">          linewidth: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      boll: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">&quot;BOLL&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          color: <span class="string">&quot;#DFC987&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">&quot;UB&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          color: <span class="string">&quot;#749A9E&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">&quot;LB&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          color: <span class="string">&quot;#158EFE&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    widgets: <span class="literal">null</span>,</span><br><span class="line">    datafeeds: <span class="keyword">new</span> datafeeds(<span class="built_in">this</span>),</span><br><span class="line">    socket: <span class="literal">null</span>,</span><br><span class="line">    symbol: <span class="string">&quot;SEAUSDT&quot;</span>,</span><br><span class="line">    interval: <span class="literal">null</span>,</span><br><span class="line">    cacheData: &#123;&#125;,</span><br><span class="line">    remarks: [], <span class="comment">// MA返回的ID</span></span><br><span class="line">    <span class="comment">// 指标线</span></span><br><span class="line">    studyObj: &#123;</span><br><span class="line">      MA: <span class="string">&quot;Moving Average&quot;</span>,</span><br><span class="line">      BOLL: <span class="string">&quot;Bollinger Bands&quot;</span>,</span><br><span class="line">      MACD: <span class="string">&quot;MACD&quot;</span>,</span><br><span class="line">      KDJ: <span class="string">&quot;KDJ&quot;</span>,</span><br><span class="line">      RSI: <span class="string">&quot;Relative Strength Index&quot;</span>,</span><br><span class="line">      OBV: <span class="string">&quot;On Balance Volume&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    topStudyName: <span class="string">&quot;&quot;</span>, <span class="comment">// 主图参考线简称</span></span><br><span class="line">    bottomStudyName: <span class="string">&quot;&quot;</span>, <span class="comment">// 副图参考线简称</span></span><br><span class="line">    intervalType: <span class="literal">null</span> <span class="comment">//APP传参标志</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> defaultData) &#123;</span><br><span class="line">    <span class="keyword">if</span> (defaultData.hasOwnProperty(k)) &#123;</span><br><span class="line">      <span class="built_in">this</span>[k] = defaultData[k];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化 socket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TVApi.prototype.initSocket = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> intervalType = <span class="built_in">this</span>.intervalType === <span class="string">&quot;hm&quot;</span> ? <span class="string">&quot;1min&quot;</span> : <span class="built_in">this</span>.intervalType;</span><br><span class="line">  <span class="built_in">this</span>.socket = <span class="keyword">new</span> socket(<span class="built_in">this</span>.urls, &#123;</span><br><span class="line">    interval: intervalType</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">this</span>.socket.doOpen();</span><br><span class="line">  <span class="built_in">this</span>.socket.on(<span class="string">&quot;open&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sendMessage(&#123;</span><br><span class="line">      klineType: intervalType <span class="comment">// k线时间类型</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">this</span>.socket.on(<span class="string">&quot;message&quot;</span>, <span class="built_in">this</span>.onMessage.bind(<span class="built_in">this</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化 TradingView</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TVApi.prototype.initTradingView = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(this.intervalType, &#x27;intervalType&#x27;);</span></span><br><span class="line">  <span class="comment">//设置默认symbol，interval的默认值</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.widgets) &#123;</span><br><span class="line">    <span class="built_in">this</span>.widgets = <span class="built_in">window</span>.tvWidget = <span class="keyword">new</span> TradingView.widget(&#123;</span><br><span class="line">      symbol: <span class="built_in">this</span>.symbol, <span class="comment">//默认商品设置</span></span><br><span class="line">      interval: <span class="built_in">this</span>.interval, <span class="comment">//默认请求间隔</span></span><br><span class="line">      fullscreen: <span class="literal">true</span>, <span class="comment">//默认是否全屏</span></span><br><span class="line">      autosize: <span class="literal">false</span>, <span class="comment">//默认是否自适应</span></span><br><span class="line">      container_id: <span class="string">&quot;trade-view&quot;</span>, <span class="comment">//设置容器</span></span><br><span class="line">      widgetbar: &#123;</span><br><span class="line">        details: <span class="literal">false</span>,</span><br><span class="line">        watchlist: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      datafeed: <span class="built_in">this</span>.datafeeds,</span><br><span class="line">      library_path: <span class="string">&quot;/plugins/charting_library/&quot;</span>,</span><br><span class="line">      timezone: <span class="string">&quot;Asia/Shanghai&quot;</span>,</span><br><span class="line">      locale: <span class="string">&quot;zh&quot;</span>,</span><br><span class="line">      debug: <span class="literal">false</span>,</span><br><span class="line">      has_empty_bars: <span class="literal">false</span>,</span><br><span class="line">      theme: <span class="string">&quot;Light&quot;</span>,</span><br><span class="line">      <span class="comment">// preset: &quot;mobile&quot;,</span></span><br><span class="line">      <span class="comment">// custom_css_url: &quot;/css/custom.css&quot;,</span></span><br><span class="line">      <span class="comment">//设置默认不显示组件</span></span><br><span class="line">      disabled_features: [</span><br><span class="line">        <span class="string">&quot;legend_context_menu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fix_left_edge&quot;</span>, <span class="comment">// 阻止滚动到第一个历史 K 线的左侧</span></span><br><span class="line">        <span class="string">&quot;left_toolbar&quot;</span>, <span class="comment">//隐藏左边工具栏</span></span><br><span class="line">        <span class="string">&quot;timeframes_toolbar&quot;</span>, <span class="comment">//隐藏底部刻度栏</span></span><br><span class="line">        <span class="string">&quot;header_widget&quot;</span>, <span class="comment">// 隐藏头部组件</span></span><br><span class="line">        <span class="comment">// &quot;header_undo_redo&quot;, //左右箭头</span></span><br><span class="line">        <span class="comment">// &quot;header_compare&quot;, // compare</span></span><br><span class="line">        <span class="comment">// &quot;header_chart_type&quot;, // 图表类型</span></span><br><span class="line">        <span class="comment">// &quot;header_screenshot&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;header_resolutions&quot;, // 分辨率</span></span><br><span class="line">        <span class="comment">// &quot;header_settings&quot;, // 设置按钮</span></span><br><span class="line">        <span class="comment">// &quot;header_indicators&quot;, // 技术指标线</span></span><br><span class="line">        <span class="comment">// &quot;header_symbol_search&quot;, // 搜索</span></span><br><span class="line">        <span class="comment">// &quot;header_saveload&quot;, // 上传下载按钮</span></span><br><span class="line">        <span class="comment">// &quot;header_fullscreen_button&quot;, // 全屏</span></span><br><span class="line">        <span class="string">&quot;source_selection_markers&quot;</span>, <span class="comment">// 禁用系列和指示器的选择标记</span></span><br><span class="line">        <span class="string">&quot;border_around_the_chart&quot;</span>, <span class="comment">// 周围边框</span></span><br><span class="line">        <span class="string">&quot;constraint_dialogs_movement&quot;</span>,</span><br><span class="line">        <span class="string">&quot;show_interval_dialog_on_key_press&quot;</span>,</span><br><span class="line">        <span class="string">&quot;symbol_search_hot_key&quot;</span>,</span><br><span class="line">        <span class="string">&quot;volume_force_overlay&quot;</span>, <span class="comment">// 防止他们重叠</span></span><br><span class="line">        <span class="string">&quot;property_pages&quot;</span>, <span class="comment">// 禁用所有属性页</span></span><br><span class="line">        <span class="string">&quot;main_series_scale_menu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;star_some_intervals_by_default&quot;</span>,</span><br><span class="line">        <span class="string">&quot;datasource_copypaste&quot;</span>,</span><br><span class="line">        <span class="string">&quot;right_bar_stays_on_scroll&quot;</span>,</span><br><span class="line">        <span class="string">&quot;context_menus&quot;</span>,</span><br><span class="line">        <span class="string">&quot;go_to_date&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compare_symbol&quot;</span>,</span><br><span class="line">        <span class="string">&quot;timezone_menu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;edit_buttons_in_legend&quot;</span>,</span><br><span class="line">        <span class="string">&quot;save_chart_properties_to_local_storage&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pane_context_menu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;control_bar&quot;</span>, <span class="comment">//与图表底部的导航按钮相关联</span></span><br><span class="line">        <span class="string">&quot;collapsible_header&quot;</span>,</span><br><span class="line">        <span class="string">&quot;countdown&quot;</span>, <span class="comment">// 在价格标尺上显示倒计时标签</span></span><br><span class="line">        <span class="string">&quot;show_dialog_on_snapshot_ready&quot;</span>,</span><br><span class="line">        <span class="string">&quot;study_dialog_search_control&quot;</span>,</span><br><span class="line">        <span class="string">&quot;show_hide_button_in_legend&quot;</span>,</span><br><span class="line">        <span class="string">&quot;legend_widget&quot;</span>,</span><br><span class="line">        <span class="string">&quot;widget_logo&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;charting_library_debug_mode&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hide_left_toolbar_by_default&quot;</span>,</span><br><span class="line">        <span class="string">&quot;scales_context_menu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;format_button_in_legend&quot;</span>,</span><br><span class="line">        <span class="string">&quot;side_toolbar_in_fullscreen_mode&quot;</span>,</span><br><span class="line">        <span class="string">&quot;study_buttons_in_legend&quot;</span>,</span><br><span class="line">        <span class="string">&quot;move_logo_to_main_pane&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dont_show_boolean_study_arguments&quot;</span>, <span class="comment">//是否隐藏指标参数</span></span><br><span class="line">        <span class="string">&quot;use_localstorage_for_settings&quot;</span>,</span><br><span class="line">        <span class="string">&quot;disable_resolution_rebuild&quot;</span>,</span><br><span class="line">        <span class="string">&quot;display_market_status&quot;</span>,</span><br><span class="line">        <span class="string">&quot;symbol_info&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      enabled_features: [</span><br><span class="line">        <span class="string">&quot;chart_zoom&quot;</span>,</span><br><span class="line">        <span class="string">&quot;study_templates&quot;</span>,</span><br><span class="line">        <span class="string">&quot;seconds_resolution&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hide_last_na_study_output&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adaptive_logo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;same_data_requery&quot;</span>,</span><br><span class="line">        <span class="string">&quot;chart_scroll&quot;</span>,</span><br><span class="line">        <span class="comment">// &quot;study_buttons_in_legend&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;chart_scroll&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;chart_zoom&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;keep_left_toolbar_visible_on_small_screens&quot;, //防止左侧工具栏在小屏幕上消失</span></span><br><span class="line">        <span class="string">&quot;show_animated_logo&quot;</span>, <span class="comment">//隐藏logo的动画</span></span><br><span class="line">        <span class="string">&quot;logo_without_link&quot;</span> <span class="comment">//去除logo的链接</span></span><br><span class="line">        <span class="comment">// &quot;adaptive_logo&quot;, // 在小屏幕设备上隐藏 logo 的TradingView文字</span></span><br><span class="line">        <span class="comment">// &quot;remove_library_container_border&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;move_logo_to_main_pane&quot;, // 将 logo 放在主数据列窗格上而不是底部窗格</span></span><br><span class="line">        <span class="comment">// &quot;hide_last_na_study_output&quot;, //隐藏最后一次指标输出</span></span><br><span class="line">        <span class="comment">// &quot;hide_left_toolbar_by_default&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;study_templates&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;seconds_resolution&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;same_data_requery&quot;,</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">//设置初始化加载条样式</span></span><br><span class="line">      loading_screen: &#123;</span><br><span class="line">        backgroundColor: <span class="string">&quot;#EDEDED&quot;</span>,</span><br><span class="line">        foregroundColor: <span class="string">&quot;#578BFF&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      customFormatters: &#123;</span><br><span class="line">        timeFormatter: &#123;</span><br><span class="line">          format: <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _format_str = <span class="string">&quot;%h:%m&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> _format_str</span><br><span class="line">              .replace(<span class="string">&quot;%h&quot;</span>, (date.getUTCHours() + <span class="string">&quot;&quot;</span>).padStart(<span class="number">2</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">              .replace(<span class="string">&quot;%m&quot;</span>, (date.getUTCMinutes() + <span class="string">&quot;&quot;</span>).padStart(<span class="number">2</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">              .replace(<span class="string">&quot;%s&quot;</span>, (date.getUTCSeconds() + <span class="string">&quot;&quot;</span>).padStart(<span class="number">2</span>, <span class="number">0</span>), <span class="number">2</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        dateFormatter: &#123;</span><br><span class="line">          format: <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              date.getUTCFullYear() +</span><br><span class="line">              <span class="string">&quot;-&quot;</span> +</span><br><span class="line">              (date.getUTCMonth() + <span class="number">1</span> + <span class="string">&quot;&quot;</span>).padStart(<span class="number">2</span>, <span class="number">0</span>) +</span><br><span class="line">              <span class="string">&quot;-&quot;</span> +</span><br><span class="line">              (date.getUTCDate() + <span class="string">&quot;&quot;</span>).padStart(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//设置初始化样式配置</span></span><br><span class="line">      overrides: <span class="built_in">this</span>.getOverrides(</span><br><span class="line">        <span class="string">&quot;white&quot;</span>,</span><br><span class="line">        <span class="built_in">this</span>.changeInterval(<span class="built_in">this</span>.intervalType).lineType</span><br><span class="line">      ),</span><br><span class="line">      studies_overrides: <span class="built_in">this</span>.getStudiesOverrides(<span class="string">&quot;white&quot;</span>),</span><br><span class="line">      hide_top_toolbar: <span class="literal">false</span>, <span class="comment">//是否隐藏顶部工具栏</span></span><br><span class="line">      hide_legend: <span class="literal">false</span>, <span class="comment">// 是否隐藏商品代码描述</span></span><br><span class="line">      save_image: <span class="literal">false</span>, <span class="comment">// 获取图像按键(右上角照相机)</span></span><br><span class="line">      withdateranges: <span class="literal">true</span>, <span class="comment">// 是否显示底部工具栏</span></span><br><span class="line">      allow_symbol_change: <span class="literal">false</span>, <span class="comment">// 是否允许修改商品名称</span></span><br><span class="line">      hide_side_toolbar: <span class="literal">false</span>, <span class="comment">// 显示绘图工具栏(左侧工具栏)</span></span><br><span class="line">      show_popup_button: <span class="literal">false</span>, <span class="comment">// 在弹出窗口显示(右上角分享)</span></span><br><span class="line">      no_referral_id: <span class="literal">false</span>, <span class="comment">// 激活引荐计划</span></span><br><span class="line">      details: <span class="literal">false</span>, <span class="comment">// 显示详细资料</span></span><br><span class="line">      logo: &#123;</span><br><span class="line">        <span class="comment">// image: &quot;https://www.seaio.cc/logo.png&quot;,</span></span><br><span class="line">        <span class="comment">// link: &quot;https://www.seaio.cc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    TVjsApi.tradingViewReady();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TradingView 初始化后的操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TVApi.prototype.tradingViewReady = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> widget = <span class="built_in">this</span>.widgets;</span><br><span class="line">  widget.onChartReady(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c = widget.activeChart();</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setMaStudyLegend();</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">    widget.subscribe(<span class="string">&quot;mouse_down&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setValueLegend(), <span class="built_in">this</span>.setMaStudyLegend();</span><br><span class="line">      &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    widget.subscribe(<span class="string">&quot;mouse_up&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      c.resetData();</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setMaStudyLegend();</span><br><span class="line">        <span class="comment">// 去除高开低收</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;tv-legend-value&quot;</span>).innerHTML = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    widget.subscribe(<span class="string">&quot;study&quot;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setMaStudyLegend();</span><br><span class="line">      &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    widget.subscribe(<span class="string">&quot;onTick&quot;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setMaStudyLegend();</span><br><span class="line">      &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据指标线名称显示指标线</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*String&#125;</span> </span>newTop  主图指标线简称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*String&#125;</span> </span>newBottom  副图指标线简称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TVApi.prototype.setStudyByName = <span class="function"><span class="keyword">function</span> (<span class="params">newTop = <span class="string">&quot;&quot;</span>, newBottom = <span class="string">&quot;&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.widgets.onChartReady(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">this</span>.widgets.activeChart(),</span><br><span class="line">      topFullName = <span class="built_in">this</span>.studyObj[newTop],</span><br><span class="line">      bottomFullName = <span class="built_in">this</span>.studyObj[newBottom];</span><br><span class="line">    <span class="keyword">if</span> (newTop != <span class="built_in">this</span>.topStudyName &amp;&amp; topFullName) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;top增加&quot;</span>, topFullName);</span><br><span class="line">      <span class="keyword">switch</span> (newTop) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;MA&quot;</span>:</span><br><span class="line">          <span class="built_in">this</span>.maOrBollObj.ma.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            t.createStudy(topFullName, !<span class="number">1</span>, !<span class="number">1</span>, [e.day], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, &#123;</span><br><span class="line">              <span class="string">&quot;plot.color&quot;</span>: e.color,</span><br><span class="line">              <span class="string">&quot;plot.linewidth&quot;</span>: e.linewidth</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="built_in">this</span>.topStudyName = newTop;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;BOLL&quot;</span>:</span><br><span class="line">          t.createStudy(topFullName, !<span class="number">1</span>, !<span class="number">1</span>, [<span class="number">20</span>, <span class="number">2</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, &#123;</span><br><span class="line">            <span class="string">&quot;plot.linewidth&quot;</span>: <span class="number">3</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="built_in">this</span>.topStudyName = newTop;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="built_in">this</span>.removeStudyByName(<span class="built_in">this</span>.topStudyName);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newBottom != <span class="built_in">this</span>.bottomStudyName &amp;&amp; bottomFullName) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;bottom增加&quot;</span>, bottomFullName);</span><br><span class="line">      <span class="keyword">switch</span> (newBottom) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;MACD&quot;</span>:</span><br><span class="line">          t.createStudy(bottomFullName, !<span class="number">1</span>, !<span class="number">1</span>, [<span class="number">12</span>, <span class="number">26</span>, <span class="string">&quot;close&quot;</span>, <span class="number">9</span>]);</span><br><span class="line">          <span class="built_in">this</span>.bottomStudyName = newBottom;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;KDJ&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;RSI&quot;</span>:</span><br><span class="line">          t.createStudy(bottomFullName, !<span class="number">1</span>, !<span class="number">1</span>);</span><br><span class="line">          <span class="built_in">this</span>.bottomStudyName = newBottom;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;OBV&quot;</span>:</span><br><span class="line">          t.createStudy(bottomFullName, !<span class="number">1</span>, !<span class="number">1</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, &#123;</span><br><span class="line">            <span class="string">&quot;plot.color&quot;</span>: <span class="string">&quot;green&quot;</span>,</span><br><span class="line">            <span class="string">&quot;plot.linewidth&quot;</span>: <span class="number">3</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="built_in">this</span>.bottomStudyName = newBottom;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="built_in">this</span>.removeStudyByName(<span class="built_in">this</span>.bottomStudyName);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除指标线</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*String&#125;</span> </span>name  要删除的指标线简称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*Boolean&#125;</span> </span>posBool 是不是主图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TVApi.prototype.removeStudyByName = <span class="function"><span class="keyword">function</span> (<span class="params">name, posBool</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> fullname = t.studyObj[name] || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="built_in">this</span>.widgets.activeChart();</span><br><span class="line">  c.getAllStudies()</span><br><span class="line">    .filter(<span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (r.name === fullname) &#123;</span><br><span class="line">        posBool</span><br><span class="line">          ? ((t.topStudyName = <span class="string">&quot;&quot;</span>),</span><br><span class="line">            (<span class="built_in">document</span>.getElementById(<span class="string">&quot;tv-legend-study&quot;</span>).innerHTML = <span class="string">&quot;&quot;</span>))</span><br><span class="line">          : (t.bottomStudyName = <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> r.name === fullname;</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      c.removeEntity(e.id);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置高开低收 信息框</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TVApi.prototype.setValueLegend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> chart = TVjsApi.widgets.chart();</span><br><span class="line">  <span class="keyword">let</span> _items =</span><br><span class="line">    chart._chartWidget._paneWidgets[<span class="number">0</span>].legendWidget._itemsBinding || [];</span><br><span class="line">  <span class="built_in">this</span>.setValueDom(_items[<span class="number">0</span>].last);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置高开低收 DOM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*Array&#125;</span> </span>data  数据信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">TVApi.prototype.setValueDom = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> html = <span class="string">&quot;&lt;div class=&#x27;value-box&#x27;&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> titles = [<span class="string">&quot;开&quot;</span>, <span class="string">&quot;高&quot;</span>, <span class="string">&quot;低&quot;</span>, <span class="string">&quot;收&quot;</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    html += <span class="string">`&lt;div class=&quot;item&quot;&gt;&lt;span class=&quot;title&quot;&gt;<span class="subst">$&#123;titles[i]&#125;</span>&lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;data[i][<span class="string">&quot;text&quot;</span>]&#125;</span>&lt;/span&gt;&lt;/div&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  html += <span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;tv-legend-value&quot;</span>).innerHTML = html;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置指标线 图例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TVApi.prototype.setMaStudyLegend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.widgets.onChartReady(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> chart = TVjsApi.widgets.chart();</span><br><span class="line">    <span class="keyword">let</span> _items =</span><br><span class="line">      chart._chartWidget._paneWidgets[<span class="number">0</span>].legendWidget._itemsBinding || [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> &lt; _items.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="number">4</span> &lt;= _items.length) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">          <span class="built_in">this</span>.maOrBollObj.ma[i].value = _items[i + <span class="number">1</span>].last[<span class="number">0</span>].text;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setMaStudyDom(<span class="built_in">this</span>.maOrBollObj.ma);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">          <span class="built_in">this</span>.maOrBollObj.boll[i].value = _items[<span class="number">1</span>].last[i].text;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setMaStudyDom(<span class="built_in">this</span>.maOrBollObj.boll);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置指标线 DOM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*Array&#125;</span> </span>data  数据信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TVApi.prototype.setMaStudyDom = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = data[i];</span><br><span class="line">    html += <span class="string">`&lt;span style=&#x27;color:<span class="subst">$&#123;a[<span class="string">&quot;color&quot;</span>]&#125;</span>&#x27;&gt;<span class="subst">$&#123;a[<span class="string">&quot;title&quot;</span>]&#125;</span>：<span class="subst">$&#123;a[<span class="string">&quot;value&quot;</span>]&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;tv-legend-study&quot;</span>).innerHTML = html;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TVApi.prototype.sendMessage = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.socket.checkOpen()) &#123;</span><br><span class="line">    <span class="built_in">this</span>.socket.send(data);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.socket.on(<span class="string">&quot;open&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      that.socket.send(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化时获取url中的参数</span></span><br><span class="line">TVApi.prototype.getUrlParams = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = location.search; <span class="comment">// 获取url中&quot;?&quot;符后的字串</span></span><br><span class="line">  <span class="keyword">var</span> theParams = &#123;&#125;; <span class="comment">// 初始化空对象接受url中的所有参数</span></span><br><span class="line">  <span class="keyword">if</span> (url.indexOf(<span class="string">&quot;?&quot;</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = url.substr(<span class="number">1</span>),</span><br><span class="line">      strs = str.split(<span class="string">&quot;&amp;&quot;</span>); <span class="comment">// 各个参数放到数组里</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">      theParams[strs[i].split(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>]] = <span class="built_in">unescape</span>(strs[i].split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> theParams;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置覆盖默认样式</span></span><br><span class="line">TVApi.prototype.getOverrides = <span class="function"><span class="keyword">function</span> (<span class="params">theme, intervalType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> themes = &#123;</span><br><span class="line">    white: &#123;</span><br><span class="line">      up: <span class="string">&quot;#1aad19&quot;</span>,</span><br><span class="line">      down: <span class="string">&quot;#d00218&quot;</span>,</span><br><span class="line">      bg: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">      grid: <span class="string">&quot;#e3edf5&quot;</span>,</span><br><span class="line">      cross: <span class="string">&quot;#23283D&quot;</span>,</span><br><span class="line">      border: <span class="string">&quot;#9194a4&quot;</span>,</span><br><span class="line">      text: <span class="string">&quot;#9194a4&quot;</span>,</span><br><span class="line">      areatop: <span class="string">&quot;rgba(122, 152, 247, .1)&quot;</span>,</span><br><span class="line">      areadown: <span class="string">&quot;rgba(122, 152, 247, .02)&quot;</span>,</span><br><span class="line">      line: <span class="string">&quot;#737375&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    black: &#123;</span><br><span class="line">      down: <span class="string">&quot;rgb(250,82,82)&quot;</span>,</span><br><span class="line">      up: <span class="string">&quot;rgb(18,184,134)&quot;</span>,</span><br><span class="line">      bg: <span class="string">&quot;#181B2A&quot;</span>,</span><br><span class="line">      grid: <span class="string">&quot;#1f2943&quot;</span>,</span><br><span class="line">      cross: <span class="string">&quot;#9194A3&quot;</span>,</span><br><span class="line">      text: <span class="string">&quot;#61688A&quot;</span>,</span><br><span class="line">      areatop: <span class="string">&quot;#1782d2&quot;</span>,</span><br><span class="line">      areadown: <span class="string">&quot;transparent&quot;</span>,</span><br><span class="line">      line: <span class="string">&quot;#737375&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mobile: &#123;</span><br><span class="line">      up: <span class="string">&quot;#03C087&quot;</span>,</span><br><span class="line">      down: <span class="string">&quot;#E76D42&quot;</span>,</span><br><span class="line">      bg: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">      grid: <span class="string">&quot;#f7f8fa&quot;</span>,</span><br><span class="line">      cross: <span class="string">&quot;#23283D&quot;</span>,</span><br><span class="line">      border: <span class="string">&quot;#C5CFD5&quot;</span>,</span><br><span class="line">      text: <span class="string">&quot;#8C9FAD&quot;</span>,</span><br><span class="line">      areatop: <span class="string">&quot;rgba(71, 78, 112, 0.1)&quot;</span>,</span><br><span class="line">      areadown: <span class="string">&quot;rgba(71, 78, 112, 0.02)&quot;</span>,</span><br><span class="line">      showLegend: !<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> t = themes[theme];</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    volumePaneSize: <span class="string">&quot;medium&quot;</span>, <span class="comment">// 成交量高度(支持的值: large, medium, small, tiny)</span></span><br><span class="line">    <span class="string">&quot;paneProperties.topMargin&quot;</span>: <span class="number">15</span>, <span class="comment">//K线面板属性,</span></span><br><span class="line">    <span class="string">&quot;paneProperties.bottomMargin&quot;</span>: <span class="number">7</span>, <span class="comment">//K线面板属性,</span></span><br><span class="line">    <span class="string">&quot;scalesProperties.fontSize&quot;</span>: <span class="number">9</span>, <span class="comment">// 设置坐标轴字体大小</span></span><br><span class="line">    <span class="comment">// 坐标轴和刻度标签颜色</span></span><br><span class="line">    <span class="string">&quot;scalesProperties.lineColor&quot;</span>: t.text,</span><br><span class="line">    <span class="string">&quot;scalesProperties.textColor&quot;</span>: t.text,</span><br><span class="line">    <span class="string">&quot;paneProperties.background&quot;</span>: t.bg, <span class="comment">// 画布白色背景颜色</span></span><br><span class="line">    <span class="comment">// 网格线</span></span><br><span class="line">    <span class="string">&quot;paneProperties.vertGridProperties.color&quot;</span>: t.grid,</span><br><span class="line">    <span class="string">&quot;paneProperties.horzGridProperties.color&quot;</span>: t.grid,</span><br><span class="line">    <span class="string">&quot;paneProperties.crossHairProperties.color&quot;</span>: t.cross, <span class="comment">// 十字线</span></span><br><span class="line">    <span class="string">&quot;paneProperties.crossHairProperties.style&quot;</span>: <span class="number">2</span>, <span class="comment">// 十字线样式</span></span><br><span class="line">    <span class="string">&quot;paneProperties.crossHairProperties.transparency&quot;</span>: <span class="number">0</span>, <span class="comment">// 十字线</span></span><br><span class="line">    <span class="string">&quot;paneProperties.legendProperties.showLegend&quot;</span>: <span class="literal">true</span>, <span class="comment">// 隐藏左上角标题</span></span><br><span class="line">    <span class="string">&quot;paneProperties.legendProperties.showStudyArguments&quot;</span>: !<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;paneProperties.legendProperties.showStudyTitles&quot;</span>: !<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;paneProperties.legendProperties.showStudyValues&quot;</span>: !<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;paneProperties.legendProperties.showSeriesTitle&quot;</span>: !<span class="number">1</span>, <span class="comment">// 是否显示大标题</span></span><br><span class="line">    <span class="string">&quot;paneProperties.legendProperties.showSeriesOHLC&quot;</span>: !<span class="number">0</span>,</span><br><span class="line">    <span class="comment">// &quot;paneProperties.legendProperties.showBarChange&quot;: !1,</span></span><br><span class="line">    <span class="comment">// &quot;paneProperties.legendProperties.showOnlyPriceSource&quot;: !1,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// K线图样式</span></span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.upColor&quot;</span>: t.up,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.downColor&quot;</span>: t.down,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.drawWick&quot;</span>: !<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.drawBorder&quot;</span>: !<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.borderColor&quot;</span>: t.border,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.borderUpColor&quot;</span>: t.up,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.borderDownColor&quot;</span>: t.down,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.wickUpColor&quot;</span>: t.up,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.wickDownColor&quot;</span>: t.down,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.candleStyle.barColorsOnPrevClose&quot;</span>: !<span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 空心K线图样式</span></span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.hollowCandleStyle.upColor&quot;</span>: t.up,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.hollowCandleStyle.downColor&quot;</span>: t.down,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.hollowCandleStyle.drawWick&quot;</span>: !<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.hollowCandleStyle.drawBorder&quot;</span>: !<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.hollowCandleStyle.borderColor&quot;</span>: t.border,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.hollowCandleStyle.borderUpColor&quot;</span>: t.up,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.hollowCandleStyle.borderDownColor&quot;</span>: t.down,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.hollowCandleStyle.wickColor&quot;</span>: t.line,</span><br><span class="line">    <span class="comment">// 平均K线图样式</span></span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.haStyle.upColor&quot;</span>: t.up,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.haStyle.downColor&quot;</span>: t.down,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.haStyle.drawWick&quot;</span>: !<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.haStyle.drawBorder&quot;</span>: !<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.haStyle.borderColor&quot;</span>: t.border,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.haStyle.borderUpColor&quot;</span>: t.up,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.haStyle.borderDownColor&quot;</span>: t.down,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.haStyle.wickColor&quot;</span>: t.border,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.haStyle.barColorsOnPrevClose&quot;</span>: !<span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 美国线样式</span></span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.barStyle.upColor&quot;</span>: t.up,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.barStyle.downColor&quot;</span>: t.down,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.barStyle.barColorsOnPrevClose&quot;</span>: !<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.barStyle.dontDrawOpen&quot;</span>: !<span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 线形图样式</span></span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.lineStyle.color&quot;</span>: t.border,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.lineStyle.linewidth&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.lineStyle.priceSource&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">    <span class="comment">// 面积图样式</span></span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.areaStyle.color1&quot;</span>: t.areatop,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.areaStyle.color2&quot;</span>: t.areadown,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.areaStyle.linecolor&quot;</span>: t.border,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.areaStyle.linewidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.areaStyle.priceSource&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        数据列风格。 请参阅下面的支持的值</span></span><br><span class="line"><span class="comment">        Bars = 0 #美国线 Candles = 1 #K线图 Line = 2 #线形图</span></span><br><span class="line"><span class="comment">        Area = 3 #面积图 Heiken Ashi = 8 #平均K线 Hollow Candles = 9 #空心K线</span></span><br><span class="line"><span class="comment">        Renko = 4 #转形图 Kagi = 5 #卡吉图 Point&amp;Figure = 6 #点数图</span></span><br><span class="line"><span class="comment">        Line Break = 7 #新</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.style&quot;</span>: intervalType,</span><br><span class="line">    <span class="comment">// 基准线样式</span></span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.baselineColor&quot;</span>:</span><br><span class="line">      <span class="string">&quot;rgba( 117, 134, 150, 1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.topFillColor1&quot;</span>:</span><br><span class="line">      <span class="string">&quot;rgba( 83, 185, 135, 0.1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.topFillColor2&quot;</span>:</span><br><span class="line">      <span class="string">&quot;rgba( 83, 185, 135, 0.1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.bottomFillColor1&quot;</span>:</span><br><span class="line">      <span class="string">&quot;rgba( 235, 77, 92, 0.1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.bottomFillColor2&quot;</span>:</span><br><span class="line">      <span class="string">&quot;rgba( 235, 77, 92, 0.1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.topLineColor&quot;</span>: <span class="string">&quot;rgba( 83, 185, 135, 1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.bottomLineColor&quot;</span>:</span><br><span class="line">      <span class="string">&quot;rgba( 235, 77, 92, 1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.topLineWidth&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.bottomLineWidth&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.priceSource&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.transparency&quot;</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">&quot;mainSeriesProperties.baselineStyle.baseLevelPercentage&quot;</span>: <span class="number">50</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//设置成交量默认样式</span></span><br><span class="line">TVApi.prototype.getStudiesOverrides = <span class="function"><span class="keyword">function</span> (<span class="params">theme</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> themes = &#123;</span><br><span class="line">    white: &#123;</span><br><span class="line">      c0: <span class="string">&quot;rgb(213, 79, 60)&quot;</span>,</span><br><span class="line">      c1: <span class="string">&quot;rgb(77, 179, 106)&quot;</span>,</span><br><span class="line">      t: <span class="number">60</span>,</span><br><span class="line">      v: !<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    black: &#123;</span><br><span class="line">      c0: <span class="string">&quot;#fa5252&quot;</span>,</span><br><span class="line">      c1: <span class="string">&quot;#12b886&quot;</span>,</span><br><span class="line">      t: <span class="number">90</span>,</span><br><span class="line">      v: !<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> t = themes[theme];</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">&quot;volume.volume.color.0&quot;</span>: t.c0,</span><br><span class="line">    <span class="string">&quot;volume.volume.color.1&quot;</span>: t.c1,</span><br><span class="line">    <span class="string">&quot;volume.volume.transparency&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">&quot;volume.volume.linewidth&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;volume.volume ma.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;volume.volume ma.plottype&quot;</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">    <span class="string">&quot;volume.show ma&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;volume.options.showStudyArguments&quot;</span>: !<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;volume.ma length&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">&quot;bollinger bands.length&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;bollinger bands.upper.color&quot;</span>: <span class="string">&quot;#DFC987&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bollinger bands.median.color&quot;</span>: <span class="string">&quot;#749A9E&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bollinger bands.lower.color&quot;</span>: <span class="string">&quot;#158EFE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bollinger bands.upper.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;bollinger bands.median.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;bollinger bands.lower.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;bollinger bands.plots background&quot;</span>: <span class="string">&quot;rgba(0,0,0,0)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;macd.macd.color&quot;</span>: <span class="string">&quot;#DFC987&quot;</span>,</span><br><span class="line">    <span class="string">&quot;macd.signal.color&quot;</span>: <span class="string">&quot;#158EFE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;macd.macd.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;macd.signal.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;macd.histogram.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;macd.histogram.plottype&quot;</span>: <span class="string">&quot;histogram&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rsi.length&quot;</span>: <span class="number">14</span>,</span><br><span class="line">    <span class="string">&quot;rsi.source&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rsi.plot.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;rsi.plot.color&quot;</span>: <span class="string">&quot;rgba(10,115,255,1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stoch.length&quot;</span>: <span class="number">14</span>,</span><br><span class="line">    <span class="string">&quot;stoch.smoothk&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;stoch.smoothd&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;stoch.%k.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;stoch.%d.linewidth&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;stoch.show upperlimit&quot;</span>: !<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;stoch.show lowerlimit&quot;</span>: !<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;stoch.hlines background&quot;</span>: !<span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 转换intervalType(1min/15min/day/week/1hour/4hour)为interval(1/15/1D/week/60/240)</span></span><br><span class="line">TVApi.prototype.changeInterval = <span class="function"><span class="keyword">function</span> (<span class="params">intervalType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> intervalObj = &#123;</span><br><span class="line">    hm: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;1min&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;5min&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;15min&quot;</span>: <span class="string">&quot;15&quot;</span>,</span><br><span class="line">    <span class="string">&quot;30min&quot;</span>: <span class="string">&quot;30&quot;</span>,</span><br><span class="line">    <span class="string">&quot;1hour&quot;</span>: <span class="string">&quot;60&quot;</span>,</span><br><span class="line">    day: <span class="string">&quot;1D&quot;</span>,</span><br><span class="line">    week: <span class="string">&quot;1W&quot;</span>,</span><br><span class="line">    month: <span class="string">&quot;1M&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    interval: intervalObj[intervalType] || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    lineType: intervalType == <span class="string">&quot;hm&quot;</span> ? <span class="number">3</span> : <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换数据格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*Array&#125;</span> </span>arr  数据信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TVApi.prototype.changeData = <span class="function"><span class="keyword">function</span> (<span class="params">arr = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    time: <span class="built_in">parseInt</span>((arr[<span class="number">0</span>] + <span class="string">&quot;&quot;</span>).length == <span class="number">13</span> ? +arr[<span class="number">0</span>] : +arr[<span class="number">0</span>] * <span class="number">1000</span>),</span><br><span class="line">    open: +arr[<span class="number">1</span>],</span><br><span class="line">    high: +arr[<span class="number">2</span>],</span><br><span class="line">    low: +arr[<span class="number">3</span>],</span><br><span class="line">    close: +arr[<span class="number">4</span>],</span><br><span class="line">    volume: +arr[<span class="number">5</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理websocket返回的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*Array&#125;</span> </span>data  数据信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 数据模式 klines: [[1610613060000, &quot;0.3471&quot;, &quot;0.3471&quot;, &quot;0.3469&quot;, &quot;0.3469&quot;, &quot;14765.4&quot;, 0, &quot;5122.79336&quot;, 4, &quot;0&quot;, &quot;0&quot;]]</span></span><br><span class="line">TVApi.prototype.onMessage = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="built_in">this</span>,</span><br><span class="line">    ticker = t.interval;</span><br><span class="line">  <span class="comment">// 历史数据</span></span><br><span class="line">  <span class="keyword">if</span> ((data &amp;&amp; data.length &gt; <span class="number">1</span>) || (data &amp;&amp; <span class="built_in">this</span>.intervalType == <span class="string">&quot;month&quot;</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ticker, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _callback = t.cacheData[ticker + <span class="string">&quot;_callback&quot;</span>],</span><br><span class="line">      _data = data.map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t.changeData(i);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">if</span> (_callback) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&quot;-------&#123;callback&#125; 调用 onMessage-------&quot;</span>,</span><br><span class="line">        t.intervalType,</span><br><span class="line">        _data.length</span><br><span class="line">      );</span><br><span class="line">      t.cacheData = &#123;&#125;;</span><br><span class="line">      _callback(_data, &#123;</span><br><span class="line">        noData: <span class="number">0</span> === _data.length</span><br><span class="line">      &#125;);</span><br><span class="line">      Window._hasGetBars = <span class="literal">true</span>;</span><br><span class="line">      errorTimer(<span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(_callback);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;-------&#123;data&#125; 缓存 onMessage-------&quot;</span>);</span><br><span class="line">      t.cacheData[ticker + <span class="string">&quot;_data&quot;</span>] = _data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      t.setMaStudyLegend();</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 递增数据</span></span><br><span class="line">  <span class="keyword">if</span> (data &amp;&amp; data.length === <span class="number">1</span> &amp;&amp; !TV_TIMER) &#123;</span><br><span class="line">    t.datafeeds.updateData(t.changeData(data[<span class="number">0</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">TVApi.prototype.getBars = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  symbolInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">  resolution,</span></span></span><br><span class="line"><span class="function"><span class="params">  rangeStartDate,</span></span></span><br><span class="line"><span class="function"><span class="params">  rangeEndDate,</span></span></span><br><span class="line"><span class="function"><span class="params">  onDataCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">  onErrorCallback</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ticker = <span class="built_in">this</span>.interval;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;resolution&quot;</span>, resolution);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ticker&quot;</span>, ticker);</span><br><span class="line">  <span class="keyword">if</span> (Window._hasGetBars || ticker !== resolution) &#123;</span><br><span class="line">    onDataCallback([], &#123;</span><br><span class="line">      noData: !<span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> !<span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _data = <span class="built_in">this</span>.cacheData[ticker + <span class="string">&quot;_data&quot;</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;typeof&quot;</span>, <span class="keyword">typeof</span> _data);</span><br><span class="line">    <span class="keyword">if</span> (_data) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="built_in">this</span>.intervalType,</span><br><span class="line">        _data.length,</span><br><span class="line">        <span class="string">&quot;-------&#123;data&#125; 调用 getBars-------&quot;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="built_in">this</span>.cacheData = &#123;&#125;;</span><br><span class="line">      onDataCallback(_data, &#123;</span><br><span class="line">        noData: <span class="number">0</span> === _data.length</span><br><span class="line">      &#125;);</span><br><span class="line">      Window._hasGetBars = <span class="literal">true</span>;</span><br><span class="line">      errorTimer(<span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(_data);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;-------&#123;callback&#125; 缓存 getBars-------&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.cacheData[ticker + <span class="string">&quot;_callback&quot;</span>] = onDataCallback;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> TVjsApi = <span class="keyword">new</span> TVApi();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> params = TVjsApi.getUrlParams();</span><br><span class="line">  TVjsApi.intervalType = params[<span class="string">&quot;intervalType&quot;</span>] || <span class="string">&quot;1min&quot;</span>;</span><br><span class="line">  TVjsApi.interval =</span><br><span class="line">    TVjsApi.changeInterval(TVjsApi.intervalType)[<span class="string">&quot;interval&quot;</span>] || <span class="string">&quot;1&quot;</span>;</span><br><span class="line">  TVjsApi.initTradingView();</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  TVjsApi.initSocket();</span><br><span class="line">  <span class="keyword">var</span> params = TVjsApi.getUrlParams();</span><br><span class="line">  <span class="keyword">var</span> topStudyName = !params.hasOwnProperty(<span class="string">&quot;study_top&quot;</span>)</span><br><span class="line">    ? <span class="string">&quot;MA&quot;</span></span><br><span class="line">    : params[<span class="string">&quot;study_top&quot;</span>] || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> bottomStudyName = params.study_bottom || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  TVjsApi.setStudyByName(topStudyName, bottomStudyName);</span><br><span class="line">&#125;, <span class="number">50</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Express 框架</title>
    <url>/2020/09/11/nodeJs/empress/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Express 是目前最流行的基于 Node.js 的 Web 开发框架，可以快速地搭建一个完整功能的网站。</p>
<p>Express 上手非常简单，首先新建一个项目目录，假定叫做 hello-world。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir hello-world</span><br></pre></td></tr></table></figure>

<p>进入该目录，新建一个 package.json 文件，内容如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello-world&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;hello world test app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;express&quot;</span>: <span class="string">&quot;4.x&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码定义了项目的名称、描述、版本等，并且指定需要 4.0 版本以上的 Express。</p>
<p>然后，就可以安装了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>执行上面的命令以后，在项目根目录下，新建一个启动文件，假定叫做 index.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname + <span class="string">&quot;/public&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>

<p>然后，运行上面的启动脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node index</span><br></pre></td></tr></table></figure>

<p>现在就可以访问<code>http://localhost:8080</code>，它会在浏览器中打开当前目录的 public 子目录（严格来说，是打开 public 目录的 index.html 文件）。如果 public 目录之中有一个图片文件<code>my_image.png</code>，那么可以用<code>http://localhost:8080/my_image.png</code>访问该文件。</p>
<p>你也可以在 index.js 之中，生成动态网页。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>然后，在命令行下运行启动脚本，就可以在浏览器中访问项目网站了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node index</span><br></pre></td></tr></table></figure>

<p>上面代码会在本机的 3000 端口启动一个网站，网页显示 Hello World。</p>
<p>启动脚本 index.js 的<code>app.get</code>方法，用于指定不同的访问路径所对应的回调函数，这叫做“路由”（routing）。上面代码只指定了根目录的回调函数，因此只有一个路由记录。实际应用中，可能有多个路由记录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&quot;/customer&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;customer page&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&quot;/admin&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;admin page&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>这时，最好就把路由放到一个单独的文件中，比如新建一个 routes 子目录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  app.get(<span class="string">&quot;/customer&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;customer page&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  app.get(<span class="string">&quot;/admin&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;admin page&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后，原来的 index.js 就变成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">&quot;./routes&quot;</span>)(app);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h1 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h1><h2 id="底层：http-模块"><a href="#底层：http-模块" class="headerlink" title="底层：http 模块"></a>底层：http 模块</h2><p>Express 框架建立在 node.js 内置的 http 模块上。http 模块生成服务器的原始代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  response.end(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="string">&quot;localhost&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码的关键是 http 模块的 createServer 方法，表示生成一个 HTTP 服务器实例。该方法接受一个回调函数，该回调函数的参数，分别为代表 HTTP 请求和 HTTP 回应的 request 对象和 response 对象。</p>
<p>Express 框架的核心是对 http 模块的再包装。上面的代码用 Express 改写如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>比较两段代码，可以看到它们非常接近。原来是用<code>http.createServer</code>方法新建一个 app 实例，现在则是用 Express 的构造方法，生成一个 Epress 实例。两者的回调函数都是相同的。Express 框架等于在 http 模块之上，加了一个中间层。</p>
<h2 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h2><p>简单说，中间件（middleware）就是处理 HTTP 请求的函数。它最大的特点就是，一个中间件处理完，再传递给下一个中间件。App 实例在运行过程中，会调用一系列的中间件。</p>
<p>每个中间件可以从 App 实例，接收三个参数，依次为 request 对象（代表 HTTP 请求）、response 对象（代表 HTTP 回应），next 回调函数（代表下一个中间件）。每个中间件都可以对 HTTP 请求（request 对象）进行加工，并且决定是否调用 next 方法，将 request 对象再传给下一个中间件。</p>
<p>一个不进行任何操作、只传递 request 对象的中间件，就是下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uselessMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的 next 就是下一个中间件。如果它带有参数，则代表抛出一个错误，参数为错误文本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uselessMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  next(<span class="string">&quot;出错了！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抛出错误以后，后面的中间件将不再执行，直到发现一个错误处理函数为止。</p>
<h2 id="use-方法"><a href="#use-方法" class="headerlink" title="use 方法"></a>use 方法</h2><p>use 是 express 注册中间件的方法，它返回一个函数。下面是一个连续调用两个中间件的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;In comes a &quot;</span> + request.method + <span class="string">&quot; to &quot;</span> + request.url);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  response.end(<span class="string">&quot;Hello world!\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码使用<code>app.use</code>方法，注册了两个中间件。收到 HTTP 请求后，先调用第一个中间件，在控制台输出一行信息，然后通过<code>next</code>方法，将执行权传给第二个中间件，输出 HTTP 回应。由于第二个中间件没有调用<code>next</code>方法，所以 request 对象就不再向后传递了。</p>
<p><code>use</code>方法内部可以对访问路径进行判断，据此就能实现简单的路由，根据不同的请求网址，返回不同的网页内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">    response.end(<span class="string">&quot;Welcome to the homepage!\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url == <span class="string">&quot;/about&quot;</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">404</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  response.end(<span class="string">&quot;404 error!\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码通过<code>request.url</code>属性，判断请求的网址，从而返回不同的内容。注意，<code>app.use</code>方法一共登记了三个中间件，只要请求路径匹配，就不会将执行权交给下一个中间件。因此，最后一个中间件会返回 404 错误，即前面的中间件都没匹配请求路径，找不到所要请求的资源。</p>
<p>除了在回调函数内部判断请求的网址，use 方法也允许将请求网址写在第一个参数。这代表，只有请求路径匹配这个参数，后面的中间件才会生效。无疑，这样写更加清晰和方便。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&quot;/path&quot;</span>, someMiddleware);</span><br></pre></td></tr></table></figure>

<p>上面代码表示，只对根目录的请求，调用某个中间件。</p>
<p>因此，上面的代码可以写成下面的样子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&quot;/home&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  response.end(<span class="string">&quot;Welcome to the homepage!\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&quot;/about&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  response.end(<span class="string">&quot;Welcome to the about page!\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">404</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  response.end(<span class="string">&quot;404 error!\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Express-的方法"><a href="#Express-的方法" class="headerlink" title="Express 的方法"></a>Express 的方法</h1><h2 id="all-方法和-HTTP-动词方法"><a href="#all-方法和-HTTP-动词方法" class="headerlink" title="all 方法和 HTTP 动词方法"></a>all 方法和 HTTP 动词方法</h2><p>针对不同的请求，Express 提供了 use 方法的一些别名。比如，上面代码也可以用别名的形式来写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">&quot;*&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.end(<span class="string">&quot;Welcome to the homepage!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/about&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.end(<span class="string">&quot;Welcome to the about page!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;*&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.end(<span class="string">&quot;404!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码的 all 方法表示，所有请求都必须通过该中间件，参数中的“*”表示对所有路径有效。get 方法则是只有 GET 动词的 HTTP 请求通过该中间件，它的第一个参数是请求的路径。由于 get 方法的回调函数没有调用 next 方法，所以只要有一个中间件被调用了，后面的中间件就不会再被调用了。</p>
<p>除了 get 方法以外，Express 还提供 post、put、delete 方法，即 HTTP 动词都是 Express 的方法。</p>
<p>这些方法的第一个参数，都是请求的路径。除了绝对匹配以外，Express 允许模式匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/hello/:who&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.end(<span class="string">&quot;Hello, &quot;</span> + req.params.who + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码将匹配“/hello/alice”网址，网址中的 alice 将被捕获，作为 req.params.who 属性的值。需要注意的是，捕获后需要对网址进行检查，过滤不安全字符，上面的写法只是为了演示，生产中不应这样直接使用用户提供的值。</p>
<p>如果在模式参数后面加上问号，表示该参数可选。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/hello/:who?&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.params.id) &#123;</span><br><span class="line">    res.end(<span class="string">&quot;Hello, &quot;</span> + req.params.who + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(<span class="string">&quot;Hello, Guest.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下面是一些更复杂的模式匹配的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/forum/:fid/thread/:tid&quot;</span>, middleware);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配/commits/71dbb9c</span></span><br><span class="line"><span class="comment">// 或/commits/71dbb9c..4c084f9 这样的 git 格式的网址</span></span><br><span class="line">app.get(<span class="regexp">/^\/commits\/(\w+)(?:\.\.(\w+))?$/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">from</span> = req.params[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> to = req.params[<span class="number">1</span>] || <span class="string">&quot;HEAD&quot;</span>;</span><br><span class="line">  res.send(<span class="string">&quot;commit range &quot;</span> + <span class="keyword">from</span> + <span class="string">&quot;..&quot;</span> + to);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="set-方法"><a href="#set-方法" class="headerlink" title="set 方法"></a>set 方法</h2><p>set 方法用于指定变量的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.set(<span class="string">&quot;views&quot;</span>, _dirname + <span class="string">&quot;/views&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;jade&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码使用 set 方法，为系统变量“views”和“view engine”指定值。</p>
<h2 id="response-对象"><a href="#response-对象" class="headerlink" title="response 对象"></a>response 对象</h2><p><strong>（1）response.redirect 方法</strong></p>
<p>response.redirect 方法允许网址的重定向。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.redirect(<span class="string">&quot;/hello/anime&quot;</span>);</span><br><span class="line">response.redirect(<span class="string">&quot;http://www.example.com&quot;</span>);</span><br><span class="line">response.redirect(<span class="number">301</span>, <span class="string">&quot;http://www.example.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>（2）response.sendFile 方法</strong></p>
<p>response.sendFile 方法用于发送文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.sendFile(<span class="string">&quot;/path/to/anime.mp4&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>（3）response.render 方法</strong></p>
<p>response.render 方法用于渲染网页模板。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.render(<span class="string">&quot;index&quot;</span>, &#123; <span class="attr">message</span>: <span class="string">&quot;Hello World&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码使用 render 方法，将 message 变量传入 index 模板，渲染成 HTML 网页。</p>
<h2 id="requst-对象"><a href="#requst-对象" class="headerlink" title="requst 对象"></a>requst 对象</h2><p><strong>（1）request.ip</strong></p>
<p>request.ip 属性用于获得 HTTP 请求的 IP 地址。</p>
<p><strong>（2）request.files</strong></p>
<p>request.files 用于获取上传的文件。</p>
<h2 id="搭建-HTTPs-服务器"><a href="#搭建-HTTPs-服务器" class="headerlink" title="搭建 HTTPs 服务器"></a>搭建 HTTPs 服务器</h2><p>使用 Express 搭建 HTTPs 加密服务器，也很简单。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(<span class="string">&quot;E:/ssl/myserver.key&quot;</span>),</span><br><span class="line">  cert: fs.readFileSync(<span class="string">&quot;E:/ssl/myserver.crt&quot;</span>),</span><br><span class="line">  passphrase: <span class="string">&quot;1234&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;Hello World Expressjs&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = https.createServer(options, app);</span><br><span class="line">server.listen(<span class="number">8084</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Server is running on port 8084&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="项目开发实例"><a href="#项目开发实例" class="headerlink" title="项目开发实例"></a>项目开发实例</h1><h2 id="编写启动脚本"><a href="#编写启动脚本" class="headerlink" title="编写启动脚本"></a>编写启动脚本</h2><p>上一节使用 express 命令自动建立项目，也可以不使用这个命令，手动新建所有文件。</p>
<p>先建立一个项目目录（假定这个目录叫做 demo）。进入该目录，新建一个 package.json 文件，写入项目的配置信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;demo&quot;</span>,</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;My First Express App&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;express&quot;</span>: <span class="string">&quot;3.x&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在项目目录中，新建文件 app.js。项目的代码就放在这个文件里面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure>

<p>上面代码首先加载 express 模块，赋给变量 express。然后，生成 express 实例，赋给变量 app。</p>
<p>接着，设定 express 实例的参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设定 port 变量，意为访问端口</span></span><br><span class="line">app.set(<span class="string">&quot;port&quot;</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定 views 变量，意为视图存放的目录</span></span><br><span class="line">app.set(<span class="string">&quot;views&quot;</span>, path.join(_dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定 view engine 变量，意为网页模板引擎</span></span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;jade&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.use(express.favicon());</span><br><span class="line">app.use(express.logger(<span class="string">&quot;dev&quot;</span>));</span><br><span class="line">app.use(express.bodyParser());</span><br><span class="line">app.use(express.methodOverride());</span><br><span class="line">app.use(app.router);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定静态文件目录，比如本地文件</span></span><br><span class="line"><span class="comment">// 目录为 demo/public/images，访问</span></span><br><span class="line"><span class="comment">// 网址则显示为 http://localhost:3000/images</span></span><br><span class="line">app.use(express.static(path.join(_dirname, <span class="string">&quot;public&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>上面代码中的 set 方法用于设定内部变量，use 方法用于调用 express 的中间件。</p>
<p>最后，调用实例方法 listen，让其监听事先设定的端口（3000）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.listen(app.get(<span class="string">&quot;port&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>这时，运行下面的命令，就可以在浏览器访问<a href="http://127.0.0.1:3000。">http://127.0.0.1:3000。</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% highlight bash %&#125;</span><br><span class="line"></span><br><span class="line">node app.js</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>网页提示“Cannot GET /”，表示没有为网站的根路径指定可以显示的内容。所以，下一步就是配置路由。</p>
<h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><p>所谓“路由”，就是指为不同的访问路径，指定不同的处理方法。</p>
<p><strong>（1）指定根路径</strong></p>
<p>在 app.js 之中，先指定根路径的处理方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码的 get 方法，表示处理客户端发出的 GET 请求。相应的，还有 app.post、app.put、app.del（delete 是 JavaScript 保留字，所以改叫 del）方法。</p>
<p>get 方法的第一个参数是访问路径，正斜杠（/）就代表根路径；第二个参数是回调函数，它的 req 参数表示客户端发来的 HTTP 请求，res 参数代表发向客户端的 HTTP 回应，这两个参数都是对象。在回调函数内部，使用 HTTP 回应的 send 方法，表示向浏览器发送一个字符串。然后，运行下面的命令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% highlight bash %&#125;</span><br><span class="line"></span><br><span class="line">node app.js</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时，在浏览器中访问<a href="http://127.0.0.1:3000，网页就会显示“Hello">http://127.0.0.1:3000，网页就会显示“Hello</a> World”。</p>
<p>如果需要指定 HTTP 头信息，回调函数就必须换一种写法，要使用 setHeader 方法与 end 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">  res.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">  res.setHeader(<span class="string">&quot;Content-Length&quot;</span>, body.length);</span><br><span class="line">  res.end(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（2）指定特定路径</strong></p>
<p>上面是处理根目录的情况，下面再举一个例子。假定用户访问/api 路径，希望返回一个 JSON 字符串。这时，get 可以这样写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.send(&#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码表示，除了发送字符串，send 方法还可以直接发送对象。重新启动 node 以后，再访问路径/api，浏览器就会显示一个 JSON 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: <span class="number">40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们也可以把 app.get 的回调函数，封装成模块。先在 routes 目录下面建立一个 api.js 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/api.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.index = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.json(<span class="number">200</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后，在 app.js 中加载这个模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">&quot;./routes/api&quot;</span>);</span><br><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, api.index);</span><br></pre></td></tr></table></figure>

<p>现在访问时，就会显示与上一次同样的结果。</p>
<p>如果只向浏览器发送简单的文本信息，上面的方法已经够用；但是如果要向浏览器发送复杂的内容，还是应该使用网页模板。</p>
<h2 id="静态网页模板"><a href="#静态网页模板" class="headerlink" title="静态网页模板"></a>静态网页模板</h2><p>在项目目录之中，建立一个子目录 views，用于存放网页模板。</p>
<p>假定这个项目有三个路径：根路径（/）、自我介绍（/about）和文章（/article）。那么，app.js 可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(_dirname + <span class="string">&quot;/views/index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/about&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.sendFile(_dirname + <span class="string">&quot;/views/about.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/article&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.sendFile(_dirname + <span class="string">&quot;/views/article.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码表示，三个路径分别对应 views 目录中的三个模板：index.html、about.html 和 article.html。另外，向服务器发送信息的方法，从 send 变成了 sendfile，后者专门用于发送文件。</p>
<p>假定 index.html 的内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% highlight html %&#125;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Express Demo&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;footer&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">   &lt;a href=<span class="string">&quot;/&quot;</span>&gt;首页&lt;<span class="regexp">/a&gt; - &lt;a href=&quot;/</span>about<span class="string">&quot;&gt;自我介绍&lt;/a&gt; - &lt;a href=&quot;</span>/article<span class="string">&quot;&gt;文章&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/footer&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>上面代码是一个静态网页。如果想要展示动态内容，就必须使用动态网页模板。</p>
<h1 id="动态网页模板"><a href="#动态网页模板" class="headerlink" title="动态网页模板"></a>动态网页模板</h1><p>网站真正的魅力在于动态网页，下面我们来看看，如何制作一个动态网页的网站。</p>
<h2 id="安装模板引擎"><a href="#安装模板引擎" class="headerlink" title="安装模板引擎"></a>安装模板引擎</h2><p>Express 支持多种模板引擎，这里采用 Handlebars 模板引擎的服务器端版本<a href="https://github.com/donpark/hbs">hbs</a>模板引擎。</p>
<p>先安装 hbs。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% highlight html %&#125;</span><br><span class="line"></span><br><span class="line">npm install hbs --save-dev</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码将 hbs 模块，安装在项目目录的子目录 node_modules 之中。save-dev 参数表示，将依赖关系写入 package.json 文件。安装以后的 package.json 文件变成下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json 文件</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;demo&quot;</span>,</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;My First Express App&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;express&quot;</span>: <span class="string">&quot;3.x&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;hbs&quot;</span>: <span class="string">&quot;~2.3.1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装模板引擎之后，就要改写 app.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载 hbs 模块</span></span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">&quot;hbs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定模板文件的后缀名为 html</span></span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行 hbs 模块</span></span><br><span class="line">app.engine(<span class="string">&quot;html&quot;</span>, hbs._express);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/about&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&quot;about&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/article&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&quot;article&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码改用 render 方法，对网页模板进行渲染。render 方法的参数就是模板的文件名，默认放在子目录 views 之中，后缀名已经在前面指定为 html，这里可以省略。所以，res.render(‘index’) 就是指，把子目录 views 下面的 index.html 文件，交给模板引擎 hbs 渲染。</p>
<h2 id="新建数据脚本"><a href="#新建数据脚本" class="headerlink" title="新建数据脚本"></a>新建数据脚本</h2><p>渲染是指将数据代入模板的过程。实际运用中，数据都是保存在数据库之中的，这里为了简化问题，假定数据保存在一个脚本文件中。</p>
<p>在项目目录中，新建一个文件 blog.js，用于存放数据。blog.js 的写法符合 CommonJS 规范，使得它可以被 require 语句加载。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// blog.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> entries = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&quot;第一篇&quot;</span>, <span class="attr">body</span>: <span class="string">&quot;正文&quot;</span>, <span class="attr">published</span>: <span class="string">&quot;6/2/2013&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&quot;第二篇&quot;</span>, <span class="attr">body</span>: <span class="string">&quot;正文&quot;</span>, <span class="attr">published</span>: <span class="string">&quot;6/3/2013&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&quot;第三篇&quot;</span>, <span class="attr">body</span>: <span class="string">&quot;正文&quot;</span>, <span class="attr">published</span>: <span class="string">&quot;6/4/2013&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">title</span>: <span class="string">&quot;第四篇&quot;</span>, <span class="attr">body</span>: <span class="string">&quot;正文&quot;</span>, <span class="attr">published</span>: <span class="string">&quot;6/5/2013&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">title</span>: <span class="string">&quot;第五篇&quot;</span>, <span class="attr">body</span>: <span class="string">&quot;正文&quot;</span>, <span class="attr">published</span>: <span class="string">&quot;6/10/2013&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">title</span>: <span class="string">&quot;第六篇&quot;</span>, <span class="attr">body</span>: <span class="string">&quot;正文&quot;</span>, <span class="attr">published</span>: <span class="string">&quot;6/12/2013&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getBlogEntries = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> entries;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getBlogEntry = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; entries.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (entries[i].id == id) <span class="keyword">return</span> entries[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="新建网页模板"><a href="#新建网页模板" class="headerlink" title="新建网页模板"></a>新建网页模板</h2><p>接着，新建模板文件 index.html。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% highlight html %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- views/index.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;文章列表&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123;&quot;&#123;&#123;&quot;&#125;&#125;#each entries&#125;&#125;</span><br><span class="line"></span><br><span class="line">   &lt;p&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;/article/&#123;&#123;&quot;</span>&#123;&#123;<span class="string">&quot;&#125;&#125;id&#125;&#125;&quot;</span>&gt;&#123;&#123;<span class="string">&quot;&#123;&#123;&quot;</span>&#125;&#125;title&#125;&#125;&lt;<span class="regexp">/a&gt;&lt;br/</span>&gt;</span><br><span class="line">      Published: &#123;&#123;<span class="string">&quot;&#123;&#123;&quot;</span>&#125;&#125;published&#125;&#125;</span><br><span class="line">   &lt;/p&gt;</span><br><span class="line">&#123;&#123;<span class="string">&quot;&#123;&#123;&quot;</span>&#125;&#125;/each&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>模板文件 about.html。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% highlight html %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- views/about.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;自我介绍&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;正文&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>模板文件 article.html。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% highlight html %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- views/article.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;&#123;&#123;<span class="string">&quot;&#123;&#123;&quot;</span>&#125;&#125;blog.title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">Published: &#123;&#123;<span class="string">&quot;&#123;&#123;&quot;</span>&#125;&#125;blog.published&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;p/&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">&quot;&#123;&#123;&quot;</span>&#125;&#125;blog.body&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到，上面三个模板文件都只有网页主体。因为网页布局是共享的，所以布局的部分可以单独新建一个文件 layout.html。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% highlight html %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- views/layout.html文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;&quot;&#123;&#123;&quot;&#125;&#125;title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;&quot;&#123;&#123;&#123;&quot;&#125;&#125;body&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        -</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>自我介绍<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h2><p>最后，改写 app.js 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">&quot;hbs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载数据模块</span></span><br><span class="line"><span class="keyword">var</span> blogEngine = <span class="built_in">require</span>(<span class="string">&quot;./blog&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;html&quot;</span>);</span><br><span class="line">app.engine(<span class="string">&quot;html&quot;</span>, hbs._express);</span><br><span class="line">app.use(express.bodyParser());</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&quot;index&quot;</span>, &#123;</span><br><span class="line">    title: <span class="string">&quot;最近文章&quot;</span>,</span><br><span class="line">    entries: blogEngine.getBlogEntries()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/about&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&quot;about&quot;</span>, &#123; <span class="attr">title</span>: <span class="string">&quot;自我介绍&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/article/:id&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> entry = blogEngine.getBlogEntry(req.params.id);</span><br><span class="line">  res.render(<span class="string">&quot;article&quot;</span>, &#123; <span class="attr">title</span>: entry.title, <span class="attr">blog</span>: entry &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中的 render 方法，现在加入了第二个参数，表示模板变量绑定的数据。</p>
<p>现在重启 node 服务器，然后访问<a href="http://127.0.0.1:3000。">http://127.0.0.1:3000。</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% highlight bash %&#125;</span><br><span class="line"></span><br><span class="line">node app.js</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看得，模板已经使用加载的数据渲染成功了。</p>
<h2 id="指定静态文件目录"><a href="#指定静态文件目录" class="headerlink" title="指定静态文件目录"></a>指定静态文件目录</h2><p>模板文件默认存放在 views 子目录。这时，如果要在网页中加载静态文件（比如样式表、图片等），就需要另外指定一个存放静态文件的目录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(express.static(<span class="string">&quot;public&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>上面代码在文件 app.js 之中，指定静态文件存放的目录是 public。于是，当浏览器发出非 HTML 文件请求时，服务器端就到 public 目录寻找这个文件。比如，浏览器发出如下的样式表请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">&quot;/bootstrap/css/bootstrap.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务器端就到 public/bootstrap/css/目录中寻找 bootstrap.css 文件。</p>
<h1 id="Express-Router-用法"><a href="#Express-Router-用法" class="headerlink" title="Express.Router 用法"></a>Express.Router 用法</h1><p>从 Express 4.0 开始，路由器功能成了一个单独的组件<code>Express.Router</code>。它好像小型的 express 应用程序一样，有自己的 use、get、param 和 route 方法。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>首先，<code>Express.Router</code>是一个构造函数，调用后返回一个路由器实例。然后，使用该实例的 HTTP 动词方法，为不同的访问路径，指定回调函数；最后，挂载到某个路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;首页&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/about&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;关于&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&quot;/&quot;</span>, router);</span><br></pre></td></tr></table></figure>

<p>上面代码先定义了两个访问路径，然后将它们挂载到根目录。如果最后一行改为 app.use(‘/app’, router)，则相当于为<code>/app</code>和<code>/app/about</code>这两个路径，指定了回调函数。</p>
<p>这种路由器可以自由挂载的做法，为程序带来了更大的灵活性，既可以定义多个路由器实例，也可以为将同一个路由器实例挂载到多个路径。</p>
<h2 id="router-route-方法"><a href="#router-route-方法" class="headerlink" title="router.route 方法"></a>router.route 方法</h2><p>router 实例对象的 route 方法，可以接受访问路径作为参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router</span><br><span class="line">  .route(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">  .post(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .get(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    Bear.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, bears</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) res.send(err);</span><br><span class="line">      res.json(bears);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&quot;/&quot;</span>, router);</span><br></pre></td></tr></table></figure>

<h2 id="router-中间件"><a href="#router-中间件" class="headerlink" title="router 中间件"></a>router 中间件</h2><p>use 方法为 router 对象指定中间件，即在数据正式发给用户之前，对数据进行处理。下面就是一个中间件的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.method, req.url);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，回调函数的 next 参数，表示接受其他中间件的调用。函数体中的 next()，表示将数据传递给下一个中间件。</p>
<p>注意，中间件的放置顺序很重要，等同于执行顺序。而且，中间件必须放在 HTTP 动词方法之前，否则不会执行。</p>
<h2 id="对路径参数的处理"><a href="#对路径参数的处理" class="headerlink" title="对路径参数的处理"></a>对路径参数的处理</h2><p>router 对象的 param 方法用于路径参数的处理，可以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.param(<span class="string">&quot;name&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next, name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对 name 进行验证或其他处理……</span></span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  req.name = name;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/hello/:name&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&quot;hello &quot;</span> + req.name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，get 方法为访问路径指定了 name 参数，param 方法则是对 name 参数进行处理。注意，param 方法必须放在 HTTP 动词方法之前。</p>
<h2 id="app-route"><a href="#app-route" class="headerlink" title="app.route"></a>app.route</h2><p>假定 app 是 Express 的实例对象，Express 4.0 为该对象提供了一个 route 属性。app.route 实际上是 express.Router()的缩写形式，除了直接挂载到根路径。因此，对同一个路径指定 get 和 post 方法的回调函数，可以写成链式形式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app</span><br><span class="line">  .route(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">  .get(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;this is the login form&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .post(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;processing&quot;</span>);</span><br><span class="line">    res.send(<span class="string">&quot;processing the login form!&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码的这种写法，显然非常简洁清晰。</p>
<h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><p>首先，在网页插入上传文件的表单。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/pictures/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  Select an image to upload:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Upload Image&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，服务器脚本建立指向<code>/upload</code>目录的路由。这时可以安装 multer 模块，它提供了上传文件的许多功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploading = multer(&#123;</span><br><span class="line">  dest: __dirname + <span class="string">&quot;../public/uploads/&quot;</span>,</span><br><span class="line">  <span class="comment">// 设定限制，每次最多上传1个文件，文件大小不超过1MB</span></span><br><span class="line">  limits: &#123; <span class="attr">fileSize</span>: <span class="number">1000000</span>, <span class="attr">files</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/upload&quot;</span>, uploading, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>

<p>上面代码是上传文件到本地目录。下面是上传到 Amazon S3 的例子。</p>
<p>首先，在 S3 上面新增 CORS 配置文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CORSConfiguration</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CORSRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AllowedOrigin</span>&gt;</span>*<span class="tag">&lt;/<span class="name">AllowedOrigin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AllowedMethod</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">AllowedMethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AllowedMethod</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">AllowedMethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AllowedMethod</span>&gt;</span>PUT<span class="tag">&lt;/<span class="name">AllowedMethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AllowedHeader</span>&gt;</span>*<span class="tag">&lt;/<span class="name">AllowedHeader</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">CORSRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">CORSConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的配置允许任意电脑向你的 bucket 发送 HTTP 请求。</p>
<p>然后，安装 aws-sdk。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install aws-sdk --save</span><br></pre></td></tr></table></figure>

<p>下面是服务器脚本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> aws = <span class="built_in">require</span>(<span class="string">&quot;aws-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AWS_ACCESS_KEY = <span class="string">&quot;your_AWS_access_key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> AWS_SECRET_KEY = <span class="string">&quot;your_AWS_secret_key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> S3_BUCKET = <span class="string">&quot;images_upload&quot;</span>;</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/sign&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  aws.config.update(&#123;</span><br><span class="line">    accessKeyId: AWS_ACCESS_KEY,</span><br><span class="line">    secretAccessKey: AWS_SECRET_KEY</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> s3 = <span class="keyword">new</span> aws.S3();</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    Bucket: S3_BUCKET,</span><br><span class="line">    Key: req.query.file_name,</span><br><span class="line">    Expires: <span class="number">60</span>,</span><br><span class="line">    ContentType: req.query.file_type,</span><br><span class="line">    ACL: <span class="string">&quot;public-read&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  s3.getSignedUrl(<span class="string">&quot;putObject&quot;</span>, options, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.send(<span class="string">&quot;Error with S3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    res.json(&#123;</span><br><span class="line">      signed_request: data,</span><br><span class="line">      url: <span class="string">&quot;https://s3.amazonaws.com/&quot;</span> + S3_BUCKET + <span class="string">&quot;/&quot;</span> + req.query.file_name</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>

<p>上面代码中，用户访问<code>/sign</code>路径，正确登录后，会收到一个 JSON 对象，里面是 S3 返回的数据和一个暂时用来接收上传文件的 URL，有效期只有 60 秒。</p>
<p>浏览器代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码为</span></span><br><span class="line"><span class="comment">// &lt;br&gt;Please select an image</span></span><br><span class="line"><span class="comment">// &lt;input type=&quot;file&quot; id=&quot;image&quot;&gt;</span></span><br><span class="line"><span class="comment">// &lt;br&gt;</span></span><br><span class="line"><span class="comment">// &lt;img id=&quot;preview&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;image&quot;</span>).onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">&quot;image&quot;</span>).files[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (!file) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  sign_request(file, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    upload(file, response.signed_request, response.url, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;preview&quot;</span>).src = response.url;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sign_request</span>(<span class="params">file, done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/sign?file_name=&quot;</span> + file.name + <span class="string">&quot;&amp;file_type=&quot;</span> + file.type);</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> response = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">      done(response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">file, signed_request, url, done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">&quot;PUT&quot;</span>, signed_request);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">&quot;x-amz-acl&quot;</span>, <span class="string">&quot;public-read&quot;</span>);</span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">      done();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  xhr.send(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码首先监听 file 控件的 change 事件，一旦有变化，就先向服务器要求一个临时的上传 URL，然后向该 URL 上传文件。</p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Grunt：任务自动管理工具</title>
    <url>/2020/09/11/tools/grunt/</url>
    <content><![CDATA[<h1 id="Grunt：任务自动管理工具"><a href="#Grunt：任务自动管理工具" class="headerlink" title="Grunt：任务自动管理工具"></a>Grunt：任务自动管理工具</h1><blockquote>
<p>在 Javascript 的开发过程中，经常会遇到一些重复性的任务，比如合并文件、压缩代码、检查语法错误、将 Sass 代码转成 CSS 代码等等。通常，我们需要使用不同的工具，来完成不同的任务，既重复劳动又非常耗时。Grunt 就是为了解决这个问题而发明的工具，可以帮助我们自动管理和运行各种任务。</p>
</blockquote>
<blockquote>
<p>简单说，Grunt 是一个自动任务运行器，会按照预先设定的顺序自动运行一系列的任务。这可以简化工作流程，减轻重复性工作带来的负担。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Grunt 基于 Node.js，安装之前要先安装 Node.js，然后运行下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install grunt-cli -g</span><br></pre></td></tr></table></figure>

<p>grunt-cli 表示安装的是 grunt 的命令行界面，参数 g 表示全局安装。</p>
<p>Grunt 使用模块结构，除了安装命令行界面以外，还要根据需要安装相应的模块。这些模块应该采用局部安装，因为不同项目可能需要同一个模块的不同版本。</p>
<p>首先，在项目的根目录下，创建一个文本文件 package.json，指定当前项目所需的模块。下面就是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-project-name&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Your Name&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;grunt&quot;</span>: <span class="string">&quot;0.x.x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grunt-contrib-jshint&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grunt-contrib-concat&quot;</span>: <span class="string">&quot;~0.1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grunt-contrib-uglify&quot;</span>: <span class="string">&quot;~0.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grunt-contrib-watch&quot;</span>: <span class="string">&quot;~0.1.4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这个 package.json 文件中，除了注明项目的名称和版本以外，还在 devDependencies 属性中指定了项目依赖的 grunt 模块和版本：grunt 核心模块为最新的 0.x.x 版，jshint 插件为最新版本，concat 插件不低于 0.1.1 版，uglify 插件不低于 0.1.0 版，watch 插件不低于 0.1.4 版。</p>
<p>然后，在项目的根目录下运行下面的命令，这些插件就会被自动安装在 node_modules 子目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>上面这种方法是针对已有 package.json 的情况。如果想要自动生成 package.json 文件，可以使用 npm init 命令，按照屏幕提示回答所需模块的名称和版本即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>如果已有的 package.json 文件不包括 Grunt 模块，可以在直接安装 Grunt 模块的时候，加上–save-dev 参数，该模块就会自动被加入 package.json 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install &lt;module&gt; --save-dev</span><br></pre></td></tr></table></figure>

<p>比如，对应上面 package.json 文件指定的模块，需要运行以下 npm 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install grunt --save-dev</span><br><span class="line">npm install grunt-contrib-jshint --save-dev</span><br><span class="line">npm install grunt-contrib-concat --save-dev</span><br><span class="line">npm install grunt-contrib-uglify --save-dev</span><br><span class="line">npm install grunt-contrib-watch --save-dev</span><br></pre></td></tr></table></figure>

<h2 id="命令脚本文件-Gruntfile-js"><a href="#命令脚本文件-Gruntfile-js" class="headerlink" title="命令脚本文件 Gruntfile.js"></a>命令脚本文件 Gruntfile.js</h2><p>模块安装完以后，下一步在项目的根目录下，新建脚本文件 Gruntfile.js。它是 grunt 的配置文件，就好像 package.json 是 npm 的配置文件一样。Gruntfile.js 就是一般的 Node.js 模块的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 配置Grunt各种模块的参数</span></span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    jshint: &#123;</span><br><span class="line">      <span class="comment">/* jshint的参数 */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    concat: &#123;</span><br><span class="line">      <span class="comment">/* concat的参数 */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    uglify: &#123;</span><br><span class="line">      <span class="comment">/* uglify的参数 */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      <span class="comment">/* watch的参数 */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从node_modules目录加载模块文件</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">&quot;grunt-contrib-jshint&quot;</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">&quot;grunt-contrib-concat&quot;</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">&quot;grunt-contrib-uglify&quot;</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">&quot;grunt-contrib-watch&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每行registerTask定义一个任务</span></span><br><span class="line">  grunt.registerTask(<span class="string">&quot;default&quot;</span>, [<span class="string">&quot;jshint&quot;</span>, <span class="string">&quot;concat&quot;</span>, <span class="string">&quot;uglify&quot;</span>]);</span><br><span class="line">  grunt.registerTask(<span class="string">&quot;check&quot;</span>, [<span class="string">&quot;jshint&quot;</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的代码用到了 grunt 代码的三个方法：</p>
<ul>
<li><p><strong>grunt.initConfig</strong>：定义各种模块的参数，每一个成员项对应一个同名模块。</p>
</li>
<li><p><strong>grunt.loadNpmTasks</strong>：加载完成任务所需的模块。</p>
</li>
<li><p><strong>grunt.registerTask</strong>：定义具体的任务。第一个参数为任务名，第二个参数是一个数组，表示该任务需要依次使用的模块。default 任务名表示，如果直接输入 grunt 命令，后面不跟任何参数，这时所调用的模块（该例为 jshint，concat 和 uglify）；该例的 check 任务则表示使用 jshint 插件对代码进行语法检查。</p>
</li>
</ul>
<p>上面的代码一共加载了四个模块：jshint（检查语法错误）、concat（合并文件）、uglify（压缩代码）和 watch（自动执行）。接下来，有两种使用方法。</p>
<p>（1）命令行执行某个模块，比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grunt jshint</span><br></pre></td></tr></table></figure>

<p>上面代码表示运行 jshint 模块。</p>
<p>（2）命令行执行某个任务。比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grunt check</span><br></pre></td></tr></table></figure>

<p>上面代码表示运行 check 任务。如果运行成功，就会显示“Done, without errors.”。</p>
<p>如果没有给出任务名，只键入 grunt，就表示执行默认的 default 任务。</p>
<h2 id="Gruntfile-js-实例：grunt-contrib-cssmin-模块"><a href="#Gruntfile-js-实例：grunt-contrib-cssmin-模块" class="headerlink" title="Gruntfile.js 实例：grunt-contrib-cssmin 模块"></a>Gruntfile.js 实例：grunt-contrib-cssmin 模块</h2><p>下面通过 cssmin 模块，演示如何编写 Gruntfile.js 文件。cssmin 模块的作用是最小化 CSS 文件。</p>
<p>首先，在项目的根目录下安装该模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install grunt-contrib-cssmin --save-dev</span><br></pre></td></tr></table></figure>

<p>然后，新建文件 Gruntfile.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    cssmin: &#123;</span><br><span class="line">      minify: &#123;</span><br><span class="line">        expand: <span class="literal">true</span>,</span><br><span class="line">        cwd: <span class="string">&quot;css/&quot;</span>,</span><br><span class="line">        src: [<span class="string">&quot;*.css&quot;</span>, <span class="string">&quot;!*.min.css&quot;</span>],</span><br><span class="line">        dest: <span class="string">&quot;css/&quot;</span>,</span><br><span class="line">        ext: <span class="string">&quot;.min.css&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      combine: &#123;</span><br><span class="line">        files: &#123;</span><br><span class="line">          <span class="string">&quot;css/out.min.css&quot;</span>: [<span class="string">&quot;css/part1.min.css&quot;</span>, <span class="string">&quot;css/part2.min.css&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">&quot;grunt-contrib-cssmin&quot;</span>);</span><br><span class="line"></span><br><span class="line">  grunt.registerTask(<span class="string">&quot;default&quot;</span>, [<span class="string">&quot;cssmin:minify&quot;</span>, <span class="string">&quot;cssmin:combine&quot;</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>下面详细解释上面代码中的三个方法，下面一个个来看。</p>
<p><strong>（1）grunt.loadNpmTasks</strong></p>
<p>grunt.loadNpmTasks 方法载入模块文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="string">&quot;grunt-contrib-cssmin&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>你需要使用几个模块，这里就要写几条 grunt.loadNpmTasks 语句，将各个模块一一加载。</p>
<p>如果加载模块很多，这部分会非常冗长。而且，还存在一个问题，就是凡是在这里加载的模块，也同时出现在 package.json 文件中。如果使用 npm 命令卸载模块以后，模块会自动从 package.json 文件中消失，但是必须手动从 Gruntfile.js 文件中清除，这样很不方便，一旦忘记，还会出现运行错误。这里有一个解决办法，就是安装 load-grunt-tasks 模块，然后在 Gruntfile.js 文件中，用下面的语句替代所有的 grunt.loadNpmTasks 语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;load-grunt-tasks&quot;</span>)(grunt);</span><br></pre></td></tr></table></figure>

<p>这条语句的作用是自动分析 package.json 文件，自动加载所找到的 grunt 模块。</p>
<p><strong>（2）grunt.initConfig</strong></p>
<p>grunt.initConfig 方法用于模块配置，它接受一个对象作为参数。该对象的成员与使用的同名模块一一对应。由于我们要配置的是 cssmin 模块，所以里面有一个 cssmin 成员（属性）。</p>
<p>cssmin（属性）指向一个对象，该对象又包含多个成员。除了一些系统设定的成员（比如 options），其他自定义的成员称为目标（target）。一个模块可以有多个目标（target），上面代码里面，cssmin 模块共有两个目标，一个是“minify”，用于压缩 css 文件；另一个是“combine”，用于将多个 css 文件合并一个文件。</p>
<p>每个目标的具体设置，需要参考该模板的文档。就 cssmin 来讲，minify 目标的参数具体含义如下：</p>
<ul>
<li><p><strong>expand</strong>：如果设为 true，就表示下面文件名的占位符（即*号）都要扩展成具体的文件名。</p>
</li>
<li><p><strong>cwd</strong>：需要处理的文件（input）所在的目录。</p>
</li>
<li><p><strong>src</strong>：表示需要处理的文件。如果采用数组形式，数组的每一项就是一个文件名，可以使用通配符。</p>
</li>
<li><p><strong>dest</strong>：表示处理后的文件名或所在目录。</p>
</li>
<li><p><strong>ext</strong>：表示处理后的文件后缀名。</p>
</li>
</ul>
<p>除了上面这些参数，还有一些参数也是 grunt 所有模块通用的。</p>
<ul>
<li><p><strong>filter</strong>：一个返回布尔值的函数，用于过滤文件名。只有返回值为 true 的文件，才会被 grunt 处理。</p>
</li>
<li><p><strong>dot</strong>：是否匹配以点号（.）开头的系统文件。</p>
</li>
<li><p><strong>makeBase</strong>：如果设置为 true，就只匹配文件路径的最后一部分。比如，a?b 可以匹配/xyz/123/acb，而不匹配/xyz/acb/123。</p>
</li>
</ul>
<p>关于通配符，含义如下：</p>
<ul>
<li>*：匹配任意数量的字符，不包括/。</li>
<li>?：匹配单个字符，不包括/。</li>
<li>**：匹配任意数量的字符，包括/。</li>
<li>{}：允许使用逗号分隔的列表，表示“or”（或）关系。</li>
<li>!：用于模式的开头，表示只返回不匹配的情况。</li>
</ul>
<p>比如，foo/*.js 匹配 foo 目录下面的文件名以.js 结尾的文件，foo/**/*.js 匹配 foo 目录和它的所有子目录下面的文件名以.js 结尾的文件，!*.css 表示匹配所有后缀名不为“.css”的文件。</p>
<p>使用通配符设置 src 属性的更多例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  src: <span class="string">&quot;foo/th*.js&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">grunt - contrib - uglify;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  src: <span class="string">&quot;foo/&#123;a,b&#125;*.js&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  src: [<span class="string">&quot;foo/a*.js&quot;</span>, <span class="string">&quot;foo/b*.js&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至于 combine 目标，就只有一个 files 参数，表示输出文件是 css 子目录下的 out.min.css，输入文件则是 css 子目录下的 part1.min.css 和 part2.min.css。</p>
<p>files 参数的格式可以是一个对象，也可以是一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">files: &#123;</span><br><span class="line">        <span class="string">&#x27;dest/b.js&#x27;</span>: [<span class="string">&#x27;src/bb.js&#x27;</span>, <span class="string">&#x27;src/bbb.js&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;dest/b1.js&#x27;</span>: [<span class="string">&#x27;src/bb1.js&#x27;</span>, <span class="string">&#x27;src/bbb1.js&#x27;</span>],</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line">files: [</span><br><span class="line">        &#123;<span class="attr">src</span>: [<span class="string">&#x27;src/aa.js&#x27;</span>, <span class="string">&#x27;src/aaa.js&#x27;</span>], <span class="attr">dest</span>: <span class="string">&#x27;dest/a.js&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">src</span>: [<span class="string">&#x27;src/aa1.js&#x27;</span>, <span class="string">&#x27;src/aaa1.js&#x27;</span>], <span class="attr">dest</span>: <span class="string">&#x27;dest/a1.js&#x27;</span>&#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>如果 minify 目标和 combine 目标的属性设置有重合的部分，可以另行定义一个与 minify 和 combine 平行的 options 属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">grunt.initConfig(&#123;</span><br><span class="line">  cssmin: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    combine: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>（3）grunt.registerTask</strong></p>
<p>grunt.registerTask 方法定义如何调用具体的任务。“default”任务表示如果不提供参数，直接输入 grunt 命令，则先运行“cssmin:minify”，后运行“cssmin:combine”，即先压缩再合并。如果只执行压缩，或者只执行合并，则需要在 grunt 命令后面指明“模块名:目标名”。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grunt <span class="comment"># 默认情况下，先压缩后合并</span></span><br><span class="line"></span><br><span class="line">grunt cssmin:minify <span class="comment"># 只压缩不合并</span></span><br><span class="line"></span><br><span class="line">grunt css:combine <span class="comment"># 只合并不压缩</span></span><br></pre></td></tr></table></figure>

<p>如果不指明目标，只是指明模块，就表示将所有目标依次运行一遍。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grunt cssmin</span><br></pre></td></tr></table></figure>

<h2 id="常用模块设置"><a href="#常用模块设置" class="headerlink" title="常用模块设置"></a>常用模块设置</h2><p>grunt 的<a href="http://gruntjs.com/plugins">模块</a>已经超过了 2000 个，且还在快速增加。下面是一些常用的模块（按字母排序）。</p>
<ul>
<li><strong>grunt-contrib-clean</strong>：删除文件。</li>
<li><strong>grunt-contrib-compass</strong>：使用 compass 编译 sass 文件。</li>
<li><strong>grunt-contrib-concat</strong>：合并文件。</li>
<li><strong>grunt-contrib-copy</strong>：复制文件。</li>
<li><strong>grunt-contrib-cssmin</strong>：压缩以及合并 CSS 文件。</li>
<li><strong>grunt-contrib-imagemin</strong>：图像压缩模块。</li>
<li><strong>grunt-contrib-jshint</strong>：检查 JavaScript 语法。</li>
<li><strong>grunt-contrib-uglify</strong>：压缩以及合并 JavaScript 文件。</li>
<li><strong>grunt-contrib-watch</strong>：监视文件变动，做出相应动作。</li>
</ul>
<p>模块的前缀如果是 grunt-contrib，就表示该模块由 grunt 开发团队维护；如果前缀是 grunt（比如 grunt-pakmanager），就表示由第三方开发者维护。</p>
<p>以下选几个模块，看看它们配置参数的写法，也就是说如何在 grunt.initConfig 方法中配置各个模块。</p>
<h3 id="grunt-contrib-jshint"><a href="#grunt-contrib-jshint" class="headerlink" title="grunt-contrib-jshint"></a>grunt-contrib-jshint</h3><p>jshint 用来检查语法错误，比如分号的使用是否正确、有没有忘记写括号等等。它在 grunt.initConfig 方法里面的配置代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jshint: &#123;</span><br><span class="line">	options: &#123;</span><br><span class="line">		eqeqeq: <span class="literal">true</span>,</span><br><span class="line">		trailing: <span class="literal">true</span></span><br><span class="line">	&#125;,</span><br><span class="line">	files: [<span class="string">&#x27;Gruntfile.js&#x27;</span>, <span class="string">&#x27;lib/**/*.js&#x27;</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>上面代码先指定 jshint 的<a href="http://www.jshint.com/docs/options/">检查项目</a>，eqeqeq 表示要用严格相等运算符取代相等运算符，trailing 表示行尾不得有多余的空格。然后，指定 files 属性，表示检查目标是 Gruntfile.js 文件，以及 lib 目录的所有子目录下面的 JavaScript 文件。</p>
<h3 id="grunt-contrib-concat"><a href="#grunt-contrib-concat" class="headerlink" title="grunt-contrib-concat"></a>grunt-contrib-concat</h3><p>concat 用来合并同类文件，它不仅可以合并 JavaScript 文件，还可以合并 CSS 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">concat: &#123;</span><br><span class="line">  js: &#123;</span><br><span class="line">    src: [<span class="string">&#x27;lib/module1.js&#x27;</span>, <span class="string">&#x27;lib/module2.js&#x27;</span>, <span class="string">&#x27;lib/plugin.js&#x27;</span>],</span><br><span class="line">    dest: <span class="string">&#x27;dist/script.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  css: &#123;</span><br><span class="line">    src: [<span class="string">&#x27;style/normalize.css&#x27;</span>, <span class="string">&#x27;style/base.css&#x27;</span>, <span class="string">&#x27;style/theme.css&#x27;</span>],</span><br><span class="line">    dest: <span class="string">&#x27;dist/screen.css&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>js 目标用于合并 JavaScript 文件，css 目标用语合并 CSS 文件。两者的 src 属性指定需要合并的文件（input），dest 属性指定输出的目标文件（output）。</p>
<h3 id="grunt-contrib-uglify"><a href="#grunt-contrib-uglify" class="headerlink" title="grunt-contrib-uglify"></a>grunt-contrib-uglify</h3><p>uglify 模块用来压缩代码，减小文件体积。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uglify: &#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    banner: bannerContent,</span><br><span class="line">    sourceMapRoot: <span class="string">&#x27;../&#x27;</span>,</span><br><span class="line">    sourceMap: <span class="string">&#x27;distrib/&#x27;</span>+name+<span class="string">&#x27;.min.js.map&#x27;</span>,</span><br><span class="line">    sourceMapUrl: name+<span class="string">&#x27;.min.js.map&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  target : &#123;</span><br><span class="line">	expand: <span class="literal">true</span>,</span><br><span class="line">	cwd: <span class="string">&#x27;js/origin&#x27;</span>,</span><br><span class="line">	src : <span class="string">&#x27;*.js&#x27;</span>,</span><br><span class="line">	dest : <span class="string">&#x27;js/&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>上面代码中的 options 属性指定压缩后文件的文件头，以及 sourceMap 设置；target 目标指定输入和输出文件。</p>
<h3 id="grunt-contrib-copy"><a href="#grunt-contrib-copy" class="headerlink" title="grunt-contrib-copy"></a>grunt-contrib-copy</h3><p><a href="https://github.com/gruntjs/grunt-contrib-copy">copy 模块</a>用于复制文件与目录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">copy: &#123;</span><br><span class="line">  main: &#123;</span><br><span class="line">    src: <span class="string">&#x27;src/*&#x27;</span>,</span><br><span class="line">    dest: <span class="string">&#x27;dest/&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>上面代码将 src 子目录（只包含它下面的第一层文件和子目录），拷贝到 dest 子目录下面（即 dest/src 目录）。如果要更准确控制拷贝行为，比如只拷贝文件、不拷贝目录、不保持目录结构，可以写成下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">copy: &#123;</span><br><span class="line">  main: &#123;</span><br><span class="line">    expand: <span class="literal">true</span>,</span><br><span class="line">    cwd: <span class="string">&#x27;src/&#x27;</span>,</span><br><span class="line">    src: <span class="string">&#x27;**&#x27;</span>,</span><br><span class="line">    dest: <span class="string">&#x27;dest/&#x27;</span>,</span><br><span class="line">    flatten: <span class="literal">true</span>,</span><br><span class="line">    filter: <span class="string">&#x27;isFile&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="grunt-contrib-watch"><a href="#grunt-contrib-watch" class="headerlink" title="grunt-contrib-watch"></a>grunt-contrib-watch</h3><p><a href="https://github.com/gruntjs/grunt-contrib-watch">watch 模块</a>用来在后台运行，监听指定事件，然后自动运行指定的任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">   scripts: &#123;</span><br><span class="line">    files: <span class="string">&#x27;**/*.js&#x27;</span>,</span><br><span class="line">    tasks: <span class="string">&#x27;jshint&#x27;</span>,</span><br><span class="line">	options: &#123;</span><br><span class="line">      livereload: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">   css: &#123;</span><br><span class="line">    files: <span class="string">&#x27;**/*.sass&#x27;</span>,</span><br><span class="line">    tasks: [<span class="string">&#x27;sass&#x27;</span>],</span><br><span class="line">    options: &#123;</span><br><span class="line">      livereload: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>设置好上面的代码，打开另一个进程，运行 grunt watch。此后，任何的 js 代码变动，文件保存后就会自动运行 jshint 任务；任何 sass 文件变动，文件保存后就会自动运行 sass 任务。</p>
<p>需要注意的是，这两个任务的 options 参数之中，都设置了 livereload，表示任务运行结束后，自动在浏览器中重载（reload）。这需要在浏览器中安装<a href="http://livereload.com/">livereload 插件</a>。安装后，livereload 的默认端口为 localhost:35729，但是也可以用 livereload: 1337 的形式重设端口（localhost:1337）。</p>
<h3 id="其他模块"><a href="#其他模块" class="headerlink" title="其他模块"></a>其他模块</h3><p>下面是另外一些有用的模块。</p>
<p><strong>（1）grunt-contrib-clean</strong></p>
<p>该模块用于删除文件或目录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">clean: &#123;</span><br><span class="line">  build: &#123;</span><br><span class="line">    src: [<span class="string">&quot;path/to/dir/one&quot;</span>, <span class="string">&quot;path/to/dir/two&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（2）grunt-autoprefixer</strong></p>
<p>该模块用于为 CSS 语句加上浏览器前缀。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">autoprefixer: &#123;</span><br><span class="line">  build: &#123;</span><br><span class="line">    expand: <span class="literal">true</span>,</span><br><span class="line">    cwd: <span class="string">&#x27;build&#x27;</span>,</span><br><span class="line">    src: [ <span class="string">&#x27;**/*.css&#x27;</span> ],</span><br><span class="line">    dest: <span class="string">&#x27;build&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>（3）grunt-contrib-connect</strong></p>
<p>该模块用于在本机运行一个 Web Server。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">connect: &#123;</span><br><span class="line">  server: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      port: <span class="number">4000</span>,</span><br><span class="line">      base: <span class="string">&#x27;build&#x27;</span>,</span><br><span class="line">      hostname: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>connect 模块会随着 grunt 运行结束而结束，为了使它一直处于运行状态，可以把它放在 watch 模块之前运行。因为 watch 模块需要手动中止，所以 connect 模块也就会一直运行。</p>
<p><strong>（4）grunt-htmlhint</strong></p>
<p>该模块用于检查 HTML 语法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">htmlhint: &#123;</span><br><span class="line">    build: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">            <span class="string">&#x27;tag-pair&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;tagname-lowercase&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;attr-lowercase&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;attr-value-double-quotes&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;spec-char-escape&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;id-unique&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;head-script-disabled&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        src: [<span class="string">&#x27;index.html&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码用于检查 index.html 文件：HTML 标记是否配对、标记名和属性名是否小写、属性值是否包括在双引号之中、特殊字符是否转义、HTML 元素的 id 属性是否为唯一值、head 部分是否没有 script 标记。</p>
<p><strong>（5）grunt-contrib-sass 模块</strong></p>
<p>该模块用于将 SASS 文件转为 CSS 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sass: &#123;</span><br><span class="line">    build: &#123;</span><br><span class="line">		options: &#123;</span><br><span class="line">            style: <span class="string">&#x27;compressed&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        files: &#123;</span><br><span class="line">            <span class="string">&#x27;build/css/master.css&#x27;</span>: <span class="string">&#x27;assets/sass/master.scss&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码指定输出文件为 build/css/master.css，输入文件为 assets/sass/master.scss。</p>
<p><strong>（6）grunt-markdown</strong></p>
<p>该模块用于将 markdown 文档转为 HTML 文档。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">markdown: &#123;</span><br><span class="line">    all: &#123;</span><br><span class="line">      files: [</span><br><span class="line">        &#123;</span><br><span class="line">          expand: <span class="literal">true</span>,</span><br><span class="line">          src: <span class="string">&#x27;*.md&#x27;</span>,</span><br><span class="line">          dest: <span class="string">&#x27;docs/html/&#x27;</span>,</span><br><span class="line">          ext: <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      options: &#123;</span><br><span class="line">        template: <span class="string">&#x27;templates/index.html&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>上面代码指定将 md 后缀名的文件，转为 docs/html/目录下的 html 文件。template 属性指定转换时采用的模板，模板样式如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">%=content%</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Tesing：JavaScript 程序测试</title>
    <url>/2020/09/11/tools/tesing/</url>
    <content><![CDATA[<h2 id="为什么要写测试？"><a href="#为什么要写测试？" class="headerlink" title="为什么要写测试？"></a>为什么要写测试？</h2><p>Web 应用程序越来越复杂，这意味着有更多的可能出错。测试是帮助我们提高代码质量、降低错误的最好方法和工具之一。</p>
<ul>
<li>测试可以确保得到预期结果。</li>
<li>加快开发速度。</li>
<li>方便维护。</li>
<li>提供用法的文档。</li>
</ul>
<p>通过测试提供软件的质量，在开始的时候，可能会降低开发速度。但是从长期看，尤其是那种代码需要长期维护、不断开发的情况，测试会大大加快开发速度，减轻维护难度。</p>
<h2 id="测试的类型"><a href="#测试的类型" class="headerlink" title="测试的类型"></a>测试的类型</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元测试（unit testing）指的是以软件的单元（unit）为单位，对软件进行测试。单元可以是一个函数，也可以是一个模块或组件。它的基本特征就是，只要输入不变，必定返回同样的输出。</p>
<p>“单元测试”这个词，本身就暗示，软件应该以模块化结构存在。每个模块的运作，是独立于其他模块的。一个软件越容易写单元测试，往往暗示着它的模块化结构越好，各模块之间的耦合就越弱；越难写单元测试，或者每次单元测试，不得不模拟大量的外部条件，很可能暗示软件的模块化结构越差，模块之间存在较强的耦合。</p>
<p>单元测试的要求是，每个模块都必须有单元测试，而软件由模块组成。</p>
<p>单元测试通常采取断言（assertion）的形式，也就是测试某个功能的返回结果，是否与预期结果一致。如果与预期不一致，就表示测试失败。</p>
<p>单元测试是函数正常工作、不出错的最基本、最有效的方法之一。 每一个单元测试发出一个特定的输入到所要测试的函数，看看函数是否返回预期的输出，或者采取了预期的行动。单元测试证明了所测试的代码行为符合预期。</p>
<p>单元测试有助于代码的模块化，因此有助于长期的重用。因为有了测试，你就知道代码是可靠的，可以按照预期运行。从这个角度说，测试可以节省开发时间。单元测试的另一个好处是，有了测试，就等于就有了代码功能的文档，有助于其他开发者了解代码的意图。</p>
<p>单元测试应该避免依赖性问题，比如不存取数据库、不访问网络等等，而是使用工具虚拟出运行环境。这种虚拟使得测试成本最小化，不用花大力气搭建各种测试环境。</p>
<p>一般来说，单元测试的步骤如下。</p>
<ul>
<li>准备所有的测试条件</li>
<li>调用（触发）所要测试的函数</li>
<li>验证运行结果是否正确</li>
<li>还原被修改的记录</li>
</ul>
<h3 id="其他测试类型"><a href="#其他测试类型" class="headerlink" title="其他测试类型"></a>其他测试类型</h3><p>（1）集成测试</p>
<p>集成测试（Integration test）指的是多个部分在一起测试，比如测试一个数据库连接模块，是否能够连接数据库。</p>
<p>（2）功能测试</p>
<p>功能测试（Functional test）指的是，自动测试整个应用程序的某个功能，比如使用 Selenium 工具自动打开浏览器运行程序。</p>
<p>（3）端对端测试</p>
<p>端对端测试（End-to-End testing）指的是全链路测试，即从开始端到终止端的测试，比如测试从用户界面、通过网络、经过应用程序处理、到达数据库，是否能够返回正确结果。端对端测试的目的是，确保整个系统能够正常运行，各个子系统之间依赖关系正常，数据能够在子系统之间、模块之间正确传递。</p>
<p>（4）冒烟测试</p>
<p>冒烟测试（smoke testing）指的是，正式的全面测试开始之前，对主要功能进行的预测试。它的主要目的是，确认主要功能能否满足需要，软件是否能运行。冒烟测试可以是手工测试，也可以是自动化测试。</p>
<p>这个名字最早来自对电子元件的测试，第一次对电子元件通电，看看它是否会冒烟。如果没有冒烟，说明通过了测试；如果电流达到某个临界点之后，才出现冒烟，这时可以评估是否能够接受这个临界点。</p>
<h2 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h2><p>测试不仅能够验证软件功能、保证代码质量，也能够影响软件开发的模式。</p>
<h3 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h3><p>TDD 是“测试驱动的开发”（Test-Driven Development）的简称，指的是先写好测试，然后再根据测试完成开发。使用这种开发方式，会有很高的测试覆盖率。</p>
<p>TDD 的开发步骤如下。</p>
<ul>
<li>先写一个测试。</li>
<li>写出最小数量的代码，使其能够通过测试。</li>
<li>优化代码。</li>
<li>重复前面三步。</li>
</ul>
<p>TDD 开发的测试覆盖率通常在 90%以上，这意味着维护代码和新增特性会非常容易。因为测试保证了你可以信任这些代码，修改它们不会破坏其他代码的运行。</p>
<p>TDD 接口提供以下四个方法。</p>
<ul>
<li>suite()</li>
<li>test()</li>
<li>setup()</li>
<li>teardown()</li>
</ul>
<p>下面代码是测试计数器是否加 1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">suite(<span class="string">&quot;Counter&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  test(<span class="string">&quot;tick increases count to 1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter();</span><br><span class="line">    counter.tick();</span><br><span class="line">    assert.equal(counter.count, <span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="BDD"><a href="#BDD" class="headerlink" title="BDD"></a>BDD</h3><p>BDD 是“行为驱动的开发”（Behavior-Driven Development）的简称，指的是写出优秀测试的最佳实践的总称。</p>
<p>BDD 认为，不应该针对代码的实现细节写测试，而是要针对行为写测试。BDD 测试的是行为，即软件应该怎样运行。</p>
<p>BDD 接口提供以下六个方法。</p>
<ul>
<li>describe()</li>
<li>it()</li>
<li>before()</li>
<li>after()</li>
<li>beforeEach()</li>
<li>afterEach()</li>
</ul>
<p>下面是测试计数器是否加 1 的 BDD 写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&quot;Counter&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">&quot;should increase count by 1 after calling tick&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter();</span><br><span class="line">    <span class="keyword">var</span> expectedCount = counter.count + <span class="number">1</span>;</span><br><span class="line">    counter.tick();</span><br><span class="line">    assert.equal(counter.count, expectedCount);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下面是一个 BDD 开发的示例。现在，需要开发一个<code>Foo</code>类，该类的实例有一个<code>sayHi</code>方法，会对类参数说“Hi”。这就是<code>Foo</code>类的规格，根据这个规格，我们可以写出测试用例文件<code>foo.spec.js</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&quot;Simple object&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> foo;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo = <span class="keyword">new</span> Foo(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;should say hi&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(foo.sayHi()).toEqual(<span class="string">&quot;John says hi!&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>有了测试用例以后，我们再写出实际的脚本文件<code>foo.js</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&quot; says hi!&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>为了把测试用例与脚本文件分开，我们通常把测试用例放在<code>test</code>子目录之中。然后，我们就可以使用 Mocha、Jasmine 等测试框架，执行测试用例，看看脚本文件是否通过测试。</p>
<h3 id="BDD-术语"><a href="#BDD-术语" class="headerlink" title="BDD 术语"></a>BDD 术语</h3><p>（1）测试套件</p>
<p>测试套件（test suite）指的是，一组针对软件规格的某个方面的测试用例。也可以看作，对软件的某个方面的描述（describe）。</p>
<p>测试套件由一个<code>describe</code>函数构成，它接受两个参数：第一个参数是字符串，表示测试套件的名字或标题，表示将要测试什么；第二个参数是函数，用来实现这个测试套件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&quot;A suite&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>（2）测试用例</p>
<p>测试用例（test case）指的是，针对软件一个功能点的测试，是软件测试的最基本单位。一组相关的测试用例，构成一个测试套件。测试用例由<code>it</code>函数构成，它与<code>describe</code>函数一样，接受两个参数：第一个参数是字符串，表示测试用例的标题；第二个参数是函数，用来实现这个测试用例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&quot;A suite&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">&quot;contains spec with an expectation&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>（3）断言</p>
<p>断言（assert）指的是对代码行为的预期。一个测试用例内部，包含一个或多个断言（assert）。</p>
<p>断言会返回一个布尔值，表示代码行为是否符合预期。测试用例之中，只要有一个断言为 false，这个测试用例就会失败，只有所有断言都为<code>true</code>，测试用例才会通过。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&quot;A suite&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">&quot;contains spec with an expectation&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="literal">true</span>).toBe(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>断言是判断实际值与预期值是否相等的工具。</p>
<p>断言有 assert、expect、should 三种风格，或者称为三种写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// assert风格</span></span><br><span class="line">assert.equal(event.detail.item, <span class="string">&#x27;(item)‘);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// expect风格</span></span><br><span class="line"><span class="string">expect(event.detail.item).to.equal(&#x27;</span>(item)<span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// should风格</span></span><br><span class="line"><span class="string">event.detail.item.should.equal(&#x27;</span>(item)<span class="string">&#x27;);</span></span><br></pre></td></tr></table></figure>

<p>Chai.js 是一个很流行的断言库，同时支持上面三种风格。</p>
<p>（1） assert 风格</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">&quot;chai&quot;</span>).assert;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> beverages = &#123; <span class="attr">tea</span>: [<span class="string">&quot;chai&quot;</span>, <span class="string">&quot;matcha&quot;</span>, <span class="string">&quot;oolong&quot;</span>] &#125;;</span><br><span class="line"></span><br><span class="line">assert.typeOf(foo, <span class="string">&quot;string&quot;</span>, <span class="string">&quot;foo is a string&quot;</span>);</span><br><span class="line">assert.equal(foo, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;foo equal `bar`&quot;</span>);</span><br><span class="line">assert.lengthOf(foo, <span class="number">3</span>, <span class="string">&quot;foo`s value has a length of 3&quot;</span>);</span><br><span class="line">assert.lengthOf(beverages.tea, <span class="number">3</span>, <span class="string">&quot;beverages has 3 types of tea&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，assert 方法的最后一个参数是错误提示信息，只有测试没有通过时，才会显示。</p>
<p>（2）expect 风格</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">&quot;chai&quot;</span>).expect;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> beverages = &#123; <span class="attr">tea</span>: [<span class="string">&quot;chai&quot;</span>, <span class="string">&quot;matcha&quot;</span>, <span class="string">&quot;oolong&quot;</span>] &#125;;</span><br><span class="line"></span><br><span class="line">expect(foo).to.be.a(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">expect(foo).to.equal(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">expect(foo).to.have.length(<span class="number">3</span>);</span><br><span class="line">expect(beverages).to.have.property(<span class="string">&quot;tea&quot;</span>).with.length(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>（3）should 风格</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>(<span class="string">&quot;chai&quot;</span>).should();</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> beverages = &#123; <span class="attr">tea</span>: [<span class="string">&quot;chai&quot;</span>, <span class="string">&quot;matcha&quot;</span>, <span class="string">&quot;oolong&quot;</span>] &#125;;</span><br><span class="line"></span><br><span class="line">foo.should.be.a(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">foo.should.equal(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">foo.should.have.length(<span class="number">3</span>);</span><br><span class="line">beverages.should.have.property(<span class="string">&quot;tea&quot;</span>).with.length(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Mocha-js"><a href="#Mocha-js" class="headerlink" title="Mocha.js"></a>Mocha.js</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Mocha（发音“摩卡”）是现在最流行的前端测试框架之一，此外常用的测试框架还有<a href="http://jasmine.github.io/">Jasmine</a>、<a href="https://github.com/substack/tape/">Tape</a>、<a href="https://github.com/defunctzombie/zuul/">zuul</a>等。所谓“测试框架”，就是运行测试的工具。</p>
<p>Mocha 使用下面的命令安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">$ npm install -g mocha chai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目内安装</span></span><br><span class="line">$ npm i -D mocha chai</span><br></pre></td></tr></table></figure>

<p>上面代码中，除了安装 Mocha 以外，还安装了断言库<code>chai</code>，这是因为 Mocha 自身不带断言库，必须安装外部断言库。</p>
<p>测试套件文件一般放在<code>test</code>子目录下面，配置文件<code>mocha.opts</code>也放在这个目录里面。</p>
<h3 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h3><p>使用浏览器测试时，先用<code>mocha init</code>命令在指定目录生成初始化文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha init &lt;path&gt;</span><br></pre></td></tr></table></figure>

<p>运行上面命令，就会在该目录下生成一个<code>index.html</code>文件，以及配套的脚本和样式表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Unit.js tests in the browser with Mocha<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mocha.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Unit.js tests in the browser with Mocha<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mocha&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;mocha.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      mocha.setup(<span class="string">&quot;bdd&quot;</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;tests.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      mocha.run();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在该文件中，加入你要测试的文件（比如<code>app.js</code>）、测试脚本（<code>app.spec.js</code>）和断言库（<code>chai.js</code>）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://chaijs.com/chai.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.spec.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>各个文件的内容如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.spec.js</span></span><br><span class="line"><span class="keyword">var</span> expect = chai.expect;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;测试add函数&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">&quot;1加1应该等于2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(add(<span class="number">1</span>, <span class="number">1</span>)).to.equal(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="命令行测试"><a href="#命令行测试" class="headerlink" title="命令行测试"></a>命令行测试</h3><p>Mocha 除了在浏览器运行，还可以在命令行运行。</p>
<p>还是使用上面的文件，作为例子，但是要改成 CommonJS 格式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = add;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.spec.js</span></span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">&quot;chai&quot;</span>).expect;</span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&quot;../app&quot;</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;测试add函数&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">&quot;1加1应该等于2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(add(<span class="number">1</span>, <span class="number">1</span>)).to.equal(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后，在命令行下执行<code>mocha</code>，就会执行测试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha</span><br></pre></td></tr></table></figure>

<p>上面的命令等同于下面的形式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha <span class="built_in">test</span> --reporter spec --recursive --growl</span><br></pre></td></tr></table></figure>

<h3 id="mocha-opts"><a href="#mocha-opts" class="headerlink" title="mocha.opts"></a>mocha.opts</h3><p>所有 Mocha 的命令行参数，都可以写在<code>test</code>目录下的配置文件<code>mocha.opts</code>之中。</p>
<p>下面是一个典型的配置文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">--reporter spec</span><br><span class="line">--recursive</span><br><span class="line">--growl</span><br></pre></td></tr></table></figure>

<p>上面三个设置的含义如下。</p>
<ul>
<li>使用 spec 报告模板</li>
<li>包括子目录</li>
<li>打开桌面通知插件 growl</li>
</ul>
<p>如果希望测试非存放于 test 子目录的测试用例，可以在<code>mocha.opts</code>写入以下内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server-tests</span><br><span class="line">--recursive</span><br></pre></td></tr></table></figure>

<p>上面代码指定运行<code>server-tests</code>目录及其子目录之中的测试脚本。</p>
<h3 id="生成规格文件"><a href="#生成规格文件" class="headerlink" title="生成规格文件"></a>生成规格文件</h3><p>Mocha 支持从测试用例生成规格文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha <span class="built_in">test</span>/app.spec.js -R markdown &gt; spec.md</span><br></pre></td></tr></table></figure>

<p>上面命令生成单个<code>app.spec.js</code>规格。</p>
<p>生成 HTML 格式的报告，使用下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha <span class="built_in">test</span>/app.spec.js -R doc &gt; spec.html</span><br></pre></td></tr></table></figure>

<p>如果要生成整个<code>test</code>目录，对应的规格文件，使用下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha <span class="built_in">test</span> -R markdown &gt; spec.md --recursive</span><br></pre></td></tr></table></figure>

<p>只要提供测试脚本的路径，Mocha 就可以运行这个测试脚本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ mocha -w src/index.test.js</span><br></pre></td></tr></table></figure>

<p>上面命令运行测试脚本<code>src/index.test.js</code>，参数<code>-w</code>表示 watch，即当这个脚本一有变动，就会运行。</p>
<p>指定测试脚本时，可以使用通配符，同时指定多个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha --reporter spec spec/&#123;my,awesome&#125;.js</span><br><span class="line">$ mocha --ui tdd <span class="built_in">test</span>/unit/*.js etc</span><br></pre></td></tr></table></figure>

<p>上面代码中，参数<code>--reporter</code>指定生成的报告格式（上面代码是 spec 格式），<code>-ui</code>指定采用哪一种测试模式（上面代码是 tdd 模式）。</p>
<p>除了使用 shell 通配符，还可以使用 node 通配符。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha --compilers js:babel-core/register <span class="string">&#x27;test/**/*.@(js|jsx)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面代码指定运行<code>test</code>目录下面任何子目录中，文件后缀名为<code>js</code>或<code>jsx</code>的测试脚本。注意，Node 的通配符要放在单引号之中，因为否则星号（<code>*</code>）会先被 shell 解释。</p>
<p>如果要改用 shell 通配符，执行<code>test</code>目录下面任何子目录的测试脚本，要写成下面这样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha <span class="built_in">test</span>/**.js</span><br></pre></td></tr></table></figure>

<p>如果测试脚本不止一个，最好将它们放在专门的目录当中。Mocha 默认执行<code>test</code>目录的测试脚本，所以可以将所有测试脚本放在<code>test</code>子目录。<code>--recursive</code>参数可以指定运行子目录之中的测试脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha --recursive</span><br></pre></td></tr></table></figure>

<p>上面命令会运行<code>test</code>子目录之中的所有测试脚本。</p>
<p><code>--grep</code>参数用于搜索测试用例的名称（即 it 方法的第一个参数），然后只执行匹配的测试用例。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha --reporter spec --grep <span class="string">&quot;Fnord:&quot;</span> server-test/*.js</span><br></pre></td></tr></table></figure>

<p>上面代码只测试名称中包含“Fnord：”的测试用例。</p>
<p><code>--invert</code>参数表示只运行不符合条件的测试脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha --grep auth --invert</span><br></pre></td></tr></table></figure>

<p>如果测试脚本用到了 ES6 语法，还需要用<code>--compiler</code>参数指定 babel 进行转码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha --compilers js:babel/register --recursive</span><br></pre></td></tr></table></figure>

<p>上面命令会在运行测试脚本之前，先用 Babel 进行转码。<code>--compilers</code>参数的值是用冒号分隔的一个字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用<code>babel/register</code>模块，处理一下 JS 文件。</p>
<p><code>--require</code>参数指定测试脚本默认包含的文件。下面是一个<code>test_helper.js</code>文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test/test_helper.js</span></span><br><span class="line"><span class="keyword">import</span> chai <span class="keyword">from</span> <span class="string">&quot;chai&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>使用<code>--require</code>参数，将上面这个脚本包含进所有测试脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha --compilers js:babel/register --require ./<span class="built_in">test</span>/test_helper.js  --recursive</span><br></pre></td></tr></table></figure>

<h3 id="测试脚本的写法"><a href="#测试脚本的写法" class="headerlink" title="测试脚本的写法"></a>测试脚本的写法</h3><p>测试脚本中，describe 方法和 it 方法都允许调用 only 方法，表示只运行某个测试套件或测试用例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line">describe(<span class="string">&#x27;Array&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  describe.only(<span class="string">&#x27;#indexOf()&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line">describe(<span class="string">&quot;using only&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it.only(<span class="string">&quot;this is the only test to be run&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;this is not run&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，只有带有<code>only</code>方法的测试套件或测试用例会运行。</p>
<p>describe 方法和 it 方法还可以调用 skip 方法，表示跳过指定的测试套件或测试用例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line">describe.skip(<span class="string">&quot;Article&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line">describe(<span class="string">&quot;using only&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it.skip(<span class="string">&quot;this is the only test to be run&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;this is not run&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，带有<code>skip</code>方法的测试套件或测试用例会被忽略。</p>
<p>如果测试用例包含异步操作，可以 done 方法显式指定测试用例的运行结束时间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">it(<span class="string">&quot;logs a&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;logs a&quot;</span>);</span><br><span class="line">    done();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">setTimeout</span>(f, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，正常情况下，函数 f 还没有执行，Mocha 就已经结束运行了。为了保证 Mocha 等到测试用例跑完再结束运行，可以手动调用 done 方法</p>
<h2 id="Promise-的测试"><a href="#Promise-的测试" class="headerlink" title="Promise 的测试"></a>Promise 的测试</h2><p>对于异步的测试，测试用例之中，通常必须调用<code>done</code>方法，显式表明异步操作的结束。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">&quot;chai&quot;</span>).expect;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&quot;should do something with promises&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = asyncTest();</span><br><span class="line"></span><br><span class="line">  result.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      expect(data).to.equal(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">      done();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      assert.fail(error);</span><br><span class="line">      done();</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码之中，Promise 对象的<code>then</code>方法之中，必须指定<code>reject</code>时的回调函数，并且使用<code>assert.fail</code>方法抛出错误，否则这个错误就不会被外界感知。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">result.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  expect(data).to.equal(blah);</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码之中，如果 Promise 被<code>reject</code>，是不会被捕获的，因为 Promise 之中的错误，不会”泄漏“到外界。</p>
<p>Mocha 内置了对 Promise 的支持。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">it(<span class="string">&quot;should fail the test&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="built_in">Promise</span>.reject(<span class="string">&quot;Promise被reject&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，Mocha 能够捕获<code>reject</code>的 Promise。</p>
<p>因此，使用 Mocha 时，Promise 的测试可以简化成下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">&quot;chai&quot;</span>).expect;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&quot;should do something with promises&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = asyncTest();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    expect(data).to.equal(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h2><p>单元测试时，很多时候，测试的代码会请求 HTTP 服务器。这时，我们就需要模拟服务器的回应，不能在单元测试时去请求真实服务器数据，否则就不叫单元测试了，而是连同服务器一起测试了。</p>
<p>一些工具库可以模拟服务器回应。</p>
<ul>
<li><a href="https://github.com/pgte/nock">nock</a></li>
<li><a href="http://sinonjs.org/docs/#server">sinon</a></li>
<li><a href="https://github.com/algolia/faux-jax">faux-jax</a></li>
<li><a href="https://github.com/moll/node-mitm">MITM</a></li>
</ul>
<h2 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h2><p>测试的覆盖率需要安装 istanbul 模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -D istanbul</span><br></pre></td></tr></table></figure>

<p>然后，在 package.json 设置运行覆盖率检查的命令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;test:cover&quot;</span>: <span class="string">&quot;istanbul cover -x *.test.js _mocha -- -R spec src/index.test.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;check-coverage&quot;</span>: <span class="string">&quot;istanbul check-coverage --statements 100 --branches 100 --functions 100 --lines 100&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>test:cover</code>是生成覆盖率报告，<code>check-coverage</code>是设置覆盖率通过的门槛。</p>
<p>然后，将<code>coverage</code>目录写入<code>.gitignore</code>防止连这个目录一起提交。</p>
<p>如果希望在<code>git commit</code>提交之前，先运行一次测试，可以安装 ghooks 模块，配置<code>pre-commit</code>钩子。</p>
<p>安装 ghooks。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -D ghooks</span><br></pre></td></tr></table></figure>

<p>在 package.json 之中，配置<code>pre-commit</code>钩子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;ghooks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;pre-commit&quot;</span>: <span class="string">&quot;npm run test:cover &amp;&amp; npm run check-coverage&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以把覆盖率检查，加入<code>.travis.yml</code>文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">script:</span><br><span class="line">  - npm run <span class="built_in">test</span>:cover</span><br><span class="line">  - npm run check-coverage</span><br></pre></td></tr></table></figure>

<p>如果测试脚本使用 ES6，<code>scripts</code>字段还需要加入 Babel 转码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;mocha src/index.test.js -w --compilers js:babel/register&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test:cover&quot;</span>: <span class="string">&quot;istanbul cover -x *.test.js _mocha -- -R spec src/index.test.js --compilers js:babel/register&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>覆盖率报告可以上传到<a href="https://codecov.io/">codecov.io</a>。先安装这个模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -D codecov.io</span><br></pre></td></tr></table></figure>

<p>然后在 package.json 增加一个字段。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;report-coverage&quot;</span>: <span class="string">&quot;cat ./coverage/lcov.info | codecov&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，在 CI 的配置文件<code>.travis.yml</code>之中，增加运行这个命令。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">after_success:</span><br><span class="line">  - npm <span class="keyword">run</span><span class="bash"> report-coverage</span></span><br><span class="line">  - npm <span class="keyword">run</span><span class="bash"> semantic-release</span></span><br></pre></td></tr></table></figure>

<h2 id="WebDriver"><a href="#WebDriver" class="headerlink" title="WebDriver"></a>WebDriver</h2><p>WebDriver 是一个浏览器的自动化框架。它在各种浏览器的基础上，提供一个统一接口，将接收到的指令转为浏览器的原生指令，驱动浏览器。</p>
<p>WebDriver 由 Selenium 项目演变而来。Selenium 是一个测试自动化框架，它的 1.0 版叫做 Selenium RC，通过一个代理服务器，将测试脚本转为 JavaScript 脚本，注入不同的浏览器，再由浏览器执行这些脚本后返回结果。WebDriver 就是 Selenium 2.0，它对每个浏览器提供一个驱动，测试脚本通过驱动转换为浏览器原生命令，在浏览器中执行。</p>
<h3 id="定制测试环境"><a href="#定制测试环境" class="headerlink" title="定制测试环境"></a>定制测试环境</h3><p>DesiredCapabilities 对象用于定制测试环境。</p>
<ul>
<li>定制 DesiredCapabilities 对象的各个属性</li>
<li>创建 DesiredCapabilities 实例</li>
<li>将 DesiredCapabilities 实例作为参数，新建一个 WebDriver 实例</li>
</ul>
<h3 id="操作浏览器的方法"><a href="#操作浏览器的方法" class="headerlink" title="操作浏览器的方法"></a>操作浏览器的方法</h3><p>WebDriver 提供以下方法操作浏览器。</p>
<p>close()：退出或关闭当前浏览器窗口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.close();</span><br></pre></td></tr></table></figure>

<p>quit()：关闭所有浏览器窗口，中止当前浏览器 driver 和 session。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.quit();</span><br></pre></td></tr></table></figure>

<p>getTitle()：返回当前网页的标题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.getTitle();</span><br></pre></td></tr></table></figure>

<p>getCurrentUrl()：返回当前网页的网址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.getCurrentUrl();</span><br></pre></td></tr></table></figure>

<p>getPageSource()：返回当前网页的源码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 断言是否含有指定文本</span></span><br><span class="line">assert(</span><br><span class="line">  driver.getPageSource().contains(<span class="string">&quot;Hello World&quot;</span>),</span><br><span class="line">  <span class="string">&quot;预期含有文本Hello World&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>click()：模拟鼠标点击。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line">driver.findElement(By.locatorType(<span class="string">&quot;path&quot;</span>)).click();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">driver.findElement(By.name(<span class="string">&quot;q&quot;</span>)).sendKeys(<span class="string">&quot;webDriver&quot;</span>);</span><br><span class="line">driver.findElement(By.id(<span class="string">&quot;sblsbb&quot;</span>)).click();</span><br></pre></td></tr></table></figure>

<p>clear()：清空文本输入框。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line">driver.findElement(By.locatorType(<span class="string">&quot;path&quot;</span>)).clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">driver.findElement(By.name(<span class="string">&quot;q&quot;</span>)).sendKeys(<span class="string">&quot;webDriver&quot;</span>);</span><br><span class="line">driver.findElement(By.name(<span class="string">&quot;q&quot;</span>)).clear();</span><br><span class="line">driver.findElement(By.name(<span class="string">&quot;q&quot;</span>)).sendKeys(<span class="string">&quot;testing&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>sendKeys()：在文本输入框输入文本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.findElement(By.locatorType(<span class="string">&quot;path&quot;</span>)).sendKeys(<span class="string">&quot;your text&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>submit()：提交表单，或者用来模拟按下回车键。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line">driver.findElement(By.locatorType(<span class="string">&quot;path&quot;</span>)).submit();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">driver.findElement(By.name(<span class="string">&quot;q&quot;</span>)).sendKeys(<span class="string">&quot;webdriver&quot;</span>);</span><br><span class="line">element.submit();</span><br></pre></td></tr></table></figure>

<p>findElement()：返回选中的第一个元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">driver.findElement(By.id(<span class="string">&quot;lst-ib&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>findElements()：返回选中的所有元素（0 个或多个）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line">driver.findElement(By.id(<span class="string">&quot;searchbox&quot;</span>))</span><br><span class="line">  .sendKeys(<span class="string">&quot;webdriver&quot;</span>);</span><br><span class="line">driver.findElements(By.xpath(<span class="string">&quot;//div[3]/ul/li&quot;</span>))</span><br><span class="line">  .get(<span class="number">0</span>)</span><br><span class="line">  .click();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line">driver.findElements(By.tagName(<span class="string">&quot;select&quot;</span>))</span><br><span class="line">  .get(<span class="number">0</span>)</span><br><span class="line">  .findElements(By.tagName(<span class="string">&quot;option&quot;</span>))</span><br><span class="line">  .get(<span class="number">3</span>)</span><br><span class="line">  .click()</span><br><span class="line">  .get(<span class="number">4</span>)</span><br><span class="line">  .click()</span><br><span class="line">  .get(<span class="number">5</span>)</span><br><span class="line">  .click();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例三：获取页面所有链接</span></span><br><span class="line"><span class="keyword">var</span> links = driver</span><br><span class="line">  .get(<span class="string">&quot;https://www.google.com&quot;</span>)</span><br><span class="line">  .findElements(By.tagName(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> linkSize = links.size();</span><br><span class="line"><span class="keyword">var</span> linksSrc = [];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(linkSize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;linkSize;i++) &#123;</span><br><span class="line">  linksSrc[i] = links.get(i).getAttribute(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;linkSize;i++)&#123;</span><br><span class="line">  driver.navigate().to(linksSrc[i]);</span><br><span class="line">  Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用<code>size()</code>，查看到底选中了多少个元素。</p>
<h3 id="网页元素的定位"><a href="#网页元素的定位" class="headerlink" title="网页元素的定位"></a>网页元素的定位</h3><p>WebDriver 提供 8 种定位器，用于定位网页元素。</p>
<ul>
<li>By.id：HTML 元素的 id 属性</li>
<li>By.name：HTML 元素的 name 属性</li>
<li>By.xpath：使用 XPath 语法选中 HTML 元素</li>
<li>By.cssSelector：使用 CSS 选择器语法</li>
<li>By.className：HTML 元素的 class 属性</li>
<li>By.linkText：链接文本（只用于选中链接）</li>
<li>By.tagName：HTML 元素的标签名</li>
<li>By.partialLinkText：部分链接文本（只用于选中链接）</li>
</ul>
<p>下面是一个使用 id 定位器，选中网页元素的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.findElement(By.id(<span class="string">&quot;sblsbb&quot;</span>)).click();</span><br></pre></td></tr></table></figure>

<h3 id="网页元素的方法"><a href="#网页元素的方法" class="headerlink" title="网页元素的方法"></a>网页元素的方法</h3><p>以下方法属于网页元素的方法，而不是 webDriver 实例的方法。需要注意的是，有些方法是某些元素特有的，比如只有文本框才能输入文字。如果在网页元素上调用不支持的方法，WebDriver 不会报错，也不会给出给出任何提示，只会静静地忽略。</p>
<p>getAttribute()：返回网页元素指定属性的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">driver.findElement(By.xpath(<span class="string">&quot;//div[@id=&#x27;lst-ib&#x27;]&quot;</span>)).getAttribute(<span class="string">&quot;class&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>getText()：返回网页元素的内部文本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.findElement(By.locatorType(<span class="string">&quot;path&quot;</span>)).getText();</span><br></pre></td></tr></table></figure>

<p>getTagName()：返回指定元素的标签名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">driver.findElement(By.xpath(<span class="string">&quot;//div[@class=&#x27;sbib_b&#x27;]&quot;</span>)).getTagName();</span><br></pre></td></tr></table></figure>

<p>isDisplayed()：返回一个布尔值，表示元素是否可见。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">assert(driver.findElement(By.name(<span class="string">&quot;q&quot;</span>)).isDisplayed(), <span class="string">&quot;搜索框应该可选择&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>isEnabled()：返回一个布尔值，表示文本框是否可编辑。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> Element = driver.findElement(By.name(<span class="string">&quot;q&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (Element.isEnabled()) &#123;</span><br><span class="line">  driver.findElement(By.name(<span class="string">&quot;q&quot;</span>)).sendKeys(<span class="string">&quot;Selenium Essentials&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>isSelected()：返回一个布尔值，表示一个元素是否可选择。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.findElement(By.xpath(<span class="string">&quot;//select[@name=&#x27;jump&#x27;]/option[1]&quot;</span>)).isSelected();</span><br></pre></td></tr></table></figure>

<p>getSize()：返回一个网页元素的宽度和高度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dimensions = driver.findElement(By.locatorType(<span class="string">&quot;path&quot;</span>)).getSize();</span><br><span class="line">dimensions.width;</span><br><span class="line">dimensions.height;</span><br></pre></td></tr></table></figure>

<p>getLocation()：返回网页元素左上角的 x 坐标和 y 坐标。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> point = driver.findElement(By.locatorType(<span class="string">&quot;path&quot;</span>)).getLocation();</span><br><span class="line">point.x; <span class="comment">// 等同于 point.getX();</span></span><br><span class="line">point.y; <span class="comment">// 等同于 point.getY();</span></span><br></pre></td></tr></table></figure>

<p>getCssValue()：返回网页元素指定的 CSS 属性的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> element = driver.findElement(By.xpath(<span class="string">&quot;//div[@id=&#x27;hplogo&#x27;]&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(element.getCssValue(<span class="string">&quot;font-size&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(element.getCssValue(<span class="string">&quot;font-weight&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(element.getCssValue(<span class="string">&quot;color&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(element.getCssValue(<span class="string">&quot;background-size&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="页面跳转的方法"><a href="#页面跳转的方法" class="headerlink" title="页面跳转的方法"></a>页面跳转的方法</h3><p>以下方法用来跳转到某一个页面。</p>
<p>get()：要求浏览器跳到某个网址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;URL&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>navigate().back()：浏览器回退。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.navigate().back();</span><br></pre></td></tr></table></figure>

<p>navigate().forward()：浏览器前进。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.navigate().forward();</span><br></pre></td></tr></table></figure>

<p>navigate().to()：跳转到浏览器历史中的某个页面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.navigate().to(<span class="string">&quot;URL&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>navigate().refresh()：刷新当前页面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.navigate().refresh();</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">driver.navigate().to(driver.getCurrentUrl());</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">driver.findElement(By.locatorType(<span class="string">&quot;path&quot;</span>)).sendKeys(Keys.F5);</span><br></pre></td></tr></table></figure>

<h3 id="cookie-的方法"><a href="#cookie-的方法" class="headerlink" title="cookie 的方法"></a>cookie 的方法</h3><p>getCookies()：获取 cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">driver.manage().getCookies();</span><br></pre></td></tr></table></figure>

<p>getCookieNamed() ：返回指定名称的 cookie。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(driver.manage().getCookieNamed(<span class="string">&quot;NID&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>addCookie()：将 cookie 加入当前页面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">driver.manage().addCookie(cookie0);</span><br></pre></td></tr></table></figure>

<p>deleteCookie()：删除指定的 cookie。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.google.co.in&quot;</span>);</span><br><span class="line">driver.manage().deleteCookieNamed(<span class="string">&quot;NID&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="浏览器窗口的方法"><a href="#浏览器窗口的方法" class="headerlink" title="浏览器窗口的方法"></a>浏览器窗口的方法</h3><p>maximize()：最大化浏览器窗口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> driver = <span class="keyword">new</span> FirefoxDriver();</span><br><span class="line">driver.manage().window().maximize();</span><br></pre></td></tr></table></figure>

<p>getSize()：返回浏览器窗口、图像、网页元素的宽和高。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.manage().window().getSize();</span><br></pre></td></tr></table></figure>

<p>getPosition()：返回浏览器窗口左上角的 x 坐标和 y 坐标。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Position X: &quot;</span> + driver.manage().window().getPosition().x);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Position Y: &quot;</span> + driver.manage().window().getPosition().y);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Position X: &quot;</span> + driver.manage().window().getPosition().getX());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Position Y: &quot;</span> + driver.manage().window().getPosition().getY());</span><br></pre></td></tr></table></figure>

<p>setSize()：定制浏览器窗口的大小。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Dimension(<span class="number">320</span>, <span class="number">480</span>);</span><br><span class="line">driver.manage().window().setSize(d);</span><br><span class="line">driver.manage().window().setSize(<span class="keyword">new</span> Dimension(<span class="number">320</span>, <span class="number">480</span>));</span><br></pre></td></tr></table></figure>

<p>setPosition()：移动浏览器左上角到指定位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">driver.manage().window().setPosition(p);</span><br><span class="line">driver.manage().window().setPosition(<span class="keyword">new</span> Point(<span class="number">300</span>, <span class="number">150</span>));</span><br></pre></td></tr></table></figure>

<p>getWindowHandle()：返回当前浏览器窗口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parentwindow = driver.getWindowHandle();</span><br><span class="line">driver.switchTo().window(parentwindow);</span><br></pre></td></tr></table></figure>

<p>getWindowHandles()：返回所有浏览器窗口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> childwindows = driver.getWindowHandles();</span><br><span class="line">driver.switchTo().window(childwindow);</span><br></pre></td></tr></table></figure>

<p>switchTo.window()：在浏览器窗口之间切换。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">driver.SwitchTo().Window(childwindow);</span><br><span class="line">driver.close();</span><br><span class="line">driver.SwitchTo().Window(parentWindow);</span><br></pre></td></tr></table></figure>

<h3 id="弹出窗口"><a href="#弹出窗口" class="headerlink" title="弹出窗口"></a>弹出窗口</h3><p>以下方法处理浏览器的弹出窗口。</p>
<p>dismiss() ：关闭弹出窗口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> alert = driver.switchTo().alert();</span><br><span class="line">alert.dismiss();</span><br></pre></td></tr></table></figure>

<p>accept()：接受弹出窗口，相当于按下接受 OK 按钮。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> alert = driver.switchTo().alert();</span><br><span class="line">alert.accept();</span><br></pre></td></tr></table></figure>

<p>getText()：返回弹出窗口的文本值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> alert = driver.switchTo().alert();</span><br><span class="line">alert.getText();</span><br></pre></td></tr></table></figure>

<p>sendKeys()：向弹出窗口发送文本字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> alert = driver.switchTo().alert();</span><br><span class="line">alert.sendKeys(<span class="string">&quot;Text to be passed&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>authenticateUsing()：处理 HTTP 认证。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> UserAndPassword(<span class="string">&quot;USERNAME&quot;</span>, <span class="string">&quot;PASSWORD&quot;</span>);</span><br><span class="line">alert.authenticateUsing(user);</span><br></pre></td></tr></table></figure>

<h3 id="鼠标和键盘的方法"><a href="#鼠标和键盘的方法" class="headerlink" title="鼠标和键盘的方法"></a>鼠标和键盘的方法</h3><p>以下方法模拟鼠标和键盘的动作。</p>
<ul>
<li>click()：鼠标在当前位置点击。</li>
<li>clickAndHold()：按下鼠标不放</li>
<li>contextClick()：右击鼠标</li>
<li>doubleClick()：双击鼠标</li>
<li>dragAndDrop()：鼠标拖放到目标元素</li>
<li>dragAndDropBy()：鼠标拖放到目标坐标</li>
<li>keyDown()：按下某个键</li>
<li>keyUp()：从按下状态释放某个键</li>
<li>moveByOffset()：移动鼠标到另一个坐标位置</li>
<li>moveToElement()：移动鼠标到另一个网页元素</li>
<li>release()：释放拖拉的元素</li>
<li>sendKeys()：控制键盘输出</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>组件二次封装-移动端分页加载</title>
    <url>/2021/01/08/vue/diy-vant-list/</url>
    <content><![CDATA[<blockquote>
<p>diy-vant-list 此组件可使用 van-list 的任意 api，van-pull-refresh 中的部分 api 与 List 组件命名冲突，增加前缀 [pull-]。 如： <strong><code>[pull-loading-text][pull-loading]</code></strong><br>学习本文档可参考 <a href="https://vant-contrib.gitee.io/vant/#/zh-CN/list">vant 官方文档</a></p>
</blockquote>
<h1 id="引入（全局注入组件）"><a href="#引入（全局注入组件）" class="headerlink" title="引入（全局注入组件）"></a>引入（全局注入组件）</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> diyVantList <span class="keyword">from</span> <span class="string">&quot;@/components/diy-vant-list&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&quot;diyVantList&quot;</span>, diyVantList);</span><br></pre></td></tr></table></figure>

<h1 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">diy-vant-list</span> <span class="attr">postUrl</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;listItem&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; listItem &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">diy-vant-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>theme</td>
<td>是否定制其他风格的空状态、列表请求失败图片以及列表加载完成样式</td>
<td><code>String</code></td>
<td>normal</td>
</tr>
</tbody></table>
<h3 id="请求接口"><a href="#请求接口" class="headerlink" title="请求接口"></a>请求接口</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>postUrl</td>
<td>请求接口路径<code>（必传）</code></td>
<td><code>String</code></td>
<td>-</td>
</tr>
<tr>
<td>apiData</td>
<td>请求参数（除了 pageNum，和 pageSize，还需向接口传递的参数）</td>
<td><code>Object</code></td>
<td>-</td>
</tr>
<tr>
<td>startName</td>
<td>当前页码的属性名( pageNum/pageNo)</td>
<td><code>String</code></td>
<td>pageNum</td>
</tr>
<tr>
<td>totalPageName</td>
<td>接口返回总页数字段名</td>
<td><code>String</code></td>
<td>totalPageCount</td>
</tr>
<tr>
<td>listName</td>
<td>接口返回 list 的位置</td>
<td><code>Boolean</code></td>
<td>data.list</td>
</tr>
<tr>
<td>pageSize</td>
<td>每页条数（默认 10 条）</td>
<td><code>String,Number</code></td>
<td>10</td>
</tr>
</tbody></table>
<h3 id="列表相关"><a href="#列表相关" class="headerlink" title="列表相关"></a>列表相关</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>changeButton</td>
<td>是否展示切换加载按钮（测试使用）</td>
<td><code>Boolean</code></td>
<td>false</td>
</tr>
<tr>
<td>condition</td>
<td>展示列表需要的额外条件，如列表只展示排名大于 3 的数据</td>
<td><code>Boolean</code></td>
<td>true</td>
</tr>
<tr>
<td>noPaging</td>
<td>是否不需要分页加载数据</td>
<td><code>String</code></td>
<td>false</td>
</tr>
<tr>
<td>autoLoad</td>
<td>是否需要上拉加载</td>
<td><code>Boolean</code></td>
<td>true(当 autoLoad 为 false 时，列表为点击加载更多)</td>
</tr>
<tr>
<td>immediate-check</td>
<td>是否在初始化时立即执行滚动位置检查</td>
<td><code>Boolean</code></td>
<td>true</td>
</tr>
<tr>
<td>loading-text</td>
<td>加载过程中的提示文案</td>
<td><code>String</code></td>
<td>请求失败，点击重新加载</td>
</tr>
<tr>
<td>finished-text</td>
<td>列表加载完成时显示的文案</td>
<td><code>String</code></td>
<td>没有更多了</td>
</tr>
<tr>
<td>readmore-text</td>
<td>点击查看更能多显示的文案</td>
<td><code>String</code></td>
<td>查看更多</td>
</tr>
<tr>
<td>error-text</td>
<td>加载失败后的提示文案</td>
<td><code>String</code></td>
<td>请求失败，点击重新加载</td>
</tr>
<tr>
<td>list-item-class</td>
<td>订制每条数据样式类名</td>
<td><code>String</code></td>
<td>-</td>
</tr>
<tr>
<td>offset</td>
<td>滚动条与底部距离小于 offset 时触发 load 事件</td>
<td><code>String, Number</code></td>
<td>300</td>
</tr>
<tr>
<td>minHeight</td>
<td>为了避免列表数据过少，下拉刷新时列表区域被遮挡</td>
<td><code>String, Number</code></td>
<td>0</td>
</tr>
<tr>
<td>direction</td>
<td>滚动触发加载的方向，可选值为 up</td>
<td><code>String</code></td>
<td>down</td>
</tr>
</tbody></table>
<h4 id="list-item-class-的使用"><a href="#list-item-class-的使用" class="headerlink" title="list-item-class 的使用"></a>list-item-class 的使用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">diy-vant-list</span> <span class="attr">postUrl</span>=<span class="string">&quot;&quot;</span> <span class="attr">list-item-class</span>=<span class="string">&quot;content-item&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;listItem&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; listItem &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">diy-vant-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">/deep/ .content-item &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">351px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">124px</span>;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">1px</span> <span class="number">8px</span> <span class="number">0px</span> rgba(<span class="number">210</span>, <span class="number">216</span>, <span class="number">241</span>, <span class="number">0.6</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="下拉加载"><a href="#下拉加载" class="headerlink" title="下拉加载"></a>下拉加载</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>pullRefresh</td>
<td>是否需要开启下拉刷新</td>
<td><code>Boolean</code></td>
<td>false</td>
</tr>
<tr>
<td>pullingText</td>
<td>下拉过程提示文案</td>
<td><code>String</code></td>
<td>下拉即可刷新…</td>
</tr>
<tr>
<td>loosingText</td>
<td>下拉释放过程提示文案</td>
<td><code>String</code></td>
<td>释放即可刷新…</td>
</tr>
<tr>
<td>pull-loading-text</td>
<td>下拉加载过程提示文案</td>
<td><code>String</code></td>
<td>加载中…</td>
</tr>
<tr>
<td>success-text</td>
<td>下拉刷新成功提示文案</td>
<td><code>String</code></td>
<td>-</td>
</tr>
<tr>
<td>success-duration</td>
<td>刷新成功提示展示时长(ms)</td>
<td><code>String, Number</code></td>
<td>500</td>
</tr>
<tr>
<td>animation-duration</td>
<td>动画时长(ms)</td>
<td><code>String, Number</code></td>
<td>300</td>
</tr>
<tr>
<td>head-height(<code>v2.4.2</code>)</td>
<td>下拉顶部内容高度</td>
<td><code>String, Number</code></td>
<td>50</td>
</tr>
</tbody></table>
<h2 id="Slots-插槽"><a href="#Slots-插槽" class="headerlink" title="Slots 插槽"></a>Slots 插槽</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>内容填充</strong></td>
<td></td>
</tr>
<tr>
<td>content</td>
<td>自定义列表每一项</td>
</tr>
<tr>
<td><strong>列表相关</strong></td>
<td></td>
</tr>
<tr>
<td>loading</td>
<td>自定义底部加载中提示</td>
</tr>
<tr>
<td>error</td>
<td>自定义加载失败后的提示内容</td>
</tr>
<tr>
<td>finished</td>
<td>自定义加载完成后的提示内容</td>
</tr>
<tr>
<td>readmore</td>
<td>手动点击加载下一页提示内容</td>
</tr>
<tr>
<td>empty</td>
<td>列表数据为空时显示内容</td>
</tr>
<tr>
<td><strong>下拉加载</strong></td>
<td></td>
</tr>
<tr>
<td>default</td>
<td>下拉自定义内容</td>
</tr>
<tr>
<td>normal</td>
<td>非下拉状态时顶部内容</td>
</tr>
<tr>
<td>pulling</td>
<td>下拉过程中顶部内容</td>
</tr>
<tr>
<td>loosing</td>
<td>下拉释放提示</td>
</tr>
<tr>
<td>pull-loading</td>
<td>下拉加载提示 <code>[pull-loading]</code> 用以区分下拉刷新和列表加载 loading</td>
</tr>
<tr>
<td>success</td>
<td>下拉成功提示</td>
</tr>
</tbody></table>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><h3 id="当页面有筛选条件或者-tab-切换需要更新列表数据时，需要主动调用-reset-方法重置数据"><a href="#当页面有筛选条件或者-tab-切换需要更新列表数据时，需要主动调用-reset-方法重置数据" class="headerlink" title="当页面有筛选条件或者 tab 切换需要更新列表数据时，需要主动调用 reset 方法重置数据"></a>当页面有筛选条件或者 tab 切换需要更新列表数据时，需要主动调用 reset 方法重置数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">diy-vant-list</span> <span class="attr">postUrl</span>=<span class="string">&quot;&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;diyVantList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;listItem&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; listItem &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">diy-vant-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$refs.diyVantList.reset(); <span class="comment">// 重置数据</span></span><br></pre></td></tr></table></figure>

<h3 id="父组件需要获取数据长度等相关的属性时，可调用-setData-获取列表数据"><a href="#父组件需要获取数据长度等相关的属性时，可调用-setData-获取列表数据" class="headerlink" title="父组件需要获取数据长度等相关的属性时，可调用 setData 获取列表数据"></a>父组件需要获取数据长度等相关的属性时，可调用 setData 获取列表数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">diy-vant-list</span> <span class="attr">postUrl</span>=<span class="string">&quot;&quot;</span> @<span class="attr">setData</span>=<span class="string">&quot;setData&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;listItem&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; listItem &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">diy-vant-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setData(listData, resData) &#123;</span><br><span class="line">  <span class="built_in">this</span>.dataListlength = listData.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="当接口请求发生错误时，父组件可调用-error-捕捉错误信息"><a href="#当接口请求发生错误时，父组件可调用-error-捕捉错误信息" class="headerlink" title="当接口请求发生错误时，父组件可调用 error 捕捉错误信息"></a>当接口请求发生错误时，父组件可调用 error 捕捉错误信息</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">diy-vant-list</span> <span class="attr">postUrl</span>=<span class="string">&quot;&quot;</span> @<span class="attr">error</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;listItem&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; listItem &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">diy-vant-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">error(error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="组件完整代码展示"><a href="#组件完整代码展示" class="headerlink" title="组件完整代码展示"></a>组件完整代码展示</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;diy-vant-list&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;theme&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;changeButton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;autoLoad = !autoLoad; reset();&quot;</span>&gt;</span></span><br><span class="line">      切换加载模式： &#123;&#123; autoLoad ? &quot;自动&quot; : &quot;手动&quot; &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;pullRefresh = !pullRefresh; reset();&quot;</span>&gt;</span></span><br><span class="line">      是否下拉刷新： &#123;&#123; pullRefresh ? &quot;是&quot; : &quot;否&quot; &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;listData &amp;&amp; listData.length &amp;&amp; condition&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-pull-refresh</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;refreshing&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disabled</span>=<span class="string">&quot;!pullRefresh&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:pulling-text</span>=<span class="string">&quot;pullingText&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:loosing-text</span>=<span class="string">&quot;loosingText&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:loading-text</span>=<span class="string">&quot;pullLoadingText&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:success-text</span>=<span class="string">&quot;successText&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:success-duration</span>=<span class="string">&quot;successDuration&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:animation-duration</span>=<span class="string">&quot;animationDuration&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:head-height</span>=<span class="string">&quot;headHeight&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">refresh</span>=<span class="string">&quot;reset&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 下拉自定义内容 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span>=<span class="string">&quot;default&quot;</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 非下拉状态时顶部内容 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span>=<span class="string">&quot;normal&quot;</span> <span class="attr">name</span>=<span class="string">&quot;normal&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 下拉过程中顶部内容 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span>=<span class="string">&quot;pulling&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pulling&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 下拉释放提示 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span>=<span class="string">&quot;loosing&quot;</span> <span class="attr">name</span>=<span class="string">&quot;loosing&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 下拉加载提示 [pull-loading]用以区分下拉刷新和列表加载loading --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pull-loading&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 下拉成功提示 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span>=<span class="string">&quot;success&quot;</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-list</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;autoLoad &amp;&amp; !noPaging&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;listLoading&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:finished</span>=<span class="string">&quot;listFinished&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:loading-text</span>=<span class="string">&quot;loadingText&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:finished-text</span>=<span class="string">&quot;finishedText&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:error.sync</span>=<span class="string">&quot;error&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:error-text</span>=<span class="string">&quot;errorText&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:direction</span>=<span class="string">&quot;direction&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:immediate-check</span>=<span class="string">&quot;immediateCheck&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:offset</span>=<span class="string">&quot;offset&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;list-container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:style</span>=<span class="string">&quot;&#123; minHeight: minHeight + &#x27;px&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">load</span>=<span class="string">&quot;getListData&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in listData&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:class</span>=<span class="string">&quot;listItemClass&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:listItem</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义底部加载中提示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">name</span>=<span class="string">&quot;loading&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义加载失败后的提示文案 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span>=<span class="string">&quot;error&quot;</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义加载完成后的提示文案 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">slot</span>=<span class="string">&quot;finished&quot;</span> <span class="attr">name</span>=<span class="string">&quot;finished&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-divider</span> <span class="attr">v-if</span>=<span class="string">&quot;theme === &#x27;lucky&#x27;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;finished&quot;</span>&gt;</span></span><br><span class="line">            我是有底线的</span><br><span class="line">          <span class="tag">&lt;/<span class="name">van-divider</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; finishedText &#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;list-container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:style</span>=<span class="string">&quot;&#123; minHeight: minHeight + &#x27;px&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in listData&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:class</span>=<span class="string">&quot;listItemClass&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:listItem</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-if</span>=<span class="string">&quot;!pageFirstLoading &amp;&amp; listData.length &gt; 0 &amp;&amp; !noPaging&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;readmore&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:class</span>=<span class="string">&quot;&#123; nomore: !pageLoading &amp;&amp; totalPageCount &lt;= pageNo &#125;&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;getListData&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;pageLoading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>&#123;&#123; loadingText &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else-if</span>=<span class="string">&quot;totalPageCount &gt; pageNo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;readmore&quot;</span>&gt;</span>&#123;&#123; readmoreText &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-else</span> <span class="attr">name</span>=<span class="string">&quot;finished&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">van-divider</span> <span class="attr">v-if</span>=<span class="string">&quot;theme === &#x27;lucky&#x27;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;finished&quot;</span>&gt;</span></span><br><span class="line">              我是有底线的</span><br><span class="line">            <span class="tag">&lt;/<span class="name">van-divider</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; finishedText &#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-pull-refresh</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;pageFirstLoading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-loading</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;networdError&quot;</span> <span class="attr">class</span>=<span class="string">&quot;network-error&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;error-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;@/assets/images/common/network-error.png&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error-mes&quot;</span>&gt;</span>数据加载失败，请刷新重试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;refresh-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;no-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;empty&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;empty-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;@/assets/images/common/empty.png&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;empty-mes&quot;</span>&gt;</span>暂无数据<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    condition: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    noPaging: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否展示切换加载按钮（测试使用）</span></span><br><span class="line">    changeButton: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 定制游戏主题lucky</span></span><br><span class="line">    theme: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;normal&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求接口路径（必传）</span></span><br><span class="line">    postUrl: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数（除了pageNum，和pageSize，还需向接口传递的参数）</span></span><br><span class="line"><span class="comment">     * ！！！注：当父组件中的 apiData 不是直接绑定时，必须在父组件的 created 中初始化 apiData，以便子组件可以及时取到请求参数</span></span><br><span class="line"><span class="comment">     * 扩展知识：vue父子组件生命周期加载顺序：父组件beforeCreated -&gt;父组件created -&gt;父组件beforeMounted -&gt;子组件beforeCreated -&gt;子组件created -&gt;子组件beforeMounted -&gt;子组件mounted -&gt; 父组件mounted</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    apiData: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当前页码的属性名（例如pageNum/pageNo，默认为pageNum）</span></span><br><span class="line">    startName: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;pageNum&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 每页条数（默认10条）</span></span><br><span class="line">    pageSize: &#123;</span><br><span class="line">      type: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 为了避免列表数据过少，下拉刷新时列表区域被遮挡</span></span><br><span class="line">    minHeight: &#123; <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>], <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    <span class="comment">// 是否需要上拉加载（默认true，当 autoLoad 为 false 时，列表为点击加载）</span></span><br><span class="line">    autoLoad: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 总页数</span></span><br><span class="line">    totalPageName: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;data.totalPageCount&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 滚动条与底部距离小于 offset 时触发 load 事件</span></span><br><span class="line">    offset: &#123;</span><br><span class="line">      type: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">300</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载过程中的提示文案</span></span><br><span class="line">    loadingText: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;加载中...&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 列表加载完成时显示的文案</span></span><br><span class="line">    finishedText: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;没有更多了&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 点击查看更能多显示的文案</span></span><br><span class="line">    readmoreText: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;查看更多&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载失败后的提示文案</span></span><br><span class="line">    errorText: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;请求失败，点击重新加载&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否在初始化时立即执行滚动位置检查</span></span><br><span class="line">    immediateCheck: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 滚动触发加载的方向，可选值为 up</span></span><br><span class="line">    direction: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;down&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 订制每条数据样式类名 可传 list-item-class</span></span><br><span class="line">    listItemClass: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否需要下拉刷新</span></span><br><span class="line">    pullRefresh: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 刷新成功提示展示时长(ms)</span></span><br><span class="line">    successDuration: &#123; <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>], <span class="attr">default</span>: <span class="number">500</span> &#125;,</span><br><span class="line">    <span class="comment">// 动画时长(ms)</span></span><br><span class="line">    animationDuration: &#123; <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>], <span class="attr">default</span>: <span class="number">300</span> &#125;,</span><br><span class="line">    <span class="comment">// 顶部内容高度</span></span><br><span class="line">    headHeight: &#123; <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>], <span class="attr">default</span>: <span class="number">50</span> &#125;,</span><br><span class="line">    pullingText: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&quot;下拉即可刷新...&quot;</span> &#125;, <span class="comment">// 下拉过程提示文案</span></span><br><span class="line">    loosingText: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&quot;释放即可刷新...&quot;</span> &#125;, <span class="comment">// 下拉释放过程提示文案</span></span><br><span class="line">    pullLoadingText: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&quot;加载中...&quot;</span> &#125;, <span class="comment">// 下拉加载过程提示文案</span></span><br><span class="line">    successText: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&quot;刷新成功&quot;</span> &#125;, <span class="comment">// 下拉刷新成功提示文案</span></span><br><span class="line">    listName: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&quot;data.list&quot;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      listData: [], <span class="comment">// 列表数据</span></span><br><span class="line">      listLoading: <span class="literal">false</span>, <span class="comment">// 列表加载</span></span><br><span class="line">      listFinished: <span class="literal">false</span>, <span class="comment">// 列表加载完成</span></span><br><span class="line">      pageFirstLoading: <span class="literal">true</span>, <span class="comment">// 页面首次加载</span></span><br><span class="line">      pageLoading: <span class="literal">false</span>, <span class="comment">// 防重复请求</span></span><br><span class="line">      rowCount: <span class="string">&quot;&quot;</span>, <span class="comment">// 总条数</span></span><br><span class="line">      totalPageCount: <span class="number">1</span>, <span class="comment">// 总页数</span></span><br><span class="line">      pageNo: <span class="number">0</span>, <span class="comment">// 当前页数</span></span><br><span class="line">      refreshing: <span class="literal">false</span>, <span class="comment">// 下拉刷新状态</span></span><br><span class="line">      error: <span class="literal">false</span>, <span class="comment">// 列表加载失败</span></span><br><span class="line">      networdError: <span class="literal">false</span> <span class="comment">// 接口请求失败，报错</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">this</span>.getListData();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表重置（在请求参数 apiData 有变化时，父组件需要主动调用此方法充值列表）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    reset() &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshing) &#123;</span><br><span class="line">        <span class="built_in">this</span>.listData = [];</span><br><span class="line">        <span class="built_in">this</span>.pageFirstLoading = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.pageNo = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">this</span>.totalPageCount = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">this</span>.listFinished = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">this</span>.networdError = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">this</span>.pageLoading = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">this</span>.listLoading = <span class="literal">true</span>; <span class="comment">// 将 loading 设置为 true，表示处于加载状态</span></span><br><span class="line">      <span class="built_in">this</span>.getListData();</span><br><span class="line">    &#125;,</span><br><span class="line">    splitPath(str = <span class="string">&quot;&quot;</span>, obj = &#123;&#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> strArr = str.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> _obj = &#123; ...obj &#125;;</span><br><span class="line">      strArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        _obj = _obj[item];</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> _obj;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求列表数据（分页）</span></span><br><span class="line"><span class="comment">     * @[startName] &#123;Number&#125; 当前页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@pageSize <span class="type">&#123;Number&#125;</span> </span>显示条数</span></span><br><span class="line"><span class="comment">     * 此方法向父组件</span></span><br><span class="line"><span class="comment">     *   1. $emit(&quot;setData&quot;, data); 根据业务需求，父组件可调用 setData 获取列表数据</span></span><br><span class="line"><span class="comment">     *   2. $emit(&quot;error&quot;, res); 根据业务需求，父组件可调用 error 处理请求错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: Object [data]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getListData() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.listFinished || <span class="built_in">this</span>.pageLoading) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断页码</span></span><br><span class="line">      <span class="built_in">this</span>.pageNo++;</span><br><span class="line">      <span class="comment">// 如果当前页数 &gt; 总页数，则已经没有数据 停止加载</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.pageNo &gt; <span class="built_in">this</span>.totalPageCount) &#123;</span><br><span class="line">        <span class="built_in">this</span>.listFinished = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">this</span>.pageLoading = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> extendsParams = &#123; ...this.apiData &#125; || &#123;&#125;;</span><br><span class="line">      <span class="keyword">const</span> data = &#123;</span><br><span class="line">        [<span class="built_in">this</span>.startName]: <span class="built_in">this</span>.pageNo,</span><br><span class="line">        pageSize: <span class="built_in">this</span>.pageSize,</span><br><span class="line">        ...extendsParams</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> url = <span class="built_in">this</span>.postUrl;</span><br><span class="line">      <span class="keyword">const</span> pageNo = data[<span class="built_in">this</span>.startName];</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.pageLoading = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">this</span>.$request.post(&#123;</span><br><span class="line">        url,</span><br><span class="line">        data,</span><br><span class="line">        done: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.pageFirstLoading = <span class="literal">false</span>;</span><br><span class="line">          <span class="built_in">this</span>.pageLoading = <span class="literal">false</span>;</span><br><span class="line">          <span class="built_in">this</span>.listLoading = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.refreshing) &#123;</span><br><span class="line">            <span class="comment">// 接口请求成功，停止刷新</span></span><br><span class="line">            <span class="built_in">this</span>.refreshing = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (res.code === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> resData = res.data;</span><br><span class="line">            <span class="keyword">const</span> listData = <span class="built_in">this</span>.splitPath(<span class="built_in">this</span>.listName, res);</span><br><span class="line">            <span class="comment">// 如果当前请求返回list为空，list停止加载 listFinished 为 true</span></span><br><span class="line">            <span class="keyword">if</span> (pageNo &gt; <span class="built_in">this</span>.totalPageCount || listData.length == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="built_in">this</span>.listFinished = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// pageNo 当前页数 pageSize 每页条数 rowCount 总条数 totalPageCount 总页数</span></span><br><span class="line">            <span class="built_in">this</span>.totalPageCount = <span class="built_in">this</span>.splitPath(<span class="built_in">this</span>.totalPageName, res);</span><br><span class="line">            <span class="built_in">this</span>.rowCount = resData.rowCount;</span><br><span class="line">            <span class="comment">// 判断是否为当前请求的数据(url是否一致|扩展参数是否一致)</span></span><br><span class="line">            <span class="keyword">let</span> isCurrentData =</span><br><span class="line">              url === <span class="built_in">this</span>.postUrl &amp;&amp;</span><br><span class="line">              <span class="built_in">JSON</span>.stringify(extendsParams) === <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.apiData);</span><br><span class="line">            <span class="keyword">if</span> (isCurrentData) &#123;</span><br><span class="line">              <span class="comment">/* 上拉一下 添加一次数据 */</span></span><br><span class="line">              <span class="keyword">if</span> (pageNo === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.listData = listData;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.listData = <span class="built_in">this</span>.listData.concat(listData);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="built_in">this</span>.$forceUpdate();</span><br><span class="line">              <span class="built_in">this</span>.$emit(<span class="string">&quot;setData&quot;</span>, <span class="built_in">this</span>.listData, resData); <span class="comment">// 父组件可调用 setData 获取列表数据</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pageNo === <span class="number">1</span>) &#123;</span><br><span class="line">              <span class="built_in">this</span>.networdError = <span class="literal">true</span>;</span><br><span class="line">              <span class="built_in">this</span>.pageLoading = <span class="literal">false</span>;</span><br><span class="line">              <span class="built_in">this</span>.pageFirstLoading = <span class="literal">false</span>;</span><br><span class="line">              <span class="built_in">this</span>.listLoading = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">this</span>.networdError = <span class="literal">false</span>;</span><br><span class="line">              <span class="built_in">this</span>.error = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&quot;error&quot;</span>, res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.pageLoading = <span class="literal">false</span>;</span><br><span class="line">          <span class="built_in">this</span>.pageFirstLoading = <span class="literal">false</span>;</span><br><span class="line">          <span class="built_in">this</span>.listLoading = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.pageNo === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.networdError = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">this</span>.error = <span class="literal">false</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.networdError = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.error = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.diy-vant-list</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">300px</span>;</span><br><span class="line">  /deep/ .list-container &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">display</span>: table;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">display</span>: table;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.loading</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: translateX(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.readmore</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#517cf1</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.nomore</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#a2a2a2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.network-error</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: translateX(-<span class="number">50%</span>);</span><br><span class="line">    <span class="selector-class">.error-img</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">138px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.error-mes</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#737373</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">21px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.refresh-btn</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">114px</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">      <span class="attribute">background</span>: rgba(<span class="number">247</span>, <span class="number">139</span>, <span class="number">68</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">16px</span> auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.no-data</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">40%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: translateX(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666666</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">19px</span>;</span><br><span class="line">    <span class="selector-class">.empty-img</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue单元测试</title>
    <url>/2020/12/09/vue/unit-test/</url>
    <content><![CDATA[<h1 id="为什么需要测试"><a href="#为什么需要测试" class="headerlink" title="为什么需要测试"></a>为什么需要测试</h1><p>测试是完善的研发体系中不可或缺的一环。前端同样需要测试，你的 CSS 改动可能导致页面错位、JS 改动可能导致功能不正常。尽管测试领域工具层出不穷，在前端的自动化测试上面却实施并不广泛，但是前端偏向界面所以还是有很多人依旧以手工测试为主。</p>
<h1 id="vue-中的单元测试"><a href="#vue-中的单元测试" class="headerlink" title="vue 中的单元测试"></a>vue 中的单元测试</h1><h2 id="端到端测试-E2E"><a href="#端到端测试-E2E" class="headerlink" title="端到端测试(E2E)"></a>端到端测试(E2E)</h2><p>E2E 或者端到端(End-To-End)或者 UI 测试是一种测试方法，它用来测试一个应用从头到尾的流程是否和设计时候所想的一样。简而言之，它从一个用户的角度出发，认为整个系统都是一个黑箱，只有 UI 会暴露给用户。</p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p><strong>测试驱动开发</strong>(TDD:Test- Driven Development)，单元测试就不陌生。<br>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。<br>比如写个加法函数 <code>add(a, b)&#123; return a + b&#125;</code>，我们可以编写出以下几个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试用例如</span><br><span class="line">输入 1 和 1，期待返回结果是 2;</span><br><span class="line">输入非数值类型，比如 None、[]、0，期待抛出异常。</span><br></pre></td></tr></table></figure>

<p>把上面的测试用例放到一个测试模块里，就是一个完整的单元测试。<br>如果单元测试通过，说明我们测试的这个函数能够正常工作。如果单元测试不通过，要么函数有 bug，要么测试条件输入不正确，总之，需要修复使单元测试能够通过。<br>那在 Vue 中的单元测试中主要使用两个工具分别是( Karma+ Mocha)</p>
<h1 id="自动化测试框架"><a href="#自动化测试框架" class="headerlink" title="自动化测试框架"></a>自动化测试框架</h1><p><strong>Jest、Mocha、Jasmine、sinon、chai、Karma、vue-test-utils 都是什么？</strong></p>
<table>
<thead>
<tr>
<th>名词</th>
<th>类型</th>
<th>名词</th>
</tr>
</thead>
<tbody><tr>
<td>Jest</td>
<td>测试框架</td>
<td>Jest 由 Facebook 开发，用于测试 JavaScript 代码（尤其是使用 React JS 开发的应用程序集成了断言、JSDom、覆盖率报告等，是一款几乎零配置的测试框架 <br> 提供 snapshot 功能</td>
</tr>
<tr>
<td>Mocha</td>
<td>测试框架</td>
<td>基于 JavaScript 的自动化测试框架，用于测试使用 Node.js 运行的应用程序 <br>比较年老的测试框架，在 JavaScript 界使用更广泛，可参考文献更多</td>
</tr>
<tr>
<td>Jasmine</td>
<td>测试框架</td>
<td>主要用于异步测试，是一个功能丰富的 JavaScript 自动化测试框架<br>Jasmine 需要很多配置</td>
</tr>
<tr>
<td>sinon</td>
<td>测试框架</td>
<td>用于 JavaScript 的测试监视(spy)、桩(stub)和仿制(mock)功能。不依赖其他类库，兼容任何单元测试框架</td>
</tr>
<tr>
<td>chai</td>
<td>断言库</td>
<td>一套 TDD(测试驱动开发)/BDD(行为驱动开发)的断言库<br>expect/should 库</td>
</tr>
<tr>
<td>Karma</td>
<td>运行器</td>
<td>不是测试框架，也不是断言库，是允许你的 JavaScript 代码在复杂的浏览器运行的工具（抹平浏览器障碍）</td>
</tr>
<tr>
<td>vue-test-utils</td>
<td>单元测试工具库</td>
<td>vue 官方提供的，专门为测试单文件组件而开发</td>
</tr>
</tbody></table>
<h1 id="Mocha-Chai-的了解"><a href="#Mocha-Chai-的了解" class="headerlink" title="Mocha + Chai 的了解"></a>Mocha + Chai 的了解</h1><h2 id="Karma"><a href="#Karma" class="headerlink" title="Karma"></a>Karma</h2><ol>
<li>Karmai 是一个基于 Node.js 的 Javascript 测试执行过程管理工具( Test Runner)。该工具在 Vue 中的主要作用是将项目运行在各种主流 Web 浏览器进行测试。</li>
<li>换句话说，它是一个测试工具，能让你的代码在浏览器环境下测试。需要它的原因在于，你的代码可能是设计在浏览器端执行的，在 node 环境下测试可能有些 bug 暴露不出来另外，浏览器有兼容问题， karma 提供了手段让你的代码自动在多个浏览器( chrome， firefox，ie 等)环境下运行。如果你的代码只会运行在 node 端，那么你不需要用 karma。</li>
</ol>
<h2 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h2><ol>
<li>Mocha(发音摩卡)是一个测试框架，在 vue-ci 中配合 Mocha.本身不带断言库，所以必须先引入断言库，Chai 断言库实现单元测试。</li>
<li>Mochas 的常用命令和用法不算太多，而 Chai.js 断言库 API 中文文档，很简单，多查多用就能很快掌握。</li>
</ol>
<h2 id="断言库"><a href="#断言库" class="headerlink" title="断言库"></a>断言库</h2><blockquote>
<p>所谓”断言”，就是判断源码的实际执行结果与预期结果是否一致，如果不ー致就抛出一个错误。下面这句断言的意思是调用 add(1,1)，结果应该等于 2。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(chai).expect;</span><br><span class="line">expect(<span class="number">1</span> + <span class="number">1</span>).toBe(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>Chai 是一种断言库(<a href="http://chaijs.com/">http://chaijs.com/</a>)<br>所有的测试用例(it 块)都应该含有一句或多句的断言。它是编写测试用例的关键。断言功能由断言库来实现。</p>
<p><strong>Chai 的基本使用：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">expect(<span class="number">4</span> + <span class="number">5</span>).to.be.equal(<span class="number">9</span>); <span class="comment">// 判断4+5等于9 true</span></span><br><span class="line">expect(<span class="number">4</span> + <span class="number">5</span>).to.be.not.equal(<span class="number">10</span>); <span class="comment">// 判断4+5不等于10 true</span></span><br><span class="line">expect(&#123; <span class="attr">bar</span>: <span class="string">&quot;baz&quot;</span> &#125;).to.be.deep.equal(&#123; <span class="attr">bar</span>: <span class="string">&quot;baz&quot;</span> &#125;); <span class="comment">// 深度判断是否相等</span></span><br><span class="line"></span><br><span class="line">expect(<span class="literal">true</span>).to.be.ok; <span class="comment">// 判断是true</span></span><br><span class="line">expect(<span class="literal">false</span>).to.not.be.ok; <span class="comment">// 判断是 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断类型</span></span><br><span class="line">expect(<span class="string">&#x27;test&#x27;</span>).to be.a(<span class="string">&#x27;string&#x27;</span>);</span><br><span class="line">expect(&#123; <span class="attr">foo</span>: bar &#125;).to.be.an(<span class="string">&#x27;object&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否包含</span></span><br><span class="line">expect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).to.include(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h1 id="vue-单元测试的三个步骤"><a href="#vue-单元测试的三个步骤" class="headerlink" title="vue 单元测试的三个步骤"></a>vue 单元测试的三个步骤</h1><h2 id="Vue-组件单元测试的一般思路"><a href="#Vue-组件单元测试的一般思路" class="headerlink" title="Vue 组件单元测试的一般思路"></a>Vue 组件单元测试的一般思路</h2><blockquote>
<p>渲染这个组件，然后断言这些标签是否匹配组件的状态</p>
</blockquote>
<ol>
<li>安排（Arrange）：为测试做好设置。在我们的用例中，是渲染了组件</li>
<li>行动（Act）：对系统执行操作</li>
<li>断言（Assert）：确保真实的结果匹配你的期望，我们需要断言以确保组件运行正确（断言就是比较，判断正不正确，1+1 是不是等于 2，就是一个最简单的断言）</li>
</ol>
<h2 id="预装环境："><a href="#预装环境：" class="headerlink" title="预装环境："></a>预装环境：</h2><h3 id="在-Node-环境下安装-vue-cli"><a href="#在-Node-环境下安装-vue-cli" class="headerlink" title="在 Node 环境下安装 vue-cli"></a>在 Node 环境下安装 <code>vue-cli</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install-g vue-cli</span><br></pre></td></tr></table></figure>

<h3 id="通过-vue-cli-初始化项目文件-命令如下"><a href="#通过-vue-cli-初始化项目文件-命令如下" class="headerlink" title="通过 vue-cli 初始化项目文件,命令如下"></a>通过 vue-cli 初始化项目文件,命令如下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack [projectName]</span><br></pre></td></tr></table></figure>

<h3 id="可以运行初始化的测试"><a href="#可以运行初始化的测试" class="headerlink" title="可以运行初始化的测试"></a>可以运行初始化的测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run unit</span><br></pre></td></tr></table></figure>

<p>Vue 脚手架已经初始化了一个 <code>Helloworld.spec.js</code> 的测试文件去测试 Hellowrold.vue，你可以在 <code>test/unit/specs/Helloworld.spec.js</code> 下找到这个测试文件（提示:将来所有的测试文件,都将放 specs 这个目录下,并以测试脚本名 <code>.spec.js</code> 结尾命名！）</p>
<h3 id="安装-Vue-js-官方的单元测式实用工具库（方便在-node-环境下操作-Vue）"><a href="#安装-Vue-js-官方的单元测式实用工具库（方便在-node-环境下操作-Vue）" class="headerlink" title="安装 Vue. js 官方的单元测式实用工具库（方便在 node 环境下操作 Vue）"></a>安装 Vue. js 官方的单元测式实用工具库（方便在 node 环境下操作 Vue）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @vue/test-utils</span><br></pre></td></tr></table></figure>

<h3 id="添加-jest-conf-js-和-setup-js-文件"><a href="#添加-jest-conf-js-和-setup-js-文件" class="headerlink" title="添加 jest.conf.js 和 setup.js 文件"></a>添加 jest.conf.js 和 setup.js 文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/tests/unit/jest.conf.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  rootDir: path.resolve(__dirname, <span class="string">&quot;../../&quot;</span>), <span class="comment">// 同 webpack.context</span></span><br><span class="line">  moduleFileExtensions: [</span><br><span class="line">    <span class="comment">// 同 webpack.resolve.extensions</span></span><br><span class="line">    <span class="string">&quot;js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  moduleNameMapper: &#123;</span><br><span class="line">    <span class="string">&quot;^@/(.*)$&quot;</span>: <span class="string">&quot;&lt;rootDir&gt;/src/$1&quot;</span> <span class="comment">// 同 webpack.resolve.alias</span></span><br><span class="line">  &#125;,</span><br><span class="line">  transform: &#123;</span><br><span class="line">    <span class="comment">// 同 webpack.module.rules</span></span><br><span class="line">    <span class="string">&quot;^.+\\.js$&quot;</span>: <span class="string">&quot;&lt;rootDir&gt;/node_modules/babel-jest&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.*\\.(vue)$&quot;</span>: <span class="string">&quot;&lt;rootDir&gt;/node_modules/vue-jest&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  setupFiles: [<span class="string">&quot;&lt;rootDir&gt;/test/unit/setup&quot;</span>], <span class="comment">// 同 webpack.entry</span></span><br><span class="line">  coverageDirectory: <span class="string">&quot;&lt;rootDir&gt;/test/unit/coverage&quot;</span>, <span class="comment">// 同 webpack.output</span></span><br><span class="line">  collectCoverageFrom: [</span><br><span class="line">    <span class="comment">// 同 webpack 的 rule.include</span></span><br><span class="line">    <span class="string">&quot;src/**/*.&#123;js,vue&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;!src/main.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;!src/router/index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;!**/node_modules/**&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/tests/unit/setup.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h1 id="关于单元测试"><a href="#关于单元测试" class="headerlink" title="关于单元测试"></a>关于单元测试</h1><h2 id="mount-和-shallowMount"><a href="#mount-和-shallowMount" class="headerlink" title="mount 和 shallowMount"></a>mount 和 shallowMount</h2><p>对于包含许多子组件的组件来说，整个渲染树可能会非常大。重复渲染所有的子组件可能会让我们的测试变慢。<br><code>Vue Test Utils</code> 允许你通过 <code>shallowMount</code> 方法只挂载一个组件而不渲染其子组件 (即保留它们的存根)</p>
<h2 id="createLocalVue"><a href="#createLocalVue" class="headerlink" title="createLocalVue"></a>createLocalVue</h2><p><code>createLocalVue</code> 返回一个 Vue 的类，供你添加组件、混入和安装插件而不会污染全局的 Vue 类。<br>可通过 <code>options.localVue</code> 来使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createLocalVue, shallowMount &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/test-utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Foo <span class="keyword">from</span> <span class="string">&quot;./Foo.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localVue = createLocalVue();</span><br><span class="line"><span class="keyword">const</span> wrapper = shallowMount(Foo, &#123;</span><br><span class="line">  localVue,</span><br><span class="line">  mocks: &#123; <span class="attr">foo</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line">expect(wrapper.vm.foo).toBe(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> freshWrapper = shallowMount(Foo);</span><br><span class="line">expect(freshWrapper.vm.foo).toBe(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>Vue 会<code>异步</code>的将未生效的 DOM 批量更新，避免因数据反复变化而导致不必要的渲染。在实践中，这意味着变更一个响应式 property 之后，为了断言这个变化，你的测试<code>需要等待 Vue 完成更新</code>。其中一种办法是使用 <code>await Vue.nextTick()</code>，一个更简单且清晰的方式则是 <code>await 那个你变更状态的方法</code></p>
<p><strong>可以被 await 的方法有：</strong></p>
<ol>
<li>setData</li>
<li>setValue</li>
<li>setChecked</li>
<li>setSelected</li>
<li>setProps</li>
<li>trigger</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> wrapper.find(<span class="string">&quot;input&quot;</span>).trigger(<span class="string">&quot;keydown&quot;</span>, &#123; <span class="attr">key</span>: <span class="string">&quot;a&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// ==&gt; 等价于</span></span><br><span class="line">wrapper.find(<span class="string">&quot;input&quot;</span>).trigger(<span class="string">&quot;keydown&quot;</span>, &#123; <span class="attr">key</span>: <span class="string">&quot;a&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">await</span> Vue.nextTick();</span><br></pre></td></tr></table></figure>

<h2 id="toEqual-和-toBe"><a href="#toEqual-和-toBe" class="headerlink" title="toEqual 和 toBe"></a>toEqual 和 toBe</h2><p><code>toBe()</code> 与 <code>toEqual()</code> ： <code>toEqual()</code> 检查等价 . 另一方面， <code>toBe()</code> 确保它们是完全相同的对象 .</p>
<p>我会说比较值时使用 <code>toBe()</code> ，比较对象时使用 <code>toEqual()</code> .</p>
<p>比较基元类型时， <code>toEqual()</code> 和 <code>toBe()</code> 将产生相同的结果 . 比较对象时， <code>toBe()</code> 是一个更严格的比较，如果它不是内存中完全相同的对象，则返回 false . 因此，除非您想确保它与内存中的完全相同，否则请使用 <code>toEqual()</code> 来比较对象 .</p>
<p>现在，当查看数字时 <code>toBe()</code> 和 <code>toEqual()</code> 之间的区别时，只要您的比较正确，就不会有任何差别 . 5 将始终相当于 5 .</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 它失败原因x和y是不同的实例，不等于(x === y)=== false。您可以使用toBe表示字符串，数字或布尔值等原语，其他所有内容都使用toEqual。例如:</span></span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line">y = <span class="number">4</span>;</span><br><span class="line">x === y; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;someString&quot;</span>;</span><br><span class="line">y = <span class="string">&quot;someString&quot;</span>;</span><br><span class="line">x === y; <span class="comment">// true</span></span><br><span class="line">即使是空物也不相等;</span><br><span class="line"></span><br><span class="line">x = &#123;&#125;;</span><br><span class="line">y = &#123;&#125;;</span><br><span class="line">x === y; <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&quot;toEqual和toBe&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> x = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">3</span> &#125; &#125;;</span><br><span class="line">  <span class="keyword">const</span> y = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">3</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line">  expect(x).toEqual(y);</span><br><span class="line">  <span class="comment">// expect(x).toBe(y);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>很多方法的参数中都包含选择器。一个选择器可以是一个 CSS 选择器、一个 Vue 组件或是一个查找选项对象。</p>
<p>标签选择器 (div、foo、bar)<br>类选择器 (.foo、.bar)<br>特性选择器 ([foo]、[foo=“bar”])<br>id 选择器 (#foo、#bar)<br>伪选择器 (div:first-of-type)<br>近邻兄弟选择器 (div + .foo)<br>一般兄弟选择器 (div ~ .foo)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buttonr = wrapper.find(<span class="string">&quot;.button&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> content = wrapper.find(<span class="string">&quot;#content&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="查找选项对象"><a href="#查找选项对象" class="headerlink" title="查找选项对象"></a>查找选项对象</h2><p><code>Name</code>：可以根据一个组件的 name 选择元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wrapper.find(&#123; <span class="attr">name</span>: ‘my-button’ &#125;)</span><br></pre></td></tr></table></figure>

<p><code>Ref</code>：可以根据$ref 选择元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wrapper.find(&#123; <span class="attr">ref</span>: <span class="string">&quot;myButton&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>而 <code>findAll</code> 返回的是一个<code>数组</code>，在选择有多个元素的情况下是不可以使用 find 的，在使用 findAll 后需要使用 at()来选择具体序列的元素。</p>
<p>在得到了我们的 DOM 元素之后我们就可以很方便地对属性以及内容进行断言判断。<br>这里提一句，有关于样式的测试我更偏向于在 E2E 测试中去断言而不是在单元测试，这显得会更为直观，当然在单元测试中也提供了抓取 class 的 API。<br>有关于 DOM 的 API 列出了以下几个</p>
<ul>
<li>attributes： 属性</li>
<li>classes：wrapper.classes()返回一个字符串数组，wrapper.classes(‘bar’)返回一个布尔值</li>
<li>contains：返回包含元素或组件匹配选择器</li>
<li>html： 以字符串形式返回 DOM 节点的 HTML</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><blockquote>
<p>describe 块 称为“测试套件”，表示一组相关的测试。<br>它是一个函数，第一个参数是测试套件的名称<br>第二个参数是实际执行的函数，分组让测试用例代码结构化，易于维护</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mount, shallowMount &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/test-utils&quot;</span>;</span><br><span class="line">describe(<span class="string">&quot;vue 单元测试&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallowMount(HelloWorld);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="单元测试基本操作"><a href="#单元测试基本操作" class="headerlink" title="单元测试基本操作"></a>单元测试基本操作</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>点击时间发送父组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      update() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;custom&quot;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- src/components/hello.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">custom</span>=<span class="string">&quot;custom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;quantity&quot;</span> @<span class="attr">keydown.prevent</span>=<span class="string">&quot;onKeydown&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&quot;@/components/child&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg: <span class="string">&quot;Hello Jest&quot;</span>,</span></span><br><span class="line"><span class="javascript">        isShow: <span class="literal">false</span>,</span></span><br><span class="line">        quantity: 0</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      custom() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isShow = <span class="literal">true</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      onKeydown(e) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e.key === <span class="string">&quot;a&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.quantity = <span class="number">13</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/tests/unit/test.spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount, shallowMount &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/test-utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&quot;@/components/HelloWorld.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&quot;@/components/child.vue&quot;</span>;</span><br><span class="line"><span class="comment">// import Vue from &quot;vue&quot;;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;vue 单元测试&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallowMount(HelloWorld);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;判断元素是否显示&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    expect(wrapper.find(<span class="string">&quot;h1&quot;</span>).isVisible()).toBe(<span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;当子组件emit事件触发时父组件变化&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    wrapper.findComponent(child).vm.$emit(<span class="string">&quot;custom&quot;</span>);</span><br><span class="line">    expect(wrapper.html()).toContain(<span class="string">&quot;Hello Jest&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;改变data的值&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    wrapper.vm.msg = <span class="string">&quot;我是改变的值&quot;</span>;</span><br><span class="line">    expect(wrapper.vm.msg).toBe(<span class="string">&quot;我是改变的值&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">&quot;当键盘事件触发时值改变&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> wrapper.find(<span class="string">&quot;input&quot;</span>).trigger(<span class="string">&quot;keydown&quot;</span>, &#123; <span class="attr">key</span>: <span class="string">&quot;a&quot;</span> &#125;);</span><br><span class="line">    <span class="comment">// ==&gt; 等价于</span></span><br><span class="line">    <span class="comment">// wrapper.find(&quot;input&quot;).trigger(&quot;keydown&quot;, &#123; key: &quot;a&quot; &#125;);</span></span><br><span class="line">    <span class="comment">// await Vue.nextTick();</span></span><br><span class="line">    expect(wrapper.vm.quantity).toBe(<span class="number">13</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">&quot;await 测试&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> wrapper.setData(&#123; <span class="attr">msg</span>: <span class="string">&quot;我是改变的值&quot;</span> &#125;);</span><br><span class="line">    expect(wrapper.find(<span class="string">&quot;h1&quot;</span>).html()).toContain(<span class="string">&quot;我是改变的值&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="测试-Props"><a href="#测试-Props" class="headerlink" title="测试 Props"></a>测试 Props</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/submitButton.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span>Admin Privileges<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>Not Authorized<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;submitButton&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      msg: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">      isAdmin: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/tests/unit/submitButton.spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/test-utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SubmitButton <span class="keyword">from</span> <span class="string">&quot;@/src/components/submitButton&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msg = <span class="string">&quot;submit&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> factory = <span class="function"><span class="params">propsData</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> shallowMount(SubmitButton, &#123;</span><br><span class="line">    <span class="comment">//测试从父组件中接受属性（props）的组件</span></span><br><span class="line">    propsData: &#123; msg, ...propsData &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;HelloWorld测试套件&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 测试查看功能的用例</span></span><br><span class="line">  it(<span class="string">&quot;测试查看功能&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过mount将组件渲染出来</span></span><br><span class="line">    <span class="keyword">const</span> wrapper = mount(HelloWorld);</span><br><span class="line">    <span class="built_in">console</span>.log(wrapper.find(<span class="string">&quot;.header&quot;</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;没有管理权限&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&quot;呈现一条消息&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = factory();</span><br><span class="line"></span><br><span class="line">    expect(wrapper.find(<span class="string">&quot;span&quot;</span>).text()).toBe(<span class="string">&quot;Not Authorized&quot;</span>);</span><br><span class="line">    expect(wrapper.find(<span class="string">&quot;button&quot;</span>).text()).toBe(<span class="string">&quot;submit&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;有管理权限&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&quot;呈现一条消息&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = factory(&#123; <span class="attr">isAdmin</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">    expect(wrapper.find(<span class="string">&quot;span&quot;</span>).text()).toBe(<span class="string">&quot;Admin Privileges&quot;</span>);</span><br><span class="line">    expect(wrapper.find(<span class="string">&quot;button&quot;</span>).text()).toBe(<span class="string">&quot;submit&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="测试请求"><a href="#测试请求" class="headerlink" title="测试请求"></a>测试请求</h2><blockquote>
<p>组件发起了 API 请求，我只想知道它发没发，不想让它真实发出去。<br>有一个组件在会在 created 时候发起一个 http 请求</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/user-info.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>&#123;&#123;user.desc&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> UserApi <span class="keyword">from</span> <span class="string">&quot;@/apis/user&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;UserInfo&quot;</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        user: &#123;&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      UserApi.getUserInfo().then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.user = user;</span></span><br><span class="line">      &#125;);</span><br><span class="line">      UserApi.getUserInfo();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>API 接口如下</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// apis/users.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $http.get(<span class="string">&quot;/user&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  getUserInfo</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>对该组件进行测试</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/tests/unit/user-info.spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/test-utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserInfo <span class="keyword">from</span> <span class="string">&quot;@/components/user-info&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserApi <span class="keyword">from</span> <span class="string">&quot;@/apis/user.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mock 掉 user 模块</span></span><br><span class="line">jest.mock(<span class="string">&quot;@/apis/user&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定 getUserInfo 方法返回假数据</span></span><br><span class="line">UserApi.getUserInfo.mockResolvedValue(&#123;</span><br><span class="line">  name: <span class="string">&quot;olive&quot;</span>,</span><br><span class="line">  desc: <span class="string">&quot;software engineer&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;&lt;user-info/&gt;&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallowMount(UserInfo);</span><br><span class="line">  it(<span class="string">&quot;getUserInfo调用次数&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(UserApi.getUserInfo.mock.calls.length).toBe(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">&quot;用户信息渲染正确&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(wrapper.find(<span class="string">&quot;.name&quot;</span>).text()).toEqual(<span class="string">&quot;olive&quot;</span>);</span><br><span class="line">    expect(wrapper.find(<span class="string">&quot;#desc&quot;</span>).text()).toEqual(<span class="string">&quot;software engineer&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="测试-vuex"><a href="#测试-vuex" class="headerlink" title="测试 vuex"></a>测试 vuex</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/vuex-action.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-align-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;actionInputIfTrue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;actionClick()&quot;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      ...mapActions([<span class="string">&quot;actionClick&quot;</span>]),</span></span><br><span class="line"><span class="javascript">      actionInputIfTrue: <span class="function"><span class="keyword">function</span> <span class="title">actionInputIfTrue</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> inputValue = event.target.value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (inputValue === <span class="string">&quot;input&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;actionInput&quot;</span>, &#123; inputValue &#125;);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/tests/unit/vuex-action.spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallowMount, createLocalVue &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/test-utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Actions <span class="keyword">from</span> <span class="string">&quot;@/components/vuex-action.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localVue = createLocalVue();</span><br><span class="line"></span><br><span class="line">localVue.use(Vuex);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;vue-action&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> actions;</span><br><span class="line">  <span class="keyword">let</span> store;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 伪造 Action</span></span><br><span class="line">    actions = &#123;</span><br><span class="line">      actionClick: jest.fn(),</span><br><span class="line">      actionInput: jest.fn()</span><br><span class="line">    &#125;;</span><br><span class="line">    store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">      state: &#123;&#125;,</span><br><span class="line">      actions</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;当输入事件值为“input”时分派“actionInput”&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(Actions, &#123; store, localVue &#125;);</span><br><span class="line">    <span class="keyword">const</span> input = wrapper.find(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    input.element.value = <span class="string">&quot;input&quot;</span>;</span><br><span class="line">    input.trigger(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    expect(actions.actionInput).toHaveBeenCalled();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;当事件值不是“input”时，不分派“actionInput”&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(Actions, &#123; store, localVue &#125;);</span><br><span class="line">    <span class="keyword">const</span> input = wrapper.find(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    input.element.value = <span class="string">&quot;not input&quot;</span>;</span><br><span class="line">    input.trigger(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    expect(actions.actionInput).not.toHaveBeenCalled();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;当按钮被点击时，调用存储操作“actionClick”&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(Actions, &#123; store, localVue &#125;);</span><br><span class="line">    wrapper.find(<span class="string">&quot;button&quot;</span>).trigger(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">    expect(actions.actionClick).toHaveBeenCalled();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="比较测试"><a href="#比较测试" class="headerlink" title="比较测试"></a>比较测试</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/list.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My To Do List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in listItems&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;list&quot;</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        listItems: [<span class="string">&quot;buy food&quot;</span>, <span class="string">&quot;play games&quot;</span>, <span class="string">&quot;sleep&quot;</span>]</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/tests/unit/list.spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/test-utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;@/components/list&quot;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;列表&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> list = mount(List);</span><br><span class="line">  it(<span class="string">&quot;列表是否正常显示包含关系&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(list.html()).toContain(<span class="string">&quot;play games&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">&quot;判断列表有几条&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(list.vm.listItems.length).toBe(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">&quot;判断大小关系&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(list.vm.listItems.length).toBeGreaterThan(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack优化实践</title>
    <url>/2020/04/30/webpack/optimize/</url>
    <content><![CDATA[<h1 id="缩小文件的搜索范围"><a href="#缩小文件的搜索范围" class="headerlink" title="缩小文件的搜索范围"></a>缩小文件的搜索范围</h1><h2 id="优化-Loader-配置"><a href="#优化-Loader-配置" class="headerlink" title="优化 Loader 配置"></a>优化 Loader 配置</h2><p>由于 Loader 对文件的转换操作很耗时，所以需要让尽可能少的文件被 Loader 处理。我们可以通过以下 3 方面优化 Loader 配置：</p>
<ul>
<li>优化正则匹配</li>
<li>通过 cacheDirectory 选项开启缓存</li>
<li>通过 include、exclude 来减少被处理的文件。实践如下：</li>
</ul>
<p><strong>项目原配置：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">  include: [resolve(<span class="string">&#x27;src&#x27;</span>), resolve(<span class="string">&#x27;test&#x27;</span>)]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>优化后配置：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 1、如果项目源码中只有 js 文件，就不要写成/\.jsx?$/，以提升正则表达式的性能</span></span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  <span class="comment">// 2、babel-loader 支持缓存转换出的结果，通过 cacheDirectory 选项开启</span></span><br><span class="line">  loader: <span class="string">&#x27;babel-loader?cacheDirectory&#x27;</span>,</span><br><span class="line">  <span class="comment">// 3、只对项目根目录下的 src 目录中的文件采用 babel-loader</span></span><br><span class="line">  include: [resolve(<span class="string">&#x27;src&#x27;</span>)]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="优化-resolve-modules-配置"><a href="#优化-resolve-modules-配置" class="headerlink" title="优化 resolve.modules 配置"></a>优化 resolve.modules 配置</h2><p><code>resolve.modules</code> 用于配置 Webpack 去哪些目录下寻找第三方模块。resolve.modules 的默认值是<code>［node modules］</code>，含义是先去当前目录的/node modules 目录下去找我们想找的模块，如果没找到，就去上一级目录../node modules 中找，再没有就去../ .. /node modules 中找，以此类推，这和 Node.js 的模块寻找机制很相似。当安装的第三方模块都放在项目根目录的./node modules 目录下时，就没有必要按照默认的方式去一层层地寻找，可以指明存放第三方模块的绝对路径，以减少寻找。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  <span class="comment">// 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤</span></span><br><span class="line">  modules: [path.resolve(__dirname,<span class="string">&#x27;node_modules&#x27;</span>)]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="优化-resolve-alias-配置"><a href="#优化-resolve-alias-配置" class="headerlink" title="优化 resolve.alias 配置"></a>优化 resolve.alias 配置</h2><p><code>resolve.alias</code> 配置项通过别名来将原导入路径映射成一个新的导入路径。<br>如项目中的配置使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 通过以上的配置，引用 src 底下的 common.js 文件，就可以直接这么写</span></span><br><span class="line"><span class="keyword">import</span> common <span class="keyword">from</span> <span class="string">&#x27;@/common.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="优化-resolve-extensions-配置"><a href="#优化-resolve-extensions-配置" class="headerlink" title="优化 resolve.extensions 配置"></a>优化 resolve.extensions 配置</h2><p>在导入语句没带文件后缀时，Webpack 会在自动带上后缀后去尝试询问文件是否存在。默认是：<code>extensions:[&#39;. js &#39;,&#39;. json &#39;]</code> 。也就是说，当遇到 require( ‘. /data ‘）这样的导入语句时，Webpack 会先去寻找./data .js 文件，如果该文件不存在，就去寻找./data.json 文件，如果还是找不到就报错。如果这个列表越长，或者正确的后缀越往后，就会造成尝试的次数越多，所以 <code>resolve.extensions</code> 的配置也会影响到构建的性能。</p>
<p><strong>优化措施：</strong></p>
<ul>
<li>后缀尝试列表要尽可能小，不要将项目中不可能存在的情况写到后缀尝试列表中。</li>
<li>频率出现最高的文件后缀要优先放在最前面，以做到尽快退出寻找过程。</li>
<li>在源码中写导入语句时，要尽可能带上后缀，从而可以避免寻找过程。例如在确定的情况下将 require(’. /data ’)写成 require(’. /data.json ’)，可以结合 enforceExtension 和 enforceModuleExtension 开启使用来强制开发者遵守这条优化**</li>
</ul>
<h2 id="优化-resolve-noParse-配置"><a href="#优化-resolve-noParse-配置" class="headerlink" title="优化 resolve.noParse 配置"></a>优化 resolve.noParse 配置</h2><p>noParse 配置项可以让 Webpack 忽略对部分没采用模块化的文件的递归解析和处理，这 样做的好处是能提高构建性能。原因是一些库如 jQuery、ChartJS 庞大又没有采用模块化标准，让 Webpack 去解析这些文件既耗时又没有意义。noParse 是可选的配置项，类型需要是 RegExp 、[RegExp]、function 中的一种。例如，若想要忽略 jQuery 、ChartJS ，则优化配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用正则表达式</span></span><br><span class="line">noParse: <span class="regexp">/jquerylchartjs/</span>;</span><br><span class="line"><span class="comment">// 使用函数，从 Webpack3.0.0 开始支持</span></span><br><span class="line">noParse: <span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 返回 true 或 false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/jquery|chartjs/</span>.test(content);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="打包时-gzip-压缩"><a href="#打包时-gzip-压缩" class="headerlink" title="打包时 gzip 压缩"></a>打包时 gzip 压缩</h1><h2 id="webpack-打包生成-gz-文件"><a href="#webpack-打包生成-gz-文件" class="headerlink" title="webpack 打包生成 gz 文件"></a>webpack 打包生成 gz 文件</h2><ol>
<li>安装插件（compression-webpack-plugin）：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install compression-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>vue.config.js 文件进行 webpack 配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.plugins.push(</span><br><span class="line">      <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">        <span class="comment">// 正在匹配需要压缩的文件后缀</span></span><br><span class="line">        test: <span class="regexp">/\.(js|css|svg|woff|ttf|json|html)$/</span>,</span><br><span class="line">        <span class="comment">// 大于10kb的会压缩</span></span><br><span class="line">        threshold: <span class="number">10240</span></span><br><span class="line">        <span class="comment">// 其余配置查看 compression-webpack-plugin</span></span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>nginx 开启 gzip</li>
</ol>
<blockquote>
<p>浏览器请求 xx.js/css 等文件时，服务器返回对应的 xxx.js.gz 文件，所以还需要在服务器配置一个属性，以期望它能正常返回我们需要的 gz 文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  include       mime.types;</span><br><span class="line">  default_type  application/octet-stream;</span><br><span class="line">  sendfile        on;</span><br><span class="line">  <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">  keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">  gzip_static on; <span class="comment"># 开启gzip 静态加载本地的gz文件</span></span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen       8462;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   dist;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="服务器在线-gzip-压缩"><a href="#服务器在线-gzip-压缩" class="headerlink" title="服务器在线 gzip 压缩"></a>服务器在线 gzip 压缩</h2><blockquote>
<p>前端不用进行任何配置，也不用 webpack 生成 gz 文件，服务器进行处理<br>响应头中会携带 gzip 压缩配置，每次请求 xx.js 文件，服务器都会进行实时压缩。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">  server_name www.zuoguoqing.com;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 开启gzip</span></span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_vary on;</span><br><span class="line">  gzip_min_length 1000;</span><br><span class="line">  gzip_comp_level 2;</span><br><span class="line">  gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml image/jpeg image/gif image/png application/javascript;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    <span class="comment"># root   html;</span></span><br><span class="line">    <span class="comment"># index  index.html index.htm;</span></span><br><span class="line">    proxy_pass http://127.0.0.1:3000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两种方案的优缺点"><a href="#两种方案的优缺点" class="headerlink" title="两种方案的优缺点"></a>两种方案的优缺点</h2><ol>
<li>webpack 打包，然后直接使用静态的 gz，缺点就是打包后文件体积太大，但是不耗服务器性能；</li>
<li>使用 nginx 在线 gzip，缺点就是耗性能，需要实时压缩，但是 vue 打包后的文件体积小。</li>
</ol>
<p>如果想有 gz 文件的时候进行静态压缩，不存在 gz 文件的时候进行在线压缩而不是加载源文件，nginx 配置时两种配置都写上即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_static on;</span><br><span class="line">gzip_comp_level 2;</span><br><span class="line">gzip_types text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br></pre></td></tr></table></figure>

<p>gzip_static 的优先级高，会先加载静态 gz 文件，当同目录下不存在此文件的时候，会执行在线压缩的命令。</p>
<p><strong>如何区分使用了静态加载还是在线压缩？</strong></p>
<p>响应头的 Content-Edcoding:gzip 表示 gzip 压缩已经生效，而 Etag 中只有简单字符表示静态资源加载，而前面带 W/ 表示启动了在线压缩</p>
<h1 id="减少冗余代码"><a href="#减少冗余代码" class="headerlink" title="减少冗余代码"></a>减少冗余代码</h1><p><code>babel-plugin-transform-runtime</code> 是 <code>Babel</code> 官方提供的一个插件，作用是减少冗余的代码 。 Babel 在将 ES6 代码转换成 ES5 代码时，通常需要一些由 ES5 编写的辅助函数来完成新语法的实现，例如在转换 class extent 语法时会在转换后的 ES5 代码里注入 extent 辅助函数用于实现继承。babel-plugin-transform-runtime 会将相关辅助函数进行替换成导入语句，从而减小 babel 编译出来的代码的文件大小。</p>
<h1 id="使用-HappyPack-多进程解析和处理文件"><a href="#使用-HappyPack-多进程解析和处理文件" class="headerlink" title="使用 HappyPack 多进程解析和处理文件"></a>使用 HappyPack 多进程解析和处理文件</h1><p>由于有大量文件需要解析和处理，所以构建是文件读写和计算密集型的操作，特别是当文件数量变多后，Webpack 构建慢的问题会显得更为严重。运行在 Node.之上的 Webpack 是单线程模型的，也就是说 Webpack 需要一个一个地处理任务，不能同时处理多个任务。Happy Pack ( <a href="https://github.com/amireh/hap">https://github.com/amireh/hap</a>… ）就能让 Webpack 做到这一点，它将任务分解给多个子进程去并发执行，子进程处理完后再将结果发送给主进程。<br>项目中 HappyPack 使用配置：</p>
<h2 id="HappyPack-插件安装："><a href="#HappyPack-插件安装：" class="headerlink" title="HappyPack 插件安装："></a>HappyPack 插件安装：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D happypack</span><br></pre></td></tr></table></figure>

<h2 id="webpack-base-conf-js-文件对-module-rules-进行配置"><a href="#webpack-base-conf-js-文件对-module-rules-进行配置" class="headerlink" title="webpack.base.conf.js 文件对 module.rules 进行配置"></a>webpack.base.conf.js 文件对 module.rules 进行配置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="comment">// 将对.js 文件的处理转交给 id 为 babel 的HappyPack实例</span></span><br><span class="line">      use:[<span class="string">&#x27;happypack/loader?id=babel&#x27;</span>],</span><br><span class="line">      include: [resolve(<span class="string">&#x27;src&#x27;</span>), resolve(<span class="string">&#x27;test&#x27;</span>),</span><br><span class="line">      resolve(<span class="string">&#x27;node_modules/webpack-dev-server/client&#x27;</span>)],</span><br><span class="line">      <span class="comment">// 排除第三方插件</span></span><br><span class="line">      exclude:path.resolve(__dirname,<span class="string">&#x27;node_modules&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      use: [<span class="string">&#x27;happypack/loader?id=vue&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="webpack-prod-conf-js-文件进行配置"><a href="#webpack-prod-conf-js-文件进行配置" class="headerlink" title="webpack.prod.conf.js 文件进行配置"></a>webpack.prod.conf.js 文件进行配置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">&quot;happypack&quot;</span>);</span><br><span class="line"><span class="comment">// 构造出共享进程池，在进程池中包含 5 个子进程</span></span><br><span class="line"><span class="keyword">const</span> HappyPackThreadPool = HappyPack.ThreadPool(&#123; <span class="attr">size</span>: <span class="number">5</span> &#125;);</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    <span class="comment">// 用唯一的标识符 id，来代表当前的 HappyPack 是用来处理一类特定的文件</span></span><br><span class="line">    id: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">&quot;vue-loader&quot;</span>,</span><br><span class="line">        options: vueLoaderConfig</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    threadPool: HappyPackThreadPool</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    <span class="comment">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span></span><br><span class="line">    id: <span class="string">&quot;babel&quot;</span>,</span><br><span class="line">    <span class="comment">// 如何处理.js文件，用法和Loader配置中一样</span></span><br><span class="line">    loaders: [<span class="string">&quot;babel-loader?cacheDirectory&quot;</span>],</span><br><span class="line">    threadPool: HappyPackThreadPool</span><br><span class="line">  &#125;)</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h1 id="使用-ParallelUglifyPlugin-多进程压缩代码文件"><a href="#使用-ParallelUglifyPlugin-多进程压缩代码文件" class="headerlink" title="使用 ParallelUglifyPlugin 多进程压缩代码文件"></a>使用 <code>ParallelUglifyPlugin</code> 多进程压缩代码文件</h1><p>由于压缩 JavaScript 代码时，需要先将代码解析成用 Object 抽象表示的 AST 语法树，再去应用各种规则分析和处理 AST ，所以导致这个过程的计算量巨大，耗时非常多。当 Webpack 有多个 JavaScript 文件需要输出和压缩时，原本会使用 UglifyJS 去一个一个压缩再输出，但是 ParallelUglifyPlugin 会开启多个子进程，将对多个文件的压缩工作分配给多个子进程去完成，每个子进程其实还是通过 UglifyJS 去压缩代码，但是变成了并行执行。所以 ParallelUglify Plugin 能更快地完成对多个文件的压缩工作。</p>
<h2 id="ParallelUglifyPlugin-插件安装："><a href="#ParallelUglifyPlugin-插件安装：" class="headerlink" title="ParallelUglifyPlugin 插件安装："></a>ParallelUglifyPlugin 插件安装：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D webpack-parallel-uglify-plugin</span><br></pre></td></tr></table></figure>

<h2 id="webpack-prod-conf-js-文件进行配置-1"><a href="#webpack-prod-conf-js-文件进行配置-1" class="headerlink" title="webpack.prod.conf.js 文件进行配置"></a>webpack.prod.conf.js 文件进行配置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ParallelUglifyPlugin = <span class="built_in">require</span>(<span class="string">&quot;webpack-parallel-uglify-plugin&quot;</span>);</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> ParallelUglifyPlugin(&#123;</span><br><span class="line">    cacheDir: <span class="string">&quot;.cache/&quot;</span>,</span><br><span class="line">    uglifyJs: &#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="需要注意的是-webpack-升级之后-UglifyJsPlugin-模块找不到，解决方法如下："><a href="#需要注意的是-webpack-升级之后-UglifyJsPlugin-模块找不到，解决方法如下：" class="headerlink" title="需要注意的是 webpack 升级之后 UglifyJsPlugin 模块找不到，解决方法如下："></a>需要注意的是 webpack 升级之后 UglifyJsPlugin 模块找不到，解决方法如下：</h2><p><code>原：</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;uglifyjs-webpack-plugin&quot;: &quot;^2.1.2&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&quot;uglifyjs-webpack-plugin&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>替换为：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config.plugins = [...config.plugins, ...plugins];</span><br><span class="line">config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.drop_console = <span class="literal">true</span>; <span class="comment">// 删除console</span></span><br><span class="line">config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.drop_debugger = <span class="literal">true</span>; <span class="comment">// 删除deubgger</span></span><br></pre></td></tr></table></figure>

<h1 id="使用自动刷新"><a href="#使用自动刷新" class="headerlink" title="使用自动刷新"></a>使用自动刷新</h1><p>借助自动化的手段，在监听到本地源码文件发生变化时，自动重新构建出可运行的代码后再控制浏览器刷新。Webpack 将这些功能都内置了，并且提供了多种方案供我们选择。<br>项目中自动刷新的配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    <span class="comment">// 不监听的文件或文件夹，支持正则匹配</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="comment">// 监听到变化后等 300ms 再去执行动作</span></span><br><span class="line">    aggregateTimeout: <span class="number">300</span>,</span><br><span class="line">    <span class="comment">// 默认每秒询问 1000 次</span></span><br><span class="line">    poll: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>相关优化措施：</strong></p>
<ul>
<li>配置忽略一些不监听的一些文件，如：node_modules。</li>
<li>watchOptions.aggregateTirneout 的值越大性能越好，因为这能降低重新构建的频率。</li>
<li>watchOptions.poll 的值越小越好，因为这能降低检查的频率。</li>
</ul>
<h1 id="开启模块热替换"><a href="#开启模块热替换" class="headerlink" title="开启模块热替换"></a>开启模块热替换</h1><blockquote>
<p>DevServer 还支持一种叫做模块热替换（ Hot Module Replacement ）的技术可在不刷新整个网页的情况下做到超灵敏实时预览。原理是在一个源码发生变化时，只需重新编译发生变化的模块，再用新输出的模块替换掉浏览器中对应的老模块 。模块热替换技术在很大程度上提升了开发效率和体验 。</p>
</blockquote>
<p>项目中模块热替换的配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  <span class="comment">// 显示被替换模块的名称</span></span><br><span class="line">  <span class="keyword">new</span> webpack.NamedModulesPlugin(), <span class="comment">// HMR shows correct file names</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h1 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h1><p>如果每个页面的代码都将这些公共的部分包含进去，则会造成以下问题 ：<br>• 相同的资源被重复加载，浪费用户的流量和服务器的成本。<br>• 每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。<br>如果将多个页面的公共代码抽离成单独的文件，就能优化以上问题 。Webpack 内置了专门用于提取多个 Chunk 中的公共部分的插件 CommonsChunkPlugin。</p>
<p>项目中 <code>CommonsChunkPlugin</code> 的配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有在 package.json 里面依赖的包，都会被打包进 vendor.js 这个文件中。</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">  minChunks: <span class="function"><span class="keyword">function</span>(<span class="params">module, count</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">      /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</span><br><span class="line">      <span class="built_in">module</span>.resource.indexOf(</span><br><span class="line">        path.join(__dirname, <span class="string">&#x27;../node_modules&#x27;</span>)</span><br><span class="line">      ) === <span class="number">0</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽取出代码模块的映射关系</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">&#x27;manifest&#x27;</span>,</span><br><span class="line">  chunks: [<span class="string">&#x27;vendor&#x27;</span>]</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>

<h1 id="按需加载代码"><a href="#按需加载代码" class="headerlink" title="按需加载代码"></a>按需加载代码</h1><p>通过 vue 写的单页应用时，可能会有很多的路由引入。当打包构建的时候，javascript 包会变得非常大，影响加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样就更加高效了。这样会大大提高首屏显示的速度，但是可能其他的页面的速度就会降下来。<br>项目中路由按需加载（懒加载）的配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./Foo.vue&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [&#123; <span class="attr">path</span>: <span class="string">&quot;/foo&quot;</span>, <span class="attr">component</span>: Foo &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="优化-SourceMap"><a href="#优化-SourceMap" class="headerlink" title="优化 SourceMap"></a>优化 SourceMap</h1><blockquote>
<p>我们在项目进行打包后，会将开发中的多个文件代码打包到一个文件中，并且经过压缩，去掉多余的空格，且 babel 编译化后，最终会用于线上环境，那么这样处理后的代码和源代码会有很大的差别，当有 bug 的时候，我们只能定位到压缩处理后的代码位置，无法定位到开发环境中的代码，对于开发不好调式，因此 sourceMap 出现了，它就是为了解决不好调式代码问题的。<br>SourceMap 的可选值如下：</p>
</blockquote>
<p>开发环境推荐：<code>cheap-module-eval-source-map</code><br>生产环境推荐：<code>cheap-module-source-map</code></p>
<p><strong>原因如下：</strong><br>源代码中的列信息是没有任何作用，因此我们打包后的文件不希望包含列相关信息，只有行信息能建立打包前后的依赖关系。因此不管是开发环境或生产环境，我们都希望添加 cheap 的基本类型来忽略打包前后的列信息。<br>不管是开发环境还是正式环境，我们都希望能定位到 bug 的源代码具体的位置，比如说某个 vue 文件报错了，我们希望能定位到具体的 vue 文件，因此我们也需要 module 配置。<br>我们需要生成 map 文件的形式，因此我们需要增加 source-map 属性。<br>我们介绍了 eval 打包代码的时候，知道 eval 打包后的速度非常快，因为它不生成 map 文件，但是可以对 eval 组合使用 eval-source-map 使用会将 map 文件以 DataURL 的形式存在打包后的 js 文件中。在正式环境中不要使用 eval-source-map, 因为它会增加文件的大小，但是在开发环境中，可以试用下，因为他们打包的速度很快</p>
<h1 id="构建结果输出分析"><a href="#构建结果输出分析" class="headerlink" title="构建结果输出分析"></a>构建结果输出分析</h1><p>Webpack 输出的代码可读性非常差而且文件非常大，让我们非常头疼。为了更简单、直观地分析输出结果，社区中出现了许多可视化分析工具。这些工具以图形的方式将结果更直观地展示出来，让我们快速了解问题所在。接下来讲解 vue 项目中用到的分析工具：<code>webpack-bundle-analyzer</code>。<br>项目中在 <code>webpack.prod.conf.js</code> 进行配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (config.build.bundleAnalyzerReport) &#123;</span><br><span class="line">  <span class="keyword">var</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">&quot;webpack-bundle-analyzer&quot;</span>)</span><br><span class="line">    .BundleAnalyzerPlugin;</span><br><span class="line">  webpackConfig.plugins.push(<span class="keyword">new</span> BundleAnalyzerPlugin());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行 <code>npm run build --report</code> 后生成分析报告如下：<br><img src="/images/source-img/report.png"></p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>web性能优化</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>document 对象</title>
    <url>/2021/01/14/dom/document/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>document</code>对象是文档的根节点，每张网页都有自己的<code>document</code>对象。<code>window.document</code>属性就指向这个对象。只要浏览器开始载入 HTML 文档，该对象就存在了，可以直接使用。</p>
<p><code>document</code>对象有不同的办法可以获取。</p>
<ul>
<li>正常的网页，直接使用<code>document</code>或<code>window.document</code>。</li>
<li><code>iframe</code>框架里面的网页，使用<code>iframe</code>节点的<code>contentDocument</code>属性。</li>
<li>Ajax 操作返回的文档，使用<code>XMLHttpRequest</code>对象的<code>responseXML</code>属性。</li>
<li>内部节点的<code>ownerDocument</code>属性。</li>
</ul>
<p><code>document</code>对象继承了<code>EventTarget</code>接口、<code>Node</code>接口、<code>ParentNode</code>接口。这意味着，这些接口的方法都可以在<code>document</code>对象上调用。除此之外，<code>document</code>对象还有很多自己的属性和方法。</p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="快捷方式属性"><a href="#快捷方式属性" class="headerlink" title="快捷方式属性"></a>快捷方式属性</h2><p>以下属性是指向文档内部的某个节点的快捷方式。</p>
<p><strong>（1）document.defaultView</strong></p>
<p><code>document.defaultView</code>属性返回<code>document</code>对象所属的<code>window</code>对象。如果当前文档不属于<code>window</code>对象，该属性返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.defaultView === <span class="built_in">window</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）document.doctype</strong></p>
<p>对于 HTML 文档来说，<code>document</code>对象一般有两个子节点。第一个子节点是<code>document.doctype</code>，指向<code>&lt;DOCTYPE&gt;</code>节点，即文档类型（Document Type Declaration，简写 DTD）节点。HTML 的文档类型节点，一般写成<code>&lt;!DOCTYPE html&gt;</code>。如果网页没有声明 DTD，该属性返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> doctype = <span class="built_in">document</span>.doctype;</span><br><span class="line">doctype; <span class="comment">// &quot;&lt;!DOCTYPE html&gt;&quot;</span></span><br><span class="line">doctype.name; <span class="comment">// &quot;html&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>document.firstChild</code>通常就返回这个节点。</p>
<p><strong>（3）document.documentElement</strong></p>
<p><code>document.documentElement</code>属性返回当前文档的根节点（root）。它通常是<code>document</code>节点的第二个子节点，紧跟在<code>document.doctype</code>节点后面。HTML 网页的该属性，一般是<code>&lt;html&gt;</code>节点。</p>
<p><strong>（4）document.body，document.head</strong></p>
<p><code>document.body</code>属性指向<code>&lt;body&gt;</code>节点，<code>document.head</code>属性指向<code>&lt;head&gt;</code>节点。</p>
<p>这两个属性总是存在的，如果网页源码里面省略了<code>&lt;head&gt;</code>或<code>&lt;body&gt;</code>，浏览器会自动创建。另外，这两个属性是可写的，如果改写它们的值，相当于移除所有子节点。</p>
<p><strong>（5）document.scrollingElement</strong></p>
<p><code>document.scrollingElement</code>属性返回文档的滚动元素。也就是说，当文档整体滚动时，到底是哪个元素在滚动。</p>
<p>标准模式下，这个属性返回的文档的根元素<code>document.documentElement</code>（即<code>&lt;html&gt;</code>）。兼容（quirk）模式下，返回的是<code>&lt;body&gt;</code>元素，如果该元素不存在，返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面滚动到浏览器顶部</span></span><br><span class="line"><span class="built_in">document</span>.scrollingElement.scrollTop = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>（6）document.activeElement</strong></p>
<p><code>document.activeElement</code>属性返回获得当前焦点（focus）的 DOM 元素。通常，这个属性返回的是<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>等表单元素，如果当前没有焦点元素，返回<code>&lt;body&gt;</code>元素或<code>null</code>。</p>
<p><strong>（7）document.fullscreenElement</strong></p>
<p><code>document.fullscreenElement</code>属性返回当前以全屏状态展示的 DOM 元素。如果不是全屏状态，该属性返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.fullscreenElement.nodeName == <span class="string">&quot;VIDEO&quot;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;全屏播放视频&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，通过<code>document.fullscreenElement</code>可以知道<code>&lt;video&gt;</code>元素有没有处在全屏状态，从而判断用户行为。</p>
<h2 id="节点集合属性"><a href="#节点集合属性" class="headerlink" title="节点集合属性"></a>节点集合属性</h2><p>以下属性返回一个<code>HTMLCollection</code>实例，表示文档内部特定元素的集合。这些集合都是动态的，原节点有任何变化，立刻会反映在集合中。</p>
<p><strong>（1）document.links</strong></p>
<p><code>document.links</code>属性返回当前文档所有设定了<code>href</code>属性的<code>&lt;a&gt;</code>及<code>&lt;area&gt;</code>节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印文档所有的链接</span></span><br><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.links;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(links[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（2）document.forms</strong></p>
<p><code>document.forms</code>属性返回所有<code>&lt;form&gt;</code>表单节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> selectForm = <span class="built_in">document</span>.forms[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>上面代码获取文档第一个表单。</p>
<p><strong>（3）document.images</strong></p>
<p><code>document.images</code>属性返回页面所有<code>&lt;img&gt;</code>图片节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imglist = <span class="built_in">document</span>.images;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imglist.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (imglist[i].src === <span class="string">&quot;banner.gif&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码在所有<code>img</code>标签中，寻找某张图片。</p>
<p><strong>（4）document.embeds，document.plugins</strong></p>
<p><code>document.embeds</code>属性和<code>document.plugins</code>属性，都返回所有<code>&lt;embed&gt;</code>节点。</p>
<p><strong>（5）document.scripts</strong></p>
<p><code>document.scripts</code>属性返回所有<code>&lt;script&gt;</code>节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scripts = <span class="built_in">document</span>.scripts;</span><br><span class="line"><span class="keyword">if</span> (scripts.length !== <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;当前网页有脚本&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（6）document.styleSheets</strong></p>
<p><code>document.styleSheets</code>属性返回文档内嵌或引入的样式表集合，详细介绍请看《CSS 对象模型》一章。</p>
<p><strong>（7）小结</strong></p>
<p>除了<code>document.styleSheets</code>，以上的集合属性返回的都是<code>HTMLCollection</code>实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.links <span class="keyword">instanceof</span> HTMLCollection; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.images <span class="keyword">instanceof</span> HTMLCollection; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.forms <span class="keyword">instanceof</span> HTMLCollection; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.embeds <span class="keyword">instanceof</span> HTMLCollection; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.scripts <span class="keyword">instanceof</span> HTMLCollection; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>HTMLCollection</code>实例是类似数组的对象，所以这些属性都有<code>length</code>属性，都可以使用方括号运算符引用成员。如果成员有<code>id</code>或<code>name</code>属性，还可以用这两个属性的值，在<code>HTMLCollection</code>实例上引用到这个成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;form name=&quot;myForm&quot;&gt;</span></span><br><span class="line"><span class="built_in">document</span>.myForm === <span class="built_in">document</span>.forms.myForm; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="文档静态信息属性"><a href="#文档静态信息属性" class="headerlink" title="文档静态信息属性"></a>文档静态信息属性</h2><p>以下属性返回文档信息。</p>
<p><strong>（1）document.documentURI，document.URL</strong></p>
<p><code>document.documentURI</code>属性和<code>document.URL</code>属性都返回一个字符串，表示当前文档的网址。不同之处是它们继承自不同的接口，<code>documentURI</code>继承自<code>Document</code>接口，可用于所有文档；<code>URL</code>继承自<code>HTMLDocument</code>接口，只能用于 HTML 文档。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.URL;</span><br><span class="line"><span class="comment">// http://www.example.com/about</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.documentURI === <span class="built_in">document</span>.URL;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果文档的锚点（<code>#anchor</code>）变化，这两个属性都会跟着变化。</p>
<p><strong>（2）document.domain</strong></p>
<p><code>document.domain</code>属性返回当前文档的域名，不包含协议和接口。比如，网页的网址是<code>http://www.example.com:80/hello.html</code>，那么<code>domain</code>属性就等于<code>www.example.com</code>。如果无法获取域名，该属性返回<code>null</code>。</p>
<p><code>document.domain</code>基本上是一个只读属性，只有一种情况除外。次级域名的网页，可以把<code>document.domain</code>设为对应的上级域名。比如，当前域名是<code>a.sub.example.com</code>，则<code>document.domain</code>属性可以设置为<code>sub.example.com</code>，也可以设为<code>example.com</code>。修改后，<code>document.domain</code>相同的两个网页，可以读取对方的资源，比如设置的 Cookie。</p>
<p>另外，设置<code>document.domain</code>会导致端口被改成<code>null</code>。因此，如果通过设置<code>document.domain</code>来进行通信，双方网页都必须设置这个值，才能保证端口相同。</p>
<p><strong>（3）document.location</strong></p>
<p><code>Location</code>对象是浏览器提供的原生对象，提供 URL 相关的信息和操作方法。通过<code>window.location</code>和<code>document.location</code>属性，可以拿到这个对象。</p>
<p>关于这个对象的详细介绍，请看《浏览器模型》部分的《Location 对象》章节。</p>
<p><strong>（4）document.lastModified</strong></p>
<p><code>document.lastModified</code>属性返回一个字符串，表示当前文档最后修改的时间。不同浏览器的返回值，日期格式是不一样的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.lastModified;</span><br><span class="line"><span class="comment">// &quot;03/07/2018 11:18:27&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意，<code>document.lastModified</code>属性的值是字符串，所以不能直接用来比较。<code>Date.parse</code>方法将其转为<code>Date</code>实例，才能比较两个网页。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastVisitedDate = <span class="built_in">Date</span>.parse(<span class="string">&quot;01/01/2018&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Date</span>.parse(<span class="built_in">document</span>.lastModified) &gt; lastVisitedDate) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;网页已经变更&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果页面上有 JavaScript 生成的内容，<code>document.lastModified</code>属性返回的总是当前时间。</p>
<p><strong>（5）document.title</strong></p>
<p><code>document.title</code>属性返回当前文档的标题。默认情况下，返回<code>&lt;title&gt;</code>节点的值。但是该属性是可写的，一旦被修改，就返回修改后的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.title = <span class="string">&quot;新标题&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.title; <span class="comment">// &quot;新标题&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>（6）document.characterSet</strong></p>
<p><code>document.characterSet</code>属性返回当前文档的编码，比如<code>UTF-8</code>、<code>ISO-8859-1</code>等等。</p>
<p><strong>（7）document.referrer</strong></p>
<p><code>document.referrer</code>属性返回一个字符串，表示当前文档的访问者来自哪里。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.referrer;</span><br><span class="line"><span class="comment">// &quot;https://example.com/path&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果无法获取来源，或者用户直接键入网址而不是从其他网页点击进入，<code>document.referrer</code>返回一个空字符串。</p>
<p><code>document.referrer</code>的值，总是与 HTTP 头信息的<code>Referer</code>字段保持一致。但是，<code>document.referrer</code>的拼写有两个<code>r</code>，而头信息的<code>Referer</code>字段只有一个<code>r</code>。</p>
<p><strong>（8）document.dir</strong></p>
<p><code>document.dir</code>返回一个字符串，表示文字方向。它只有两个可能的值：<code>rtl</code>表示文字从右到左，阿拉伯文是这种方式；<code>ltr</code>表示文字从左到右，包括英语和汉语在内的大多数文字采用这种方式。</p>
<p><strong>（9）document.compatMode</strong></p>
<p><code>compatMode</code>属性返回浏览器处理文档的模式，可能的值为<code>BackCompat</code>（向后兼容模式）和<code>CSS1Compat</code>（严格模式）。</p>
<p>一般来说，如果网页代码的第一行设置了明确的<code>DOCTYPE</code>（比如<code>&lt;!doctype html&gt;</code>），<code>document.compatMode</code>的值都为<code>CSS1Compat</code>。</p>
<h2 id="文档状态属性"><a href="#文档状态属性" class="headerlink" title="文档状态属性"></a>文档状态属性</h2><p><strong>（1）document.hidden</strong></p>
<p><code>document.hidden</code>属性返回一个布尔值，表示当前页面是否可见。如果窗口最小化、浏览器切换了 Tab，都会导致导致页面不可见，使得<code>document.hidden</code>返回<code>true</code>。</p>
<p>这个属性是 Page Visibility API 引入的，一般都是配合这个 API 使用。</p>
<p><strong>（2）document.visibilityState</strong></p>
<p><code>document.visibilityState</code>返回文档的可见状态。</p>
<p>它的值有四种可能。</p>
<ul>
<li>visible：页面可见。注意，页面可能是部分可见，即不是焦点窗口，前面被其他窗口部分挡住了。</li>
<li>hidden： 页面不可见，有可能窗口最小化，或者浏览器切换到了另一个 Tab。</li>
<li>prerender：页面处于正在渲染状态，对于用于来说，该页面不可见。</li>
<li>unloaded：页面从内存里面卸载了。</li>
</ul>
<p>这个属性可以用在页面加载时，防止加载某些资源；或者页面不可见时，停掉一些页面功能。</p>
<p><strong>（3）document.readyState</strong></p>
<p><code>document.readyState</code>属性返回当前文档的状态，共有三种可能的值。</p>
<ul>
<li><code>loading</code>：加载 HTML 代码阶段（尚未完成解析）</li>
<li><code>interactive</code>：加载外部资源阶段</li>
<li><code>complete</code>：加载完成</li>
</ul>
<p>这个属性变化的过程如下。</p>
<ol>
<li>浏览器开始解析 HTML 文档，<code>document.readyState</code>属性等于<code>loading</code>。</li>
<li>浏览器遇到 HTML 文档中的<code>&lt;script&gt;</code>元素，并且没有<code>async</code>或<code>defer</code>属性，就暂停解析，开始执行脚本，这时<code>document.readyState</code>属性还是等于<code>loading</code>。</li>
<li>HTML 文档解析完成，<code>document.readyState</code>属性变成<code>interactive</code>。</li>
<li>浏览器等待图片、样式表、字体文件等外部资源加载完成，一旦全部加载完成，<code>document.readyState</code>属性变成<code>complete</code>。</li>
</ol>
<p>下面的代码用来检查网页是否加载成功。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本检查</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.readyState === <span class="string">&quot;complete&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮询检查</span></span><br><span class="line"><span class="keyword">var</span> interval = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState === <span class="string">&quot;complete&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>另外，每次状态变化都会触发一个<code>readystatechange</code>事件。</p>
<h2 id="document-cookie"><a href="#document-cookie" class="headerlink" title="document.cookie"></a>document.cookie</h2><p><code>document.cookie</code>属性用来操作浏览器 Cookie，详见《浏览器模型》部分的《Cookie》章节。</p>
<h2 id="document-designMode"><a href="#document-designMode" class="headerlink" title="document.designMode"></a>document.designMode</h2><p><code>document.designMode</code>属性控制当前文档是否可编辑，通常用在所见即所得编辑器。该属性只有两个值<code>on</code>和<code>off</code>，默认值为<code>off</code>。</p>
<p>下面代码打开<code>iframe</code>元素内部文档的<code>designMode</code>属性，就能将其变为一个所见即所得的编辑器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;iframe id=&quot;editor&quot; src=&quot;about:blank&quot;&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="keyword">var</span> editor = <span class="built_in">document</span>.getElementById(<span class="string">&quot;editor&quot;</span>);</span><br><span class="line">editor.contentDocument.designMode = <span class="string">&quot;on&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="document-implementation"><a href="#document-implementation" class="headerlink" title="document.implementation"></a>document.implementation</h2><p><code>document.implementation</code>属性返回一个<code>DOMImplementation</code>对象。该对象有三个方法，主要用于创建独立于当前文档的新的 Document 对象。</p>
<ul>
<li><code>DOMImplementation.createDocument()</code>：创建一个 XML 文档。</li>
<li><code>DOMImplementation.createHTMLDocument()</code>：创建一个 HTML 文档。</li>
<li><code>DOMImplementation.createDocumentType()</code>：创建一个 DocumentType 对象。</li>
</ul>
<p>下面是创建 HTML 文档的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = <span class="built_in">document</span>.implementation.createHTMLDocument(<span class="string">&quot;Title&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p = doc.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">p.innerHTML = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">doc.body.appendChild(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.replaceChild(doc.documentElement, <span class="built_in">document</span>.documentElement);</span><br></pre></td></tr></table></figure>

<p>上面代码中，第一步生成一个新的 HTML 文档<code>doc</code>，然后用它的根元素<code>document.documentElement</code>替换掉<code>document.documentElement</code>。这会使得当前文档的内容全部消失，变成<code>hello world</code>。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="document-open-，document-close"><a href="#document-open-，document-close" class="headerlink" title="document.open()，document.close()"></a>document.open()，document.close()</h2><p><code>document.open</code>方法清除当前文档所有内容，使得文档处于可写状态，供<code>document.write</code>方法写入内容。</p>
<p><code>document.close</code>方法用来关闭<code>document.open()</code>打开的文档。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.open();</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.close();</span><br></pre></td></tr></table></figure>

<h2 id="document-write-，document-writeln"><a href="#document-write-，document-writeln" class="headerlink" title="document.write()，document.writeln()"></a>document.write()，document.writeln()</h2><p><code>document.write</code>方法用于向当前文档写入内容。</p>
<p>在网页的首次渲染阶段，只要页面没有关闭写入（即没有执行<code>document.close()</code>），<code>document.write</code>写入的内容就会追加在已有内容的后面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面显示“helloworld”</span></span><br><span class="line"><span class="built_in">document</span>.open();</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.close();</span><br></pre></td></tr></table></figure>

<p>注意，<code>document.write</code>会当作 HTML 代码解析，不会转义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;p&gt;hello world&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>document.write</code>会将<code>&lt;p&gt;</code>当作 HTML 标签解释。</p>
<p>如果页面已经解析完成（<code>DOMContentLoaded</code>事件发生之后），再调用<code>write</code>方法，它会先调用<code>open</code>方法，擦除当前文档所有内容，然后再写入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;&lt;p&gt;Hello World!&lt;/p&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;&lt;p&gt;Hello World!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果在页面渲染过程中调用<code>write</code>方法，并不会自动调用<code>open</code>方法。（可以理解成，<code>open</code>方法已调用，但<code>close</code>方法还未调用。）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    hello</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.write(<span class="string">&quot;world&quot;</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在浏览器打开上面网页，将会显示<code>hello world</code>。</p>
<p><code>document.write</code>是 JavaScript 语言标准化之前就存在的方法，现在完全有更符合标准的方法向文档写入内容（比如对<code>innerHTML</code>属性赋值）。所以，除了某些特殊情况，应该尽量避免使用<code>document.write</code>这个方法。</p>
<p><code>document.writeln</code>方法与<code>write</code>方法完全一致，除了会在输出内容的尾部添加换行符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>注意，<code>writeln</code>方法添加的是 ASCII 码的换行符，渲染成 HTML 网页时不起作用，即在网页上显示不出换行。网页上的换行，必须显式写入<code>&lt;br&gt;</code>。</p>
<h2 id="document-querySelector-，document-querySelectorAll"><a href="#document-querySelector-，document-querySelectorAll" class="headerlink" title="document.querySelector()，document.querySelectorAll()"></a>document.querySelector()，document.querySelectorAll()</h2><p><code>document.querySelector</code>方法接受一个 CSS 选择器作为参数，返回匹配该选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.myclass&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> el2 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#myParent &gt; [ng-click]&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>document.querySelectorAll</code>方法与<code>querySelector</code>用法类似，区别是返回一个<code>NodeList</code>对象，包含所有匹配给定选择器的节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">elementList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.myclass&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这两个方法的参数，可以是逗号分隔的多个 CSS 选择器，返回匹配其中一个选择器的元素节点，这与 CSS 选择器的规则是一致的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> matches = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div.note, div.alert&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码返回<code>class</code>属性是<code>note</code>或<code>alert</code>的<code>div</code>元素。</p>
<p>这两个方法都支持复杂的 CSS 选择器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选中 data-foo-bar 属性等于 someval 的元素</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;[data-foo-bar=&quot;someval&quot;]&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选中 myForm 表单中所有不通过验证的元素</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;#myForm :invalid&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选中div元素，那些 class 含 ignore 的除外</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;DIV:not(.ignore)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时选中 div，a，script 三类元素</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;DIV, A, SCRIPT&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>但是，它们不支持 CSS 伪元素的选择器（比如<code>:first-line</code>和<code>:first-letter</code>）和伪类的选择器（比如<code>:link</code>和<code>:visited</code>），即无法选中伪元素和伪类。</p>
<p>如果<code>querySelectorAll</code>方法的参数是字符串<code>*</code>，则会返回文档中的所有元素节点。另外，<code>querySelectorAll</code>的返回结果不是动态集合，不会实时反映元素节点的变化。</p>
<p>最后，这两个方法除了定义在<code>document</code>对象上，还定义在元素节点上，即在元素节点上也可以调用。</p>
<h2 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName()"></a>document.getElementsByTagName()</h2><p><code>document.getElementsByTagName</code>方法搜索 HTML 标签名，返回符合条件的元素。它的返回值是一个类似数组对象（<code>HTMLCollection</code>实例），可以实时反映 HTML 文档的变化。如果没有任何匹配的元素，就返回一个空集。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> paras = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">paras <span class="keyword">instanceof</span> HTMLCollection; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码返回当前文档的所有<code>p</code>元素节点。</p>
<p>HTML 标签名是大小写不敏感的，因此<code>getElementsByTagName</code>方法也是大小写不敏感的。另外，返回结果中，各个成员的顺序就是它们在文档中出现的顺序。</p>
<p>如果传入<code>*</code>，就可以返回文档中所有 HTML 元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allElements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意，元素节点本身也定义了<code>getElementsByTagName</code>方法，返回该元素的后代元素中符合条件的元素。也就是说，这个方法不仅可以在<code>document</code>对象上调用，也可以在任何元素节点上调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstPara = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> spans = firstPara.getElementsByTagName(<span class="string">&quot;span&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码选中第一个<code>p</code>元素内部的所有<code>span</code>元素。</p>
<h2 id="document-getElementsByClassName"><a href="#document-getElementsByClassName" class="headerlink" title="document.getElementsByClassName()"></a>document.getElementsByClassName()</h2><p><code>document.getElementsByClassName</code>方法返回一个类似数组的对象（<code>HTMLCollection</code>实例），包括了所有<code>class</code>名字符合指定条件的元素，元素的变化实时反映在返回结果中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByClassName(names);</span><br></pre></td></tr></table></figure>

<p>由于<code>class</code>是保留字，所以 JavaScript 一律使用<code>className</code>表示 CSS 的<code>class</code>。</p>
<p>参数可以是多个<code>class</code>，它们之间使用空格分隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;foo bar&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码返回同时具有<code>foo</code>和<code>bar</code>两个<code>class</code>的元素，<code>foo</code>和<code>bar</code>的顺序不重要。</p>
<p>注意，正常模式下，CSS 的<code>class</code>是大小写敏感的。（<code>quirks mode</code>下，大小写不敏感。）</p>
<p>与<code>getElementsByTagName</code>方法一样，<code>getElementsByClassName</code>方法不仅可以在<code>document</code>对象上调用，也可以在任何元素节点上调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非document对象上调用</span></span><br><span class="line"><span class="keyword">var</span> elements = rootElement.getElementsByClassName(names);</span><br></pre></td></tr></table></figure>

<h2 id="document-getElementsByName"><a href="#document-getElementsByName" class="headerlink" title="document.getElementsByName()"></a>document.getElementsByName()</h2><p><code>document.getElementsByName</code>方法用于选择拥有<code>name</code>属性的 HTML 元素（比如<code>&lt;form&gt;</code>、<code>&lt;radio&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;frame&gt;</code>、<code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code>等），返回一个类似数组的的对象（<code>NodeList</code>实例），因为<code>name</code>属性相同的元素可能不止一个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单为 &lt;form name=&quot;x&quot;&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="keyword">var</span> forms = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">forms[<span class="number">0</span>].tagName; <span class="comment">// &quot;FORM&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="document-getElementById"><a href="#document-getElementById" class="headerlink" title="document.getElementById()"></a>document.getElementById()</h2><p><code>document.getElementById</code>方法返回匹配指定<code>id</code>属性的元素节点。如果没有发现匹配的节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;para1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意，该方法的参数是大小写敏感的。比如，如果某个节点的<code>id</code>属性是<code>main</code>，那么<code>document.getElementById(&#39;Main&#39;)</code>将返回<code>null</code>。</p>
<p><code>document.getElementById</code>方法与<code>document.querySelector</code>方法都能获取元素节点，不同之处是<code>document.querySelector</code>方法的参数使用 CSS 选择器语法，<code>document.getElementById</code>方法的参数是元素的<code>id</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;myElement&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;#myElement&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，两个方法都能选中<code>id</code>为<code>myElement</code>的元素，但是<code>document.getElementById()</code>比<code>document.querySelector()</code>效率高得多。</p>
<p>另外，这个方法只能在<code>document</code>对象上使用，不能在其他元素节点上使用。</p>
<h2 id="document-elementFromPoint-，document-elementsFromPoint"><a href="#document-elementFromPoint-，document-elementsFromPoint" class="headerlink" title="document.elementFromPoint()，document.elementsFromPoint()"></a>document.elementFromPoint()，document.elementsFromPoint()</h2><p><code>document.elementFromPoint</code>方法返回位于页面指定位置最上层的元素节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.elementFromPoint(<span class="number">50</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码选中在<code>(50, 50)</code>这个坐标位置的最上层的那个 HTML 元素。</p>
<p><code>elementFromPoint</code>方法的两个参数，依次是相对于当前视口左上角的横坐标和纵坐标，单位是像素。如果位于该位置的 HTML 元素不可返回（比如文本框的滚动条），则返回它的父元素（比如文本框）。如果坐标值无意义（比如负值或超过视口大小），则返回<code>null</code>。</p>
<p><code>document.elementsFromPoint()</code>返回一个数组，成员是位于指定坐标（相对于视口）的所有元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.elementsFromPoint(x, y);</span><br></pre></td></tr></table></figure>

<h2 id="document-caretPositionFromPoint"><a href="#document-caretPositionFromPoint" class="headerlink" title="document.caretPositionFromPoint()"></a>document.caretPositionFromPoint()</h2><p><code>document.caretPositionFromPoint()</code>返回一个 CaretPosition 对象，包含了指定坐标点在节点对象内部的位置信息。CaretPosition 对象就是光标插入点的概念，用于确定光标点在文本对象内部的具体位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> range = <span class="built_in">document</span>.caretPositionFromPoint(clientX, clientY);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>range</code>是指定坐标点的 CaretPosition 对象。该对象有两个属性。</p>
<ul>
<li>CaretPosition.offsetNode：该位置的节点对象</li>
<li>CaretPosition.offset：该位置在<code>offsetNode</code>对象内部，与起始位置相距的字符数。</li>
</ul>
<h2 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h2><p><code>document.createElement</code>方法用来生成元素节点，并返回该节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>createElement</code>方法的参数为元素的标签名，即元素节点的<code>tagName</code>属性，对于 HTML 网页大小写不敏感，即参数为<code>div</code>或<code>DIV</code>返回的是同一种节点。如果参数里面包含尖括号（即<code>&lt;</code>和<code>&gt;</code>）会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;&lt;div&gt;&quot;</span>);</span><br><span class="line"><span class="comment">// DOMException: The tag name provided (&#x27;&lt;div&gt;&#x27;) is not a valid name</span></span><br></pre></td></tr></table></figure>

<p>注意，<code>document.createElement</code>的参数可以是自定义的标签名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="document-createTextNode"><a href="#document-createTextNode" class="headerlink" title="document.createTextNode()"></a>document.createTextNode()</h2><p><code>document.createTextNode</code>方法用来生成文本节点（<code>Text</code>实例），并返回该节点。它的参数是文本节点的内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> newContent = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">newDiv.appendChild(newContent);</span><br></pre></td></tr></table></figure>

<p>上面代码新建一个<code>div</code>节点和一个文本节点，然后将文本节点插入<code>div</code>节点。</p>
<p>这个方法可以确保返回的节点，被浏览器当作文本渲染，而不是当作 HTML 代码渲染。因此，可以用来展示用户的输入，避免 XSS 攻击。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">div.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;&lt;span&gt;Foo &amp; bar&lt;/span&gt;&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(div.innerHTML);</span><br><span class="line"><span class="comment">// &amp;lt;span&amp;gt;Foo &amp;amp; bar&amp;lt;/span&amp;gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>createTextNode</code>方法对大于号和小于号进行转义，从而保证即使用户输入的内容包含恶意代码，也能正确显示。</p>
<p>需要注意的是，该方法不对单引号和双引号转义，所以不能用来对 HTML 属性赋值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function escapeHtml(str) &#123;</span><br><span class="line">  var div = document.createElement(&#x27;div&#x27;);</span><br><span class="line">  div.appendChild(document.createTextNode(str));</span><br><span class="line">  return div.innerHTML;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var userWebsite = &#x27;&quot; onmouseover=&quot;alert(\&#x27;derp\&#x27;)&quot; &quot;&#x27;;</span><br><span class="line">var profileLink = &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#x27; + escapeHtml(userWebsite) + &#x27;&quot;</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;;</span><br><span class="line">var div = document.getElementById(&#x27;target&#x27;);</span><br><span class="line">div.innerHTML = profileLink;</span><br><span class="line">// <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(&#x27;derp&#x27;)&quot;</span> &quot;&quot;&gt;</span>Bob<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，由于<code>createTextNode</code>方法不转义双引号，导致<code>onmouseover</code>方法被注入了代码。</p>
<h2 id="document-createAttribute"><a href="#document-createAttribute" class="headerlink" title="document.createAttribute()"></a>document.createAttribute()</h2><p><code>document.createAttribute</code>方法生成一个新的属性节点（<code>Attr</code>实例），并返回它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> attribute = <span class="built_in">document</span>.createAttribute(name);</span><br></pre></td></tr></table></figure>

<p><code>document.createAttribute</code>方法的参数<code>name</code>，是属性的名称。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createAttribute(<span class="string">&quot;my_attrib&quot;</span>);</span><br><span class="line">a.value = <span class="string">&quot;newVal&quot;</span>;</span><br><span class="line"></span><br><span class="line">node.setAttributeNode(a);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">node.setAttribute(<span class="string">&quot;my_attrib&quot;</span>, <span class="string">&quot;newVal&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码为<code>div1</code>节点，插入一个值为<code>newVal</code>的<code>my_attrib</code>属性。</p>
<h2 id="document-createComment"><a href="#document-createComment" class="headerlink" title="document.createComment()"></a>document.createComment()</h2><p><code>document.createComment</code>方法生成一个新的注释节点，并返回该节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> CommentNode = <span class="built_in">document</span>.createComment(data);</span><br></pre></td></tr></table></figure>

<p><code>document.createComment</code>方法的参数是一个字符串，会成为注释节点的内容。</p>
<h2 id="document-createDocumentFragment"><a href="#document-createDocumentFragment" class="headerlink" title="document.createDocumentFragment()"></a>document.createDocumentFragment()</h2><p><code>document.createDocumentFragment</code>方法生成一个空的文档片段对象（<code>DocumentFragment</code>实例）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> docFragment = <span class="built_in">document</span>.createDocumentFragment();</span><br></pre></td></tr></table></figure>

<p><code>DocumentFragment</code>是一个存在于内存的 DOM 片段，不属于当前文档，常常用来生成一段较复杂的 DOM 结构，然后再插入当前文档。这样做的好处在于，因为<code>DocumentFragment</code>不属于当前文档，对它的任何改动，都不会引发网页的重新渲染，比直接修改当前文档的 DOM 有更好的性能表现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> docfrag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  li.textContent = e;</span><br><span class="line">  docfrag.appendChild(li);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">element.appendChild(docfrag);</span><br></pre></td></tr></table></figure>

<p>上面代码中，文档片断<code>docfrag</code>包含四个<code>&lt;li&gt;</code>节点，这些子节点被一次性插入了当前文档。</p>
<h2 id="document-createEvent"><a href="#document-createEvent" class="headerlink" title="document.createEvent()"></a>document.createEvent()</h2><p><code>document.createEvent</code>方法生成一个事件对象（<code>Event</code>实例），该对象可以被<code>element.dispatchEvent</code>方法使用，触发指定事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(type);</span><br></pre></td></tr></table></figure>

<p><code>document.createEvent</code>方法的参数是事件类型，比如<code>UIEvents</code>、<code>MouseEvents</code>、<code>MutationEvents</code>、<code>HTMLEvents</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">&quot;Event&quot;</span>);</span><br><span class="line">event.initEvent(<span class="string">&quot;build&quot;</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">&quot;build&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.type); <span class="comment">// &quot;build&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(event);</span><br></pre></td></tr></table></figure>

<p>上面代码新建了一个名为<code>build</code>的事件实例，然后触发该事件。</p>
<h2 id="document-addEventListener-，document-removeEventListener-，document-dispatchEvent"><a href="#document-addEventListener-，document-removeEventListener-，document-dispatchEvent" class="headerlink" title="document.addEventListener()，document.removeEventListener()，document.dispatchEvent()"></a>document.addEventListener()，document.removeEventListener()，document.dispatchEvent()</h2><p>这三个方法用于处理<code>document</code>节点的事件。它们都继承自<code>EventTarget</code>接口，详细介绍参见《EventTarget 接口》一章。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加事件监听函数</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>, listener, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件监听函数</span></span><br><span class="line"><span class="built_in">document</span>.removeEventListener(<span class="string">&quot;click&quot;</span>, listener, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">&quot;click&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(event);</span><br></pre></td></tr></table></figure>

<h2 id="document-hasFocus"><a href="#document-hasFocus" class="headerlink" title="document.hasFocus()"></a>document.hasFocus()</h2><p><code>document.hasFocus</code>方法返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> focused = <span class="built_in">document</span>.hasFocus();</span><br></pre></td></tr></table></figure>

<p>注意，有焦点的文档必定被激活（active），反之不成立，激活的文档未必有焦点。比如，用户点击按钮，从当前窗口跳出一个新窗口，该新窗口就是激活的，但是不拥有焦点。</p>
<h2 id="document-adoptNode-，document-importNode"><a href="#document-adoptNode-，document-importNode" class="headerlink" title="document.adoptNode()，document.importNode()"></a>document.adoptNode()，document.importNode()</h2><p><code>document.adoptNode</code>方法将某个节点及其子节点，从原来所在的文档或<code>DocumentFragment</code>里面移除，归属当前<code>document</code>对象，返回插入后的新节点。插入的节点对象的<code>ownerDocument</code>属性，会变成当前的<code>document</code>对象，而<code>parentNode</code>属性是<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="built_in">document</span>.adoptNode(externalNode);</span><br><span class="line"><span class="built_in">document</span>.appendChild(node);</span><br></pre></td></tr></table></figure>

<p>注意，<code>document.adoptNode</code>方法只是改变了节点的归属，并没有将这个节点插入新的文档树。所以，还要再用<code>appendChild</code>方法或<code>insertBefore</code>方法，将新节点插入当前文档树。</p>
<p><code>document.importNode</code>方法则是从原来所在的文档或<code>DocumentFragment</code>里面，拷贝某个节点及其子节点，让它们归属当前<code>document</code>对象。拷贝的节点对象的<code>ownerDocument</code>属性，会变成当前的<code>document</code>对象，而<code>parentNode</code>属性是<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="built_in">document</span>.importNode(externalNode, deep);</span><br></pre></td></tr></table></figure>

<p><code>document.importNode</code>方法的第一个参数是外部节点，第二个参数是一个布尔值，表示对外部节点是深拷贝还是浅拷贝，默认是浅拷贝（false）。虽然第二个参数是可选的，但是建议总是保留这个参数，并设为<code>true</code>。</p>
<p>注意，<code>document.importNode方法</code>只是拷贝外部节点，这时该节点的父节点是<code>null</code>。下一步还必须将这个节点插入当前文档树。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oldNode = iframe.contentWindow.document.getElementById(<span class="string">&quot;myNode&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> newNode = <span class="built_in">document</span>.importNode(oldNode, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>).appendChild(newNode);</span><br></pre></td></tr></table></figure>

<p>上面代码从<code>iframe</code>窗口，拷贝一个指定节点<code>myNode</code>，插入当前文档。</p>
<h2 id="document-createNodeIterator"><a href="#document-createNodeIterator" class="headerlink" title="document.createNodeIterator()"></a>document.createNodeIterator()</h2><p><code>document.createNodeIterator</code>方法返回一个子节点遍历器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodeIterator = <span class="built_in">document</span>.createNodeIterator(</span><br><span class="line">  <span class="built_in">document</span>.body,</span><br><span class="line">  NodeFilter.SHOW_ELEMENT</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码返回<code>&lt;body&gt;</code>元素子节点的遍历器。</p>
<p><code>document.createNodeIterator</code>方法第一个参数为所要遍历的根节点，第二个参数为所要遍历的节点类型，这里指定为元素节点（<code>NodeFilter.SHOW_ELEMENT</code>）。几种主要的节点类型写法如下。</p>
<ul>
<li>所有节点：NodeFilter.SHOW_ALL</li>
<li>元素节点：NodeFilter.SHOW_ELEMENT</li>
<li>文本节点：NodeFilter.SHOW_TEXT</li>
<li>评论节点：NodeFilter.SHOW_COMMENT</li>
</ul>
<p><code>document.createNodeIterator</code>方法返回一个“遍历器”对象（<code>NodeFilter</code>实例）。该实例的<code>nextNode()</code>方法和<code>previousNode()</code>方法，可以用来遍历所有子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodeIterator = <span class="built_in">document</span>.createNodeIterator(<span class="built_in">document</span>.body);</span><br><span class="line"><span class="keyword">var</span> pars = [];</span><br><span class="line"><span class="keyword">var</span> currentNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((currentNode = nodeIterator.nextNode())) &#123;</span><br><span class="line">  pars.push(currentNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，使用遍历器的<code>nextNode</code>方法，将根节点的所有子节点，依次读入一个数组。<code>nextNode</code>方法先返回遍历器的内部指针所在的节点，然后会将指针移向下一个节点。所有成员遍历完成后，返回<code>null</code>。<code>previousNode</code>方法则是先将指针移向上一个节点，然后返回该节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodeIterator = <span class="built_in">document</span>.createNodeIterator(</span><br><span class="line">  <span class="built_in">document</span>.body,</span><br><span class="line">  NodeFilter.SHOW_ELEMENT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentNode = nodeIterator.nextNode();</span><br><span class="line"><span class="keyword">var</span> previousNode = nodeIterator.previousNode();</span><br><span class="line"></span><br><span class="line">currentNode === previousNode; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>currentNode</code>和<code>previousNode</code>都指向同一个的节点。</p>
<p>注意，遍历器返回的第一个节点，总是根节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pars[<span class="number">0</span>] === <span class="built_in">document</span>.body; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="document-createTreeWalker"><a href="#document-createTreeWalker" class="headerlink" title="document.createTreeWalker()"></a>document.createTreeWalker()</h2><p><code>document.createTreeWalker</code>方法返回一个 DOM 的子树遍历器。它与<code>document.createNodeIterator</code>方法基本是类似的，区别在于它返回的是<code>TreeWalker</code>实例，后者返回的是<code>NodeIterator</code>实例。另外，它的第一个节点不是根节点。</p>
<p><code>document.createTreeWalker</code>方法的第一个参数是所要遍历的根节点，第二个参数指定所要遍历的节点类型（与<code>document.createNodeIterator</code>方法的第二个参数相同）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> treeWalker = <span class="built_in">document</span>.createTreeWalker(</span><br><span class="line">  <span class="built_in">document</span>.body,</span><br><span class="line">  NodeFilter.SHOW_ELEMENT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nodeList = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (treeWalker.nextNode()) &#123;</span><br><span class="line">  nodeList.push(treeWalker.currentNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码遍历<code>&lt;body&gt;</code>节点下属的所有元素节点，将它们插入<code>nodeList</code>数组。</p>
<h2 id="document-getSelection"><a href="#document-getSelection" class="headerlink" title="document.getSelection()"></a>document.getSelection()</h2><p>这个方法指向<code>window.getSelection()</code>，参见<code>window</code>对象一节的介绍。</p>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>Element对象</title>
    <url>/2021/01/14/dom/element/</url>
    <content><![CDATA[<p><code>Element</code>对象对应网页的 HTML 元素。每一个 HTML 元素，在 DOM 树上都会转化成一个<code>Element</code>节点对象（以下简称元素节点）。</p>
<p>元素节点的<code>nodeType</code>属性都是<code>1</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">p.nodeName; <span class="comment">// &quot;P&quot;</span></span><br><span class="line">p.nodeType; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p><code>Element</code>对象继承了<code>Node</code>接口，因此<code>Node</code>的属性和方法在<code>Element</code>对象都存在。此外，不同的 HTML 元素对应的元素节点是不一样的，浏览器使用不同的构造函数，生成不同的元素节点，比如<code>&lt;a&gt;</code>元素的节点对象由<code>HTMLAnchorElement</code>构造函数生成，<code>&lt;button&gt;</code>元素的节点对象由<code>HTMLButtonElement</code>构造函数生成。因此，元素节点不是一种对象，而是一组对象，这些对象除了继承<code>Element</code>的属性和方法，还有各自构造函数的属性和方法。</p>
<h1 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h1><h2 id="元素特性的相关属性"><a href="#元素特性的相关属性" class="headerlink" title="元素特性的相关属性"></a>元素特性的相关属性</h2><p><strong>（1）Element.id</strong></p>
<p><code>Element.id</code>属性返回指定元素的<code>id</code>属性，该属性可读写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为 &lt;p id=&quot;foo&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">p.id; <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意，<code>id</code>属性的值是大小写敏感，即浏览器能正确识别<code>&lt;p id=&quot;foo&quot;&gt;</code>和<code>&lt;p id=&quot;FOO&quot;&gt;</code>这两个元素的<code>id</code>属性，但是最好不要这样命名。</p>
<p><strong>（2）Element.tagName</strong></p>
<p><code>Element.tagName</code>属性返回指定元素的大写标签名，与<code>nodeName</code>属性的值相等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码为</span></span><br><span class="line"><span class="comment">// &lt;span id=&quot;myspan&quot;&gt;Hello&lt;/span&gt;</span></span><br><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myspan&quot;</span>);</span><br><span class="line">span.id; <span class="comment">// &quot;myspan&quot;</span></span><br><span class="line">span.tagName; <span class="comment">// &quot;SPAN&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>（3）Element.dir</strong></p>
<p><code>Element.dir</code>属性用于读写当前元素的文字方向，可能是从左到右（<code>&quot;ltr&quot;</code>），也可能是从右到左（<code>&quot;rtl&quot;</code>）。</p>
<p><strong>（4）Element.accessKey</strong></p>
<p><code>Element.accessKey</code>属性用于读写分配给当前元素的快捷键。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;button accesskey=&quot;h&quot; id=&quot;btn&quot;&gt;点击&lt;/button&gt;</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.accessKey; <span class="comment">// &quot;h&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>btn</code>元素的快捷键是<code>h</code>，按下<code>Alt + h</code>就能将焦点转移到它上面。</p>
<p><strong>（5）Element.draggable</strong></p>
<p><code>Element.draggable</code>属性返回一个布尔值，表示当前元素是否可拖动。该属性可读写。</p>
<p><strong>（6）Element.lang</strong></p>
<p><code>Element.lang</code>属性返回当前元素的语言设置。该属性可读写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.lang; <span class="comment">// &quot;en&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>（7）Element.tabIndex</strong></p>
<p><code>Element.tabIndex</code>属性返回一个整数，表示当前元素在 Tab 键遍历时的顺序。该属性可读写。</p>
<p><code>tabIndex</code>属性值如果是负值（通常是<code>-1</code>），则 Tab 键不会遍历到该元素。如果是正整数，则按照顺序，从小到大遍历。如果两个元素的<code>tabIndex</code>属性的正整数值相同，则按照出现的顺序遍历。遍历完所有<code>tabIndex</code>为正整数的元素以后，再遍历所有<code>tabIndex</code>等于<code>0</code>、或者属性值是非法值、或者没有<code>tabIndex</code>属性的元素，顺序为它们在网页中出现的顺序。</p>
<p><strong>（8）Element.title</strong></p>
<p><code>Element.title</code>属性用来读写当前元素的 HTML 属性<code>title</code>。该属性通常用来指定，鼠标悬浮时弹出的文字提示框。</p>
<h2 id="元素状态的相关属性"><a href="#元素状态的相关属性" class="headerlink" title="元素状态的相关属性"></a>元素状态的相关属性</h2><p><strong>（1）Element.hidden</strong></p>
<p><code>Element.hidden</code>属性返回一个布尔值，表示当前元素的<code>hidden</code>属性，用来控制当前元素是否可见。该属性可读写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> mydiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    mydiv.hidden = !mydiv.hidden;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>注意，该属性与 CSS 设置是互相独立的。CSS 对这个元素可见性的设置，<code>Element.hidden</code>并不能反映出来。也就是说，这个属性并不能用来判断当前元素的实际可见性。</p>
<p>CSS 的设置高于<code>Element.hidden</code>。如果 CSS 指定了该元素不可见（<code>display: none</code>）或可见（<code>display: hidden</code>），那么<code>Element.hidden</code>并不能改变该元素实际的可见性。换言之，这个属性只在 CSS 没有明确设定当前元素的可见性时才有效。</p>
<p><strong>（2）Element.contentEditable，Element.isContentEditable</strong></p>
<p>HTML 元素可以设置<code>contentEditable</code>属性，使得元素的内容可以编辑。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;div&gt;</code>元素有<code>contenteditable</code>属性，因此用户可以在网页上编辑这个区块的内容。</p>
<p><code>Element.contentEditable</code>属性返回一个字符串，表示是否设置了<code>contenteditable</code>属性，有三种可能的值。该属性可写。</p>
<ul>
<li><code>&quot;true&quot;</code>：元素内容可编辑</li>
<li><code>&quot;false&quot;</code>：元素内容不可编辑</li>
<li><code>&quot;inherit&quot;</code>：元素是否可编辑，继承了父元素的设置</li>
</ul>
<p><code>Element.isContentEditable</code>属性返回一个布尔值，同样表示是否设置了<code>contenteditable</code>属性。该属性只读。</p>
<h2 id="Element-attributes"><a href="#Element-attributes" class="headerlink" title="Element.attributes"></a>Element.attributes</h2><p><code>Element.attributes</code>属性返回一个类似数组的对象，成员是当前元素节点的所有属性节点，详见《Attr 对象》一章。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> attrs = p.attributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = attrs.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(attrs[i].name + <span class="string">&quot;-&gt;&quot;</span> + attrs[i].value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码遍历<code>p</code>元素的所有属性。</p>
<h2 id="Element-className，Element-classList"><a href="#Element-className，Element-classList" class="headerlink" title="Element.className，Element.classList"></a>Element.className，Element.classList</h2><p><code>className</code>属性用来读写当前元素节点的<code>class</code>属性。它的值是一个字符串，每个<code>class</code>之间用空格分割。</p>
<p><code>classList</code>属性返回一个类似数组的对象，当前元素节点的每个<code>class</code>就是这个对象的一个成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码 &lt;div class=&quot;one two three&quot; id=&quot;myDiv&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line"></span><br><span class="line">div.className;</span><br><span class="line"><span class="comment">// &quot;one two three&quot;</span></span><br><span class="line"></span><br><span class="line">div.classList;</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   0: &quot;one&quot;</span></span><br><span class="line"><span class="comment">//   1: &quot;two&quot;</span></span><br><span class="line"><span class="comment">//   2: &quot;three&quot;</span></span><br><span class="line"><span class="comment">//   length: 3</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>className</code>属性返回一个空格分隔的字符串，而<code>classList</code>属性指向一个类似数组的对象，该对象的<code>length</code>属性（只读）返回当前元素的<code>class</code>数量。</p>
<p><code>classList</code>对象有下列方法。</p>
<ul>
<li><code>add()</code>：增加一个 class。</li>
<li><code>remove()</code>：移除一个 class。</li>
<li><code>contains()</code>：检查当前元素是否包含某个 class。</li>
<li><code>toggle()</code>：将某个 class 移入或移出当前元素。</li>
<li><code>item()</code>：返回指定索引位置的 class。</li>
<li><code>toString()</code>：将 class 的列表转为字符串。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line"></span><br><span class="line">div.classList.add(<span class="string">&quot;myCssClass&quot;</span>);</span><br><span class="line">div.classList.add(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">div.classList.remove(<span class="string">&quot;myCssClass&quot;</span>);</span><br><span class="line">div.classList.toggle(<span class="string">&quot;myCssClass&quot;</span>); <span class="comment">// 如果 myCssClass 不存在就加入，否则移除</span></span><br><span class="line">div.classList.contains(<span class="string">&quot;myCssClass&quot;</span>); <span class="comment">// 返回 true 或者 false</span></span><br><span class="line">div.classList.item(<span class="number">0</span>); <span class="comment">// 返回第一个 Class</span></span><br><span class="line">div.classList.toString();</span><br></pre></td></tr></table></figure>

<p>下面比较一下，<code>className</code>和<code>classList</code>在添加和删除某个 class 时的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="built_in">document</span>.getElementById(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加class</span></span><br><span class="line">foo.className += <span class="string">&quot;bold&quot;</span>;</span><br><span class="line">foo.classList.add(<span class="string">&quot;bold&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除class</span></span><br><span class="line">foo.classList.remove(<span class="string">&quot;bold&quot;</span>);</span><br><span class="line">foo.className = foo.className.replace(<span class="regexp">/^bold$/</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>toggle</code>方法可以接受一个布尔值，作为第二个参数。如果为<code>true</code>，则添加该属性；如果为<code>false</code>，则去除该属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">el.classList.toggle(<span class="string">&quot;abc&quot;</span>, boolValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">if</span> (boolValue) &#123;</span><br><span class="line">  el.classList.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  el.classList.remove(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Element-dataset"><a href="#Element-dataset" class="headerlink" title="Element.dataset"></a>Element.dataset</h2><p>网页元素可以自定义<code>data-</code>属性，用来添加数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-timestamp</span>=<span class="string">&quot;1522907809292&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;div&gt;</code>元素有一个自定义的<code>data-timestamp</code>属性，用来为该元素添加一个时间戳。</p>
<p><code>Element.dataset</code>属性返回一个对象，可以从这个对象读写<code>data-</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;article</span></span><br><span class="line"><span class="comment">//   id=&quot;foo&quot;</span></span><br><span class="line"><span class="comment">//   data-columns=&quot;3&quot;</span></span><br><span class="line"><span class="comment">//   data-index-number=&quot;12314&quot;</span></span><br><span class="line"><span class="comment">//   data-parent=&quot;cars&quot;&gt;</span></span><br><span class="line"><span class="comment">//   ...</span></span><br><span class="line"><span class="comment">// &lt;/article&gt;</span></span><br><span class="line"><span class="keyword">var</span> article = <span class="built_in">document</span>.getElementById(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">foo.dataset.columns; <span class="comment">// &quot;3&quot;</span></span><br><span class="line">foo.dataset.indexNumber; <span class="comment">// &quot;12314&quot;</span></span><br><span class="line">foo.dataset.parent; <span class="comment">// &quot;cars&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意，<code>dataset</code>上面的各个属性返回都是字符串。</p>
<p>HTML 代码中，<code>data-</code>属性的属性名，只能包含英文字母、数字、连词线（<code>-</code>）、点（<code>.</code>）、冒号（<code>:</code>）和下划线（<code>_</code>）。它们转成 JavaScript 对应的<code>dataset</code>属性名，规则如下。</p>
<ul>
<li>开头的<code>data-</code>会省略。</li>
<li>如果连词线后面跟了一个英文字母，那么连词线会取消，该字母变成大写。</li>
<li>其他字符不变。</li>
</ul>
<p>因此，<code>data-abc-def</code>对应<code>dataset.abcDef</code>，<code>data-abc-1</code>对应<code>dataset[&quot;abc-1&quot;]</code>。</p>
<p>除了使用<code>dataset</code>读写<code>data-</code>属性，也可以使用<code>Element.getAttribute()</code>和<code>Element.setAttribute()</code>，通过完整的属性名读写这些属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mydiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>);</span><br><span class="line"></span><br><span class="line">mydiv.dataset.foo = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">mydiv.getAttribute(<span class="string">&quot;data-foo&quot;</span>); <span class="comment">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Element-innerHTML"><a href="#Element-innerHTML" class="headerlink" title="Element.innerHTML"></a>Element.innerHTML</h2><p><code>Element.innerHTML</code>属性返回一个字符串，等同于该元素包含的所有 HTML 代码。该属性可读写，常用来设置某个节点的内容。它能改写所有元素节点的内容，包括<code>&lt;HTML&gt;</code>和<code>&lt;body&gt;</code>元素。</p>
<p>如果将<code>innerHTML</code>属性设为空，等于删除所有它包含的所有节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">el.innerHTML = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码等于将<code>el</code>节点变成了一个空节点，<code>el</code>原来包含的节点被全部删除。</p>
<p>注意，读取属性值的时候，如果文本节点包含<code>&amp;</code>、小于号（<code>&lt;</code>）和大于号（<code>&gt;</code>），<code>innerHTML</code>属性会将它们转为实体形式<code>&amp;amp;</code>、<code>&amp;lt;</code>、<code>&amp;gt;</code>。如果想得到原文，建议使用<code>element.textContent</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML代码如下 &lt;p id=&quot;para&quot;&gt; 5 &gt; 3 &lt;/p&gt;</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;para&quot;</span>).innerHTML;</span><br><span class="line"><span class="comment">// 5 &amp;gt; 3</span></span><br></pre></td></tr></table></figure>

<p>写入的时候，如果插入的文本包含 HTML 标签，会被解析成为节点对象插入 DOM。注意，如果文本之中含有<code>&lt;script&gt;</code>标签，虽然可以生成<code>script</code>节点，但是插入的代码不会执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;&lt;script&gt;alert(&#x27;haha&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">el.innerHTML = name;</span><br></pre></td></tr></table></figure>

<p>上面代码将脚本插入内容，脚本并不会执行。但是，<code>innerHTML</code>还是有安全风险的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;&lt;img src=x onerror=alert(1)&gt;&quot;</span>;</span><br><span class="line">el.innerHTML = name;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>alert</code>方法是会执行的。因此为了安全考虑，如果插入的是文本，最好用<code>textContent</code>属性代替<code>innerHTML</code>。</p>
<h2 id="Element-outerHTML"><a href="#Element-outerHTML" class="headerlink" title="Element.outerHTML"></a>Element.outerHTML</h2><p><code>Element.outerHTML</code>属性返回一个字符串，表示当前元素节点的所有 HTML 代码，包括该元素本身和所有子元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;d&quot;&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">d.outerHTML;</span><br><span class="line"><span class="comment">// &#x27;&lt;div id=&quot;d&quot;&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>outerHTML</code>属性是可读写的，对它进行赋值，等于替换掉当前元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;container&quot;&gt;&lt;div id=&quot;d&quot;&gt;Hello&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">container.firstChild.nodeName; <span class="comment">// &quot;DIV&quot;</span></span><br><span class="line">d.nodeName; <span class="comment">// &quot;DIV&quot;</span></span><br><span class="line"></span><br><span class="line">d.outerHTML = <span class="string">&quot;&lt;p&gt;Hello&lt;/p&gt;&quot;</span>;</span><br><span class="line">container.firstChild.nodeName; <span class="comment">// &quot;P&quot;</span></span><br><span class="line">d.nodeName; <span class="comment">// &quot;DIV&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，变量<code>d</code>代表子节点，它的<code>outerHTML</code>属性重新赋值以后，内层的<code>div</code>元素就不存在了，被<code>p</code>元素替换了。但是，变量<code>d</code>依然指向原来的<code>div</code>元素，这表示被替换的<code>DIV</code>元素还存在于内存中。</p>
<p>注意，如果一个节点没有父节点，设置<code>outerHTML</code>属性会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">div.outerHTML = <span class="string">&quot;&lt;p&gt;test&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// DOMException: This element has no parent node.</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>div</code>元素没有父节点，设置<code>outerHTML</code>属性会报错。</p>
<h2 id="Element-clientHeight，Element-clientWidth"><a href="#Element-clientHeight，Element-clientWidth" class="headerlink" title="Element.clientHeight，Element.clientWidth"></a>Element.clientHeight，Element.clientWidth</h2><p><code>Element.clientHeight</code>属性返回一个整数值，表示元素节点的 CSS 高度（单位像素），只对块级元素生效，对于行内元素返回<code>0</code>。如果块级元素没有设置 CSS 高度，则返回实际高度。</p>
<p>除了元素本身的高度，它还包括<code>padding</code>部分，但是不包括<code>border</code>、<code>margin</code>。如果有水平滚动条，还要减去水平滚动条的高度。注意，这个值始终是整数，如果是小数会被四舍五入。</p>
<p><code>Element.clientWidth</code>属性返回元素节点的 CSS 宽度，同样只对块级元素有效，也是只包括元素本身的宽度和<code>padding</code>，如果有垂直滚动条，还要减去垂直滚动条的宽度。</p>
<p><code>document.documentElement</code>的<code>clientHeight</code>属性，返回当前视口的高度（即浏览器窗口的高度），等同于<code>window.innerHeight</code>属性减去水平滚动条的高度（如果有的话）。<code>document.body</code>的高度则是网页的实际高度。一般来说，<code>document.body.clientHeight</code>大于<code>document.documentElement.clientHeight</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 视口高度</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网页总高度</span></span><br><span class="line"><span class="built_in">document</span>.body.clientHeight;</span><br></pre></td></tr></table></figure>

<h2 id="Element-clientLeft，Element-clientTop"><a href="#Element-clientLeft，Element-clientTop" class="headerlink" title="Element.clientLeft，Element.clientTop"></a>Element.clientLeft，Element.clientTop</h2><p><code>Element.clientLeft</code>属性等于元素节点左边框（left border）的宽度（单位像素），不包括左侧的<code>padding</code>和<code>margin</code>。如果没有设置左边框，或者是行内元素（<code>display: inline</code>），该属性返回<code>0</code>。该属性总是返回整数值，如果是小数，会四舍五入。</p>
<p><code>Element.clientTop</code>属性等于网页元素顶部边框的宽度（单位像素），其他特点都与<code>clientTop</code>相同。</p>
<h2 id="Element-scrollHeight，Element-scrollWidth"><a href="#Element-scrollHeight，Element-scrollWidth" class="headerlink" title="Element.scrollHeight，Element.scrollWidth"></a>Element.scrollHeight，Element.scrollWidth</h2><p><code>Element.scrollHeight</code>属性返回一个整数值（小数会四舍五入），表示当前元素的总高度（单位像素），包括溢出容器、当前不可见的部分。它包括<code>padding</code>，但是不包括<code>border</code>、<code>margin</code>以及水平滚动条的高度（如果有水平滚动条的话），还包括伪元素（<code>::before</code>或<code>::after</code>）的高度。</p>
<p><code>Element.scrollWidth</code>属性表示当前元素的总宽度（单位像素），其他地方都与<code>scrollHeight</code>属性类似。这两个属性只读。</p>
<p>整张网页的总高度可以从<code>document.documentElement</code>或<code>document.body</code>上读取。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回网页的总高度</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollHeight;</span><br><span class="line"><span class="built_in">document</span>.body.scrollHeight;</span><br></pre></td></tr></table></figure>

<p>注意，如果元素节点的内容出现溢出，即使溢出的内容是隐藏的，<code>scrollHeight</code>属性仍然返回元素的总高度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;myDiv&quot; style=&quot;height: 200px; overflow: hidden;&quot;&gt;...&lt;div&gt;</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).scrollHeight; <span class="comment">// 356</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，即使<code>myDiv</code>元素的 CSS 高度只有 200 像素，且溢出部分不可见，但是<code>scrollHeight</code>仍然会返回该元素的原始高度。</p>
<h2 id="Element-scrollLeft，Element-scrollTop"><a href="#Element-scrollLeft，Element-scrollTop" class="headerlink" title="Element.scrollLeft，Element.scrollTop"></a>Element.scrollLeft，Element.scrollTop</h2><p><code>Element.scrollLeft</code>属性表示当前元素的水平滚动条向右侧滚动的像素数量，<code>Element.scrollTop</code>属性表示当前元素的垂直滚动条向下滚动的像素数量。对于那些没有滚动条的网页元素，这两个属性总是等于 0。</p>
<p>如果要查看整张网页的水平的和垂直的滚动距离，要从<code>document.documentElement</code>元素上读取。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop;</span><br></pre></td></tr></table></figure>

<p>这两个属性都可读写，设置该属性的值，会导致浏览器将当前元素自动滚动到相应的位置。</p>
<h2 id="Element-offsetParent"><a href="#Element-offsetParent" class="headerlink" title="Element.offsetParent"></a>Element.offsetParent</h2><p><code>Element.offsetParent</code>属性返回最靠近当前元素的、并且 CSS 的<code>position</code>属性不等于<code>static</code>的上层元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>span</code>元素的<code>offsetParent</code>属性就是<code>div</code>元素。</p>
<p>该属性主要用于确定子元素位置偏移的计算基准，<code>Element.offsetTop</code>和<code>Element.offsetLeft</code>就是<code>offsetParent</code>元素计算的。</p>
<p>如果该元素是不可见的（<code>display</code>属性为<code>none</code>），或者位置是固定的（<code>position</code>属性为<code>fixed</code>），则<code>offsetParent</code>属性返回<code>null</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>span</code>元素的<code>offsetParent</code>属性是<code>null</code>。</p>
<p>如果某个元素的所有上层节点的<code>position</code>属性都是<code>static</code>，则<code>Element.offsetParent</code>属性指向<code>&lt;body&gt;</code>元素。</p>
<h2 id="Element-offsetHeight，Element-offsetWidth"><a href="#Element-offsetHeight，Element-offsetWidth" class="headerlink" title="Element.offsetHeight，Element.offsetWidth"></a>Element.offsetHeight，Element.offsetWidth</h2><p><code>Element.offsetHeight</code>属性返回一个整数，表示元素的 CSS 垂直高度（单位像素），包括元素本身的高度、padding 和 border，以及水平滚动条的高度（如果存在滚动条）。</p>
<p><code>Element.offsetWidth</code>属性表示元素的 CSS 水平宽度（单位像素），其他都与<code>Element.offsetHeight</code>一致。</p>
<p>这两个属性都是只读属性，只比<code>Element.clientHeight</code>和<code>Element.clientWidth</code>多了边框的高度或宽度。如果元素的 CSS 设为不可见（比如<code>display: none;</code>），则返回<code>0</code>。</p>
<h2 id="Element-offsetLeft，Element-offsetTop"><a href="#Element-offsetLeft，Element-offsetTop" class="headerlink" title="Element.offsetLeft，Element.offsetTop"></a>Element.offsetLeft，Element.offsetTop</h2><p><code>Element.offsetLeft</code>返回当前元素左上角相对于<code>Element.offsetParent</code>节点的水平位移，<code>Element.offsetTop</code>返回垂直位移，单位为像素。通常，这两个值是指相对于父节点的位移。</p>
<p>下面的代码可以算出元素左上角相对于整张网页的坐标。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementPosition</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (e !== <span class="literal">null</span>) &#123;</span><br><span class="line">    x += e.offsetLeft;</span><br><span class="line">    y += e.offsetTop;</span><br><span class="line">    e = e.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: x, <span class="attr">y</span>: y &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Element-style"><a href="#Element-style" class="headerlink" title="Element.style"></a>Element.style</h2><p>每个元素节点都有<code>style</code>用来读写该元素的行内样式信息，具体介绍参见《CSS 操作》一章。</p>
<h2 id="Element-children，Element-childElementCount"><a href="#Element-children，Element-childElementCount" class="headerlink" title="Element.children，Element.childElementCount"></a>Element.children，Element.childElementCount</h2><p><code>Element.children</code>属性返回一个类似数组的对象（<code>HTMLCollection</code>实例），包括当前元素节点的所有子元素。如果当前元素没有子元素，则返回的对象包含零个成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (para.children.length) &#123;</span><br><span class="line">  <span class="keyword">var</span> children = para.children;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码遍历了<code>para</code>元素的所有子元素。</p>
<p>这个属性与<code>Node.childNodes</code>属性的区别是，它只包括元素类型的子节点，不包括其他类型的子节点。</p>
<p><code>Element.childElementCount</code>属性返回当前元素节点包含的子元素节点的个数，与<code>Element.children.length</code>的值相同。</p>
<h2 id="Element-firstElementChild，Element-lastElementChild"><a href="#Element-firstElementChild，Element-lastElementChild" class="headerlink" title="Element.firstElementChild，Element.lastElementChild"></a>Element.firstElementChild，Element.lastElementChild</h2><p><code>Element.firstElementChild</code>属性返回当前元素的第一个元素子节点，<code>Element.lastElementChild</code>返回最后一个元素子节点。</p>
<p>如果没有元素子节点，这两个属性返回<code>null</code>。</p>
<h2 id="Element-nextElementSibling，Element-previousElementSibling"><a href="#Element-nextElementSibling，Element-previousElementSibling" class="headerlink" title="Element.nextElementSibling，Element.previousElementSibling"></a>Element.nextElementSibling，Element.previousElementSibling</h2><p><code>Element.nextElementSibling</code>属性返回当前元素节点的后一个同级元素节点，如果没有则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;div-01&quot;&gt;Here is div-01&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;div-02&quot;&gt;Here is div-02&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div-01&quot;</span>);</span><br><span class="line">el.nextElementSibling;</span><br><span class="line"><span class="comment">// &lt;div id=&quot;div-02&quot;&gt;Here is div-02&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Element.previousElementSibling</code>属性返回当前元素节点的前一个同级元素节点，如果没有则返回<code>null</code>。</p>
<h1 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h1><h2 id="属性相关方法"><a href="#属性相关方法" class="headerlink" title="属性相关方法"></a>属性相关方法</h2><p>以下方法用来操作当前节点的属性。</p>
<p><strong>（1）Element.getAttribute()</strong></p>
<p><code>Element.getAttribute</code>方法接受一个字符串作为参数，返回同名属性的值。如果没有该属性，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mydiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> id = mydiv.getAttribute(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码读取<code>mydiv</code>的<code>id</code>的值。</p>
<p><strong>（2）Element.getAttributeNames()</strong></p>
<p><code>Element.getAttributeNames()</code>返回一个数组，成员是当前元素的所有属性的名字。如果当前元素没有任何属性，则返回一个空数组。使用<code>Element.attributes</code>属性，也可以拿到同样的结果，唯一的区别是它返回的是类似数组的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mydiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>);</span><br><span class="line"></span><br><span class="line">mydiv.getAttributeNames().forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = mydiv.getAttribute(key);</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码用于遍历某个节点的所有属性。</p>
<p><strong>（3）Element.setAttribute()</strong></p>
<p><code>Element.setAttribute</code>方法用于为当前节点设置属性。如果属性已经存在，将更新属性值，否则将添加该属性。该方法没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;button&gt;Hello World&lt;/button&gt;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">b.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;myButton&quot;</span>);</span><br><span class="line">b.setAttribute(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>button</code>元素的<code>name</code>属性被设成<code>myButton</code>，<code>disabled</code>属性被设成<code>true</code>。</p>
<p>这里有两个地方需要注意，首先，属性值总是字符串，其他类型的值会自动转成字符串，比如布尔值<code>true</code>就会变成字符串<code>true</code>；其次，上例的<code>disable</code>属性是一个布尔属性，对于<code>&lt;button&gt;</code>元素来说，这个属性不需要属性值，只要设置了就总是会生效，因此<code>setAttribute</code>方法里面可以将<code>disabled</code>属性设成任意值。</p>
<p><strong>（4）Element.hasAttribute()</strong></p>
<p><code>Element.hasAttribute</code>方法返回一个布尔值，表示当前元素节点是否有指定的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="built_in">document</span>.getElementById(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">foo.hasAttribute(<span class="string">&quot;bar&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>（5）Element.hasAttributes()</strong></p>
<p><code>Element.hasAttributes</code>方法返回一个布尔值，表示当前元素是否有属性，如果没有任何属性，就返回<code>false</code>，否则返回<code>true</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="built_in">document</span>.getElementById(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">foo.hasAttributes(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>（6）Element.removeAttribute()</strong></p>
<p><code>Element.removeAttribute</code>方法移除指定属性。该方法没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>).removeAttribute(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Element-querySelector"><a href="#Element-querySelector" class="headerlink" title="Element.querySelector()"></a>Element.querySelector()</h2><p><code>Element.querySelector</code>方法接受 CSS 选择器作为参数，返回父元素的第一个匹配的子元素。如果没有找到匹配的子元素，就返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> el = content.querySelector(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码返回<code>content</code>节点的第一个<code>p</code>元素。</p>
<p><code>Element.querySelector</code>方法可以接受任何复杂的 CSS 选择器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.querySelector(<span class="string">&quot;style[type=&#x27;text/css&#x27;], style:not([type])&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意，这个方法无法选中伪元素。</p>
<p>它可以接受多个选择器，它们之间使用逗号分隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.querySelector(<span class="string">&quot;div, p&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码返回<code>element</code>的第一个<code>div</code>或<code>p</code>子元素。</p>
<p>需要注意的是，浏览器执行<code>querySelector</code>方法时，是先在全局范围内搜索给定的 CSS 选择器，然后过滤出哪些属于当前元素的子元素。因此，会有一些违反直觉的结果，下面是一段 HTML 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么，像下面这样查询的话，实际上返回的是第一个<code>p</code>元素，而不是第二个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = <span class="built_in">document</span>.getElementById(<span class="string">&quot;outer&quot;</span>);</span><br><span class="line">outer.querySelector(<span class="string">&quot;div p&quot;</span>);</span><br><span class="line"><span class="comment">// &lt;p&gt;Hello&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Element-querySelectorAll"><a href="#Element-querySelectorAll" class="headerlink" title="Element.querySelectorAll()"></a>Element.querySelectorAll()</h2><p><code>Element.querySelectorAll</code>方法接受 CSS 选择器作为参数，返回一个<code>NodeList</code>实例，包含所有匹配的子元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> matches = el.querySelectorAll(<span class="string">&quot;div.highlighted &gt; p&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>该方法的执行机制与<code>querySelector</code>方法相同，也是先在全局范围内查找，再过滤出当前元素的子元素。因此，选择器实际上针对整个文档的。</p>
<p>它也可以接受多个 CSS 选择器，它们之间使用逗号分隔。如果选择器里面有伪元素的选择器，则总是返回一个空的<code>NodeList</code>实例。</p>
<h2 id="Element-getElementsByClassName"><a href="#Element-getElementsByClassName" class="headerlink" title="Element.getElementsByClassName()"></a>Element.getElementsByClassName()</h2><p><code>Element.getElementsByClassName</code>方法返回一个<code>HTMLCollection</code>实例，成员是当前元素节点的所有具有指定 class 的子元素节点。该方法与<code>document.getElementsByClassName</code>方法的用法类似，只是搜索范围不是整个文档，而是当前元素节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.getElementsByClassName(<span class="string">&quot;red test&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意，该方法的参数大小写敏感。</p>
<p>由于<code>HTMLCollection</code>实例是一个活的集合，<code>document</code>对象的任何变化会立刻反应到实例，下面的代码不会生效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;example&quot;&gt;</span></span><br><span class="line"><span class="comment">//   &lt;p class=&quot;foo&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">//   &lt;p class=&quot;foo&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;example&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> matches = element.getElementsByClassName(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; matches.length; i++) &#123;</span><br><span class="line">  matches[i].classList.remove(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">  matches.item(i).classList.add(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行后，HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;example&quot;&gt;</span></span><br><span class="line"><span class="comment">//   &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">//   &lt;p class=&quot;foo bar&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>matches</code>集合的第一个成员，一旦被拿掉 class 里面的<code>foo</code>，就会立刻从<code>matches</code>里面消失，导致出现上面的结果。</p>
<h2 id="Element-getElementsByTagName"><a href="#Element-getElementsByTagName" class="headerlink" title="Element.getElementsByTagName()"></a>Element.getElementsByTagName()</h2><p><code>Element.getElementsByTagName</code>方法返回一个<code>HTMLCollection</code>实例，成员是当前节点的所有匹配指定标签名的子元素节点。该方法与<code>document.getElementsByClassName</code>方法的用法类似，只是搜索范围不是整个文档，而是当前元素节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> table = <span class="built_in">document</span>.getElementById(<span class="string">&quot;forecast-table&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cells = table.getElementsByTagName(<span class="string">&quot;td&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意，该方法的参数是大小写不敏感的。</p>
<h2 id="Element-closest"><a href="#Element-closest" class="headerlink" title="Element.closest()"></a>Element.closest()</h2><p><code>Element.closest</code>方法接受一个 CSS 选择器作为参数，返回匹配该选择器的、最接近当前节点的一个祖先节点（包括当前节点本身）。如果没有任何节点匹配 CSS 选择器，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;article&gt;</span></span><br><span class="line"><span class="comment">//   &lt;div id=&quot;div-01&quot;&gt;Here is div-01</span></span><br><span class="line"><span class="comment">//     &lt;div id=&quot;div-02&quot;&gt;Here is div-02</span></span><br><span class="line"><span class="comment">//       &lt;div id=&quot;div-03&quot;&gt;Here is div-03&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/div&gt;</span></span><br><span class="line"><span class="comment">//   &lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;/article&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div03 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div-03&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// div-03 最近的祖先节点</span></span><br><span class="line">div03.closest(<span class="string">&quot;#div-02&quot;</span>); <span class="comment">// div-02</span></span><br><span class="line">div03.closest(<span class="string">&quot;div div&quot;</span>); <span class="comment">// div-03</span></span><br><span class="line">div03.closest(<span class="string">&quot;article &gt; div&quot;</span>); <span class="comment">//div-01</span></span><br><span class="line">div03.closest(<span class="string">&quot;:not(div)&quot;</span>); <span class="comment">// article</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，由于<code>closest</code>方法将当前节点也考虑在内，所以第二个<code>closest</code>方法返回<code>div-03</code>。</p>
<h2 id="Element-matches"><a href="#Element-matches" class="headerlink" title="Element.matches()"></a>Element.matches()</h2><p><code>Element.matches</code>方法返回一个布尔值，表示当前元素是否匹配给定的 CSS 选择器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (el.matches(<span class="string">&quot;.someClass&quot;</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Match!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件相关方法"><a href="#事件相关方法" class="headerlink" title="事件相关方法"></a>事件相关方法</h2><p>以下三个方法与<code>Element</code>节点的事件相关。这些方法都继承自<code>EventTarget</code>接口，详见相关章节。</p>
<ul>
<li><code>Element.addEventListener()</code>：添加事件的回调函数</li>
<li><code>Element.removeEventListener()</code>：移除事件监听函数</li>
<li><code>Element.dispatchEvent()</code>：触发事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.addEventListener(<span class="string">&quot;click&quot;</span>, listener, <span class="literal">false</span>);</span><br><span class="line">element.removeEventListener(<span class="string">&quot;click&quot;</span>, listener, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">element.dispatchEvent(event);</span><br></pre></td></tr></table></figure>

<h2 id="Element-scrollIntoView"><a href="#Element-scrollIntoView" class="headerlink" title="Element.scrollIntoView()"></a>Element.scrollIntoView()</h2><p><code>Element.scrollIntoView</code>方法滚动当前元素，进入浏览器的可见区域，类似于设置<code>window.location.hash</code>的效果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">el.scrollIntoView(); <span class="comment">// 等同于el.scrollIntoView(true)</span></span><br><span class="line">el.scrollIntoView(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>该方法可以接受一个布尔值作为参数。如果为<code>true</code>，表示元素的顶部与当前区域的可见部分的顶部对齐（前提是当前区域可滚动）；如果为<code>false</code>，表示元素的底部与当前区域的可见部分的尾部对齐（前提是当前区域可滚动）。如果没有提供该参数，默认为<code>true</code>。</p>
<h2 id="Element-getBoundingClientRect"><a href="#Element-getBoundingClientRect" class="headerlink" title="Element.getBoundingClientRect()"></a>Element.getBoundingClientRect()</h2><p><code>Element.getBoundingClientRect</code>方法返回一个对象，提供当前元素节点的大小、位置等信息，基本上就是 CSS 盒状模型的所有信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rect = obj.getBoundingClientRect();</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>getBoundingClientRect</code>方法返回的<code>rect</code>对象，具有以下属性（全部为只读）。</p>
<ul>
<li><code>x</code>：元素左上角相对于视口的横坐标</li>
<li><code>y</code>：元素左上角相对于视口的纵坐标</li>
<li><code>height</code>：元素高度</li>
<li><code>width</code>：元素宽度</li>
<li><code>left</code>：元素左上角相对于视口的横坐标，与<code>x</code>属性相等</li>
<li><code>right</code>：元素右边界相对于视口的横坐标（等于<code>x + width</code>）</li>
<li><code>top</code>：元素顶部相对于视口的纵坐标，与<code>y</code>属性相等</li>
<li><code>bottom</code>：元素底部相对于视口的纵坐标（等于<code>y + height</code>）</li>
</ul>
<p>由于元素相对于视口（viewport）的位置，会随着页面滚动变化，因此表示位置的四个属性值，都不是固定不变的。如果想得到绝对位置，可以将<code>left</code>属性加上<code>window.scrollX</code>，<code>top</code>属性加上<code>window.scrollY</code>。</p>
<p>注意，<code>getBoundingClientRect</code>方法的所有属性，都把边框（<code>border</code>属性）算作元素的一部分。也就是说，都是从边框外缘的各个点来计算。因此，<code>width</code>和<code>height</code>包括了元素本身 + <code>padding</code> + <code>border</code>。</p>
<p>另外，上面的这些属性，都是继承自原型的属性，<code>Object.keys</code>会返回一个空数组，这一点也需要注意。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rect = <span class="built_in">document</span>.body.getBoundingClientRect();</span><br><span class="line"><span class="built_in">Object</span>.keys(rect); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>rect</code>对象没有自身属性，而<code>Object.keys</code>方法只返回对象自身的属性，所以返回了一个空数组。</p>
<h2 id="Element-getClientRects"><a href="#Element-getClientRects" class="headerlink" title="Element.getClientRects()"></a>Element.getClientRects()</h2><p><code>Element.getClientRects</code>方法返回一个类似数组的对象，里面是当前元素在页面上形成的所有矩形（所以方法名中的<code>Rect</code>用的是复数）。每个矩形都有<code>bottom</code>、<code>height</code>、<code>left</code>、<code>right</code>、<code>top</code>和<code>width</code>六个属性，表示它们相对于视口的四个坐标，以及本身的高度和宽度。</p>
<p>对于盒状元素（比如<code>&lt;div&gt;</code>和<code>&lt;p&gt;</code>），该方法返回的对象中只有该元素一个成员。对于行内元素（比如<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;em&gt;</code>），该方法返回的对象有多少个成员，取决于该元素在页面上占据多少行。这是它和<code>Element.getBoundingClientRect()</code>方法的主要区别，后者对于行内元素总是返回一个矩形。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>Hello World Hello World Hello World<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码是一个行内元素<code>&lt;span&gt;</code>，如果它在页面上占据三行，<code>getClientRects</code>方法返回的对象就有三个成员，如果它在页面上占据一行，<code>getClientRects</code>方法返回的对象就只有一个成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;inline&quot;</span>);</span><br><span class="line">el.getClientRects().length; <span class="comment">// 3</span></span><br><span class="line">el.getClientRects()[<span class="number">0</span>].left; <span class="comment">// 8</span></span><br><span class="line">el.getClientRects()[<span class="number">0</span>].right; <span class="comment">// 113.908203125</span></span><br><span class="line">el.getClientRects()[<span class="number">0</span>].bottom; <span class="comment">// 31.200000762939453</span></span><br><span class="line">el.getClientRects()[<span class="number">0</span>].height; <span class="comment">// 23.200000762939453</span></span><br><span class="line">el.getClientRects()[<span class="number">0</span>].width; <span class="comment">// 105.908203125</span></span><br></pre></td></tr></table></figure>

<p>这个方法主要用于判断行内元素是否换行，以及行内元素的每一行的位置偏移。</p>
<p>注意，如果行内元素包括换行符，那么该方法会把换行符考虑在内。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>Hello World Hello World Hello World<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;span&gt;</code>节点内部有三个换行符，即使 HTML 语言忽略换行符，将它们显示为一行，<code>getClientRects()</code>方法依然会返回三个成员。如果行宽设置得特别窄，上面的<code>&lt;span&gt;</code>元素显示为 6 行，那么就会返回六个成员。</p>
<h2 id="Element-insertAdjacentElement"><a href="#Element-insertAdjacentElement" class="headerlink" title="Element.insertAdjacentElement()"></a>Element.insertAdjacentElement()</h2><p><code>Element.insertAdjacentElement</code>方法在相对于当前元素的指定位置，插入一个新的节点。该方法返回被插入的节点，如果插入失败，返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.insertAdjacentElement(position, element);</span><br></pre></td></tr></table></figure>

<p><code>Element.insertAdjacentElement</code>方法一共可以接受两个参数，第一个参数是一个字符串，表示插入的位置，第二个参数是将要插入的节点。第一个参数只可以取如下的值。</p>
<ul>
<li><code>beforebegin</code>：当前元素之前</li>
<li><code>afterbegin</code>：当前元素内部的第一个子节点前面</li>
<li><code>beforeend</code>：当前元素内部的最后一个子节点后面</li>
<li><code>afterend</code>：当前元素之后</li>
</ul>
<p>注意，<code>beforebegin</code>和<code>afterend</code>这两个值，只在当前节点有父节点时才会生效。如果当前节点是由脚本创建的，没有父节点，那么插入会失败。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">p1.insertAdjacentElement(<span class="string">&quot;afterend&quot;</span>, p2); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>p1</code>没有父节点，所以插入<code>p2</code>到它后面就失败了。</p>
<p>如果插入的节点是一个文档里现有的节点，它会从原有位置删除，放置到新的位置。</p>
<h2 id="Element-insertAdjacentHTML-，Element-insertAdjacentText"><a href="#Element-insertAdjacentHTML-，Element-insertAdjacentText" class="headerlink" title="Element.insertAdjacentHTML()，Element.insertAdjacentText()"></a>Element.insertAdjacentHTML()，Element.insertAdjacentText()</h2><p><code>Element.insertAdjacentHTML</code>方法用于将一个 HTML 字符串，解析生成 DOM 结构，插入相对于当前节点的指定位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.insertAdjacentHTML(position, text);</span><br></pre></td></tr></table></figure>

<p>该方法接受两个参数，第一个是一个表示指定位置的字符串，第二个是待解析的 HTML 字符串。第一个参数只能设置下面四个值之一。</p>
<ul>
<li><code>beforebegin</code>：当前元素之前</li>
<li><code>afterbegin</code>：当前元素内部的第一个子节点前面</li>
<li><code>beforeend</code>：当前元素内部的最后一个子节点后面</li>
<li><code>afterend</code>：当前元素之后</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码：&lt;div id=&quot;one&quot;&gt;one&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">d1.insertAdjacentHTML(<span class="string">&quot;afterend&quot;</span>, <span class="string">&#x27;&lt;div id=&quot;two&quot;&gt;two&lt;/div&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">// 执行后的 HTML 代码：</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;one&quot;&gt;one&lt;/div&gt;&lt;div id=&quot;two&quot;&gt;two&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<p>该方法只是在现有的 DOM 结构里面插入节点，这使得它的执行速度比<code>innerHTML</code>方法快得多。</p>
<p>注意，该方法不会转义 HTML 字符串，这导致它不能用来插入用户输入的内容，否则会有安全风险。</p>
<p><code>Element.insertAdjacentText</code>方法在相对于当前节点的指定位置，插入一个文本节点，用法与<code>Element.insertAdjacentHTML</code>方法完全一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码：&lt;div id=&quot;one&quot;&gt;one&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">d1.insertAdjacentText(<span class="string">&quot;afterend&quot;</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line"><span class="comment">// 执行后的 HTML 代码：</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;one&quot;&gt;one&lt;/div&gt;two</span></span><br></pre></td></tr></table></figure>

<h2 id="Element-remove"><a href="#Element-remove" class="headerlink" title="Element.remove()"></a>Element.remove()</h2><p><code>Element.remove</code>方法继承自 ChildNode 接口，用于将当前元素节点从它的父节点移除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>);</span><br><span class="line">el.remove();</span><br></pre></td></tr></table></figure>

<p>上面代码将<code>el</code>节点从 DOM 树里面移除。</p>
<h2 id="Element-focus-，Element-blur"><a href="#Element-focus-，Element-blur" class="headerlink" title="Element.focus()，Element.blur()"></a>Element.focus()，Element.blur()</h2><p><code>Element.focus</code>方法用于将当前页面的焦点，转移到指定元素上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;my-span&quot;</span>).focus();</span><br></pre></td></tr></table></figure>

<p>该方法可以接受一个对象作为参数。参数对象的<code>preventScroll</code>属性是一个布尔值，指定是否将当前元素停留在原始位置，而不是滚动到可见区域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFocus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).focus(&#123; <span class="attr">preventScroll</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码会让<code>btn</code>元素获得焦点，并滚动到可见区域。</p>
<p>最后，从<code>document.activeElement</code>属性可以得到当前获得焦点的元素。</p>
<p><code>Element.blur</code>方法用于将焦点从当前元素移除。</p>
<h2 id="Element-click"><a href="#Element-click" class="headerlink" title="Element.click()"></a>Element.click()</h2><p><code>Element.click</code>方法用于在当前元素上模拟一次鼠标点击，相当于触发了<code>click</code>事件。</p>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM 模型概述</title>
    <url>/2021/01/14/dom/node/</url>
    <content><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。</p>
<p>浏览器会根据 DOM 模型，将结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口。</p>
<p>DOM 只是一个接口规范，可以用各种语言实现。所以严格地说，DOM 不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。另一方面，JavaScript 也是最常用于 DOM 操作的语言。后面介绍的就是 JavaScript 对 DOM 标准的实现和用法。</p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。</p>
<p>节点的类型有七种。</p>
<ul>
<li><code>Document</code>：整个文档树的顶层节点</li>
<li><code>DocumentType</code>：<code>doctype</code>标签（比如<code>&lt;!DOCTYPE html&gt;</code>）</li>
<li><code>Element</code>：网页的各种 HTML 标签（比如<code>&lt;body&gt;</code>、<code>&lt;a&gt;</code>等）</li>
<li><code>Attribute</code>：网页元素的属性（比如<code>class=&quot;right&quot;</code>）</li>
<li><code>Text</code>：标签之间或标签包含的文本</li>
<li><code>Comment</code>：注释</li>
<li><code>DocumentFragment</code>：文档的片段</li>
</ul>
<p>浏览器提供一个原生的节点对象<code>Node</code>，上面这七种节点都继承了<code>Node</code>，因此具有一些共同的属性和方法。</p>
<h2 id="节点树"><a href="#节点树" class="headerlink" title="节点树"></a>节点树</h2><p>一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是 DOM 树。它有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，就这样层层衍生出一个金字塔结构，倒过来就像一棵树。</p>
<p>浏览器原生提供<code>document</code>节点，代表整个文档。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>;</span><br><span class="line"><span class="comment">// 整个文档树</span></span><br></pre></td></tr></table></figure>

<p>文档的第一层只有一个节点，就是 HTML 网页的第一个标签<code>&lt;html&gt;</code>，它构成了树结构的根节点（root node），其他 HTML 标签节点都是它的下级节点。</p>
<p>除了根节点，其他节点都有三种层级关系。</p>
<ul>
<li>父节点关系（parentNode）：直接的那个上级节点</li>
<li>子节点关系（childNodes）：直接的下级节点</li>
<li>同级节点关系（sibling）：拥有同一个父节点的节点</li>
</ul>
<p>DOM 提供操作接口，用来获取这三种关系的节点。比如，子节点接口包括<code>firstChild</code>（第一个子节点）和<code>lastChild</code>（最后一个子节点）等属性，同级节点接口包括<code>nextSibling</code>（紧邻在后的那个同级节点）和<code>previousSibling</code>（紧邻在前的那个同级节点）属性。</p>
<h1 id="Node-接口的属性"><a href="#Node-接口的属性" class="headerlink" title="Node 接口的属性"></a>Node 接口的属性</h1><p>所有 DOM 节点都继承了 Node 接口，拥有一些共同的属性和方法。这是 DOM 操作的基础。</p>
<h2 id="Node-nodeType"><a href="#Node-nodeType" class="headerlink" title="Node.nodeType"></a>Node.nodeType</h2><p><code>nodeType</code>属性返回一个整数值，表示节点的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.nodeType; <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，文档节点的类型值为 9。</p>
<p>Node 对象定义了几个常量，对应这些类型值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.nodeType === Node.DOCUMENT_NODE; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，文档节点的<code>nodeType</code>属性等于常量<code>Node.DOCUMENT_NODE</code>。</p>
<p>不同节点的<code>nodeType</code>属性值和对应的常量如下。</p>
<ul>
<li>文档节点（document）：9，对应常量<code>Node.DOCUMENT_NODE</code></li>
<li>元素节点（element）：1，对应常量<code>Node.ELEMENT_NODE</code></li>
<li>属性节点（attr）：2，对应常量<code>Node.ATTRIBUTE_NODE</code></li>
<li>文本节点（text）：3，对应常量<code>Node.TEXT_NODE</code></li>
<li>文档片断节点（DocumentFragment）：11，对应常量<code>Node.DOCUMENT_FRAGMENT_NODE</code></li>
<li>文档类型节点（DocumentType）：10，对应常量<code>Node.DOCUMENT_TYPE_NODE</code></li>
<li>注释节点（Comment）：8，对应常量<code>Node.COMMENT_NODE</code></li>
</ul>
<p>确定节点类型时，使用<code>nodeType</code>属性是常用方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="built_in">document</span>.documentElement.firstChild;</span><br><span class="line"><span class="keyword">if</span> (node.nodeType === Node.ELEMENT_NODE) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;该节点是元素节点&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Node-nodeName"><a href="#Node-nodeName" class="headerlink" title="Node.nodeName"></a>Node.nodeName</h2><p><code>nodeName</code>属性返回节点的名称。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;d1&quot;&gt;hello world&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>);</span><br><span class="line">div.nodeName; <span class="comment">// &quot;DIV&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，元素节点<code>&lt;div&gt;</code>的<code>nodeName</code>属性就是大写的标签名<code>DIV</code>。</p>
<p>不同节点的<code>nodeName</code>属性值如下。</p>
<ul>
<li>文档节点（document）：<code>#document</code></li>
<li>元素节点（element）：大写的标签名</li>
<li>属性节点（attr）：属性的名称</li>
<li>文本节点（text）：<code>#text</code></li>
<li>文档片断节点（DocumentFragment）：<code>#document-fragment</code></li>
<li>文档类型节点（DocumentType）：文档的类型</li>
<li>注释节点（Comment）：<code>#comment</code></li>
</ul>
<h2 id="Node-nodeValue"><a href="#Node-nodeValue" class="headerlink" title="Node.nodeValue"></a>Node.nodeValue</h2><p><code>nodeValue</code>属性返回一个字符串，表示当前节点本身的文本值，该属性可读写。</p>
<p>只有文本节点（text）和注释节点（comment）有文本值，因此这两类节点的<code>nodeValue</code>可以返回结果，其他类型的节点一律返回<code>null</code>。同样的，也只有这两类节点可以设置<code>nodeValue</code>属性的值，其他类型的节点设置无效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;d1&quot;&gt;hello world&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>);</span><br><span class="line">div.nodeValue; <span class="comment">// null</span></span><br><span class="line">div.firstChild.nodeValue; <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>div</code>是元素节点，<code>nodeValue</code>属性返回<code>null</code>。<code>div.firstChild</code>是文本节点，所以可以返回文本值。</p>
<h2 id="Node-textContent"><a href="#Node-textContent" class="headerlink" title="Node.textContent"></a>Node.textContent</h2><p><code>textContent</code>属性返回当前节点和它的所有后代节点的文本内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;divA&quot;&gt;This is &lt;span&gt;some&lt;/span&gt; text&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;divA&quot;</span>).textContent;</span><br><span class="line"><span class="comment">// This is some text</span></span><br></pre></td></tr></table></figure>

<p><code>textContent</code>属性自动忽略当前节点内部的 HTML 标签，返回所有文本内容。</p>
<p>该属性是可读写的，设置该属性的值，会用一个新的文本节点，替换所有原来的子节点。它还有一个好处，就是自动对 HTML 标签转义。这很适合用于用户提供的内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;foo&quot;</span>).textContent = <span class="string">&quot;&lt;p&gt;GoodBye!&lt;/p&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码在插入文本时，会将<code>&lt;p&gt;</code>标签解释为文本，而不会当作标签处理。</p>
<p>对于文本节点（text）和注释节点（comment），<code>textContent</code>属性的值与<code>nodeValue</code>属性相同。对于其他类型的节点，该属性会将每个子节点的内容连接在一起返回，但是不包括注释节点。如果一个节点没有子节点，则返回空字符串。</p>
<p>文档节点（document）和文档类型节点（doctype）的<code>textContent</code>属性为<code>null</code>。如果要读取整个文档的内容，可以使用<code>document.documentElement.textContent</code>。</p>
<h2 id="Node-baseURI"><a href="#Node-baseURI" class="headerlink" title="Node.baseURI"></a>Node.baseURI</h2><p><code>baseURI</code>属性返回一个字符串，表示当前网页的绝对路径。浏览器根据这个属性，计算网页上的相对路径的 URL。该属性为只读。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前网页的网址为</span></span><br><span class="line"><span class="comment">// http://www.example.com/index.html</span></span><br><span class="line"><span class="built_in">document</span>.baseURI;</span><br><span class="line"><span class="comment">// &quot;http://www.example.com/index.html&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果无法读到网页的 URL，<code>baseURI</code>属性返回<code>null</code>。</p>
<p>该属性的值一般由当前网址的 URL（即<code>window.location</code>属性）决定，但是可以使用 HTML 的<code>&lt;base&gt;</code>标签，改变该属性的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://www.example.com/page.html&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置了以后，<code>baseURI</code>属性就返回<code>&lt;base&gt;</code>标签设置的值。</p>
<h2 id="Node-ownerDocument"><a href="#Node-ownerDocument" class="headerlink" title="Node.ownerDocument"></a>Node.ownerDocument</h2><p><code>Node.ownerDocument</code>属性返回当前节点所在的顶层文档对象，即<code>document</code>对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = p.ownerDocument;</span><br><span class="line">d === <span class="built_in">document</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>document</code>对象本身的<code>ownerDocument</code>属性，返回<code>null</code>。</p>
<h2 id="Node-nextSibling"><a href="#Node-nextSibling" class="headerlink" title="Node.nextSibling"></a>Node.nextSibling</h2><p><code>Node.nextSibling</code>属性返回紧跟在当前节点后面的第一个同级节点。如果当前节点后面没有同级节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;d1&quot;&gt;hello&lt;/div&gt;&lt;div id=&quot;d2&quot;&gt;world&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d2&quot;</span>);</span><br><span class="line"></span><br><span class="line">d1.nextSibling === d2; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>d1.nextSibling</code>就是紧跟在<code>d1</code>后面的同级节点<code>d2</code>。</p>
<p>注意，该属性还包括文本节点和注释节点（<code>&lt;!-- comment --&gt;</code>）。因此如果当前节点后面有空格，该属性会返回一个文本节点，内容为空格。</p>
<p><code>nextSibling</code>属性可以用来遍历所有子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>).firstChild;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (el !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el.nodeName);</span><br><span class="line">  el = el.nextSibling;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码遍历<code>div1</code>节点的所有子节点。</p>
<h2 id="Node-previousSibling"><a href="#Node-previousSibling" class="headerlink" title="Node.previousSibling"></a>Node.previousSibling</h2><p><code>previousSibling</code>属性返回当前节点前面的、距离最近的一个同级节点。如果当前节点前面没有同级节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;d1&quot;&gt;hello&lt;/div&gt;&lt;div id=&quot;d2&quot;&gt;world&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d2&quot;</span>);</span><br><span class="line"></span><br><span class="line">d2.previousSibling === d1; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>d2.previousSibling</code>就是<code>d2</code>前面的同级节点<code>d1</code>。</p>
<p>注意，该属性还包括文本节点和注释节点。因此如果当前节点前面有空格，该属性会返回一个文本节点，内容为空格。</p>
<h2 id="Node-parentNode"><a href="#Node-parentNode" class="headerlink" title="Node.parentNode"></a>Node.parentNode</h2><p><code>parentNode</code>属性返回当前节点的父节点。对于一个节点来说，它的父节点只可能是三种类型：元素节点（element）、文档节点（document）和文档片段节点（documentfragment）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (node.parentNode) &#123;</span><br><span class="line">  node.parentNode.removeChild(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，通过<code>node.parentNode</code>属性将<code>node</code>节点从文档里面移除。</p>
<p>文档节点（document）和文档片段节点（documentfragment）的父节点都是<code>null</code>。另外，对于那些生成后还没插入 DOM 树的节点，父节点也是<code>null</code>。</p>
<h2 id="Node-parentElement"><a href="#Node-parentElement" class="headerlink" title="Node.parentElement"></a>Node.parentElement</h2><p><code>parentElement</code>属性返回当前节点的父元素节点。如果当前节点没有父节点，或者父节点类型不是元素节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (node.parentElement) &#123;</span><br><span class="line">  node.parentElement.style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，父元素节点的样式设定了红色。</p>
<p>由于父节点只可能是三种类型：元素节点、文档节点（document）和文档片段节点（documentfragment）。<code>parentElement</code>属性相当于把后两种父节点都排除了。</p>
<h2 id="Node-firstChild，Node-lastChild"><a href="#Node-firstChild，Node-lastChild" class="headerlink" title="Node.firstChild，Node.lastChild"></a>Node.firstChild，Node.lastChild</h2><p><code>firstChild</code>属性返回当前节点的第一个子节点，如果当前节点没有子节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;p id=&quot;p1&quot;&gt;&lt;span&gt;First span&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">p1.firstChild.nodeName; <span class="comment">// &quot;SPAN&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>p</code>元素的第一个子节点是<code>span</code>元素。</p>
<p>注意，<code>firstChild</code>返回的除了元素节点，还可能是文本节点或注释节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;p id=&quot;p1&quot;&gt;</span></span><br><span class="line"><span class="comment">//   &lt;span&gt;First span&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//  &lt;/p&gt;</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">p1.firstChild.nodeName; <span class="comment">// &quot;#text&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>p</code>元素与<code>span</code>元素之间有空白字符，这导致<code>firstChild</code>返回的是文本节点。</p>
<p><code>lastChild</code>属性返回当前节点的最后一个子节点，如果当前节点没有子节点，则返回<code>null</code>。用法与<code>firstChild</code>属性相同。</p>
<h2 id="Node-childNodes"><a href="#Node-childNodes" class="headerlink" title="Node.childNodes"></a>Node.childNodes</h2><p><code>childNodes</code>属性返回一个类似数组的对象（<code>NodeList</code>集合），成员包括当前节点的所有子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&quot;</span>).childNodes;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>children</code>就是<code>ul</code>元素的所有子节点。</p>
<p>使用该属性，可以遍历某个节点的所有子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> children = div.childNodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文档节点（document）就有两个子节点：文档类型节点（docType）和 HTML 根元素节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.childNodes;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(children[i].nodeType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，文档节点的第一个子节点的类型是 10（即文档类型节点），第二个子节点的类型是 1（即元素节点）。</p>
<p>注意，除了元素节点，<code>childNodes</code>属性的返回值还包括文本节点和注释节点。如果当前节点不包括任何子节点，则返回一个空的<code>NodeList</code>集合。由于<code>NodeList</code>对象是一个动态集合，一旦子节点发生变化，立刻会反映在返回结果之中。</p>
<h2 id="Node-isConnected"><a href="#Node-isConnected" class="headerlink" title="Node.isConnected"></a>Node.isConnected</h2><p><code>isConnected</code>属性返回一个布尔值，表示当前节点是否在文档之中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">test.isConnected; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(test);</span><br><span class="line">test.isConnected; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>test</code>节点是脚本生成的节点，没有插入文档之前，<code>isConnected</code>属性返回<code>false</code>，插入之后返回<code>true</code>。</p>
<h1 id="Node-接口的方法"><a href="#Node-接口的方法" class="headerlink" title="Node 接口的方法"></a>Node 接口的方法</h1><h2 id="Node-appendChild"><a href="#Node-appendChild" class="headerlink" title="Node.appendChild()"></a>Node.appendChild()</h2><p><code>appendChild</code>方法接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点。该方法的返回值就是插入文档的子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(p);</span><br></pre></td></tr></table></figure>

<p>上面代码新建一个<code>&lt;p&gt;</code>节点，将其插入<code>document.body</code>的尾部。</p>
<p>如果参数节点是 DOM 已经存在的节点，<code>appendChild</code>方法会将其从原来的位置，移动到新位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span></span><br><span class="line">  .createElement(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">  .appendChild(<span class="built_in">document</span>.createElement(<span class="string">&quot;b&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>上面代码的返回值是<code>&lt;b&gt;&lt;/b&gt;</code>，而不是<code>&lt;div&gt;&lt;/div&gt;</code>。</p>
<p>如果<code>appendChild</code>方法的参数是<code>DocumentFragment</code>节点，那么插入的是<code>DocumentFragment</code>的所有子节点，而不是<code>DocumentFragment</code>节点本身。返回值是一个空的<code>DocumentFragment</code>节点。</p>
<h2 id="Node-hasChildNodes"><a href="#Node-hasChildNodes" class="headerlink" title="Node.hasChildNodes()"></a>Node.hasChildNodes()</h2><p><code>hasChildNodes</code>方法返回一个布尔值，表示当前节点是否有子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="built_in">document</span>.getElementById(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foo.hasChildNodes()) &#123;</span><br><span class="line">  foo.removeChild(foo.childNodes[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码表示，如果<code>foo</code>节点有子节点，就移除第一个子节点。</p>
<p>注意，子节点包括所有节点，哪怕节点只包含一个空格，<code>hasChildNodes</code>方法也会返回<code>true</code>。</p>
<p>判断一个节点有没有子节点，有许多种方法，下面是其中的三种。</p>
<ul>
<li><code>node.hasChildNodes()</code></li>
<li><code>node.firstChild !== null</code></li>
<li><code>node.childNodes &amp;&amp; node.childNodes.length &gt; 0</code></li>
</ul>
<p><code>hasChildNodes</code>方法结合<code>firstChild</code>属性和<code>nextSibling</code>属性，可以遍历当前节点的所有后代节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DOMComb</span>(<span class="params">parent, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (parent.hasChildNodes()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> node = parent.firstChild; node; node = node.nextSibling) &#123;</span><br><span class="line">      DOMComb(node, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  callback(parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line">DOMComb(<span class="built_in">document</span>.body, <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>DOMComb</code>函数的第一个参数是某个指定的节点，第二个参数是回调函数。这个回调函数会依次作用于指定节点，以及指定节点的所有后代节点。</p>
<h2 id="Node-cloneNode"><a href="#Node-cloneNode" class="headerlink" title="Node.cloneNode()"></a>Node.cloneNode()</h2><p><code>cloneNode</code>方法用于克隆一个节点。它接受一个布尔值作为参数，表示是否同时克隆子节点。它的返回值是一个克隆出来的新节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cloneUL = <span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&quot;</span>).cloneNode(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>该方法有一些使用注意点。</p>
<p>（1）克隆一个节点，会拷贝该节点的所有属性，但是会丧失<code>addEventListener</code>方法和<code>on-</code>属性（即<code>node.onclick = fn</code>），添加在这个节点上的事件回调函数。</p>
<p>（2）该方法返回的节点不在文档之中，即没有任何父节点，必须使用诸如<code>Node.appendChild</code>这样的方法添加到文档之中。</p>
<p>（3）克隆一个节点之后，DOM 有可能出现两个有相同<code>id</code>属性（即<code>id=&quot;xxx&quot;</code>）的网页元素，这时应该修改其中一个元素的<code>id</code>属性。如果原节点有<code>name</code>属性，可能也需要修改。</p>
<h2 id="Node-insertBefore"><a href="#Node-insertBefore" class="headerlink" title="Node.insertBefore()"></a>Node.insertBefore()</h2><p><code>insertBefore</code>方法用于将某个节点插入父节点内部的指定位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> insertedNode = parentNode.insertBefore(newNode, referenceNode);</span><br></pre></td></tr></table></figure>

<p><code>insertBefore</code>方法接受两个参数，第一个参数是所要插入的节点<code>newNode</code>，第二个参数是父节点<code>parentNode</code>内部的一个子节点<code>referenceNode</code>。<code>newNode</code>将插在<code>referenceNode</code>这个子节点的前面。返回值是插入的新节点<code>newNode</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(p, <span class="built_in">document</span>.body.firstChild);</span><br></pre></td></tr></table></figure>

<p>上面代码中，新建一个<code>&lt;p&gt;</code>节点，插在<code>document.body.firstChild</code>的前面，也就是成为<code>document.body</code>的第一个子节点。</p>
<p>如果<code>insertBefore</code>方法的第二个参数为<code>null</code>，则新节点将插在当前节点内部的最后位置，即变成最后一个子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(p, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>p</code>将成为<code>document.body</code>的最后一个子节点。这也说明<code>insertBefore</code>的第二个参数不能省略。</p>
<p>注意，如果所要插入的节点是当前 DOM 现有的节点，则该节点将从原有的位置移除，插入新的位置。</p>
<p>由于不存在<code>insertAfter</code>方法，如果新节点要插在父节点的某个子节点后面，可以用<code>insertBefore</code>方法结合<code>nextSibling</code>属性模拟。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">parent.insertBefore(s1, s2.nextSibling);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>parent</code>是父节点，<code>s1</code>是一个全新的节点，<code>s2</code>是可以将<code>s1</code>节点，插在<code>s2</code>节点的后面。如果<code>s2</code>是当前节点的最后一个子节点，则<code>s2.nextSibling</code>返回<code>null</code>，这时<code>s1</code>节点会插在当前节点的最后，变成当前节点的最后一个子节点，等于紧跟在<code>s2</code>的后面。</p>
<p>如果要插入的节点是<code>DocumentFragment</code>类型，那么插入的将是<code>DocumentFragment</code>的所有子节点，而不是<code>DocumentFragment</code>节点本身。返回值将是一个空的<code>DocumentFragment</code>节点。</p>
<h2 id="Node-removeChild"><a href="#Node-removeChild" class="headerlink" title="Node.removeChild()"></a>Node.removeChild()</h2><p><code>removeChild</code>方法接受一个子节点作为参数，用于从当前节点移除该子节点。返回值是移除的子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divA = <span class="built_in">document</span>.getElementById(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">divA.parentNode.removeChild(divA);</span><br></pre></td></tr></table></figure>

<p>上面代码移除了<code>divA</code>节点。注意，这个方法是在<code>divA</code>的父节点上调用的，不是在<code>divA</code>上调用的。</p>
<p>下面是如何移除当前节点的所有子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;top&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (element.firstChild) &#123;</span><br><span class="line">  element.removeChild(element.firstChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被移除的节点依然存在于内存之中，但不再是 DOM 的一部分。所以，一个节点移除以后，依然可以使用它，比如插入到另一个节点下面。</p>
<p>如果参数节点不是当前节点的子节点，<code>removeChild</code>方法将报错。</p>
<h2 id="Node-replaceChild"><a href="#Node-replaceChild" class="headerlink" title="Node.replaceChild()"></a>Node.replaceChild()</h2><p><code>replaceChild</code>方法用于将一个新的节点，替换当前节点的某一个子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> replacedNode = parentNode.replaceChild(newChild, oldChild);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>replaceChild</code>方法接受两个参数，第一个参数<code>newChild</code>是用来替换的新节点，第二个参数<code>oldChild</code>是将要替换走的子节点。返回值是替换走的那个节点<code>oldChild</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divA = <span class="built_in">document</span>.getElementById(<span class="string">&quot;divA&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> newSpan = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">newSpan.textContent = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">divA.parentNode.replaceChild(newSpan, divA);</span><br></pre></td></tr></table></figure>

<p>上面代码是如何将指定节点<code>divA</code>替换走。</p>
<h2 id="Node-contains"><a href="#Node-contains" class="headerlink" title="Node.contains()"></a>Node.contains()</h2><p><code>contains</code>方法返回一个布尔值，表示参数节点是否满足以下三个条件之一。</p>
<ul>
<li>参数节点为当前节点。</li>
<li>参数节点为当前节点的子节点。</li>
<li>参数节点为当前节点的后代节点。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.contains(node);</span><br></pre></td></tr></table></figure>

<p>上面代码检查参数节点<code>node</code>，是否包含在当前文档之中。</p>
<p>注意，当前节点传入<code>contains</code>方法，返回<code>true</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">nodeA.contains(nodeA); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Node-compareDocumentPosition"><a href="#Node-compareDocumentPosition" class="headerlink" title="Node.compareDocumentPosition()"></a>Node.compareDocumentPosition()</h2><p><code>compareDocumentPosition</code>方法的用法，与<code>contains</code>方法完全一致，返回一个七个比特位的二进制值，表示参数节点与当前节点的关系。</p>
<table>
<thead>
<tr>
<th>二进制值</th>
<th>十进制值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>000000</td>
<td>0</td>
<td>两个节点相同</td>
</tr>
<tr>
<td>000001</td>
<td>1</td>
<td>两个节点不在同一个文档（即有一个节点不在当前文档）</td>
</tr>
<tr>
<td>000010</td>
<td>2</td>
<td>参数节点在当前节点的前面</td>
</tr>
<tr>
<td>000100</td>
<td>4</td>
<td>参数节点在当前节点的后面</td>
</tr>
<tr>
<td>001000</td>
<td>8</td>
<td>参数节点包含当前节点</td>
</tr>
<tr>
<td>010000</td>
<td>16</td>
<td>当前节点包含参数节点</td>
</tr>
<tr>
<td>100000</td>
<td>32</td>
<td>浏览器内部使用</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;mydiv&quot;&gt;</span></span><br><span class="line"><span class="comment">//   &lt;form&gt;&lt;input id=&quot;test&quot; /&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">div.compareDocumentPosition(input); <span class="comment">// 20</span></span><br><span class="line">input.compareDocumentPosition(div); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，节点<code>div</code>包含节点<code>input</code>（二进制<code>010000</code>），而且节点<code>input</code>在节点<code>div</code>的后面（二进制<code>000100</code>），所以第一个<code>compareDocumentPosition</code>方法返回<code>20</code>（二进制<code>010100</code>，即<code>010000 + 000100</code>），第二个<code>compareDocumentPosition</code>方法返回<code>10</code>（二进制<code>001010</code>）。</p>
<p>由于<code>compareDocumentPosition</code>返回值的含义，定义在每一个比特位上，所以如果要检查某一种特定的含义，就需要使用比特位运算符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.head;</span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">if</span> (head.compareDocumentPosition(body) &amp; <span class="number">4</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;文档结构正确&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;&lt;body&gt; 不能在 &lt;head&gt; 前面&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>compareDocumentPosition</code>的返回值与<code>4</code>（又称掩码）进行与运算（<code>&amp;</code>），得到一个布尔值，表示<code>&lt;head&gt;</code>是否在<code>&lt;body&gt;</code>前面。</p>
<h2 id="Node-isEqualNode-，Node-isSameNode"><a href="#Node-isEqualNode-，Node-isSameNode" class="headerlink" title="Node.isEqualNode()，Node.isSameNode()"></a>Node.isEqualNode()，Node.isSameNode()</h2><p><code>isEqualNode</code>方法返回一个布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line">p1.isEqualNode(p2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>isSameNode</code>方法返回一个布尔值，表示两个节点是否为同一个节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line">p1.isSameNode(p2); <span class="comment">// false</span></span><br><span class="line">p1.isSameNode(p1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Node-normalize"><a href="#Node-normalize" class="headerlink" title="Node.normalize()"></a>Node.normalize()</h2><p><code>normailize</code>方法用于清理当前节点内部的所有文本节点（text）。它会去除空的文本节点，并且将毗邻的文本节点合并成一个，也就是说不存在空的文本节点，以及毗邻的文本节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wrapper = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">wrapper.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Part 1 &quot;</span>));</span><br><span class="line">wrapper.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Part 2 &quot;</span>));</span><br><span class="line"></span><br><span class="line">wrapper.childNodes.length; <span class="comment">// 2</span></span><br><span class="line">wrapper.normalize();</span><br><span class="line">wrapper.childNodes.length; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上面代码使用<code>normalize</code>方法之前，<code>wrapper</code>节点有两个毗邻的文本子节点。使用<code>normalize</code>方法之后，两个文本子节点被合并成一个。</p>
<p>该方法是<code>Text.splitText</code>的逆方法，可以查看《Text 节点对象》一章，了解更多内容。</p>
<h2 id="Node-getRootNode"><a href="#Node-getRootNode" class="headerlink" title="Node.getRootNode()"></a>Node.getRootNode()</h2><p><code>getRootNode</code>方法返回当前节点所在文档的根节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.firstChild.getRootNode() === <span class="built_in">document</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="NodeList-接口"><a href="#NodeList-接口" class="headerlink" title="NodeList 接口"></a>NodeList 接口</h1><p>节点都是单个对象，有时需要一种数据结构，能够容纳多个节点。DOM 提供两种节点集合，用于容纳多个节点：<code>NodeList</code>和<code>HTMLCollection</code>。</p>
<p>这两种集合都属于接口规范。许多 DOM 属性和方法，返回的结果是<code>NodeList</code>实例或<code>HTMLCollection</code>实例。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>NodeList</code>实例是一个类似数组的对象，它的成员是节点对象。通过以下方法可以得到<code>NodeList</code>实例。</p>
<ul>
<li><code>Node.childNodes</code></li>
<li><code>document.querySelectorAll()</code>、<code>document.getElementsByTagName()</code>等节点搜索方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.childNodes <span class="keyword">instanceof</span> NodeList; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>NodeList</code>实例很像数组，可以使用<code>length</code>属性和<code>forEach</code>方法。但是，它不是数组，不能使用<code>pop</code>或<code>push</code>之类数组特有的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.body.childNodes;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(children); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">children.length; <span class="comment">// 34</span></span><br><span class="line">children.forEach(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>

<p>上面代码中，NodeList 实例<code>children</code>不是数组，但是具有<code>length</code>属性和<code>forEach</code>方法。</p>
<p>如果<code>NodeList</code>实例要使用数组方法，可以将其转为真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.body.childNodes;</span><br><span class="line"><span class="keyword">var</span> nodeArr = <span class="built_in">Array</span>.prototype.slice.call(children);</span><br></pre></td></tr></table></figure>

<p>除了使用<code>forEach</code>方法遍历 NodeList 实例，还可以使用<code>for</code>循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.body.childNodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = children[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，NodeList 实例可能是动态集合，也可能是静态集合。所谓动态集合就是一个活的集合，DOM 删除或新增一个相关节点，都会立刻反映在 NodeList 实例。目前，只有<code>Node.childNodes</code>返回的是一个动态集合，其他的 NodeList 都是静态集合。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.body.childNodes;</span><br><span class="line">children.length; <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>));</span><br><span class="line">children.length; <span class="comment">// 19</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，文档增加一个子节点，NodeList 实例<code>children</code>的<code>length</code>属性就增加了 1。</p>
<h2 id="NodeList-prototype-length"><a href="#NodeList-prototype-length" class="headerlink" title="NodeList.prototype.length"></a>NodeList.prototype.length</h2><p><code>length</code>属性返回 NodeList 实例包含的节点数量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;xxx&quot;</span>).length;</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>document.getElementsByTagName</code>返回一个 NodeList 集合。对于那些不存在的 HTML 标签，<code>length</code>属性返回<code>0</code>。</p>
<h2 id="NodeList-prototype-forEach"><a href="#NodeList-prototype-forEach" class="headerlink" title="NodeList.prototype.forEach()"></a>NodeList.prototype.forEach()</h2><p><code>forEach</code>方法用于遍历 NodeList 的所有成员。它接受一个回调函数作为参数，每一轮遍历就执行一次这个回调函数，用法与数组实例的<code>forEach</code>方法完全一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.body.childNodes;</span><br><span class="line">children.forEach(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">item, i, list</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;, <span class="built_in">this</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，回调函数<code>f</code>的三个参数依次是当前成员、位置和当前 NodeList 实例。<code>forEach</code>方法的第二个参数，用于绑定回调函数内部的<code>this</code>，该参数可省略。</p>
<h2 id="NodeList-prototype-item"><a href="#NodeList-prototype-item" class="headerlink" title="NodeList.prototype.item()"></a>NodeList.prototype.item()</h2><p><code>item</code>方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.childNodes.item(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>item(0)</code>返回第一个成员。</p>
<p>如果参数值大于实际长度，或者索引不合法（比如负数），<code>item</code>方法返回<code>null</code>。如果省略参数，<code>item</code>方法会报错。</p>
<p>所有类似数组的对象，都可以使用方括号运算符取出成员。一般情况下，都是使用方括号运算符，而不使用<code>item</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.childNodes[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<h2 id="NodeList-prototype-keys-，NodeList-prototype-values-，NodeList-prototype-entries"><a href="#NodeList-prototype-keys-，NodeList-prototype-values-，NodeList-prototype-entries" class="headerlink" title="NodeList.prototype.keys()，NodeList.prototype.values()，NodeList.prototype.entries()"></a>NodeList.prototype.keys()，NodeList.prototype.values()，NodeList.prototype.entries()</h2><p>这三个方法都返回一个 ES6 的遍历器对象，可以通过<code>for...of</code>循环遍历获取每一个成员的信息。区别在于，<code>keys()</code>返回键名的遍历器，<code>values()</code>返回键值的遍历器，<code>entries()</code>返回的遍历器同时包含键名和键值的信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.body.childNodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> children.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> children.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #text</span></span><br><span class="line"><span class="comment">// &lt;script&gt;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> entry <span class="keyword">of</span> children.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Array [ 0, #text ]</span></span><br><span class="line"><span class="comment">// Array [ 1, &lt;script&gt; ]</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h1 id="HTMLCollection-接口"><a href="#HTMLCollection-接口" class="headerlink" title="HTMLCollection 接口"></a>HTMLCollection 接口</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p><code>HTMLCollection</code>是一个节点对象的集合，只能包含元素节点（element），不能包含其他类型的节点。它的返回值是一个类似数组的对象，但是与<code>NodeList</code>接口不同，<code>HTMLCollection</code>没有<code>forEach</code>方法，只能使用<code>for</code>循环遍历。</p>
<p>返回<code>HTMLCollection</code>实例的，主要是一些<code>Document</code>对象的集合属性，比如<code>document.links</code>、<code>docuement.forms</code>、<code>document.images</code>等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.links <span class="keyword">instanceof</span> HTMLCollection; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>HTMLCollection</code>实例都是动态集合，节点的变化会实时反映在集合中。</p>
<p>如果元素节点有<code>id</code>或<code>name</code>属性，那么<code>HTMLCollection</code>实例上面，可以使用<code>id</code>属性或<code>name</code>属性引用该节点元素。如果没有对应的节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;img id=&quot;pic&quot; src=&quot;http://example.com/foo.jpg&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pic = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pic&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.images.pic === pic; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>document.images</code>是一个<code>HTMLCollection</code>实例，可以通过<code>&lt;img&gt;</code>元素的<code>id</code>属性值，从<code>HTMLCollection</code>实例上取到这个元素。</p>
<h2 id="HTMLCollection-prototype-length"><a href="#HTMLCollection-prototype-length" class="headerlink" title="HTMLCollection.prototype.length"></a>HTMLCollection.prototype.length</h2><p><code>length</code>属性返回<code>HTMLCollection</code>实例包含的成员数量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.links.length; <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>

<h2 id="HTMLCollection-prototype-item"><a href="#HTMLCollection-prototype-item" class="headerlink" title="HTMLCollection.prototype.item()"></a>HTMLCollection.prototype.item()</h2><p><code>item</code>方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.images;</span><br><span class="line"><span class="keyword">var</span> img0 = c.item(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>item(0)</code>表示返回 0 号位置的成员。由于方括号运算符也具有同样作用，而且使用更方便，所以一般情况下，总是使用方括号运算符。</p>
<p>如果参数值超出成员数量或者不合法（比如小于 0），那么<code>item</code>方法返回<code>null</code>。</p>
<h2 id="HTMLCollection-prototype-namedItem"><a href="#HTMLCollection-prototype-namedItem" class="headerlink" title="HTMLCollection.prototype.namedItem()"></a>HTMLCollection.prototype.namedItem()</h2><p><code>namedItem</code>方法的参数是一个字符串，表示<code>id</code>属性或<code>name</code>属性的值，返回对应的元素节点。如果没有对应的节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;img id=&quot;pic&quot; src=&quot;http://example.com/foo.jpg&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pic = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pic&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.images.namedItem(<span class="string">&quot;pic&quot;</span>) === pic; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="ParentNode-接口"><a href="#ParentNode-接口" class="headerlink" title="ParentNode 接口"></a>ParentNode 接口</h1><p>节点对象除了继承 Node 接口以外，还会继承其他接口。<code>ParentNode</code>接口表示当前节点是一个父节点，提供一些处理子节点的方法。<code>ChildNode</code>接口表示当前节点是一个子节点，提供一些相关方法。</p>
<p>如果当前节点是父节点，就会继承<code>ParentNode</code>接口。由于只有元素节点（element）、文档节点（document）和文档片段节点（documentFragment）拥有子节点，因此只有这三类节点会继承<code>ParentNode</code>接口。</p>
<h2 id="ParentNode-children"><a href="#ParentNode-children" class="headerlink" title="ParentNode.children"></a>ParentNode.children</h2><p><code>children</code>属性返回一个<code>HTMLCollection</code>实例，成员是当前节点的所有元素子节点。该属性只读。</p>
<p>下面是遍历某个节点的所有元素子节点的示例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; el.children.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，<code>children</code>属性只包括元素子节点，不包括其他类型的子节点（比如文本子节点）。如果没有元素类型的子节点，返回值<code>HTMLCollection</code>实例的<code>length</code>属性为<code>0</code>。</p>
<p>另外，<code>HTMLCollection</code>是动态集合，会实时反映 DOM 的任何变化。</p>
<h2 id="ParentNode-firstElementChild"><a href="#ParentNode-firstElementChild" class="headerlink" title="ParentNode.firstElementChild"></a>ParentNode.firstElementChild</h2><p><code>firstElementChild</code>属性返回当前节点的第一个元素子节点。如果没有任何元素子节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.firstElementChild.nodeName;</span><br><span class="line"><span class="comment">// &quot;HTML&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>document</code>节点的第一个元素子节点是<code>&lt;HTML&gt;</code>。</p>
<h2 id="ParentNode-lastElementChild"><a href="#ParentNode-lastElementChild" class="headerlink" title="ParentNode.lastElementChild"></a>ParentNode.lastElementChild</h2><p><code>lastElementChild</code>属性返回当前节点的最后一个元素子节点，如果不存在任何元素子节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.lastElementChild.nodeName;</span><br><span class="line"><span class="comment">// &quot;HTML&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>document</code>节点的最后一个元素子节点是<code>&lt;HTML&gt;</code>（因为<code>document</code>只包含这一个元素子节点）。</p>
<h2 id="ParentNode-childElementCount"><a href="#ParentNode-childElementCount" class="headerlink" title="ParentNode.childElementCount"></a>ParentNode.childElementCount</h2><p><code>childElementCount</code>属性返回一个整数，表示当前节点的所有元素子节点的数目。如果不包含任何元素子节点，则返回<code>0</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.childElementCount; <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>

<h2 id="ParentNode-append-，ParentNode-prepend"><a href="#ParentNode-append-，ParentNode-prepend" class="headerlink" title="ParentNode.append()，ParentNode.prepend()"></a>ParentNode.append()，ParentNode.prepend()</h2><p><code>append</code>方法为当前节点追加一个或多个子节点，位置是最后一个元素子节点的后面。</p>
<p>该方法不仅可以添加元素子节点，还可以添加文本子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.body;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素子节点</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">parent.append(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加文本子节点</span></span><br><span class="line">parent.append(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加多个元素子节点</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">parent.append(p1, p2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素子节点和文本子节点</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">parent.append(<span class="string">&quot;Hello&quot;</span>, p);</span><br></pre></td></tr></table></figure>

<p>注意，该方法没有返回值。</p>
<p><code>prepend</code>方法为当前节点追加一个或多个子节点，位置是第一个元素子节点的前面。它的用法与<code>append</code>方法完全一致，也是没有返回值。</p>
<h1 id="ChildNode-接口"><a href="#ChildNode-接口" class="headerlink" title="ChildNode 接口"></a>ChildNode 接口</h1><p>如果一个节点有父节点，那么该节点就继承了<code>ChildNode</code>接口。</p>
<h2 id="ChildNode-remove"><a href="#ChildNode-remove" class="headerlink" title="ChildNode.remove()"></a>ChildNode.remove()</h2><p><code>remove</code>方法用于从父节点移除当前节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">el.remove();</span><br></pre></td></tr></table></figure>

<p>上面代码在 DOM 里面移除了<code>el</code>节点。</p>
<h2 id="ChildNode-before-，ChildNode-after"><a href="#ChildNode-before-，ChildNode-after" class="headerlink" title="ChildNode.before()，ChildNode.after()"></a>ChildNode.before()，ChildNode.after()</h2><p><code>before</code>方法用于在当前节点的前面，插入一个或多个同级节点。两者拥有相同的父节点。</p>
<p>注意，该方法不仅可以插入元素节点，还可以插入文本节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素节点</span></span><br><span class="line">el.before(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入文本节点</span></span><br><span class="line">el.before(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入多个元素节点</span></span><br><span class="line">el.before(p, p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素节点和文本节点</span></span><br><span class="line">el.before(p, <span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>after</code>方法用于在当前节点的后面，插入一个或多个同级节点，两者拥有相同的父节点。用法与<code>before</code>方法完全相同。</p>
<h2 id="ChildNode-replaceWith"><a href="#ChildNode-replaceWith" class="headerlink" title="ChildNode.replaceWith()"></a>ChildNode.replaceWith()</h2><p><code>replaceWith</code>方法使用参数节点，替换当前节点。参数可以是元素节点，也可以是文本节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">el.replaceWith(span);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>el</code>节点将被<code>span</code>节点替换。</p>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>koa 框架</title>
    <url>/2020/09/11/nodeJs/koa/</url>
    <content><![CDATA[<p>Koa 是一个类似于 Express 的 Web 开发框架，创始人也是同一个人。它的主要特点是，使用了 ES6 的 Generator 函数，进行了架构的重新设计。也就是说，Koa 的原理和内部结构很像 Express，但是语法和内部结构进行了升级。</p>
<p>官方<a href="https://github.com/koajs/koa/blob/master/docs/faq.md#why-isnt-koa-just-express-40">faq</a>有这样一个问题：“为什么 koa 不是 Express 4.0？”，回答是这样的：“Koa 与 Express 有很大差异，整个设计都是不同的，所以如果将 Express 3.0 按照这种写法升级到 4.0，就意味着重写整个程序。所以，我们觉得创造一个新的库，是更合适的做法。”</p>
<h1 id="Koa-应用"><a href="#Koa-应用" class="headerlink" title="Koa 应用"></a>Koa 应用</h1><p>一个 Koa 应用就是一个对象，包含了一个 middleware 数组，这个数组由一组 Generator 函数组成。这些函数负责对 HTTP 请求进行各种加工，比如生成缓存、指定代理、请求重定向等等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.body = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，变量 app 就是一个 Koa 应用。它监听 3000 端口，返回一个内容为 Hello World 的网页。</p>
<p>app.use 方法用于向 middleware 数组添加 Generator 函数。</p>
<p>listen 方法指定监听端口，并启动当前应用。它实际上等同于下面的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = koa();</span><br><span class="line">http.createServer(app.callback()).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>Koa 的中间件很像 Express 的中间件，也是对 HTTP 请求进行处理的函数，但是必须是一个 Generator 函数。而且，Koa 的中间件是一个级联式（Cascading）的结构，也就是说，属于是层层调用，第一个中间件调用第二个中间件，第二个调用第三个，以此类推。上游的中间件必须等到下游的中间件返回结果，才会继续执行，这点很像递归。</p>
<p>中间件通过当前应用的 use 方法注册。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// （1）</span></span><br><span class="line">  <span class="keyword">yield</span> next; <span class="comment">// （2）</span></span><br><span class="line">  <span class="keyword">var</span> ms = <span class="keyword">new</span> <span class="built_in">Date</span>() - start; <span class="comment">// （3）</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;%s %s - %s&quot;</span>, <span class="built_in">this</span>.method, <span class="built_in">this</span>.url, ms); <span class="comment">// （4）</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>app.use</code>方法的参数就是中间件，它是一个 Generator 函数，最大的特征就是 function 命令与参数之间，必须有一个星号。Generator 函数的参数 next，表示下一个中间件。</p>
<p>Generator 函数内部使用 yield 命令，将程序的执行权转交给下一个中间件，即<code>yield next</code>，要等到下一个中间件返回结果，才会继续往下执行。上面代码中，Generator 函数体内部，第一行赋值语句首先执行，开始计时，第二行 yield 语句将执行权交给下一个中间件，当前中间件就暂停执行。等到后面的中间件全部执行完成，执行权就回到原来暂停的地方，继续往下执行，这时才会执行第三行，计算这个过程一共花了多少时间，第四行将这个时间打印出来。</p>
<p>下面是一个两个中间件级联的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.body = <span class="string">&quot;header\n&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> saveResults.call(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">this</span>.body += <span class="string">&quot;footer\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">saveResults</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.body += <span class="string">&quot;Results Saved!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，第一个中间件调用第二个中间件 saveResults，它们都向<code>this.body</code>写入内容。最后，<code>this.body</code>的输出如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">header</span><br><span class="line">Results Saved!</span><br><span class="line">footer</span><br></pre></td></tr></table></figure>

<p>只要有一个中间件缺少<code>yield next</code>语句，后面的中间件都不会执行，这一点要引起注意。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;&gt;&gt; one&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> next;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;&lt;&lt; one&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;&gt;&gt; two&quot;</span>);</span><br><span class="line">  <span class="built_in">this</span>.body = <span class="string">&quot;two&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;&lt;&lt; two&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;&gt;&gt; three&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> next;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;&lt;&lt; three&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，因为第二个中间件少了<code>yield next</code>语句，第三个中间件并不会执行。</p>
<p>如果想跳过一个中间件，可以直接在该中间件的第一行语句写上<code>return yield next</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (skip) <span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>由于 Koa 要求中间件唯一的参数就是 next，导致如果要传入其他参数，必须另外写一个返回 Generator 函数的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = format.replace(<span class="string">&quot;:method&quot;</span>, <span class="built_in">this</span>.method).replace(<span class="string">&quot;:url&quot;</span>, <span class="built_in">this</span>.url);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(logger(<span class="string">&quot;:method :url&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>上面代码中，真正的中间件是 logger 函数的返回值，而 logger 函数是可以接受参数的。</p>
<h2 id="多个中间件的合并"><a href="#多个中间件的合并" class="headerlink" title="多个中间件的合并"></a>多个中间件的合并</h2><p>由于中间件的参数统一为 next（意为下一个中间件），因此可以使用<code>.call(this, next)</code>，将多个中间件进行合并。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">random</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;/random&quot;</span> == <span class="built_in">this</span>.path) &#123;</span><br><span class="line">    <span class="built_in">this</span>.body = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">backwards</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;/backwards&quot;</span> == <span class="built_in">this</span>.path) &#123;</span><br><span class="line">    <span class="built_in">this</span>.body = <span class="string">&quot;sdrawkcab&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">pi</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;/pi&quot;</span> == <span class="built_in">this</span>.path) &#123;</span><br><span class="line">    <span class="built_in">this</span>.body = <span class="built_in">String</span>(<span class="built_in">Math</span>.PI);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">all</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> random.call(<span class="built_in">this</span>, backwards.call(<span class="built_in">this</span>, pi.call(<span class="built_in">this</span>, next)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(all);</span><br></pre></td></tr></table></figure>

<p>上面代码中，中间件 all 内部，就是依次调用 random、backwards、pi，后一个中间件就是前一个中间件的参数。</p>
<p>Koa 内部使用 koa-compose 模块，进行同样的操作，下面是它的源码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!next) next = noop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = middleware.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      next = middleware[i].call(<span class="built_in">this</span>, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span>* next;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">noop</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，middleware 是中间件数组。前一个中间件的参数是后一个中间件，依次类推。如果最后一个中间件没有 next 参数，则传入一个空函数。</p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>可以通过<code>this.path</code>属性，判断用户请求的路径，从而起到路由作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.path === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.body = <span class="string">&quot;we are at home!&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.path !== <span class="string">&quot;/&quot;</span>) <span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">  <span class="built_in">this</span>.body = <span class="string">&quot;we are at home!&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下面是多路径的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// normal route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.path !== <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.body = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /404 route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.path !== <span class="string">&quot;/404&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.body = <span class="string">&quot;page not found&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /500 route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.path !== <span class="string">&quot;/500&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.body = <span class="string">&quot;internal server error&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，每一个中间件负责一个路径，如果路径不符合，就传递给下一个中间件。</p>
<p>复杂的路由需要安装 koa-router 插件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>)();</span><br><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myRouter = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">myRouter.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.response.body = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(myRouter.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码对根路径设置路由。</p>
<p>Koa-router 实例提供一系列动词方法，即一种 HTTP 动词对应一种方法。典型的动词方法有以下五种。</p>
<ul>
<li>router.get()</li>
<li>router.post()</li>
<li>router.put()</li>
<li>router.del()</li>
<li>router.patch()</li>
</ul>
<p>这些动词方法可以接受两个参数，第一个是路径模式，第二个是对应的控制器方法（中间件），定义用户请求该路径时服务器行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.body = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>router.get</code>方法的第一个参数是根路径，第二个参数是对应的函数方法。</p>
<p>注意，路径匹配的时候，不会把查询字符串考虑在内。比如，<code>/index?param=xyz</code>匹配路径<code>/index</code>。</p>
<p>有些路径模式比较复杂，Koa-router 允许为路径模式起别名。起名时，别名要添加为动词方法的第一个参数，这时动词方法变成接受三个参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;/users/:id&quot;</span>, <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，路径模式<code>\users\:id</code>的名字就是<code>user</code>。路径的名称，可以用来引用对应的具体路径，比如 url 方法可以根据路径名称，结合给定的参数，生成具体的路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.url(<span class="string">&quot;user&quot;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; &quot;/users/3&quot;</span></span><br><span class="line"></span><br><span class="line">router.url(<span class="string">&quot;user&quot;</span>, &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="comment">// =&gt; &quot;/users/3&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，user 就是路径模式的名称，对应具体路径<code>/users/:id</code>。url 方法的第二个参数 3，表示给定 id 的值是 3，因此最后生成的路径是<code>/users/3</code>。</p>
<p>Koa-router 允许为路径统一添加前缀。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  prefix: <span class="string">&#x27;/users&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, ...); <span class="comment">// 等同于&quot;/users&quot;</span></span><br><span class="line">router.get(<span class="string">&#x27;/:id&#x27;</span>, ...); <span class="comment">// 等同于&quot;/users/:id&quot;</span></span><br></pre></td></tr></table></figure>

<p>路径的参数通过<code>this.params</code>属性获取，该属性返回一个对象，所有路径参数都是该对象的成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问 /programming/how-to-node</span></span><br><span class="line">router.get(<span class="string">&quot;/:category/:title&quot;</span>, <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.params);</span><br><span class="line">  <span class="comment">// =&gt; &#123; category: &#x27;programming&#x27;, title: &#x27;how-to-node&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>param 方法可以针对命名参数，设置验证条件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router</span><br><span class="line">  .get(<span class="string">&quot;/users/:user&quot;</span>, <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.body = <span class="built_in">this</span>.user;</span><br><span class="line">  &#125;)</span><br><span class="line">  .param(<span class="string">&quot;user&quot;</span>, <span class="function"><span class="keyword">function</span>* (<span class="params">id, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> users = [<span class="string">&quot;0号用户&quot;</span>, <span class="string">&quot;1号用户&quot;</span>, <span class="string">&quot;2号用户&quot;</span>];</span><br><span class="line">    <span class="built_in">this</span>.user = users[id];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.user) <span class="keyword">return</span> (<span class="built_in">this</span>.status = <span class="number">404</span>);</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果<code>/users/:user</code>的参数 user 对应的不是有效用户（比如访问<code>/users/3</code>），param 方法注册的中间件会查到，就会返回 404 错误。</p>
<p>redirect 方法会将某个路径的请求，重定向到另一个路径，并返回 301 状态码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.redirect(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;sign-in&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">router.all(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.redirect(<span class="string">&quot;/sign-in&quot;</span>);</span><br><span class="line">  <span class="built_in">this</span>.status = <span class="number">301</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>redirect 方法的第一个参数是请求来源，第二个参数是目的地，两者都可以用路径模式的别名代替。</p>
<h1 id="context-对象"><a href="#context-对象" class="headerlink" title="context 对象"></a>context 对象</h1><p>中间件当中的 this 表示上下文对象 context，代表一次 HTTP 请求和回应，即一次访问/回应的所有信息，都可以从上下文对象获得。context 对象封装了 request 和 response 对象，并且提供了一些辅助方法。每次 HTTP 请求，就会创建一个新的 context 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>; <span class="comment">// is the Context</span></span><br><span class="line">  <span class="built_in">this</span>.request; <span class="comment">// is a koa Request</span></span><br><span class="line">  <span class="built_in">this</span>.response; <span class="comment">// is a koa Response</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>context 对象的很多方法，其实是定义在 ctx.request 对象或 ctx.response 对象上面，比如，ctx.type 和 ctx.length 对应于 ctx.response.type 和 ctx.response.length，ctx.path 和 ctx.method 对应于 ctx.request.path 和 ctx.request.method。</p>
<p>context 对象的全局属性。</p>
<ul>
<li>request：指向 Request 对象</li>
<li>response：指向 Response 对象</li>
<li>req：指向 Node 的 request 对象</li>
<li>res：指向 Node 的 response 对象</li>
<li>app：指向 App 对象</li>
<li>state：用于在中间件传递信息。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.state.user = <span class="keyword">yield</span> User.find(id);</span><br></pre></td></tr></table></figure>

<p>上面代码中，user 属性存放在<code>this.state</code>对象上面，可以被另一个中间件读取。</p>
<p>context 对象的全局方法。</p>
<ul>
<li>throw()：抛出错误，直接决定了 HTTP 回应的状态码。</li>
<li>assert()：如果一个表达式为 false，则抛出一个错误。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.throw(<span class="number">403</span>);</span><br><span class="line"><span class="built_in">this</span>.throw(<span class="string">&quot;name required&quot;</span>, <span class="number">400</span>);</span><br><span class="line"><span class="built_in">this</span>.throw(<span class="string">&quot;something exploded&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.throw(<span class="number">400</span>, <span class="string">&quot;name required&quot;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;name required&quot;</span>);</span><br><span class="line">err.status = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br></pre></td></tr></table></figure>

<p>assert 方法的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">ctx.assert(value, [msg], [status], [properties]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="built_in">this</span>.assert(<span class="built_in">this</span>.user, <span class="number">401</span>, <span class="string">&quot;User not found. Please login!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>以下模块解析 POST 请求的数据。</p>
<ul>
<li>co-body</li>
<li><a href="https://github.com/koajs/body-parser">https://github.com/koajs/body-parser</a></li>
<li><a href="https://github.com/koajs/body-parsers">https://github.com/koajs/body-parsers</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parse = <span class="built_in">require</span>(<span class="string">&#x27;co-body&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// in Koa handler</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="keyword">yield</span> parse(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure>

<h1 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h1><p>Koa 提供内置的错误处理机制，任何中间件抛出的错误都会被捕捉到，引发向客户端返回一个 500 错误，而不会导致进程停止，因此也就不需要 forever 这样的模块重启进程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，中间件内部抛出一个错误，并不会导致 Koa 应用挂掉。Koa 内置的错误处理机制，会捕捉到这个错误。</p>
<p>当然，也可以额外部署自己的错误处理机制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> saveResults();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">this</span>.throw(<span class="number">400</span>, <span class="string">&quot;数据无效&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码自行部署了 try…catch 代码块，一旦产生错误，就用<code>this.throw</code>方法抛出。该方法可以将指定的状态码和错误信息，返回给客户端。</p>
<p>对于未捕获错误，可以设置 error 事件的监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.on(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  log.error(<span class="string">&quot;server error&quot;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>error 事件的监听函数还可以接受上下文对象，作为第二个参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.on(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, ctx</span>) </span>&#123;</span><br><span class="line">  log.error(<span class="string">&quot;server error&quot;</span>, err, ctx);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果一个错误没有被捕获，koa 会向客户端返回一个 500 错误“Internal Server Error”。</p>
<p>this.throw 方法用于向客户端抛出一个错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.throw(<span class="number">403</span>);</span><br><span class="line"><span class="built_in">this</span>.throw(<span class="string">&quot;name required&quot;</span>, <span class="number">400</span>);</span><br><span class="line"><span class="built_in">this</span>.throw(<span class="number">400</span>, <span class="string">&quot;name required&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.throw(<span class="string">&quot;something exploded&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.throw(<span class="string">&quot;name required&quot;</span>, <span class="number">400</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;name required&quot;</span>);</span><br><span class="line">err.status = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br></pre></td></tr></table></figure>

<p><code>this.throw</code>方法的两个参数，一个是错误码，另一个是报错信息。如果省略状态码，默认是 500 错误。</p>
<p><code>this.assert</code>方法用于在中间件之中断言，用法类似于 Node 的 assert 模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.assert(<span class="built_in">this</span>.user, <span class="number">401</span>, <span class="string">&quot;User not found. Please login!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果 this.user 属性不存在，会抛出一个 401 错误。</p>
<p>由于中间件是层级式调用，所以可以把<code>try &#123; yield next &#125;</code>当成第一个中间件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = err.status || <span class="number">500</span>;</span><br><span class="line">    <span class="built_in">this</span>.body = err.message;</span><br><span class="line">    <span class="built_in">this</span>.app.emit(<span class="string">&quot;error&quot;</span>, err, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;some error&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>cookie 的读取和设置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.cookies.get(<span class="string">&quot;view&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.cookies.set(<span class="string">&quot;view&quot;</span>, n);</span><br></pre></td></tr></table></figure>

<p>get 和 set 方法都可以接受第三个参数，表示配置参数。其中的 signed 参数，用于指定 cookie 是否加密。如果指定加密的话，必须用<code>app.keys</code>指定加密短语。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.keys = [<span class="string">&quot;secret1&quot;</span>, <span class="string">&quot;secret2&quot;</span>];</span><br><span class="line"><span class="built_in">this</span>.cookies.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>, &#123; <span class="attr">signed</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>this.cookie 的配置对象的属性如下。</p>
<ul>
<li>signed：cookie 是否加密。</li>
<li>expires：cookie 何时过期</li>
<li>path：cookie 的路径，默认是“/”。</li>
<li>domain：cookie 的域名。</li>
<li>secure：cookie 是否只有 https 请求下才发送。</li>
<li>httpOnly：是否只有服务器可以取到 cookie，默认为 true。</li>
</ul>
<h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&quot;koa-session&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = koa();</span><br><span class="line"></span><br><span class="line">app.keys = [<span class="string">&quot;some secret hurr&quot;</span>];</span><br><span class="line">app.use(session(app));</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="built_in">this</span>.session.views || <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">this</span>.session.views = ++n;</span><br><span class="line">  <span class="built_in">this</span>.body = n + <span class="string">&quot; views&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;listening on port 3000&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h1><p>Request 对象表示 HTTP 请求。</p>
<p>（1）this.request.header</p>
<p>返回一个对象，包含所有 HTTP 请求的头信息。它也可以写成<code>this.request.headers</code>。</p>
<p>（2）this.request.method</p>
<p>返回 HTTP 请求的方法，该属性可读写。</p>
<p>（3）this.request.length</p>
<p>返回 HTTP 请求的 Content-Length 属性，取不到值，则返回 undefined。</p>
<p>（4）this.request.path</p>
<p>返回 HTTP 请求的路径，该属性可读写。</p>
<p>（5）this.request.href</p>
<p>返回 HTTP 请求的完整路径，包括协议、端口和 url。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.request.href;</span><br><span class="line"><span class="comment">// http://example.com/foo/bar?q=1</span></span><br></pre></td></tr></table></figure>

<p>（6）this.request.querystring</p>
<p>返回 HTTP 请求的查询字符串，不含问号。该属性可读写。</p>
<p>（7）this.request.search</p>
<p>返回 HTTP 请求的查询字符串，含问号。该属性可读写。</p>
<p>（8）this.request.host</p>
<p>返回 HTTP 请求的主机（含端口号）。</p>
<p>（9）this.request.hostname</p>
<p>返回 HTTP 的主机名（不含端口号）。</p>
<p>（10）this.request.type</p>
<p>返回 HTTP 请求的 Content-Type 属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ct = <span class="built_in">this</span>.request.type;</span><br><span class="line"><span class="comment">// &quot;image/png&quot;</span></span><br></pre></td></tr></table></figure>

<p>（11）this.request.charset</p>
<p>返回 HTTP 请求的字符集。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.request.charset;</span><br><span class="line"><span class="comment">// &quot;utf-8&quot;</span></span><br></pre></td></tr></table></figure>

<p>（12）this.request.query</p>
<p>返回一个对象，包含了 HTTP 请求的查询字符串。如果没有查询字符串，则返回一个空对象。该属性可读写。</p>
<p>比如，查询字符串<code>color=blue&amp;size=small</code>，会得到以下的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  color: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">  size: <span class="string">&#x27;small&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（13）this.request.fresh</p>
<p>返回一个布尔值，表示缓存是否代表了最新内容。通常与 If-None-Match、ETag、If-Modified-Since、Last-Modified 等缓存头，配合使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.response.set(<span class="string">&#x27;ETag&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查客户端请求的内容是否有变化</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.request.fresh) &#123;</span><br><span class="line">  <span class="built_in">this</span>.response.status = <span class="number">304</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则就表示客户端的内容陈旧了，</span></span><br><span class="line"><span class="comment">// 需要取出新内容</span></span><br><span class="line"><span class="built_in">this</span>.response.body = <span class="keyword">yield</span> db.find(<span class="string">&#x27;something&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>（14）this.request.stale</p>
<p>返回<code>this.request.fresh</code>的相反值。</p>
<p>（15）this.request.protocol</p>
<p>返回 HTTP 请求的协议，https 或者 http。</p>
<p>（16）this.request.secure</p>
<p>返回一个布尔值，表示当前协议是否为 https。</p>
<p>（17）this.request.ip</p>
<p>返回发出 HTTP 请求的 IP 地址。</p>
<p>（18）this.request.subdomains</p>
<p>返回一个数组，表示 HTTP 请求的子域名。该属性必须与 app.subdomainOffset 属性搭配使用。app.subdomainOffset 属性默认为 2，则域名“tobi.ferrets.example.com”返回[“ferrets”, “tobi”]，如果 app.subdomainOffset 设为 3，则返回[“tobi”]。</p>
<p>（19）this.request.is(types…)</p>
<p>返回指定的类型字符串，表示 HTTP 请求的 Content-Type 属性是否为指定类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Content-Type为 text/html; charset=utf-8</span></span><br><span class="line"><span class="built_in">this</span>.request.is(<span class="string">&quot;html&quot;</span>); <span class="comment">// &#x27;html&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.request.is(<span class="string">&quot;text/html&quot;</span>); <span class="comment">// &#x27;text/html&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.request.is(<span class="string">&quot;text/*&quot;</span>, <span class="string">&quot;text/html&quot;</span>); <span class="comment">// &#x27;text/html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Content-Type为 application/json</span></span><br><span class="line"><span class="built_in">this</span>.request.is(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;urlencoded&quot;</span>); <span class="comment">// &#x27;json&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.request.is(<span class="string">&quot;application/json&quot;</span>); <span class="comment">// &#x27;application/json&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.request.is(<span class="string">&quot;html&quot;</span>, <span class="string">&quot;application/*&quot;</span>); <span class="comment">// &#x27;application/json&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果不满足条件，返回 false；如果 HTTP 请求不含数据，则返回 undefined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.is(<span class="string">&quot;html&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>它可以用于过滤 HTTP 请求，比如只允许请求下载图片。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.is(<span class="string">&quot;image/*&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// process</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.throw(<span class="number">415</span>, <span class="string">&quot;images only!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（20）this.request.accepts(types)</p>
<p>检查 HTTP 请求的 Accept 属性是否可接受，如果可接受，则返回指定的媒体类型，否则返回 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Accept: text/html</span></span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;html&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accept: text/*, application/json</span></span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;html&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;html&quot;</span></span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;text/html&quot;</span></span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;text&quot;</span>);</span><br><span class="line"><span class="comment">// =&gt; &quot;json&quot;</span></span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"><span class="comment">// =&gt; &quot;application/json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accept: text/*, application/json</span></span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;png&quot;</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accept: text/*;q=.5, application/json</span></span><br><span class="line"><span class="built_in">this</span>.request.accepts([<span class="string">&quot;html&quot;</span>, <span class="string">&quot;json&quot;</span>]);</span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;html&quot;</span>, <span class="string">&quot;json&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// No Accept header</span></span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;html&quot;</span>, <span class="string">&quot;json&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;html&quot;</span></span><br><span class="line"><span class="built_in">this</span>.request.accepts(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;html&quot;</span>);</span><br><span class="line"><span class="comment">// =&gt; &quot;json&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果 accepts 方法没有参数，则返回所有支持的类型（text/html,application/xhtml+xml,image/webp,application/xml,_/_）。</p>
<p>如果 accepts 方法的参数有多个参数，则返回最佳匹配。如果都不匹配则返回 false，并向客户端抛出一个 406”Not Acceptable“错误。</p>
<p>如果 HTTP 请求没有 Accept 字段，那么 accepts 方法返回它的第一个参数。</p>
<p>accepts 方法可以根据不同 Accept 字段，向客户端返回不同的字段。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="built_in">this</span>.request.accepts(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;text&quot;</span>)) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;json&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;html&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;text&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">this</span>.throw(<span class="number">406</span>, <span class="string">&quot;json, html, or text only&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（21）this.request.acceptsEncodings(encodings)</p>
<p>该方法根据 HTTP 请求的 Accept-Encoding 字段，返回最佳匹配，如果没有合适的匹配，则返回 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Accept-Encoding: gzip</span></span><br><span class="line"><span class="built_in">this</span>.request.acceptsEncodings(<span class="string">&quot;gzip&quot;</span>, <span class="string">&quot;deflate&quot;</span>, <span class="string">&quot;identity&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;gzip&quot;</span></span><br><span class="line"><span class="built_in">this</span>.request.acceptsEncodings([<span class="string">&quot;gzip&quot;</span>, <span class="string">&quot;deflate&quot;</span>, <span class="string">&quot;identity&quot;</span>]);</span><br><span class="line"><span class="comment">// &quot;gzip&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意，acceptEncodings 方法的参数必须包括 identity（意为不编码）。</p>
<p>如果 HTTP 请求没有 Accept-Encoding 字段，acceptEncodings 方法返回所有可以提供的编码方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="built_in">this</span>.request.acceptsEncodings();</span><br><span class="line"><span class="comment">// [&quot;gzip&quot;, &quot;deflate&quot;, &quot;identity&quot;]</span></span><br></pre></td></tr></table></figure>

<p>如果都不匹配，acceptsEncodings 方法返回 false，并向客户端抛出一个 406“Not Acceptable”错误。</p>
<p>（22）this.request.acceptsCharsets(charsets)</p>
<p>该方法根据 HTTP 请求的 Accept-Charset 字段，返回最佳匹配，如果没有合适的匹配，则返回 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5</span></span><br><span class="line"><span class="built_in">this</span>.request.acceptsCharsets(<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;utf-7&quot;</span>);</span><br><span class="line"><span class="comment">// =&gt; &quot;utf-8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.request.acceptsCharsets([<span class="string">&quot;utf-7&quot;</span>, <span class="string">&quot;utf-8&quot;</span>]);</span><br><span class="line"><span class="comment">// =&gt; &quot;utf-8&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果 acceptsCharsets 方法没有参数，则返回所有可接受的匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5</span></span><br><span class="line"><span class="built_in">this</span>.request.acceptsCharsets();</span><br><span class="line"><span class="comment">// [&quot;utf-8&quot;, &quot;utf-7&quot;, &quot;iso-8859-1&quot;]</span></span><br></pre></td></tr></table></figure>

<p>如果都不匹配，acceptsCharsets 方法返回 false，并向客户端抛出一个 406“Not Acceptable”错误。</p>
<p>（23）this.request.acceptsLanguages(langs)</p>
<p>该方法根据 HTTP 请求的 Accept-Language 字段，返回最佳匹配，如果没有合适的匹配，则返回 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Accept-Language: en;q=0.8, es, pt</span></span><br><span class="line"><span class="built_in">this</span>.request.acceptsLanguages(<span class="string">&quot;es&quot;</span>, <span class="string">&quot;en&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;es&quot;</span></span><br><span class="line"><span class="built_in">this</span>.request.acceptsLanguages([<span class="string">&quot;en&quot;</span>, <span class="string">&quot;es&quot;</span>]);</span><br><span class="line"><span class="comment">// &quot;es&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果 acceptsCharsets 方法没有参数，则返回所有可接受的匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Accept-Language: en;q=0.8, es, pt</span></span><br><span class="line"><span class="built_in">this</span>.request.acceptsLanguages();</span><br><span class="line"><span class="comment">// [&quot;es&quot;, &quot;pt&quot;, &quot;en&quot;]</span></span><br></pre></td></tr></table></figure>

<p>如果都不匹配，acceptsLanguages 方法返回 false，并向客户端抛出一个 406“Not Acceptable”错误。</p>
<p>（24）this.request.socket</p>
<p>返回 HTTP 请求的 socket。</p>
<p>（25）this.request.get(field)</p>
<p>返回 HTTP 请求指定的字段。</p>
<h1 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h1><p>Response 对象表示 HTTP 回应。</p>
<p>（1）this.response.header</p>
<p>返回 HTTP 回应的头信息。</p>
<p>（2）this.response.socket</p>
<p>返回 HTTP 回应的 socket。</p>
<p>（3）this.response.status</p>
<p>返回 HTTP 回应的状态码。默认情况下，该属性没有值。该属性可读写，设置时等于一个整数。</p>
<p>（4）this.response.message</p>
<p>返回 HTTP 回应的状态信息。该属性与<code>this.response.message</code>是配对的。该属性可读写。</p>
<p>（5）this.response.length</p>
<p>返回 HTTP 回应的 Content-Length 字段。该属性可读写，如果没有设置它的值，koa 会自动从 this.request.body 推断。</p>
<p>（6）this.response.body</p>
<p>返回 HTTP 回应的信息体。该属性可读写，它的值可能有以下几种类型。</p>
<ul>
<li>字符串：Content-Type 字段默认为 text/html 或 text/plain，字符集默认为 utf-8，Content-Length 字段同时设定。</li>
<li>二进制 Buffer：Content-Type 字段默认为 application/octet-stream，Content-Length 字段同时设定。</li>
<li>Stream：Content-Type 字段默认为 application/octet-stream。</li>
<li>JSON 对象：Content-Type 字段默认为 application/json。</li>
<li>null（表示没有信息体）</li>
</ul>
<p>如果<code>this.response.status</code>没设置，Koa 会自动将其设为 200 或 204。</p>
<p>（7）this.response.get(field)</p>
<p>返回 HTTP 回应的指定字段。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> etag = <span class="built_in">this</span>.get(<span class="string">&quot;ETag&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意，get 方法的参数是区分大小写的。</p>
<p>（8）this.response.set()</p>
<p>设置 HTTP 回应的指定字段。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.set(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>set 方法也可以接受一个对象作为参数，同时为多个字段指定值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.set(&#123;</span><br><span class="line">  Etag: <span class="string">&quot;1234&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Last-Modified&quot;</span>: date</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>（9）this.response.remove(field)</p>
<p>移除 HTTP 回应的指定字段。</p>
<p>（10）this.response.type</p>
<p>返回 HTTP 回应的 Content-Type 字段，不包括“charset”参数的部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ct = <span class="built_in">this</span>.reponse.type;</span><br><span class="line"><span class="comment">// &quot;image/png&quot;</span></span><br></pre></td></tr></table></figure>

<p>该属性是可写的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.reponse.type = <span class="string">&quot;text/plain; charset=utf-8&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.reponse.type = <span class="string">&quot;image/png&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.reponse.type = <span class="string">&quot;.png&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.reponse.type = <span class="string">&quot;png&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>设置 type 属性的时候，如果没有提供 charset 参数，Koa 会判断是否自动设置。如果<code>this.response.type</code>设为 html，charset 默认设为 utf-8；但如果<code>this.response.type</code>设为 text/html，就不会提供 charset 的默认值。</p>
<p>（10）this.response.is(types…)</p>
<p>该方法类似于<code>this.request.is()</code>，用于检查 HTTP 回应的类型是否为支持的类型。</p>
<p>它可以在中间件中起到处理不同格式内容的作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minify = <span class="built_in">require</span>(<span class="string">&quot;html-minifier&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* <span class="title">minifyHTML</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> next;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.response.is(<span class="string">&quot;html&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body = <span class="built_in">this</span>.response.body;</span><br><span class="line">  <span class="keyword">if</span> (!body || body.pipe) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Buffer.isBuffer(body)) body = body.toString();</span><br><span class="line">  <span class="built_in">this</span>.response.body = minify(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码是一个中间件，如果输出的内容类型为 HTML，就会进行最小化处理。</p>
<p>（11）this.response.redirect(url, [alt])</p>
<p>该方法执行 302 跳转到指定网址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.redirect(<span class="string">&quot;back&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.redirect(<span class="string">&quot;back&quot;</span>, <span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.redirect(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.redirect(<span class="string">&quot;http://google.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果 redirect 方法的第一个参数是 back，将重定向到 HTTP 请求的 Referrer 字段指定的网址，如果没有该字段，则重定向到第二个参数或“/”网址。</p>
<p>如果想修改 302 状态码，或者修改 body 文字，可以采用下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.status = <span class="number">301</span>;</span><br><span class="line"><span class="built_in">this</span>.redirect(<span class="string">&quot;/cart&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.body = <span class="string">&quot;Redirecting to shopping cart&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>（12）this.response.attachment([filename])</p>
<p>该方法将 HTTP 回应的 Content-Disposition 字段，设为“attachment”，提示浏览器下载指定文件。</p>
<p>（13）this.response.headerSent</p>
<p>该方法返回一个布尔值，检查是否 HTTP 回应已经发出。</p>
<p>（14）this.response.lastModified</p>
<p>该属性以 Date 对象的形式，返回 HTTP 回应的 Last-Modified 字段（如果该字段存在）。该属性可写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.response.lastModified = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure>

<p>（15）this.response.etag</p>
<p>该属性设置 HTTP 回应的 ETag 字段。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.response.etag = crypto.createHash(<span class="string">&quot;md5&quot;</span>).update(<span class="built_in">this</span>.body).digest(<span class="string">&quot;hex&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注意，不能用该属性读取 ETag 字段。</p>
<p>（16）this.response.vary(field)</p>
<p>该方法将参数添加到 HTTP 回应的 Vary 字段。</p>
<h1 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h1><p>CSRF 攻击是指用户的 session 被劫持，用来冒充用户的攻击。</p>
<p>koa-csrf 插件用来防止 CSRF 攻击。原理是在 session 之中写入一个秘密的 token，用户每次使用 POST 方法提交数据的时候，必须含有这个 token，否则就会抛出错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&quot;koa-session&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> csrf = <span class="built_in">require</span>(<span class="string">&quot;koa-csrf&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> route = <span class="built_in">require</span>(<span class="string">&quot;koa-route&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = (<span class="built_in">module</span>.exports = koa());</span><br><span class="line"></span><br><span class="line">app.keys = [<span class="string">&quot;session key&quot;</span>, <span class="string">&quot;csrf example&quot;</span>];</span><br><span class="line">app.use(session(app));</span><br><span class="line"></span><br><span class="line">app.use(csrf());</span><br><span class="line"></span><br><span class="line">app.use(route.get(<span class="string">&quot;/token&quot;</span>, token));</span><br><span class="line">app.use(route.post(<span class="string">&quot;/post&quot;</span>, post));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">token</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.body = <span class="built_in">this</span>.csrf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">post</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.body = &#123; <span class="attr">ok</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>POST 请求含有 token，可以是以下几种方式之一，koa-csrf 插件就能获得 token。</p>
<ul>
<li>表单的_csrf 字段</li>
<li>查询字符串的_csrf 字段</li>
<li>HTTP 请求头信息的 x-csrf-token 字段</li>
<li>HTTP 请求头信息的 x-xsrf-token 字段</li>
</ul>
<h1 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h1><p>koa-compress 模块可以实现数据压缩。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">&quot;koa-compress&quot;</span>)());</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.type = <span class="string">&quot;text/plain&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.body = fs.createReadStream(<span class="string">&quot;filename.txt&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h1><p>每一个网站就是一个 app，它由<code>lib/application</code>定义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Application</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">this</span> <span class="keyword">instanceof</span> Application)) <span class="keyword">return</span> <span class="keyword">new</span> Application();</span><br><span class="line">  <span class="built_in">this</span>.env = process.env.NODE_ENV || <span class="string">&quot;development&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.subdomainOffset = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">this</span>.middleware = [];</span><br><span class="line">  <span class="built_in">this</span>.context = <span class="built_in">Object</span>.create(context);</span><br><span class="line">  <span class="built_in">this</span>.request = <span class="built_in">Object</span>.create(request);</span><br><span class="line">  <span class="built_in">this</span>.response = <span class="built_in">Object</span>.create(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = Application.prototype;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> = <span class="built_in">module</span>.exports = Application;</span><br></pre></td></tr></table></figure>

<p><code>app.use()</code>用于注册中间件，即将 Generator 函数放入中间件数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.experimental) &#123;</span><br><span class="line">    <span class="comment">// es7 async functions are allowed</span></span><br><span class="line">    assert(</span><br><span class="line">      fn &amp;&amp; <span class="string">&quot;GeneratorFunction&quot;</span> == fn.constructor.name,</span><br><span class="line">      <span class="string">&quot;app.use() requires a generator function&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  debug(<span class="string">&quot;use %s&quot;</span>, fn._name || fn.name || <span class="string">&quot;-&quot;</span>);</span><br><span class="line">  <span class="built_in">this</span>.middleware.push(fn);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>app.listen()</code>就是<code>http.createServer(app.callback()).listen(...)</code>的缩写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.listen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  debug(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> server = http.createServer(<span class="built_in">this</span>.callback());</span><br><span class="line">  <span class="keyword">return</span> server.listen.apply(server, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.callback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mw = [respond].concat(<span class="built_in">this</span>.middleware);</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="built_in">this</span>.experimental ? compose_es7(mw) : co.wrap(compose(mw));</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.listeners(<span class="string">&quot;error&quot;</span>).length) <span class="built_in">this</span>.on(<span class="string">&quot;error&quot;</span>, <span class="built_in">this</span>.onerror);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = self.createContext(req, res);</span><br><span class="line">    onFinished(res, ctx.onerror);</span><br><span class="line">    fn.call(ctx).catch(ctx.onerror);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>app.callback()</code>会返回一个函数，用来处理 HTTP 请求。它的第一行<code>mw = [respond].concat(this.middleware)</code>，表示将 respond 函数（这也是一个 Generator 函数）放入<code>this.middleware</code>，现在 mw 就变成了<code>[respond, S1, S2, S3]</code>。</p>
<p><code>compose(mw)</code>将中间件数组转为一个层层调用的 Generator 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!next) next = noop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = middleware.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      next = middleware[i].call(<span class="built_in">this</span>, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span>* next;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">noop</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，下一个 generator 函数总是上一个 Generator 函数的参数，从而保证了层层调用。</p>
<p><code>var fn = co.wrap(gen)</code>则是将 Generator 函数包装成一个自动执行的函数，并且返回一个 Promise。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//co package</span></span><br><span class="line">co.wrap = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> co.call(<span class="built_in">this</span>, fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>由于<code>co.wrap(compose(mw))</code>执行后，返回的是一个 Promise，所以可以对其使用 catch 方法指定捕捉错误的回调函数<code>fn.call(ctx).catch(ctx.onerror)</code>。</p>
<p>将所有的上下文变量都放进 context 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.createContext = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="built_in">Object</span>.create(<span class="built_in">this</span>.context);</span><br><span class="line">  <span class="keyword">var</span> request = (context.request = <span class="built_in">Object</span>.create(<span class="built_in">this</span>.request));</span><br><span class="line">  <span class="keyword">var</span> response = (context.response = <span class="built_in">Object</span>.create(<span class="built_in">this</span>.response));</span><br><span class="line">  context.app = request.app = response.app = <span class="built_in">this</span>;</span><br><span class="line">  context.req = request.req = response.req = req;</span><br><span class="line">  context.res = request.res = response.res = res;</span><br><span class="line">  request.ctx = response.ctx = context;</span><br><span class="line">  request.response = response;</span><br><span class="line">  response.request = request;</span><br><span class="line">  context.onerror = context.onerror.bind(context);</span><br><span class="line">  context.originalUrl = request.originalUrl = req.url;</span><br><span class="line">  context.cookies = <span class="keyword">new</span> Cookies(req, res, <span class="built_in">this</span>.keys);</span><br><span class="line">  context.accept = request.accept = accepts(req);</span><br><span class="line">  context.state = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>真正处理 HTTP 请求的是下面这个 Generator 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">respond</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allow bypassing koa</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span> === <span class="built_in">this</span>.respond) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> res = <span class="built_in">this</span>.res;</span><br><span class="line">  <span class="keyword">if</span> (res.headersSent || !<span class="built_in">this</span>.writable) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body = <span class="built_in">this</span>.body;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="built_in">this</span>.status;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ignore body</span></span><br><span class="line">  <span class="keyword">if</span> (statuses.empty[code]) &#123;</span><br><span class="line">    <span class="comment">// strip headers</span></span><br><span class="line">    <span class="built_in">this</span>.body = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> res.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;HEAD&quot;</span> == <span class="built_in">this</span>.method) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isJSON(body)) <span class="built_in">this</span>.length = Buffer.byteLength(<span class="built_in">JSON</span>.stringify(body));</span><br><span class="line">    <span class="keyword">return</span> res.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// status body</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> == body) &#123;</span><br><span class="line">    <span class="built_in">this</span>.type = <span class="string">&quot;text&quot;</span>;</span><br><span class="line">    body = <span class="built_in">this</span>.message || <span class="built_in">String</span>(code);</span><br><span class="line">    <span class="built_in">this</span>.length = Buffer.byteLength(body);</span><br><span class="line">    <span class="keyword">return</span> res.end(body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// responses</span></span><br><span class="line">  <span class="keyword">if</span> (Buffer.isBuffer(body)) <span class="keyword">return</span> res.end(body);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> body) <span class="keyword">return</span> res.end(body);</span><br><span class="line">  <span class="keyword">if</span> (body <span class="keyword">instanceof</span> Stream) <span class="keyword">return</span> body.pipe(res);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// body: json</span></span><br><span class="line">  body = <span class="built_in">JSON</span>.stringify(body);</span><br><span class="line">  <span class="built_in">this</span>.length = Buffer.byteLength(body);</span><br><span class="line">  res.end(body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://github.com/koajs/koa/blob/master/docs/guide.md">Koa Guide</a></li>
<li>William XING, <a href="http://william.xingyp.com/is-koa-js-right-for-me/">Is Koa.js right for me?</a></li>
</ul>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>适合 Vue 用户的 React 教程，你值得拥有</title>
    <url>/2020/09/09/react/compare-vue-react/</url>
    <content><![CDATA[<h1 id="插槽，在-React-中没找到？"><a href="#插槽，在-React-中没找到？" class="headerlink" title="插槽，在 React 中没找到？"></a>插槽，在 React 中没找到？</h1><blockquote>
<p>在使用 Vue 的时候，插槽是一个特别常用的功能，通过定义插槽，可以在调用组件的时候将外部的内容传入到组件内部，显示到指定的位置。在 Vue 中，插槽分为默认插槽，具名插槽和作用域插槽。其实不仅仅 Vue,在 React 中其实也有类似插槽的功能，只是名字不叫做插槽，下面我将通过举例来说明。</p>
</blockquote>
<h2 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h2><p>现在项目需要开发一个卡片组件，如下图所示，卡片可以指定标题，然后卡片内容可以用户自定义，这时候对于卡片内容来说，就可以使用插槽来实现，下面我们就分别使用 Vue 和 React 来实现这个功能</p>
<h3 id="Vue-实现"><a href="#Vue-实现" class="headerlink" title="Vue 实现"></a>Vue 实现</h3><h4 id="实现一个-card-组件，如下代码所示"><a href="#实现一个-card-组件，如下代码所示" class="headerlink" title="实现一个 card 组件，如下代码所示"></a>实现一个 card 组件，如下代码所示</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card__title&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card__body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在外部使用定义的-card-组件"><a href="#在外部使用定义的-card-组件" class="headerlink" title="在外部使用定义的 card 组件"></a>在外部使用定义的 card 组件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-card</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我将被放在card组件的默认插槽里面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> MyCard <span class="keyword">from</span> <span class="string">&quot;../components/card&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      MyCard</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="React-实现"><a href="#React-实现" class="headerlink" title="React 实现"></a>React 实现</h3><blockquote>
<p>虽然在 React 里面没有插槽的概念，但是 React 里面也可以通过 props.children 拿到组件标签内部的子元素的，就像上面代码&lt;my-card&gt;标签内的子元素，通过这个我们也可以实现类似 Vue 默认插槽的功能，一起看看代码。</p>
</blockquote>
<h4 id="使用-React-定义-Card-组件"><a href="#使用-React-定义-Card-组件" class="headerlink" title="使用 React 定义 Card 组件"></a>使用 React 定义 Card 组件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface CardProps &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  children: React.ReactNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">props: CardProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;card&quot;</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;card__title&quot;</span>&gt;</span><br><span class="line">        &lt;span&gt;&#123;props.title&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;card__body&quot;</span>&gt;</span><br><span class="line">        &#123;<span class="comment">/**每个组件都可以获取到 props.children。它包含组件的开始标签和结束标签之间的内容 */</span>&#125;</span><br><span class="line">        &#123;props.children&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在外部使用-Card-组件"><a href="#在外部使用-Card-组件" class="headerlink" title="在外部使用 Card 组件"></a>在外部使用 Card 组件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Card <span class="keyword">from</span> <span class="string">&quot;./components/Card&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Card title=<span class="string">&quot;标题&quot;</span>&gt;</span><br><span class="line">        &lt;div&gt;我将被放在card组件的body区域内容&lt;/div&gt;</span><br><span class="line">      &lt;/Card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><blockquote>
<p>继续以上面的 Card 组件为例，假如我们现在需求发生了变化，组件的 title 也可以使用插槽，这时候对于 Vue 就可以使用具名插槽了，而 React 也是有办法实现的哦。</p>
</blockquote>
<h3 id="Vue-实现-1"><a href="#Vue-实现-1" class="headerlink" title="Vue 实现"></a>Vue 实现</h3><p>Vue 的具名插槽主要解决的是一个组件需要多个插槽的场景，其实现是为<slot>添加 name 属性来实现了。</p>
<h4 id="我们就上面的需求对-card-组件进行修改"><a href="#我们就上面的需求对-card-组件进行修改" class="headerlink" title="我们就上面的需求对 card 组件进行修改"></a>我们就上面的需求对 card 组件进行修改</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card__title&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--如果传入了title，则使用title属性，否则使用具名插槽--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-else</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card__body&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--对于内容区域依然使用默认插槽--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="card-组件修改完之后，我们再去调整一下使用-card-组件的地方"><a href="#card-组件修改完之后，我们再去调整一下使用-card-组件的地方" class="headerlink" title="card 组件修改完之后，我们再去调整一下使用 card 组件的地方"></a>card 组件修改完之后，我们再去调整一下使用 card 组件的地方</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-card</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--通过v-slot:title 使用具名插槽--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我将被放在card组件的默认插槽里面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> MyCard <span class="keyword">from</span> <span class="string">&quot;../components/card&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      MyCard</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="React-实现-1"><a href="#React-实现-1" class="headerlink" title="React 实现"></a>React 实现</h3><blockquote>
<p>React 连插槽都没有， 更别提具名插槽了，但是没有不代表不能模拟出来。对于 React 的 props，我们不仅仅可以传入普通的属性，还可以传入一个函数，这时候我们就可以在传入的这个函数里面返回 JSX,从而就实现了具名插槽的功能。</p>
</blockquote>
<h4 id="对原有的-Card-组件进行修改"><a href="#对原有的-Card-组件进行修改" class="headerlink" title="对原有的 Card 组件进行修改"></a>对原有的 Card 组件进行修改</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface CardProps &#123;</span><br><span class="line">  title?: string;</span><br><span class="line">  <span class="comment">// 加入了一个 renderTitle 属性，属性类型是 Function</span></span><br><span class="line">  renderTitle?: <span class="built_in">Function</span>;</span><br><span class="line">  children: React.ReactNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">props: CardProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title, renderTitle &#125; = props;</span><br><span class="line">  <span class="comment">// 如果指定了 renderTtile，则使用 renderTitle,否则使用默认的 title</span></span><br><span class="line">  <span class="keyword">let</span> titleEl = renderTitle ? renderTitle() : <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;card&quot;</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;card__title&quot;</span>&gt;&#123;titleEl&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;card__body&quot;</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          /\*_每个组件都可以获取到 props.children。它包含组件的开始标签和结束标签之间的内容 _/</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;props.children&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="这时候就可以在外部自定义-title-了"><a href="#这时候就可以在外部自定义-title-了" class="headerlink" title="这时候就可以在外部自定义 title 了"></a>这时候就可以在外部自定义 title 了</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Card <span class="keyword">from</span> <span class="string">&quot;./components/Card&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Card</span><br><span class="line">        renderTitle=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是自定义的标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div&gt;我将被放在 card 组件的 body 区域内容&lt;/div&gt;</span><br><span class="line">      &lt;/Card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><blockquote>
<p>有时让插槽内容能够访问子组件中才有的数据是很有用的，这个就是 Vue 提供作用域插槽的原因。我们继续使用上面的 Card 组件为例，现在我基于上面的卡片组件开发了一个人员信息卡片组件，用户直接使用人员信息卡片组件就可以将人员信息显示到界面中，但是在某些业务模块需要自定义人员信息显示方式，这时候我们就需要使用到作用域插槽了。</p>
</blockquote>
<h3 id="Vue-实现-2"><a href="#Vue-实现-2" class="headerlink" title="Vue 实现"></a>Vue 实现</h3><h4 id="实现用户信息卡片组件，里面使用了作用域插槽"><a href="#实现用户信息卡片组件，里面使用了作用域插槽" class="headerlink" title="实现用户信息卡片组件，里面使用了作用域插槽"></a>实现用户信息卡片组件，里面使用了作用域插槽</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">custom-card</span> <span class="attr">title</span>=<span class="string">&quot;人员信息卡片&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这里使用了作用域插槽，将userInfo传出去了--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">:userInfo</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果没有使用插槽，则显示默认内容--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓名: &#123;&#123; userInfo.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别: &#123;&#123; userInfo.sex &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>年龄: &#123;&#123; userInfo.age &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">custom-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CustomCard <span class="keyword">from</span> <span class="string">&quot;../card&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      CustomCard</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        userInfo: &#123;</span><br><span class="line"><span class="javascript">          name: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">          sex: <span class="string">&quot;男&quot;</span>,</span></span><br><span class="line">          age: 25</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在外部使用人员信息组件"><a href="#在外部使用人员信息组件" class="headerlink" title="在外部使用人员信息组件"></a>在外部使用人员信息组件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user-card</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:userInfo</span>=<span class="string">&quot;&#123; userInfo &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-user&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名: &#123;&#123; userInfo.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄: &#123;&#123; userInfo.age &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> UserCard <span class="keyword">from</span> <span class="string">&quot;../components/user-card&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      UserCard</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="React-实现-2"><a href="#React-实现-2" class="headerlink" title="React 实现"></a>React 实现</h3><blockquote>
<p>在具名插槽那一小节我们通过给组件传入了一个函数，然后在函数中返回 JSX 的方式来模拟了具名插槽，那么对于作用域插槽，我们依然可以使用函数的这种方式，而作用域插槽传递的参数我们可以使用给函数传参的方式来替代</p>
</blockquote>
<h4 id="实现人员信息卡片组件"><a href="#实现人员信息卡片组件" class="headerlink" title="实现人员信息卡片组件"></a>实现人员信息卡片组件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Card <span class="keyword">from</span> <span class="string">&quot;./Card&quot;</span>;</span><br><span class="line"></span><br><span class="line">interface UserCardProps &#123;</span><br><span class="line">  renderUserInfo?: <span class="built_in">Function</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface UserInfo &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">  sex: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">props: UserCardProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [userInfo] =</span><br><span class="line">    useState &lt;</span><br><span class="line">    UserInfo &gt;</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      age: <span class="number">25</span>,</span><br><span class="line">      sex: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> content = props.renderUserInfo ? (</span><br><span class="line">    props.renderUserInfo(userInfo)</span><br><span class="line">  ) : (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;姓名: &#123;userInfo.name&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;年龄: &#123;userInfo.age&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;性别: &#123;userInfo.sex&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Card</span> <span class="attr">title</span>=<span class="string">&quot;人员信息&quot;</span>&gt;</span>&#123;content&#125;<span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在外部使用人员信息卡片组件"><a href="#在外部使用人员信息卡片组件" class="headerlink" title="在外部使用人员信息卡片组件"></a>在外部使用人员信息卡片组件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserCard, &#123; UserInfo &#125; <span class="keyword">from</span> <span class="string">&quot;./components/UserCard&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;UserCard</span><br><span class="line">        renderUserInfo=&#123;<span class="function">(<span class="params">userInfo: UserInfo</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li&gt;姓名： &#123;userInfo.name&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;&lt;/UserCard&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Context-React-中的-provide-inject"><a href="#Context-React-中的-provide-inject" class="headerlink" title="Context, React 中的 provide/inject"></a>Context, React 中的 provide/inject</h1><blockquote>
<p>通常我们在项目开发中，对于多组件之间的状态管理，在 Vue 中会使用到 Vuex,在 React 中会使用到 redux 或者 Mobx,但对于小项目来说，使用这些状态管理库就显得比较大材小用了，那么在不使用这些库的情况下，如何去完成数据管理呢？比如面试最常问的祖孙组件通信。在 Vue 中我们可以使用 provide/inject，在 React 中我们可以使用 Context。</p>
</blockquote>
<blockquote>
<p>假设有这样一个场景，系统现在需要提供一个换肤功能，用户可以切换皮肤，现在我们分别使用 Vue 和 React 来实现这个功能。</p>
</blockquote>
<h2 id="Vue-中的-provide-inject"><a href="#Vue-中的-provide-inject" class="headerlink" title="Vue 中的 provide/inject"></a>Vue 中的 provide/inject</h2><blockquote>
<p>在 Vue 中我们可以使用 provide/inject 来实现跨多级组件进行传值，就以上面所说场景为例，我们使用 provide/inject 来实现以下</p>
</blockquote>
<h3 id="修改-App-vue-内容为以下内容"><a href="#修改-App-vue-内容为以下内容" class="headerlink" title="修改 App.vue 内容为以下内容"></a>修改 App.vue 内容为以下内容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        themeInfo: &#123;</span><br><span class="line"><span class="javascript">          theme: <span class="string">&quot;dark&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    provide() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        theme: <span class="built_in">this</span>.themeInfo</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在任意层级的子组件中像下面这样使用"><a href="#在任意层级的子组件中像下面这样使用" class="headerlink" title="在任意层级的子组件中像下面这样使用"></a>在任意层级的子组件中像下面这样使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;`child-$&#123;theme.theme&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    inject: [<span class="string">&quot;theme&quot;</span>]</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就可以实现 theme 在所有子组件中进行共享了</p>
<h2 id="React-中的-Context"><a href="#React-中的-Context" class="headerlink" title="React 中的 Context"></a>React 中的 Context</h2><blockquote>
<p>在 Vue 中我们使用 provide/inject 实现了组件跨层级传值功能，在 React 中也提供了类似的功能即 Context，下面我们使用 Context 来实现相同的功能。</p>
</blockquote>
<h3 id="在项目-src-目录下新建-context-目录，添加-MyContext-js-文件，然后添加以下内容"><a href="#在项目-src-目录下新建-context-目录，添加-MyContext-js-文件，然后添加以下内容" class="headerlink" title="在项目 src 目录下新建 context 目录，添加 MyContext.js 文件，然后添加以下内容"></a>在项目 src 目录下新建 context 目录，添加 MyContext.js 文件，然后添加以下内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 定义 MyContext,指定默认的主题为`light`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyContext = createContext(&#123;</span><br><span class="line">  theme: <span class="string">&quot;light&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>MyContext 提供了一个 Provider，通过 Provider 可以将 theme 共享到所有的子组件。现在我们在所有的组件的共同父组件比如 App.js 上面添加 MyContext.Provider 将 theme 共享出去</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MyContext &#125; <span class="keyword">from</span> <span class="string">&quot;@/context/MyContext&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = useState(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;MyContext.Provider</span><br><span class="line">      value=&#123;&#123;</span><br><span class="line">        theme</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;Children&gt;&lt;/Children&gt;</span><br><span class="line">    &lt;/MyContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="这时候就可以直接在所有的子组件里面使用定义的主题-theme-了"><a href="#这时候就可以直接在所有的子组件里面使用定义的主题-theme-了" class="headerlink" title="这时候就可以直接在所有的子组件里面使用定义的主题 theme 了"></a>这时候就可以直接在所有的子组件里面使用定义的主题 theme 了</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; MyContext &#125; <span class="keyword">from</span> <span class="string">&#x27;@/context/MyContext&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;theme&#125; = useContext(MyContext)</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">child-</span>$&#123;<span class="attr">theme</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="没有了-v-model-但也不影响使用"><a href="#没有了-v-model-但也不影响使用" class="headerlink" title="没有了 v-model,但也不影响使用"></a>没有了 v-model,但也不影响使用</h1><blockquote>
<p>我们知道 React 和 Vue 都是单向数据流的，即数据的流向都是由外层向内层组件进行传递和更新的，比如下面这段 React 代码就是标准的单向数据流.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [name] = useState(<span class="string">&quot;子君&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在-vue-中使用-v-model"><a href="#在-vue-中使用-v-model" class="headerlink" title="在 vue 中使用 v-model"></a>在 vue 中使用 v-model</h2><blockquote>
<p>如上代码，我们在通过通过 value 属性将外部的值传递给了 input 组件，这个就是一个简单的单向数据流。但是在使用 Vue 的时候，还有两个比较特殊的语法糖 v-model 和.sync，这两个语法糖可以让 Vue 组件拥有双向数据绑定的能力，比如下面的代码</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;子君&quot;</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 v-model,当用户修改 input 的值的时候，外部的 name 的值也将同步被修改。但这是 Vue 的语法糖啊，React 是不支持的，所以 React 应该怎么办呢？这时候再想想自定义 v-model，v-model 实际上是通过定义 value 属性同时监听 input 事件来实现的，比如这样:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;$_handleChange&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      $_handleChange(e) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.target.value);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在-react-寻找-v-model-替代方案"><a href="#在-react-寻找-v-model-替代方案" class="headerlink" title="在 react 寻找 v-model 替代方案"></a>在 react 寻找 v-model 替代方案</h2><blockquote>
<p>同理，React 虽然没有 v-model 语法糖，但是也可以通过传入属性然后监听事件来实现数据的双向绑定。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&quot;子君&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setName(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;name&#125; onChange=&#123;handleChange&#125;&gt;&lt;/input&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小编刚开始使用 react，感觉没有 v-model 就显得比较麻烦，不过麻烦归麻烦，代码改写也要写。就像上文代码一样，每一个表单元素都需要监听 onChange 事件，越发显得麻烦了，这时候就可以考虑将多个 onChange 事件合并成一个，比如像下面代码这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&quot;子君&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [sex, setSex] = useState(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">e: any, method: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    method(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;name&#125; onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> handleChange(e, setName)&#125;&gt;&lt;/input&gt;</span><br><span class="line">      &lt;input value=&#123;sex&#125; onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> handleChange(e, setSex)&#125;&gt;&lt;/input&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="没有了指令"><a href="#没有了指令" class="headerlink" title="没有了指令"></a>没有了指令</h1><p>在 Vue 中我们一般绘制页面都会使用到 template，template 里面提供了大量的指令帮助我们完成业务开发，但是在 React 中使用的是 JSX,并没有指令，那么我们应该怎么做呢？下面我们就将 Vue 中最常用的一些指令转换为 JSX 里面的语法(注意: 在 Vue 中也可以使用 JSX)</p>
<h2 id="v-show-与-v-if"><a href="#v-show-与-v-if" class="headerlink" title="v-show 与 v-if"></a>v-show 与 v-if</h2><p>在 Vue 中我们隐藏显示元素可以使用 <code>v-show</code> 或者 <code>v-if</code>,当然这两者的使用场景是有所不同的，<code>v-show</code> 是通过设置元素的 display 样式来显示隐藏元素的，而 <code>v-if</code> 隐藏元素是直接将元素从 dom 中移除掉。</p>
<p>看一下 Vue 中的 <code>v-show</code> 与 <code>v-if</code> 的用法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>姓名:&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;showDept&quot;</span>&gt;</span>&#123;&#123; dept &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;子君&quot;</span>,</span></span><br><span class="line"><span class="javascript">        dept: <span class="string">&quot;银河帝国&quot;</span>,</span></span><br><span class="line"><span class="javascript">        showName: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        showDept: <span class="literal">true</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>将 v-show，v-if 转换为 JSX 中的语法</strong><br>在 Vue 中指令是为了在 template 方便动态操作数据而存在的，但是到了 React 中我们写的是 JSX,可以直接使用 JS,所以指令是不需要存在的，那么上面的 v-show,v-if 如何在 JSX 中替代呢</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [showName] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [showDept] = useState(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [userInfo] = useState(&#123;</span><br><span class="line">    name: <span class="string">&quot;子君&quot;</span>,</span><br><span class="line">    dept: <span class="string">&quot;银河帝国&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;<span class="comment">/**模拟 v-show \*/</span>&#125;</span><br><span class="line">      &lt;span style=&#123;&#123; <span class="attr">display</span>: showName ? <span class="string">&quot;block&quot;</span> : <span class="string">&quot;none&quot;</span> &#125;&#125;&gt;</span><br><span class="line">        &#123;userInfo.name&#125;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &#123;<span class="comment">/**模拟 v-if \*/</span>&#125;</span><br><span class="line">      &#123;showDept ? <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;userInfo.dept&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> : <span class="literal">undefined</span>&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>v-for 在 Vue 中是用来遍历数据的，同时我们在使用 v-for 的时候需要给元素指定 key，key 的值一般是数据的 id 或者其他唯一且固定的值。不仅在 Vue 中，在 React 中也是存在 key 的，两者的 key 存在的意义基本一致，都是为了优化虚拟 DOM diff 算法而存在的。</p>
<h3 id="在-Vue-中使用-v-for"><a href="#在-Vue-中使用-v-for" class="headerlink" title="在 Vue 中使用 v-for"></a>在 Vue 中使用 v-for</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        list: [</span><br><span class="line">          &#123;</span><br><span class="line">            id: 1,</span><br><span class="line"><span class="javascript">            name: <span class="string">&quot;子君&quot;</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            id: <span class="string">&quot;2&quot;</span>,</span></span><br><span class="line"><span class="javascript">            name: <span class="string">&quot;张三&quot;</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            id: <span class="string">&quot;3&quot;</span>,</span></span><br><span class="line"><span class="javascript">            name: <span class="string">&quot;李四&quot;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在-React-中使用-v-for-的替代语法"><a href="#在-React-中使用-v-for-的替代语法" class="headerlink" title="在 React 中使用 v-for 的替代语法"></a>在 React 中使用 v-for 的替代语法</h3><p>在 react 中虽然没有 v-for，但是 JSX 中可以直接使用 JS,所以我们可以直接遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      name: <span class="string">&quot;子君&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">      name: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">      name: <span class="string">&quot;李四&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="v-bind-与-v-on"><a href="#v-bind-与-v-on" class="headerlink" title="v-bind 与 v-on"></a>v-bind 与 v-on</h2><p>v-bind 在 Vue 中是动态绑定属性的，v-on 是用于监听事件的,因为 React 也有属性和事件的概念，所以我们在 React 也能发现可替代的方式。</p>
<h3 id="在-Vue-中使用-v-bind-与-v-on"><a href="#在-Vue-中使用-v-bind-与-v-on" class="headerlink" title="在 Vue 中使用 v-bind 与 v-on"></a>在 Vue 中使用 v-bind 与 v-on</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--:value是v-bind:value的简写， @input是v-on:input的简写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;handleInput&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        value: <span class="string">&quot;子君&quot;</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleInput(e) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.value = e.target.value;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在-React-中寻找替代方案"><a href="#在-React-中寻找替代方案" class="headerlink" title="在 React 中寻找替代方案"></a>在 React 中寻找替代方案</h3><blockquote>
<p>在 Vue 中，作者将事件和属性进行了分离，但是在 React 中，其实事件也是属性，所以在本小节我们不仅看一下如何使用属性和事件，再了解一下如何在 React 中自定义事件</p>
</blockquote>
<h4 id="开发一个-CustomInput-组件"><a href="#开发一个-CustomInput-组件" class="headerlink" title="开发一个 CustomInput 组件"></a>开发一个 CustomInput 组件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface CustomInputProps &#123;</span><br><span class="line">  value: string;</span><br><span class="line">  <span class="comment">//可以看出 onChange是一个普通的函数,也被定义到了组件的props里面了</span></span><br><span class="line">  onChange:</span><br><span class="line">    | (<span class="function">(<span class="params">value: string, event: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="keyword">void</span>)</span><br><span class="line">    | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">props: CustomInputProps</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// props.onChange是一个属性，也是自定义的一个事件</span></span><br><span class="line">    props.onChange &amp;&amp; props.onChange(e.target.value, e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;props.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-CustomInput-组件"><a href="#使用-CustomInput-组件" class="headerlink" title="使用 CustomInput 组件"></a>使用 CustomInput 组件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> CustomInput <span class="keyword">from</span> <span class="string">&quot;./components/CustomInput&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">value: string</span>) </span>&#123;</span><br><span class="line">    setValue(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;CustomInput value=&#123;value&#125; onChange=&#123;handleChange&#125;&gt;&lt;/CustomInput&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据-data，在-react-中叫-state"><a href="#数据-data，在-react-中叫-state" class="headerlink" title="数据 data，在 react 中叫 state"></a>数据 data，在 react 中叫 state</h1><blockquote>
<p>熟悉 <code>vue</code> 的小伙伴一定对 <code>Vue</code> 中的 <code>data</code> 不会感到陌生的，反正天天写 Bug 的时候都要用，但是对于 <code>data</code> 来说，在 <code>Vue2.0</code>，<code>Vue3.0</code>，React 中用法是不同的，我们下面依次举例说明</p>
</blockquote>
<h2 id="Vue2-0-中的用法"><a href="#Vue2-0-中的用法" class="headerlink" title="Vue2.0 中的用法"></a>Vue2.0 中的用法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;子君&quot;</span>,</span></span><br><span class="line"><span class="javascript">        gzh: <span class="string">&quot;前端有的玩&quot;</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过上面的代码我们可以看到 <code>data 是一个函数</code>，然后函数中返回了一个对象，那么为什么 data 是一个函数呢？比如我们有时候也会在 <code>App.vue 文件中看到 data 不是函数</code>的情况。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      name: <span class="string">&quot;子君&quot;</span>,</span></span><br><span class="line"><span class="javascript">      sex: <span class="string">&quot;男&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>那么为什么我们在普通组件里面还要将 data 声明为函数呢？</p>
<p><code>Vue 官网</code>是这样解释的：<strong>当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。</strong>如果 <code>data</code> 仍然是一个纯粹的对象，则所有的实例将<em>共享引用</em>同一个数据对象！通过提供 <code>data</code> 函数，每次创建一个新实例后，我们能够调用 <code>data</code> 函数，从而返回初始数据的一个全新副本数据对象。<br>而 <code>App.vue</code> 可以将 <code>data</code> 声明为一个普通对象是因为整个系统中 <code>App.vue</code> <strong><em>只会被使用到一次</em></strong>，所以不存在上述的问题。</p>
<hr>
<h2 id="Vue3-中的用法"><a href="#Vue3-中的用法" class="headerlink" title="Vue3 中的用法"></a>Vue3 中的用法</h2><p>在 <code>Vue3</code> 中，我们依然可以像 Vue2 那样去使用 <code>data</code>，当然 <code>Vue3</code> 提供了新的 <code>Composition API</code>，在后续文章中，如果没有特殊说明，我们提到 Vue3 就默认指的是使用 <code>Composition API</code>。<br>在 <code>Composition API</code> 提供了响应式 API，分别是 ref 和 reactive，通过这两个 API 可以生成响应式的数据</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名:&#123;&#123; state.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>公众号:&#123;&#123; state.gzh &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>统计:&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line">    setup() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;子君&quot;</span>,</span></span><br><span class="line"><span class="javascript">        gzh: <span class="string">&quot;前端有的玩&quot;</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        state,</span><br><span class="line">        count</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="响应数据修改"><a href="#响应数据修改" class="headerlink" title="响应数据修改"></a>响应数据修改</h3><blockquote>
<p>在 <code>Vue2.0</code> 中，我们修改 data 的方式一般会使用 <code>this.name = &#39;张三&#39;</code>这种赋值的方式，但是对于 <code>Composition API</code> 中因为提供了两种 api，所以用法稍有区别</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名:&#123;&#123; state.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>公众号:&#123;&#123; state.gzh &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>统计:&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">    setup() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;子君&quot;</span>,</span></span><br><span class="line"><span class="javascript">        gzh: <span class="string">&quot;前端有的玩&quot;</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        state.name = <span class="string">&quot;张三&quot;</span>;</span></span><br><span class="line">        count.value++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        state,</span><br><span class="line">        count,</span><br><span class="line">        handleClick</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如上代码所示</strong>:</p>
<ol>
<li><p>对于 <code>reactive</code> 声明的数据<br>对于 <code>reactive</code>，我们可以通过 <code>state.name</code> 来获取数据，然后通过 <code>state.name=&#39;张三&#39;</code>来修改数据</p>
</li>
<li><p>对于 <code>ref</code> 声明的数据<br>对于 <code>ref</code> 声明的数据，<code>ref</code> 接受一个参数值并返回一个响应式且可改变的 <code>ref</code> 对象。<code>ref</code> 对象拥有一个指向内部值的单一属性 .value。所以我们在代码中获取 <code>ref</code> 对象的数据需要使用 <code>count.value</code> 的方式，修改值的方式也需要通过 <code>count.value++</code>的方式。<br>但是这里有一个特殊的点就是在 <code>template</code>，<code>ref</code> 对象会自动解套，意思就是对于<code>&lt;div&gt;统计:&#123;&#123; count &#125;&#125;&lt;/div&gt;</code>,代码里面可以直接使用 count，而不需要写成 <code>count.value</code>，Vue 自己就会将其解套为 <code>count.value</code>。</p>
</li>
</ol>
<h3 id="React-中的用法"><a href="#React-中的用法" class="headerlink" title="React 中的用法"></a>React 中的用法</h3><blockquote>
<p>React16.8 新增了 Hook 特性，现在许多团队已经大规模使用了，所以本文的内容更多的是以 Hook 为主。<br>在 Vue3.0 中提供了 Composition API,其实这个和 React 的 hook 用法是很相似的，接下来我们将上文中我们写的 Vue3.0 代码修改为 React 版本</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// useState传入要初始化的状态数据，然后会返回一个数组</span></span><br><span class="line">  <span class="comment">// 数组第一项为声明的数据，而第二个参数是一个方法，用于调用</span></span><br><span class="line">  <span class="comment">// 修改数据</span></span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&quot;子君&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [gzh] = useState(<span class="string">&quot;前端有的玩&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在react修改数据需要调用useState返回的方法</span></span><br><span class="line">    setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      &lt;div&gt;姓名：&#123;name&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;公众号: &#123;gzh&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这段代码中我们使用到了 <code>useState</code> 声明了一个 <code>state</code> 变量，<code>useState</code> 返回的值是一个数组，然后我们通过数组解构获取到了两个变量， <code>const [name, setName] = useState(&#39;子君&#39;)</code>， 其中 <code>name</code> 对应声明的 <code>state</code> 变量，而 <code>setName</code> 是一个函数，调用 setName 可以修改变量的值，比如 <code>setName(&#39;张三&#39;)</code>，这时候 <code>name</code> 的值就会变成了<code>张三</code></p>
<h1 id="侦听器-watch-监督你没毛病"><a href="#侦听器-watch-监督你没毛病" class="headerlink" title="侦听器 watch,监督你没毛病"></a>侦听器 watch,监督你没毛病</h1><blockquote>
<p>在平常开发中是比较常用 watch 的，使用 watch 可以去监听数据的变化，然后在变化之后做一系列的操作。比如有一个列表页，我们希望用户在输入搜索关键字的时候，可以自动触发搜索。此时除了监听输入框的 input 事件之外，还可以通过 vue 的 watch 来监听关键字的变化</p>
</blockquote>
<h2 id="Vue2-0-中的写法"><a href="#Vue2-0-中的写法" class="headerlink" title="Vue2.0 中的写法"></a>Vue2.0 中的写法</h2><blockquote>
<p>在 vue2.0 中，watch 常用的写法包含了两种，下面我们分别使用不同的写法来进行上述功能的实现</p>
</blockquote>
<h3 id="常规实现"><a href="#常规实现" class="headerlink" title="常规实现"></a>常规实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchValue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--列表，代码省略--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        searchValue: <span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 在值发生变化之后，重新加载数据</span></span></span><br><span class="line">      searchValue(newValue, oldValue) &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 判断搜索</span></span></span><br><span class="line">        if (newValue !== oldValue) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 在这里处理搜索逻辑</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-watch-实现"><a href="#使用-watch-实现" class="headerlink" title="使用 $watch 实现"></a>使用 <code>$watch</code> 实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchValue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--列表，代码省略--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        searchValue: <span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// $watch会返回一个unwatch函数，如果需求上需要在某些场景取消watch,可以执行`unwatch`</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> unwatch = <span class="built_in">this</span>.$watch(<span class="string">&quot;searchValue&quot;</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 判断搜索</span></span></span><br><span class="line">        if (newValue !== oldValue) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 在这里处理搜索逻辑</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>在调用<code>$watch</code> 的时候，会有一个返回值 <code>unwatch</code>，然后如果需要取消 <code>watch</code> 监听，我们可以通过调用 <code>unwatch</code> 来进行，比如有一个表单，表单上面的保存按钮平常是置灰的，但是假如用户对表单进行了修改，就需要将表单的置灰状态修改为启用状态。但是如果表单已经启用了，就没必要继续 <code>watch</code> 了，这时候就需要使用 <code>unwatch</code></p>
<hr>
<h2 id="Vue3-0-中的写法"><a href="#Vue3-0-中的写法" class="headerlink" title="Vue3.0 中的写法"></a>Vue3.0 中的写法</h2><blockquote>
<p>在 Vue3.0 中除了 Vue2.0 中的写法外，还在 Composition API 提供了 watch 与 watchEffect 两个 API,用于监听数据的变化，下面我们将上面搜索分别使用 watch 与 watchEffect 来实现</p>
</blockquote>
<h3 id="watch-实现方式"><a href="#watch-实现方式" class="headerlink" title="watch 实现方式"></a><code>watch</code> 实现方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;state.searchValue&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">    setup() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        searchValue: <span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="comment">// 通过watch来监听searchValue的变化</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> unwatch = watch(</span></span><br><span class="line">        () =&gt; state.searchValue,</span><br><span class="line">        (value, oldValue) =&gt; &#123;</span><br><span class="line">          if (value !== oldValue) &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 在这里处理搜索逻辑</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        state</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>watch API</code> 与 <code>Vue2.0</code> 中的 <code>this.$watch</code> 用法基本是一致的，包括使用的参数等,同时 <code>watch API</code> 返回了 <code>unwatch</code> 函数用于取消 <code>watch</code><br>同时 <code>watch</code> 还可以侦听多个属性的变化，就像下面这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch([a, b, c], <span class="function">(<span class="params">[a, b, c], [oldA, oldB, oldC]</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="watchEffect-实现"><a href="#watchEffect-实现" class="headerlink" title="watchEffect 实现"></a><code>watchEffect</code> 实现</h3><blockquote>
<p>watchEffect 参数是一个函数，在代码执行时，会立即执行 watchEffect 传入的函数，然后响应式追踪其依赖，并在其中某些依赖发生变化时重新运行该函数。我们将上述搜索代码使用 watchEffect 来实现</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">      searchValue: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 加载数据</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params">searchValue</span>) </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 通过watchEffect来监听searchValue的变化</span></span><br><span class="line">    <span class="keyword">const</span> unwatch = watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 当代码执行到watchEffect时，会立即调用此函数，同时会收集到存在</span></span><br><span class="line">      <span class="comment">//`state.searchValue`的依赖，然后当`state.searchValue`发生</span></span><br><span class="line">      <span class="comment">//变化时会在此调用watchEffect，已实现数据监听</span></span><br><span class="line">      loadData(state.searchValue);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="React-中的用法-1"><a href="#React-中的用法-1" class="headerlink" title="React 中的用法"></a>React 中的用法</h2><blockquote>
<p>在 React 中与 watch 比较相似的功能是 Effect Hook,使用它可以让你在函数组件中执行副作用操作</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// useState传入要初始化的状态数据，然后会返回一个数组</span></span><br><span class="line">  <span class="comment">// 数组第一项为声明的数据，而第二个参数是一个方法，用于调用</span></span><br><span class="line">  <span class="comment">// 修改数据</span></span><br><span class="line">  <span class="keyword">const</span> [searchValue, setSearchValue] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在react修改数据需要调用useState返回的方法</span></span><br><span class="line">    setSearchValue(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useEffect接受两个参数，第一个是回调函数，第二个是要监听变化的属性，是一个数组</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当代码首次调用useEffect会进入这个回调函数，然后</span></span><br><span class="line">    <span class="comment">// 当serchValue 发生变化时，会再次进入到这里</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">  &#125;, [searchValue]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;searchValue&#125; onChange=&#123;handleChange&#125;&gt;&lt;/input&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上代码我们使用 <code>useEffect</code> 来监听 <code>searchValue</code> 的变化，然后触发新的逻辑，但是看到上面代码，我们并没有发现<code>取消 effect</code> 的方法，那么如何取消呢？<br><code>useEffect</code> 第二个参数是一个数组，通过给数组传入要监听的变量来实现数据监听，但是却没有办法去取消这个监听，所以我们需要曲线救国，就像下面代码这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [isWatch] = useState(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过isWatch来判断是否进行监听逻辑变化</span></span><br><span class="line">  <span class="keyword">if</span> (isWatch) &#123;</span><br><span class="line">    <span class="comment">// 监听数据变化</span></span><br><span class="line">    <span class="built_in">console</span>.log(searchValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [isWatch, searchValue]);</span><br></pre></td></tr></table></figure>

<h1 id="计算属性，在-React-中我也找到的踪迹"><a href="#计算属性，在-React-中我也找到的踪迹" class="headerlink" title="计算属性，在 React 中我也找到的踪迹"></a>计算属性，在 React 中我也找到的踪迹</h1><blockquote>
<p><code>Vue</code> 中的计算属性，相信大家都很熟悉，通常我们会使用计算属性来对 <code>template</code> 中的复杂逻辑计算进行简化，比如许多英文网站输入用户名的时候会输入 <code>firstName</code> 和 <code>lastName</code>，然后在界面上面又会将 <code>firstName</code> 和 <code>lastName</code> 连在一起显示，这时候就可以使用到了计算属性对显示进行处理</p>
</blockquote>
<h2 id="Vue2-0-中的写法-1"><a href="#Vue2-0-中的写法-1" class="headerlink" title="Vue2.0 中的写法"></a>Vue2.0 中的写法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>firstName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名:&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        firstName: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        lastName: <span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      name() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot;·&quot;</span> + <span class="built_in">this</span>.lastName;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue3-0-中的写法-1"><a href="#Vue3-0-中的写法-1" class="headerlink" title="Vue3.0 中的写法"></a>Vue3.0 中的写法</h2><p>在 Vue3.0 的 Composition API 也提供了 computed API，用于生成计算属性，用法与 Vue2.0 用法基本是一致的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">      firstName: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      lastName: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> name = computed(<span class="function">() =&gt;</span> state.firstName + <span class="string">&quot;·&quot;</span> + state.lastName);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state,</span><br><span class="line">      name</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="React-中的写法"><a href="#React-中的写法" class="headerlink" title="React 中的写法"></a>React 中的写法</h2><p>在说到在 <code>React</code> 中模拟计算属性之前，我们先要了解一些 <code>React Hook</code> 的规则。</p>
<p>只能在最顶层使用 <code>Hook</code><br>只能在 <code>React</code> 函数中调用 <code>Hook</code></p>
<p>当我们在 <code>React</code> 函数中使用 <code>useState</code> 之后，如果我们通过 <code>setState</code> 修改了 <code>state</code>，那么这时候 <code>react</code> <code>会做什么呢？React</code> 会将这个函数式组件重新执行一遍，但是对于里面的 <code>useState</code>，<code>useEffect</code> 等等不会重新初始化，而是使用已经记录的状态进行处理。那么 <code>React</code> 是怎么知道哪个 <code>state</code> 对应哪个 <code>useState</code> 呢？答案是 React 靠的是 Hook 调用的顺序。所以我们不能在非顶层比如 if 里面使用 <code>Hook</code>。<br>同时呢？因为 <code>state</code> 的变化会引起整个函数重新执行，那么假如我们在代码里面写了这样一段逻辑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [firstName, setFirstName] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> [lastName, setLastName] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> [other, setOther] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 useMemo可以模仿Vue中的计算属性</span></span><br><span class="line"><span class="keyword">const</span> name = firstName + <span class="string">&quot;·&quot;</span> + lastName;</span><br></pre></td></tr></table></figure>

<p>上面代码里面我们的 name 是通过 firstName 与 lastName 计算而来的，那么当 firstName 或者 lastName 发生变化时，都会重新计算 name，这个逻辑是正确的。但是实际上 other 如果发生了变化,也会导致 name 重新计算，这是我们不愿意看到的。假如 name 的计算逻辑很复杂，那么就会引起不必要的性能开支。所以 React 提供了 useMemo，用于避免非相关属性变化引起计算逻辑发生变化，而我们正好可以利用 useMemo 来模拟计算属性，如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useMemo, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [firstName, setFirstName] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [lastName, setLastName] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 useMemo可以模仿Vue中的计算属性,当firstName与`lastName`任何一个发生变化</span></span><br><span class="line">  <span class="comment">//都会触发`name`重新计算，但是对于其他属性变化，并不会引起重新计算</span></span><br><span class="line">  <span class="keyword">const</span> name = useMemo(<span class="function">() =&gt;</span> firstName + <span class="string">&quot;·&quot;</span> + lastName, [firstName, lastName]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleChange = (</span><br><span class="line">    method: <span class="built_in">Function</span>,</span><br><span class="line">    e: React.ChangeEvent&lt;HTMLInputElement&gt;</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    method(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;label&gt;firstName&lt;/label&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          value=&#123;firstName&#125;</span><br><span class="line">          onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> handleChange(setFirstName, e)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;label&gt;lastName&lt;/label&gt;</span><br><span class="line">        &lt;input value=&#123;lastName&#125; onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> handleChange(setLastName, e)&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;用户名:&#123;name&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是呢，在 Vue 中计算属性既可以 get,也可以 set,这一点我们是无法使用 useMemo 来模拟的</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>事件种类</title>
    <url>/2021/01/14/dom/event-type/</url>
    <content><![CDATA[<p>浏览器支持大量的事件，本章介绍其中一些主要的事件。</p>
<h1 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h1><p>鼠标事件指与鼠标相关的事件，继承了<code>MouseEvent</code>接口。具体的事件主要有以下一些。</p>
<ul>
<li><code>click</code>：按下鼠标（通常是按下主按钮）时触发。</li>
<li><code>dblclick</code>：在同一个元素上双击鼠标时触发。</li>
<li><code>mousedown</code>：按下鼠标键时触发。</li>
<li><code>mouseup</code>：释放按下的鼠标键时触发。</li>
<li><code>mousemove</code>：当鼠标在一个节点内部移动时触发。当鼠标持续移动时，该事件会连续触发。为了避免性能问题，建议对该事件的监听函数做一些限定，比如限定一段时间内只能运行一次。</li>
<li><code>mouseenter</code>：鼠标进入一个节点时触发，进入子节点不会触发这个事件（详见后文）。</li>
<li><code>mouseover</code>：鼠标进入一个节点时触发，进入子节点会再一次触发这个事件（详见后文）。</li>
<li><code>mouseout</code>：鼠标离开一个节点时触发，离开父节点也会触发这个事件（详见后文）。</li>
<li><code>mouseleave</code>：鼠标离开一个节点时触发，离开父节点不会触发这个事件（详见后文）。</li>
<li><code>contextmenu</code>：按下鼠标右键时（上下文菜单出现前）触发，或者按下“上下文菜单键”时触发。</li>
<li><code>wheel</code>：滚动鼠标的滚轮时触发，该事件继承的是<code>WheelEvent</code>接口。</li>
</ul>
<p><code>click</code>事件指的是，用户在同一个位置先完成<code>mousedown</code>动作，再完成<code>mouseup</code>动作。因此，触发顺序是，<code>mousedown</code>首先触发，<code>mouseup</code>接着触发，<code>click</code>最后触发。</p>
<p><code>dblclick</code>事件则会在<code>mousedown</code>、<code>mouseup</code>、<code>click</code>之后触发。</p>
<p><code>mouseover</code>事件和<code>mouseenter</code>事件，都是鼠标进入一个节点时触发。两者的区别是，<code>mouseenter</code>事件只触发一次，而只要鼠标在节点内部移动，<code>mouseover</code>事件会在子节点上触发多次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* HTML 代码如下</span></span><br><span class="line"><span class="comment"> &lt;ul&gt;</span></span><br><span class="line"><span class="comment">   &lt;li&gt;item 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">   &lt;li&gt;item 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">  &lt;li&gt;item 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入 ul 节点以后，mouseenter 事件只会触发一次</span></span><br><span class="line"><span class="comment">// 以后只要鼠标在节点内移动，都不会再触发这个事件</span></span><br><span class="line"><span class="comment">// event.target 是 ul 节点</span></span><br><span class="line">ul.addEventListener(</span><br><span class="line">  <span class="string">&quot;mouseenter&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.target.style.color = <span class="string">&quot;purple&quot;</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      event.target.style.color = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入 ul 节点以后，只要在子节点上移动，mouseover 事件会触发多次</span></span><br><span class="line"><span class="comment">// event.target 是 li 节点</span></span><br><span class="line">ul.addEventListener(</span><br><span class="line">  <span class="string">&quot;mouseover&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.target.style.color = <span class="string">&quot;orange&quot;</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      event.target.style.color = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，在父节点内部进入子节点，不会触发<code>mouseenter</code>事件，但是会触发<code>mouseover</code>事件。</p>
<p><code>mouseout</code>事件和<code>mouseleave</code>事件，都是鼠标离开一个节点时触发。两者的区别是，在父元素内部离开一个子元素时，<code>mouseleave</code>事件不会触发，而<code>mouseout</code>事件会触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* HTML 代码如下</span></span><br><span class="line"><span class="comment"> &lt;ul&gt;</span></span><br><span class="line"><span class="comment">   &lt;li&gt;item 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">   &lt;li&gt;item 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">  &lt;li&gt;item 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先进入 ul 节点，然后在节点内部移动，不会触发 mouseleave 事件</span></span><br><span class="line"><span class="comment">// 只有离开 ul 节点时，触发一次 mouseleave</span></span><br><span class="line"><span class="comment">// event.target 是 ul 节点</span></span><br><span class="line">ul.addEventListener(</span><br><span class="line">  <span class="string">&quot;mouseleave&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.target.style.color = <span class="string">&quot;purple&quot;</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      event.target.style.color = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先进入 ul 节点，然后在节点内部移动，mouseout 事件会触发多次</span></span><br><span class="line"><span class="comment">// event.target 是 li 节点</span></span><br><span class="line">ul.addEventListener(</span><br><span class="line">  <span class="string">&quot;mouseout&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.target.style.color = <span class="string">&quot;orange&quot;</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      event.target.style.color = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，在父节点内部离开子节点，不会触发<code>mouseleave</code>事件，但是会触发<code>mouseout</code>事件。</p>
<h1 id="MouseEvent-接口概述"><a href="#MouseEvent-接口概述" class="headerlink" title="MouseEvent 接口概述"></a>MouseEvent 接口概述</h1><p><code>MouseEvent</code>接口代表了鼠标相关的事件，单击（click）、双击（dblclick）、松开鼠标键（mouseup）、按下鼠标键（mousedown）等动作，所产生的事件对象都是<code>MouseEvent</code>实例。此外，滚轮事件和拖拉事件也是<code>MouseEvent</code>实例。</p>
<p><code>MouseEvent</code>接口继承了<code>Event</code>接口，所以拥有<code>Event</code>的所有属性和方法。它还有自己的属性和方法。</p>
<p>浏览器原生提供一个<code>MouseEvent</code>构造函数，用于新建一个<code>MouseEvent</code>实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> MouseEvent(type, options);</span><br></pre></td></tr></table></figure>

<p><code>MouseEvent</code>构造函数接受两个参数。第一个参数是字符串，表示事件名称；第二个参数是一个事件配置对象，该参数可选。除了<code>Event</code>接口的实例配置属性，该对象可以配置以下属性，所有属性都是可选的。</p>
<ul>
<li><code>screenX</code>：数值，鼠标相对于屏幕的水平位置（单位像素），默认值为 0，设置该属性不会移动鼠标。</li>
<li><code>screenY</code>：数值，鼠标相对于屏幕的垂直位置（单位像素），其他与<code>screenX</code>相同。</li>
<li><code>clientX</code>：数值，鼠标相对于程序窗口的水平位置（单位像素），默认值为 0，设置该属性不会移动鼠标。</li>
<li><code>clientY</code>：数值，鼠标相对于程序窗口的垂直位置（单位像素），其他与<code>clientX</code>相同。</li>
<li><code>ctrlKey</code>：布尔值，是否同时按下了 Ctrl 键，默认值为<code>false</code>。</li>
<li><code>shiftKey</code>：布尔值，是否同时按下了 Shift 键，默认值为<code>false</code>。</li>
<li><code>altKey</code>：布尔值，是否同时按下 Alt 键，默认值为<code>false</code>。</li>
<li><code>metaKey</code>：布尔值，是否同时按下 Meta 键，默认值为<code>false</code>。</li>
<li><code>button</code>：数值，表示按下了哪一个鼠标按键，默认值为<code>0</code>，表示按下主键（通常是鼠标的左键）或者当前事件没有定义这个属性；<code>1</code>表示按下辅助键（通常是鼠标的中间键），<code>2</code>表示按下次要键（通常是鼠标的右键）。</li>
<li><code>buttons</code>：数值，表示按下了鼠标的哪些键，是一个三个比特位的二进制值，默认为<code>0</code>（没有按下任何键）。<code>1</code>（二进制<code>001</code>）表示按下主键（通常是左键），<code>2</code>（二进制<code>010</code>）表示按下次要键（通常是右键），<code>4</code>（二进制<code>100</code>）表示按下辅助键（通常是中间键）。因此，如果返回<code>3</code>（二进制<code>011</code>）就表示同时按下了左键和右键。</li>
<li><code>relatedTarget</code>：节点对象，表示事件的相关节点，默认为<code>null</code>。<code>mouseenter</code>和<code>mouseover</code>事件时，表示鼠标刚刚离开的那个元素节点；<code>mouseout</code>和<code>mouseleave</code>事件时，表示鼠标正在进入的那个元素节点。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simulateClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="keyword">new</span> MouseEvent(<span class="string">&quot;click&quot;</span>, &#123;</span><br><span class="line">    bubbles: <span class="literal">true</span>,</span><br><span class="line">    cancelable: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> cb = <span class="built_in">document</span>.getElementById(<span class="string">&quot;checkbox&quot;</span>);</span><br><span class="line">  cb.dispatchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码生成一个鼠标点击事件，并触发该事件。</p>
<h1 id="MouseEvent-接口的实例属性"><a href="#MouseEvent-接口的实例属性" class="headerlink" title="MouseEvent 接口的实例属性"></a>MouseEvent 接口的实例属性</h1><h2 id="MouseEvent-altKey，MouseEvent-ctrlKey，MouseEvent-metaKey，MouseEvent-shiftKey"><a href="#MouseEvent-altKey，MouseEvent-ctrlKey，MouseEvent-metaKey，MouseEvent-shiftKey" class="headerlink" title="MouseEvent.altKey，MouseEvent.ctrlKey，MouseEvent.metaKey，MouseEvent.shiftKey"></a>MouseEvent.altKey，MouseEvent.ctrlKey，MouseEvent.metaKey，MouseEvent.shiftKey</h2><p><code>MouseEvent.altKey</code>、<code>MouseEvent.ctrlKey</code>、<code>MouseEvent.metaKey</code>、<code>MouseEvent.shiftKey</code>这四个属性都返回一个布尔值，表示事件发生时，是否按下对应的键。它们都是只读属性。</p>
<ul>
<li><code>altKey</code>属性：Alt 键</li>
<li><code>ctrlKey</code>属性：Ctrl 键</li>
<li><code>metaKey</code>属性：Meta 键（Mac 键盘是一个四瓣的小花，Windows 键盘是 Windows 键）</li>
<li><code>shiftKey</code>属性：Shift 键</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;body onclick=&quot;showKey(event)&quot;&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showKey</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ALT key pressed: &quot;</span> + e.altKey);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;CTRL key pressed: &quot;</span> + e.ctrlKey);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;META key pressed: &quot;</span> + e.metaKey);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;SHIFT key pressed: &quot;</span> + e.shiftKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，点击网页会输出是否同时按下对应的键。</p>
<h2 id="MouseEvent-button，MouseEvent-buttons"><a href="#MouseEvent-button，MouseEvent-buttons" class="headerlink" title="MouseEvent.button，MouseEvent.buttons"></a>MouseEvent.button，MouseEvent.buttons</h2><p><code>MouseEvent.button</code>属性返回一个数值，表示事件发生时按下了鼠标的哪个键。该属性只读。</p>
<ul>
<li>0：按下主键（通常是左键），或者该事件没有初始化这个属性（比如<code>mousemove</code>事件）。</li>
<li>1：按下辅助键（通常是中键或者滚轮键）。</li>
<li>2：按下次键（通常是右键）。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;button onmouseup=&quot;whichButton(event)&quot;&gt;点击&lt;/button&gt;</span></span><br><span class="line"><span class="keyword">var</span> whichButton = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (e.button) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Left button clicked.&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Middle button clicked.&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Right button clicked.&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Unexpected code: &quot;</span> + e.button);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>MouseEvent.buttons</code>属性返回一个三个比特位的值，表示同时按下了哪些键。它用来处理同时按下多个鼠标键的情况。该属性只读。</p>
<ul>
<li>1：二进制为<code>001</code>（十进制的 1），表示按下左键。</li>
<li>2：二进制为<code>010</code>（十进制的 2），表示按下右键。</li>
<li>4：二进制为<code>100</code>（十进制的 4），表示按下中键或滚轮键。</li>
</ul>
<p>同时按下多个键的时候，每个按下的键对应的比特位都会有值。比如，同时按下左键和右键，会返回 3（二进制为 011）。</p>
<h2 id="MouseEvent-clientX，MouseEvent-clientY"><a href="#MouseEvent-clientX，MouseEvent-clientY" class="headerlink" title="MouseEvent.clientX，MouseEvent.clientY"></a>MouseEvent.clientX，MouseEvent.clientY</h2><p><code>MouseEvent.clientX</code>属性返回鼠标位置相对于浏览器窗口左上角的水平坐标（单位像素），<code>MouseEvent.clientY</code>属性返回垂直坐标。这两个属性都是只读属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;body onmousedown=&quot;showCoords(event)&quot;&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCoords</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;clientX value: &quot;</span> +</span><br><span class="line">      evt.clientX +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;clientY value: &quot;</span> +</span><br><span class="line">      evt.clientY +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两个属性还分别有一个别名<code>MouseEvent.x</code>和<code>MouseEvent.y</code>。</p>
<h2 id="MouseEvent-movementX，MouseEvent-movementY"><a href="#MouseEvent-movementX，MouseEvent-movementY" class="headerlink" title="MouseEvent.movementX，MouseEvent.movementY"></a>MouseEvent.movementX，MouseEvent.movementY</h2><p><code>MouseEvent.movementX</code>属性返回当前位置与上一个<code>mousemove</code>事件之间的水平距离（单位像素）。数值上，它等于下面的计算公式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">currentEvent.movementX = currentEvent.screenX - previousEvent.screenX;</span><br></pre></td></tr></table></figure>

<p><code>MouseEvent.movementY</code>属性返回当前位置与上一个<code>mousemove</code>事件之间的垂直距离（单位像素）。数值上，它等于下面的计算公式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">currentEvent.movementY = currentEvent.screenY - previousEvent.screenY。</span><br></pre></td></tr></table></figure>

<p>这两个属性都是只读属性。</p>
<h2 id="MouseEvent-screenX，MouseEvent-screenY"><a href="#MouseEvent-screenX，MouseEvent-screenY" class="headerlink" title="MouseEvent.screenX，MouseEvent.screenY"></a>MouseEvent.screenX，MouseEvent.screenY</h2><p><code>MouseEvent.screenX</code>属性返回鼠标位置相对于屏幕左上角的水平坐标（单位像素），<code>MouseEvent.screenY</code>属性返回垂直坐标。这两个属性都是只读属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;body onmousedown=&quot;showCoords(event)&quot;&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCoords</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&#x27;screenX value: &#x27;</span> + evt.screenX + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="string">&#x27;screenY value: &#x27;</span> + evt.screenY + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MouseEvent-offsetX，MouseEvent-offsetY"><a href="#MouseEvent-offsetX，MouseEvent-offsetY" class="headerlink" title="MouseEvent.offsetX，MouseEvent.offsetY"></a>MouseEvent.offsetX，MouseEvent.offsetY</h2><p><code>MouseEvent.offsetX</code>属性返回鼠标位置与目标节点左侧的<code>padding</code>边缘的水平距离（单位像素），<code>MouseEvent.offsetY</code>属性返回与目标节点上方的<code>padding</code>边缘的垂直距离。这两个属性都是只读属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* HTML 代码如下</span></span><br><span class="line"><span class="comment">  &lt;style&gt;</span></span><br><span class="line"><span class="comment">    p &#123;</span></span><br><span class="line"><span class="comment">      width: 100px;</span></span><br><span class="line"><span class="comment">      height: 100px;</span></span><br><span class="line"><span class="comment">      padding: 100px;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &lt;/style&gt;</span></span><br><span class="line"><span class="comment">  &lt;p&gt;Hello&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">p.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.offsetX);</span><br><span class="line">    <span class="built_in">console</span>.log(e.offsetY);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，鼠标如果在<code>p</code>元素的中心位置点击，会返回<code>150 150</code>。因此中心位置距离左侧和上方的<code>padding</code>边缘，等于<code>padding</code>的宽度（100 像素）加上元素内容区域一半的宽度（50 像素）。</p>
<h2 id="MouseEvent-pageX，MouseEvent-pageY"><a href="#MouseEvent-pageX，MouseEvent-pageY" class="headerlink" title="MouseEvent.pageX，MouseEvent.pageY"></a>MouseEvent.pageX，MouseEvent.pageY</h2><p><code>MouseEvent.pageX</code>属性返回鼠标位置与文档左侧边缘的距离（单位像素），<code>MouseEvent.pageY</code>属性返回与文档上侧边缘的距离（单位像素）。它们的返回值都包括文档不可见的部分。这两个属性都是只读。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* HTML 代码如下</span></span><br><span class="line"><span class="comment">  &lt;style&gt;</span></span><br><span class="line"><span class="comment">    body &#123;</span></span><br><span class="line"><span class="comment">      height: 2000px;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &lt;/style&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.pageX);</span><br><span class="line">    <span class="built_in">console</span>.log(e.pageY);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，页面高度为 2000 像素，会产生垂直滚动条。滚动到页面底部，点击鼠标输出的<code>pageY</code>值会接近 2000。</p>
<h2 id="MouseEvent-relatedTarget"><a href="#MouseEvent-relatedTarget" class="headerlink" title="MouseEvent.relatedTarget"></a>MouseEvent.relatedTarget</h2><p><code>MouseEvent.relatedTarget</code>属性返回事件的相关节点。对于那些没有相关节点的事件，该属性返回<code>null</code>。该属性只读。</p>
<p>下表列出不同事件的<code>target</code>属性值和<code>relatedTarget</code>属性值义。</p>
<table>
<thead>
<tr>
<th>事件名称</th>
<th>target 属性</th>
<th>relatedTarget 属性</th>
</tr>
</thead>
<tbody><tr>
<td>focusin</td>
<td>接受焦点的节点</td>
<td>丧失焦点的节点</td>
</tr>
<tr>
<td>focusout</td>
<td>丧失焦点的节点</td>
<td>接受焦点的节点</td>
</tr>
<tr>
<td>mouseenter</td>
<td>将要进入的节点</td>
<td>将要离开的节点</td>
</tr>
<tr>
<td>mouseleave</td>
<td>将要离开的节点</td>
<td>将要进入的节点</td>
</tr>
<tr>
<td>mouseout</td>
<td>将要离开的节点</td>
<td>将要进入的节点</td>
</tr>
<tr>
<td>mouseover</td>
<td>将要进入的节点</td>
<td>将要离开的节点</td>
</tr>
<tr>
<td>dragenter</td>
<td>将要进入的节点</td>
<td>将要离开的节点</td>
</tr>
<tr>
<td>dragexit</td>
<td>将要离开的节点</td>
<td>将要进入的节点</td>
</tr>
</tbody></table>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  HTML 代码如下</span></span><br><span class="line"><span class="comment">  &lt;div id=&quot;outer&quot; style=&quot;height:50px;width:50px;border-width:1px solid black;&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;div id=&quot;inner&quot; style=&quot;height:25px;width:25px;border:1px solid black;&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">&quot;inner&quot;</span>);</span><br><span class="line">inner.addEventListener(</span><br><span class="line">  <span class="string">&quot;mouseover&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;进入&quot;</span> + event.target.id + <span class="string">&quot; 离开&quot;</span> + event.relatedTarget.id);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line">inner.addEventListener(<span class="string">&quot;mouseenter&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;进入&quot;</span> + event.target.id + <span class="string">&quot; 离开&quot;</span> + event.relatedTarget.id);</span><br><span class="line">&#125;);</span><br><span class="line">inner.addEventListener(<span class="string">&quot;mouseout&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;离开&quot;</span> + event.target.id + <span class="string">&quot; 进入&quot;</span> + event.relatedTarget.id);</span><br><span class="line">&#125;);</span><br><span class="line">inner.addEventListener(<span class="string">&quot;mouseleave&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;离开&quot;</span> + event.target.id + <span class="string">&quot; 进入&quot;</span> + event.relatedTarget.id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标从 outer 进入inner，输出</span></span><br><span class="line"><span class="comment">// 进入inner 离开outer</span></span><br><span class="line"><span class="comment">// 进入inner 离开outer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标从 inner进入 outer，输出</span></span><br><span class="line"><span class="comment">// 离开inner 进入outer</span></span><br><span class="line"><span class="comment">// 离开inner 进入outer</span></span><br></pre></td></tr></table></figure>

<h1 id="MouseEvent-接口的实例方法"><a href="#MouseEvent-接口的实例方法" class="headerlink" title="MouseEvent 接口的实例方法"></a>MouseEvent 接口的实例方法</h1><h2 id="MouseEvent-getModifierState"><a href="#MouseEvent-getModifierState" class="headerlink" title="MouseEvent.getModifierState()"></a>MouseEvent.getModifierState()</h2><p><code>MouseEvent.getModifierState</code>方法返回一个布尔值，表示有没有按下特定的功能键。它的参数是一个表示<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState#Modifier_keys_on_Gecko">功能键</a>的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.getModifierState(<span class="string">&quot;CapsLock&quot;</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面的代码可以了解用户是否按下了大写键。</p>
<h1 id="WheelEvent-接口"><a href="#WheelEvent-接口" class="headerlink" title="WheelEvent 接口"></a>WheelEvent 接口</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>WheelEvent 接口继承了 MouseEvent 实例，代表鼠标滚轮事件的实例对象。目前，鼠标滚轮相关的事件只有一个<code>wheel</code>事件，用户滚动鼠标的滚轮，就生成这个事件的实例。</p>
<p>浏览器原生提供<code>WheelEvent()</code>构造函数，用来生成<code>WheelEvent</code>实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wheelEvent = <span class="keyword">new</span> WheelEvent(type, options);</span><br></pre></td></tr></table></figure>

<p><code>WheelEvent()</code>构造函数可以接受两个参数，第一个是字符串，表示事件类型，对于滚轮事件来说，这个值目前只能是<code>wheel</code>。第二个参数是事件的配置对象。该对象的属性除了<code>Event</code>、<code>UIEvent</code>的配置属性以外，还可以接受以下几个属性，所有属性都是可选的。</p>
<ul>
<li><code>deltaX</code>：数值，表示滚轮的水平滚动量，默认值是 0.0。</li>
<li><code>deltaY</code>：数值，表示滚轮的垂直滚动量，默认值是 0.0。</li>
<li><code>deltaZ</code>：数值，表示滚轮的 Z 轴滚动量，默认值是 0.0。</li>
<li><code>deltaMode</code>：数值，表示相关的滚动事件的单位，适用于上面三个属性。<code>0</code>表示滚动单位为像素，<code>1</code>表示单位为行，<code>2</code>表示单位为页，默认为<code>0</code>。</li>
</ul>
<h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><p><code>WheelEvent</code>事件实例除了具有<code>Event</code>和<code>MouseEvent</code>的实例属性和实例方法，还有一些自己的实例属性，但是没有自己的实例方法。</p>
<p>下面的属性都是只读属性。</p>
<ul>
<li><code>WheelEvent.deltaX</code>：数值，表示滚轮的水平滚动量。</li>
<li><code>WheelEvent.deltaY</code>：数值，表示滚轮的垂直滚动量。</li>
<li><code>WheelEvent.deltaZ</code>：数值，表示滚轮的 Z 轴滚动量。</li>
<li><code>WheelEvent.deltaMode</code>：数值，表示上面三个属性的单位，<code>0</code>是像素，<code>1</code>是行，<code>2</code>是页。</li>
</ul>
<h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><p>键盘事件由用户击打键盘触发，主要有<code>keydown</code>、<code>keypress</code>、<code>keyup</code>三个事件，它们都继承了<code>KeyboardEvent</code>接口。</p>
<ul>
<li><code>keydown</code>：按下键盘时触发。</li>
<li><code>keypress</code>：按下有值的键时触发，即按下 Ctrl、Alt、Shift、Meta 这样无值的键，这个事件不会触发。对于有值的键，按下时先触发<code>keydown</code>事件，再触发这个事件。</li>
<li><code>keyup</code>：松开键盘时触发该事件。</li>
</ul>
<p>如果用户一直按键不松开，就会连续触发键盘事件，触发的顺序如下。</p>
<ol>
<li>keydown</li>
<li>keypress</li>
<li>keydown</li>
<li>keypress</li>
<li>…（重复以上过程）</li>
<li>keyup</li>
</ol>
<h1 id="KeyboardEvent-接口"><a href="#KeyboardEvent-接口" class="headerlink" title="KeyboardEvent 接口"></a>KeyboardEvent 接口</h1><p><code>KeyboardEvent</code>接口用来描述用户与键盘的互动。这个接口继承了<code>Event</code>接口，并且定义了自己的实例属性和实例方法。</p>
<p>浏览器原生提供<code>KeyboardEvent</code>构造函数，用来新建键盘事件的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> KeyboardEvent(type, options);</span><br></pre></td></tr></table></figure>

<p><code>KeyboardEvent</code>构造函数接受两个参数。第一个参数是字符串，表示事件类型；第二个参数是一个事件配置对象，该参数可选。除了<code>Event</code>接口提供的属性，还可以配置以下字段，它们都是可选。</p>
<ul>
<li><code>key</code>：字符串，当前按下的键，默认为空字符串。</li>
<li><code>code</code>：字符串，表示当前按下的键的字符串形式，默认为空字符串。</li>
<li><code>location</code>：整数，当前按下的键的位置，默认为<code>0</code>。</li>
<li><code>ctrlKey</code>：布尔值，是否按下 Ctrl 键，默认为<code>false</code>。</li>
<li><code>shiftKey</code>：布尔值，是否按下 Shift 键，默认为<code>false</code>。</li>
<li><code>altKey</code>：布尔值，是否按下 Alt 键，默认为<code>false</code>。</li>
<li><code>metaKey</code>：布尔值，是否按下 Meta 键，默认为<code>false</code>。</li>
<li><code>repeat</code>：布尔值，是否重复按键，默认为<code>false</code>。</li>
</ul>
<h1 id="KeyboardEvent-的实例属性"><a href="#KeyboardEvent-的实例属性" class="headerlink" title="KeyboardEvent 的实例属性"></a>KeyboardEvent 的实例属性</h1><h2 id="KeyboardEvent-altKey，KeyboardEvent-metaKey-ctrlKey，KeyboardEvent-metaKey，KeyboardEvent-shiftKey"><a href="#KeyboardEvent-altKey，KeyboardEvent-metaKey-ctrlKey，KeyboardEvent-metaKey，KeyboardEvent-shiftKey" class="headerlink" title="KeyboardEvent.altKey，KeyboardEvent.metaKey.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey"></a>KeyboardEvent.altKey，KeyboardEvent.metaKey.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey</h2><p>以下属性都是只读属性，返回一个布尔值，表示是否按下对应的键。</p>
<ul>
<li><code>KeyboardEvent.altKey</code>：是否按下 Alt 键</li>
<li><code>KeyboardEvent.ctrlKey</code>：是否按下 Ctrl 键</li>
<li><code>KeyboardEvent.metaKey</code>：是否按下 meta 键（Mac 系统是一个四瓣的小花，Windows 系统是 windows 键）</li>
<li><code>KeyboardEvent.shiftKey</code>：是否按下 Shift 键</li>
</ul>
<p>下面是一个示例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showChar</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ALT: &quot;</span> + e.altKey);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;CTRL: &quot;</span> + e.ctrlKey);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Meta: &quot;</span> + e.metaKey);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Meta: &quot;</span> + e.shiftKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">&quot;keydown&quot;</span>, showChar, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h2 id="KeyboardEvent-code"><a href="#KeyboardEvent-code" class="headerlink" title="KeyboardEvent.code"></a>KeyboardEvent.code</h2><p><code>KeyboardEvent.code</code>属性返回一个字符串，表示当前按下的键的字符串形式。该属性只读。</p>
<p>下面是一些常用键的字符串形式，其他键请查<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values">文档</a>。</p>
<ul>
<li>数字键 0 - 9：返回<code>digital0</code> - <code>digital9</code></li>
<li>字母键 A - z：返回<code>KeyA</code> - <code>KeyZ</code></li>
<li>功能键 F1 - F12：返回 <code>F1</code> - <code>F12</code></li>
<li>方向键：返回<code>ArrowDown</code>、<code>ArrowUp</code>、<code>ArrowLeft</code>、<code>ArrowRight</code></li>
<li>Alt 键：返回<code>AltLeft</code>或<code>AltRight</code></li>
<li>Shift 键：返回<code>ShiftLeft</code>或<code>ShiftRight</code></li>
<li>Ctrl 键：返回<code>ControLeft</code>或<code>ControlRight</code></li>
</ul>
<h2 id="KeyboardEvent-key"><a href="#KeyboardEvent-key" class="headerlink" title="KeyboardEvent.key"></a>KeyboardEvent.key</h2><p><code>KeyboardEvent.key</code>属性返回一个字符串，表示按下的键名。该属性只读。</p>
<p>如果按下的键代表可打印字符，则返回这个字符，比如数字、字母。</p>
<p>如果按下的键代表不可打印的特殊字符，则返回预定义的键值，比如 Backspace，Tab，Enter，Shift，Control，Alt，CapsLock，Esc，Spacebar，PageUp，PageDown，End，Home，Left，Right，Up，Down，PrintScreen，Insert，Del，Win，F1 ～ F12，NumLock，Scroll 等。</p>
<p>如果同时按下一个控制键和一个符号键，则返回符号键的键名。比如，按下 Ctrl + a，则返回<code>a</code>；按下 Shift + a，则返回大写的<code>A</code>。</p>
<p>如果无法识别键名，返回字符串<code>Unidentified</code>。</p>
<h2 id="KeyboardEvent-location"><a href="#KeyboardEvent-location" class="headerlink" title="KeyboardEvent.location"></a>KeyboardEvent.location</h2><p><code>KeyboardEvent.location</code>属性返回一个整数，表示按下的键处在键盘的哪一个区域。它可能取以下值。</p>
<ul>
<li>0：处在键盘的主区域，或者无法判断处于哪一个区域。</li>
<li>1：处在键盘的左侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。</li>
<li>2：处在键盘的右侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。</li>
<li>3：处在数字小键盘。</li>
</ul>
<h2 id="KeyboardEvent-repeat"><a href="#KeyboardEvent-repeat" class="headerlink" title="KeyboardEvent.repeat"></a>KeyboardEvent.repeat</h2><p><code>KeyboardEvent.repeat</code>返回一个布尔值，代表该键是否被按着不放，以便判断是否重复这个键，即浏览器会持续触发<code>keydown</code>和<code>keypress</code>事件，直到用户松开手为止。</p>
<h1 id="KeyboardEvent-的实例方法"><a href="#KeyboardEvent-的实例方法" class="headerlink" title="KeyboardEvent 的实例方法"></a>KeyboardEvent 的实例方法</h1><h2 id="KeyboardEvent-getModifierState"><a href="#KeyboardEvent-getModifierState" class="headerlink" title="KeyboardEvent.getModifierState()"></a>KeyboardEvent.getModifierState()</h2><p><code>KeyboardEvent.getModifierState()</code>方法返回一个布尔值，表示是否按下或激活指定的功能键。它的常用参数如下。</p>
<ul>
<li><code>Alt</code>：Alt 键</li>
<li><code>CapsLock</code>：大写锁定键</li>
<li><code>Control</code>：Ctrl 键</li>
<li><code>Meta</code>：Meta 键</li>
<li><code>NumLock</code>：数字键盘开关键</li>
<li><code>Shift</code>：Shift 键</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  event.getModifierState(<span class="string">&quot;Control&quot;</span>) +</span><br><span class="line">    event.getModifierState(<span class="string">&quot;Alt&quot;</span>) +</span><br><span class="line">    event.getModifierState(<span class="string">&quot;Meta&quot;</span>) &gt;</span><br><span class="line">  <span class="number">1</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码表示，只要<code>Control</code>、<code>Alt</code>、<code>Meta</code>里面，同时按下任意两个或两个以上的键就返回。</p>
<h1 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h1><p>进度事件用来描述资源加载的进度，主要由 AJAX 请求、<code>&lt;img&gt;</code>、<code>&lt;audio&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;link&gt;</code>等外部资源的加载触发，继承了<code>ProgressEvent</code>接口。它主要包含以下几种事件。</p>
<ul>
<li><code>abort</code>：外部资源中止加载时（比如用户取消）触发。如果发生错误导致中止，不会触发该事件。</li>
<li><code>error</code>：由于错误导致外部资源无法加载时触发。</li>
<li><code>load</code>：外部资源加载成功时触发。</li>
<li><code>loadstart</code>：外部资源开始加载时触发。</li>
<li><code>loadend</code>：外部资源停止加载时触发，发生顺序排在<code>error</code>、<code>abort</code>、<code>load</code>等事件的后面。</li>
<li><code>progress</code>：外部资源加载过程中不断触发。</li>
<li><code>timeout</code>：加载超时时触发。</li>
</ul>
<p>注意，除了资源下载，文件上传也存在这些事件。</p>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">image.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  image.classList.add(<span class="string">&quot;finished&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">image.addEventListener(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  image.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码在图片元素加载完成后，为图片元素添加一个<code>finished</code>的 Class。如果加载失败，就把图片元素的样式设置为不显示。</p>
<p>有时候，图片加载会在脚本运行之前就完成，尤其是当脚本放置在网页底部的时候，因此有可能<code>load</code>和<code>error</code>事件的监听函数根本不会执行。所以，比较可靠的方式，是用<code>complete</code>属性先判断一下是否加载完成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loaded</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (image.complete) &#123;</span><br><span class="line">  loaded();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  image.addEventListener(<span class="string">&quot;load&quot;</span>, loaded);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 DOM 的元素节点没有提供是否加载错误的属性，所以<code>error</code>事件的监听函数最好放在<code>&lt;img&gt;</code>元素的 HTML 代码中，这样才能保证发生加载错误时百分之百会执行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/wrong/url&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;this.style.display=&#x27;none&#x27;;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>loadend</code>事件的监听函数，可以用来取代<code>abort</code>事件、<code>load</code>事件、<code>error</code>事件的监听函数，因为它总是在这些事件之后发生。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">req.addEventListener(<span class="string">&quot;loadend&quot;</span>, loadEnd, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadEnd</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;传输结束，成功失败未知&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>loadend</code>事件本身不提供关于进度结束的原因，但可以用它来做所有加载结束场景都需要做的一些操作。</p>
<p>另外，<code>error</code>事件有一个特殊的性质，就是不会冒泡。所以，子元素的<code>error</code>事件，不会触发父元素的<code>error</code>事件监听函数。</p>
<h1 id="ProgressEvent-接口"><a href="#ProgressEvent-接口" class="headerlink" title="ProgressEvent 接口"></a>ProgressEvent 接口</h1><p><code>ProgressEvent</code>接口主要用来描述外部资源加载的进度，比如 AJAX 加载、<code>&lt;img&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;link&gt;</code>等外部资源加载。进度相关的事件都继承了这个接口。</p>
<p>浏览器原生提供了<code>ProgressEvent()</code>构造函数，用来生成事件实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ProgressEvent(type, options);</span><br></pre></td></tr></table></figure>

<p><code>ProgressEvent()</code>构造函数接受两个参数。第一个参数是字符串，表示事件的类型，这个参数是必须的。第二个参数是一个配置对象，表示事件的属性，该参数可选。配置对象除了可以使用<code>Event</code>接口的配置属性，还可以使用下面的属性，所有这些属性都是可选的。</p>
<ul>
<li><code>lengthComputable</code>：布尔值，表示加载的总量是否可以计算，默认是<code>false</code>。</li>
<li><code>loaded</code>：整数，表示已经加载的量，默认是<code>0</code>。</li>
<li><code>total</code>：整数，表示需要加载的总量，默认是<code>0</code>。</li>
</ul>
<p><code>ProgressEvent</code>具有对应的实例属性。</p>
<ul>
<li><code>ProgressEvent.lengthComputable</code></li>
<li><code>ProgressEvent.loaded</code></li>
<li><code>ProgressEvent.total</code></li>
</ul>
<p>如果<code>ProgressEvent.lengthComputable</code>为<code>false</code>，<code>ProgressEvent.total</code>实际上是没有意义的。</p>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> ProgressEvent(<span class="string">&quot;load&quot;</span>, &#123;</span><br><span class="line">  lengthComputable: <span class="literal">true</span>,</span><br><span class="line">  loaded: <span class="number">30</span>,</span><br><span class="line">  total: <span class="number">100</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;已经加载：&quot;</span> + (e.loaded / e.total) * <span class="number">100</span> + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.dispatchEvent(p);</span><br><span class="line"><span class="comment">// 已经加载：30%</span></span><br></pre></td></tr></table></figure>

<p>上面代码先构造一个<code>load</code>事件，抛出后被监听函数捕捉到。</p>
<p>下面是一个实际的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.addEventListener(<span class="string">&quot;progress&quot;</span>, updateProgress, <span class="literal">false</span>);</span><br><span class="line">xhr.addEventListener(<span class="string">&quot;load&quot;</span>, transferComplete, <span class="literal">false</span>);</span><br><span class="line">xhr.addEventListener(<span class="string">&quot;error&quot;</span>, transferFailed, <span class="literal">false</span>);</span><br><span class="line">xhr.addEventListener(<span class="string">&quot;abort&quot;</span>, transferCanceled, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">xhr.open();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateProgress</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.lengthComputable) &#123;</span><br><span class="line">    <span class="keyword">var</span> percentComplete = e.loaded / e.total;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;不能计算进度&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferComplete</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;传输结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferFailed</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;传输过程中发生错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferCanceled</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;用户取消了传输&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是下载过程的进度事件，还存在上传过程的进度事件。这时所有监听函数都要放在<code>XMLHttpRequest.upload</code>对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.upload.addEventListener(<span class="string">&quot;progress&quot;</span>, updateProgress, <span class="literal">false</span>);</span><br><span class="line">xhr.upload.addEventListener(<span class="string">&quot;load&quot;</span>, transferComplete, <span class="literal">false</span>);</span><br><span class="line">xhr.upload.addEventListener(<span class="string">&quot;error&quot;</span>, transferFailed, <span class="literal">false</span>);</span><br><span class="line">xhr.upload.addEventListener(<span class="string">&quot;abort&quot;</span>, transferCanceled, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">xhr.open();</span><br></pre></td></tr></table></figure>

<h1 id="拖拉事件"><a href="#拖拉事件" class="headerlink" title="拖拉事件"></a>拖拉事件</h1><p>拖拉（drag）指的是，用户在某个对象上按下鼠标键不放，拖动它到另一个位置，然后释放鼠标键，将该对象放在那里。</p>
<p>拖拉的对象有好几种，包括元素节点、图片、链接、选中的文字等等。在网页中，除了元素节点默认不可以拖拉，其他（图片、链接、选中的文字）都是可以直接拖拉的。为了让元素节点可拖拉，可以将该节点的<code>draggable</code>属性设为<code>true</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>此区域可拖拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>draggable</code>属性可用于任何元素节点，但是图片（<code>&lt;img&gt;</code>）和链接（<code>&lt;a&gt;</code>）不加这个属性，就可以拖拉。对于它们，用到这个属性的时候，往往是将其设为<code>false</code>，防止拖拉这两种元素。</p>
<p>注意，一旦某个元素节点的<code>draggable</code>属性设为<code>true</code>，就无法再用鼠标选中该节点内部的文字或子节点了。</p>
<p>当元素节点或选中的文本被拖拉时，就会持续触发拖拉事件，包括以下一些事件。</p>
<ul>
<li><code>drag</code>：拖拉过程中，在被拖拉的节点上持续触发（相隔几百毫秒）。</li>
<li><code>dragstart</code>：用户开始拖拉时，在被拖拉的节点上触发，该事件的<code>target</code>属性是被拖拉的节点。通常应该在这个事件的监听函数中，指定拖拉的数据。</li>
<li><code>dragend</code>：拖拉结束时（释放鼠标键或按下 ESC 键）在被拖拉的节点上触发，该事件的<code>target</code>属性是被拖拉的节点。它与<code>dragstart</code>事件，在同一个节点上触发。不管拖拉是否跨窗口，或者中途被取消，<code>dragend</code>事件总是会触发的。</li>
<li><code>dragenter</code>：拖拉进入当前节点时，在当前节点上触发一次，该事件的<code>target</code>属性是当前节点。通常应该在这个事件的监听函数中，指定是否允许在当前节点放下（drop）拖拉的数据。如果当前节点没有该事件的监听函数，或者监听函数不执行任何操作，就意味着不允许在当前节点放下数据。在视觉上显示拖拉进入当前节点，也是在这个事件的监听函数中设置。</li>
<li><code>dragover</code>：拖拉到当前节点上方时，在当前节点上持续触发（相隔几百毫秒），该事件的<code>target</code>属性是当前节点。该事件与<code>dragenter</code>事件的区别是，<code>dragenter</code>事件在进入该节点时触发，然后只要没有离开这个节点，<code>dragover</code>事件会持续触发。</li>
<li><code>dragleave</code>：拖拉操作离开当前节点范围时，在当前节点上触发，该事件的<code>target</code>属性是当前节点。如果要在视觉上显示拖拉离开操作当前节点，就在这个事件的监听函数中设置。</li>
<li><code>drop</code>：被拖拉的节点或选中的文本，释放到目标节点时，在目标节点上触发。注意，如果当前节点不允许<code>drop</code>，即使在该节点上方松开鼠标键，也不会触发该事件。如果用户按下 ESC 键，取消这个操作，也不会触发该事件。该事件的监听函数负责取出拖拉数据，并进行相关处理。</li>
</ul>
<p>下面的例子展示，如何动态改变被拖动节点的背景色。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragstart&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.backgroundColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">div.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragend&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.backgroundColor = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>div</code>节点被拖动时，背景色会变为红色，拖动结束，又变回绿色。</p>
<p>下面是一个例子，展示如何实现将一个节点从当前父节点，拖拉到另一个父节点中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* HTML 代码如下</span></span><br><span class="line"><span class="comment"> &lt;div class=&quot;dropzone&quot;&gt;</span></span><br><span class="line"><span class="comment">   &lt;div id=&quot;draggable&quot; draggable=&quot;true&quot;&gt;</span></span><br><span class="line"><span class="comment">     该节点可拖拉</span></span><br><span class="line"><span class="comment">   &lt;/div&gt;</span></span><br><span class="line"><span class="comment"> &lt;/div&gt;</span></span><br><span class="line"><span class="comment"> &lt;div class=&quot;dropzone&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> &lt;div class=&quot;dropzone&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> &lt;div class=&quot;dropzone&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 被拖拉节点</span></span><br><span class="line"><span class="keyword">var</span> dragged;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragstart&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 保存被拖拉节点</span></span><br><span class="line">    dragged = event.target;</span><br><span class="line">    <span class="comment">// 被拖拉节点的背景色变透明</span></span><br><span class="line">    event.target.style.opacity = <span class="number">0.5</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragend&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 被拖拉节点的背景色恢复正常</span></span><br><span class="line">    event.target.style.opacity = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragover&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 防止拖拉效果被重置，允许被拖拉的节点放入目标节点</span></span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragenter&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 目标节点的背景色变紫色</span></span><br><span class="line">    <span class="comment">// 由于该事件会冒泡，所以要过滤节点</span></span><br><span class="line">    <span class="keyword">if</span> (event.target.className === <span class="string">&quot;dropzone&quot;</span>) &#123;</span><br><span class="line">      event.target.style.background = <span class="string">&quot;purple&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragleave&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 目标节点的背景色恢复原样</span></span><br><span class="line">    <span class="keyword">if</span> (event.target.className === <span class="string">&quot;dropzone&quot;</span>) &#123;</span><br><span class="line">      event.target.style.background = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">&quot;drop&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 防止事件默认行为（比如某些元素节点上可以打开链接），</span></span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">if</span> (event.target.className === <span class="string">&quot;dropzone&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 恢复目标节点背景色</span></span><br><span class="line">      event.target.style.background = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="comment">// 将被拖拉节点插入目标节点</span></span><br><span class="line">      dragged.parentNode.removeChild(dragged);</span><br><span class="line">      event.target.appendChild(dragged);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>关于拖拉事件，有以下几个注意点。</p>
<ul>
<li>拖拉过程只触发以上这些拖拉事件，尽管鼠标在移动，但是鼠标事件不会触发。</li>
<li>将文件从操作系统拖拉进浏览器，不会触发<code>dragstart</code>和<code>dragend</code>事件。</li>
<li><code>dragenter</code>和<code>dragover</code>事件的监听函数，用来取出拖拉的数据（即允许放下被拖拉的元素）。由于网页的大部分区域不适合作为放下拖拉元素的目标节点，所以这两个事件的默认设置为当前节点不允许接受被拖拉的元素。如果想要在目标节点上放下的数据，首先必须阻止这两个事件的默认行为。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ondragover</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ondragover</span>=<span class="string">&quot;event.preventDefault()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，如果不取消拖拉事件或者阻止默认行为，就不能在<code>div</code>节点上放下被拖拉的节点。</p>
<h1 id="DragEvent-接口"><a href="#DragEvent-接口" class="headerlink" title="DragEvent 接口"></a>DragEvent 接口</h1><p>拖拉事件都继承了<code>DragEvent</code>接口，这个接口又继承了<code>MouseEvent</code>接口和<code>Event</code>接口。</p>
<p>浏览器原生提供一个<code>DragEvent()</code>构造函数，用来生成拖拉事件的实例对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> DragEvent(type, options);</span><br></pre></td></tr></table></figure>

<p><code>DragEvent()</code>构造函数接受两个参数，第一个参数是字符串，表示事件的类型，该参数必须；第二个参数是事件的配置对象，用来设置事件的属性，该参数可选。配置对象除了接受<code>MouseEvent</code>接口和<code>Event</code>接口的配置属性，还可以设置<code>dataTransfer</code>属性要么是<code>null</code>，要么是一个<code>DataTransfer</code>接口的实例。</p>
<p><code>DataTransfer</code>的实例对象用来读写拖拉事件中传输的数据，详见下文《DataTransfer 接口》的部分。</p>
<h1 id="DataTransfer-接口概述"><a href="#DataTransfer-接口概述" class="headerlink" title="DataTransfer 接口概述"></a>DataTransfer 接口概述</h1><p>所有拖拉事件的实例都有一个<code>DragEvent.dataTransfer</code>属性，用来读写需要传递的数据。这个属性的值是一个<code>DataTransfer</code>接口的实例。</p>
<p>浏览器原生提供一个<code>DataTransfer()</code>构造函数，用来生成<code>DataTransfer</code>实例对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataTrans = <span class="keyword">new</span> DataTransfer();</span><br></pre></td></tr></table></figure>

<p><code>DataTransfer()</code>构造函数不接受参数。</p>
<p>拖拉的数据分成两方面：数据的种类（又称格式）和数据的值。数据的种类是一个 MIME 字符串（比如<code>text/plain</code>、<code>image/jpeg</code>），数据的值是一个字符串。一般来说，如果拖拉一段文本，则数据默认就是那段文本；如果拖拉一个链接，则数据默认就是链接的 URL。</p>
<p>拖拉事件开始时，开发者可以提供数据类型和数据值。拖拉过程中，开发者通过<code>dragenter</code>和<code>dragover</code>事件的监听函数，检查数据类型，以确定是否允许放下（drop）被拖拉的对象。比如，在只允许放下链接的区域，检查拖拉的数据类型是否为<code>text/uri-list</code>。</p>
<p>发生<code>drop</code>事件时，监听函数取出拖拉的数据，对其进行处理。</p>
<h1 id="DataTransfer-的实例属性"><a href="#DataTransfer-的实例属性" class="headerlink" title="DataTransfer 的实例属性"></a>DataTransfer 的实例属性</h1><h2 id="DataTransfer-dropEffect"><a href="#DataTransfer-dropEffect" class="headerlink" title="DataTransfer.dropEffect"></a>DataTransfer.dropEffect</h2><p><code>DataTransfer.dropEffect</code>属性用来设置放下（drop）被拖拉节点时的效果，会影响到拖拉经过相关区域时鼠标的形状。它可能取下面的值。</p>
<ul>
<li>copy：复制被拖拉的节点</li>
<li>move：移动被拖拉的节点</li>
<li>link：创建指向被拖拉的节点的链接</li>
<li>none：无法放下被拖拉的节点</li>
</ul>
<p>除了上面这些值，设置其他的值都是无效的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">target.addEventListener(<span class="string">&quot;dragover&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  e.dataTransfer.dropEffect = <span class="string">&quot;copy&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，被拖拉元素一旦<code>drop</code>，接受的区域会复制该节点。</p>
<p><code>dropEffect</code>属性一般在<code>dragenter</code>和<code>dragover</code>事件的监听函数中设置，对于<code>dragstart</code>、<code>drag</code>、<code>dragleave</code>这三个事件，该属性不起作用。因为该属性只对接受被拖拉的节点的区域有效，对被拖拉的节点本身是无效的。进入目标区域后，拖拉行为会初始化成设定的效果。</p>
<h2 id="DataTransfer-effectAllowed"><a href="#DataTransfer-effectAllowed" class="headerlink" title="DataTransfer.effectAllowed"></a>DataTransfer.effectAllowed</h2><p><code>DataTransfer.effectAllowed</code>属性设置本次拖拉中允许的效果。它可能取下面的值。</p>
<ul>
<li>copy：复制被拖拉的节点</li>
<li>move：移动被拖拉的节点</li>
<li>link：创建指向被拖拉节点的链接</li>
<li>copyLink：允许<code>copy</code>或<code>link</code></li>
<li>copyMove：允许<code>copy</code>或<code>move</code></li>
<li>linkMove：允许<code>link</code>或<code>move</code></li>
<li>all：允许所有效果</li>
<li>none：无法放下被拖拉的节点</li>
<li>uninitialized：默认值，等同于<code>all</code></li>
</ul>
<p>如果某种效果是不允许的，用户就无法在目标节点中达成这种效果。</p>
<p>这个属性与<code>dropEffect</code>属性是同一件事的两个方面。前者设置被拖拉的节点允许的效果，后者设置接受拖拉的区域的效果，它们往往配合使用。</p>
<p><code>dragstart</code>事件的监听函数，可以用来设置这个属性。其他事件的监听函数里面设置这个属性是无效的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">source.addEventListener(<span class="string">&quot;dragstart&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.dataTransfer.effectAllowed = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">target.addEventListener(<span class="string">&quot;dragover&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  ev.dataTransfer.dropEffect = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>只要<code>dropEffect</code>属性和<code>effectAllowed</code>属性之中，有一个为<code>none</code>，就无法在目标节点上完成<code>drop</code>操作。</p>
<h2 id="DataTransfer-files"><a href="#DataTransfer-files" class="headerlink" title="DataTransfer.files"></a>DataTransfer.files</h2><p><code>DataTransfer.files</code>属性是一个 FileList 对象，包含一组本地文件，可以用来在拖拉操作中传送。如果本次拖拉不涉及文件，则该属性为空的 FileList 对象。</p>
<p>下面就是一个接收拖拉文件的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;output&quot; style=&quot;min-height: 200px;border: 1px solid black;&quot;&gt;</span></span><br><span class="line"><span class="comment">//   文件拖拉到这里</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;output&quot;</span>);</span><br><span class="line"></span><br><span class="line">div.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragenter&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    div.textContent = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">div.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragover&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">div.addEventListener(</span><br><span class="line">  <span class="string">&quot;drop&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> files = event.dataTransfer.files;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">      div.textContent += files[i].name + <span class="string">&quot; &quot;</span> + files[i].size + <span class="string">&quot;字节\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码中，通过<code>dataTransfer.files</code>属性读取被拖拉的文件的信息。如果想要读取文件内容，就要使用<code>FileReader</code>对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&quot;drop&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  e.stopPropagation();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fileList = e.dataTransfer.files;</span><br><span class="line">  <span class="keyword">if</span> (fileList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = fileList[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.onloadend = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (e.target.readyState === FileReader.DONE) &#123;</span><br><span class="line">        <span class="keyword">var</span> content = reader.result;</span><br><span class="line">        div.innerHTML = <span class="string">&quot;File: &quot;</span> + file.name + <span class="string">&quot;\n\n&quot;</span> + content;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    reader.readAsBinaryString(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="DataTransfer-types"><a href="#DataTransfer-types" class="headerlink" title="DataTransfer.types"></a>DataTransfer.types</h2><p><code>DataTransfer.types</code>属性是一个只读的数组，每个成员是一个字符串，里面是拖拉的数据格式（通常是 MIME 值）。比如，如果拖拉的是文字，对应的成员就是<code>text/plain</code>。</p>
<p>下面是一个例子，通过检查<code>dataTransfer</code>属性的类型，决定是否允许在当前节点执行<code>drop</code>操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">contains</span>(<span class="params">list, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list[i] === value) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doDragOver</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isLink = contains(event.dataTransfer.types, <span class="string">&quot;text/uri-list&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (isLink) event.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，只有当被拖拉的节点是一个链接时，才允许在当前节点放下。</p>
<h2 id="DataTransfer-items"><a href="#DataTransfer-items" class="headerlink" title="DataTransfer.items"></a>DataTransfer.items</h2><p><code>DataTransfer.items</code>属性返回一个类似数组的只读对象（DataTransferItemList 实例），每个成员就是本次拖拉的一个对象（DataTransferItem 实例）。如果本次拖拉不包含对象，则返回一个空对象。</p>
<p>DataTransferItemList 实例具有以下的属性和方法。</p>
<ul>
<li><code>length</code>：返回成员的数量</li>
<li><code>add(data, type)</code>：增加一个指定内容和类型（比如<code>text/html</code>和<code>text/plain</code>）的字符串作为成员</li>
<li><code>add(file)</code>：<code>add</code>方法的另一种用法，增加一个文件作为成员</li>
<li><code>remove(index)</code>：移除指定位置的成员</li>
<li><code>clear()</code>：移除所有的成员</li>
</ul>
<p>DataTransferItem 实例具有以下的属性和方法。</p>
<ul>
<li><code>kind</code>：返回成员的种类（<code>string</code>还是<code>file</code>）。</li>
<li><code>type</code>：返回成员的类型（通常是 MIME 值）。</li>
<li><code>getAsFile()</code>：如果被拖拉是文件，返回该文件，否则返回<code>null</code>。</li>
<li><code>getAsString(callback)</code>：如果被拖拉的是字符串，将该字符传入指定的回调函数处理。该方法是异步的，所以需要传入回调函数。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&quot;drop&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">if</span> (e.dataTransfer.items != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.dataTransfer.items.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        e.dataTransfer.items[i].kind + <span class="string">&quot;: &quot;</span> + e.dataTransfer.items[i].type</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="DataTransfer-的实例方法"><a href="#DataTransfer-的实例方法" class="headerlink" title="DataTransfer 的实例方法"></a>DataTransfer 的实例方法</h1><h2 id="DataTransfer-setData"><a href="#DataTransfer-setData" class="headerlink" title="DataTransfer.setData()"></a>DataTransfer.setData()</h2><p><code>DataTransfer.setData()</code>方法用来设置拖拉事件所带有的数据。该方法没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event.dataTransfer.setData(<span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;Text to drag&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码为当前的拖拉事件加入纯文本数据。</p>
<p>该方法接受两个参数，都是字符串。第一个参数表示数据类型（比如<code>text/plain</code>），第二个参数是具体数据。如果指定类型的数据在<code>dataTransfer</code>属性不存在，那么这些数据将被加入，否则原有的数据将被新数据替换。</p>
<p>如果是拖拉文本框或者拖拉选中的文本，会默认将对应的文本数据，添加到<code>dataTransfer</code>属性，不用手动指定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，拖拉这个<code>&lt;div&gt;</code>元素会自动带上文本数据<code>aaa</code>。</p>
<p>使用<code>setData</code>方法，可以替换到原有数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ondragstart</span>=<span class="string">&quot;event.dataTransfer.setData(&#x27;text/plain&#x27;, &#x27;bbb&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  aaa</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，拖拉数据实际上是<code>bbb</code>，而不是<code>aaa</code>。</p>
<p>下面是添加其他类型的数据。由于<code>text/plain</code>是最普遍支持的格式，为了保证兼容性，建议最后总是保存一份纯文本格式的数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dt = event.dataTransfer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加链接</span></span><br><span class="line">dt.setData(<span class="string">&quot;text/uri-list&quot;</span>, <span class="string">&quot;http://www.example.com&quot;</span>);</span><br><span class="line">dt.setData(<span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;http://www.example.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 HTML 代码</span></span><br><span class="line">dt.setData(<span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;Hello there, &lt;strong&gt;stranger&lt;/strong&gt;&quot;</span>);</span><br><span class="line">dt.setData(<span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;Hello there, &lt;strong&gt;stranger&lt;/strong&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加图像的 URL</span></span><br><span class="line">dt.setData(<span class="string">&quot;text/uri-list&quot;</span>, imageurl);</span><br><span class="line">dt.setData(<span class="string">&quot;text/plain&quot;</span>, imageurl);</span><br></pre></td></tr></table></figure>

<p>可以一次提供多种格式的数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dt = event.dataTransfer;</span><br><span class="line">dt.setData(<span class="string">&quot;application/x-bookmark&quot;</span>, bookmarkString);</span><br><span class="line">dt.setData(<span class="string">&quot;text/uri-list&quot;</span>, <span class="string">&quot;http://www.example.com&quot;</span>);</span><br><span class="line">dt.setData(<span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;http://www.example.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，通过在同一个事件上面，存放三种类型的数据，使得拖拉事件可以在不同的对象上面，<code>drop</code>不同的值。注意，第一种格式是一个自定义格式，浏览器默认无法读取，这意味着，只有某个部署了特定代码的节点，才可能<code>drop</code>（读取到）这个数据。</p>
<h2 id="DataTransfer-getData"><a href="#DataTransfer-getData" class="headerlink" title="DataTransfer.getData()"></a>DataTransfer.getData()</h2><p><code>DataTransfer.getData()</code>方法接受一个字符串（表示数据类型）作为参数，返回事件所带的指定类型的数据（通常是用<code>setData</code>方法添加的数据）。如果指定类型的数据不存在，则返回空字符串。通常只有<code>drop</code>事件触发后，才能取出数据。</p>
<p>下面是一个<code>drop</code>事件的监听函数，用来取出指定类型的数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDrop</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.dataTransfer.getData(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">  event.target.textContent = data;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码取出拖拉事件的文本数据，将其替换成当前节点的文本内容。注意，这时还必须取消浏览器的默认行为，因为假如用户拖拉的是一个链接，浏览器默认会在当前窗口打开这个链接。</p>
<p><code>getData</code>方法返回的是一个字符串，如果其中包含多项数据，就必须手动解析。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doDrop</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lines = event.dataTransfer.getData(<span class="string">&quot;text/uri-list&quot;</span>).split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> lines) &#123;</span><br><span class="line">    <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    link.href = line;</span><br><span class="line">    link.textContent = line;</span><br><span class="line">    event.target.appendChild(link);</span><br><span class="line">  &#125;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>getData</code>方法返回的是一组链接，就必须自行解析。</p>
<p>类型值指定为<code>URL</code>，可以取出第一个有效链接。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> link = event.dataTransfer.getData(<span class="string">&quot;URL&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>下面的例子是从多种类型的数据里面取出数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doDrop</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> types = event.dataTransfer.types;</span><br><span class="line">  <span class="keyword">var</span> supportedTypes = [<span class="string">&quot;text/uri-list&quot;</span>, <span class="string">&quot;text/plain&quot;</span>];</span><br><span class="line">  types = supportedTypes.filter(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    types.includes(value);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (types.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = event.dataTransfer.getData(types[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DataTransfer-clearData"><a href="#DataTransfer-clearData" class="headerlink" title="DataTransfer.clearData()"></a>DataTransfer.clearData()</h2><p><code>DataTransfer.clearData()</code>方法接受一个字符串（表示数据类型）作为参数，删除事件所带的指定类型的数据。如果没有指定类型，则删除所有数据。如果指定类型不存在，则调用该方法不会产生任何效果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event.dataTransfer.clearData(<span class="string">&quot;text/uri-list&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码清除事件所带的<code>text/uri-list</code>类型的数据。</p>
<p>该方法不会移除拖拉的文件，因此调用该方法后，<code>DataTransfer.types</code>属性可能依然会返回<code>Files</code>类型（前提是存在文件拖拉）。</p>
<p>注意，该方法只能在<code>dragstart</code>事件的监听函数之中使用，因为这是拖拉操作的数据唯一可写的时机。</p>
<h2 id="DataTransfer-setDragImage"><a href="#DataTransfer-setDragImage" class="headerlink" title="DataTransfer.setDragImage()"></a>DataTransfer.setDragImage()</h2><p>拖动过程中（<code>dragstart</code>事件触发后），浏览器会显示一张图片跟随鼠标一起移动，表示被拖动的节点。这张图片是自动创造的，通常显示为被拖动节点的外观，不需要自己动手设置。</p>
<p><code>DataTransfer.setDragImage()</code>方法可以自定义这张图片。它接受三个参数。第一个是<code>&lt;img&gt;</code>节点或者<code>&lt;canvas&gt;</code>节点，如果省略或为<code>null</code>，则使用被拖动的节点的外观；第二个和第三个参数为鼠标相对于该图片左上角的横坐标和右坐标。</p>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* HTML 代码如下</span></span><br><span class="line"><span class="comment"> &lt;div id=&quot;drag-with-image&quot; class=&quot;dragdemo&quot; draggable=&quot;true&quot;&gt;</span></span><br><span class="line"><span class="comment">   drag me</span></span><br><span class="line"><span class="comment"> &lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;drag-with-image&quot;</span>);</span><br><span class="line">div.addEventListener(</span><br><span class="line">  <span class="string">&quot;dragstart&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    img.src = <span class="string">&quot;http://path/to/img&quot;</span>;</span><br><span class="line">    e.dataTransfer.setDragImage(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="触摸操作概述"><a href="#触摸操作概述" class="headerlink" title="触摸操作概述"></a>触摸操作概述</h1><p>浏览器的触摸 API 由三个部分组成。</p>
<ul>
<li>Touch：一个触摸点</li>
<li>TouchList：多个触摸点的集合</li>
<li>TouchEvent：触摸引发的事件实例</li>
</ul>
<p><code>Touch</code>接口的实例对象用来触摸点（一根手指或者一根触摸笔），包括位置、大小、形状、压力、目标元素等属性。有时，触摸动作由多个触摸点（多根手指）组成，多个触摸点的集合由<code>TouchList</code>接口的实例对象表示。<code>TouchEvent</code>接口的实例对象代表由触摸引发的事件，只有触摸屏才会引发这一类事件。</p>
<p>很多时候，触摸事件和鼠标事件同时触发，即使这个时候并没有用到鼠标。这是为了让那些只定义鼠标事件、没有定义触摸事件的代码，在触摸屏的情况下仍然能用。如果想避免这种情况，可以用<code>event.preventDefault</code>方法阻止发出鼠标事件。</p>
<h1 id="Touch-接口"><a href="#Touch-接口" class="headerlink" title="Touch 接口"></a>Touch 接口</h1><h2 id="Touch-接口概述"><a href="#Touch-接口概述" class="headerlink" title="Touch 接口概述"></a>Touch 接口概述</h2><p>Touch 接口代表单个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。</p>
<p>浏览器原生提供<code>Touch</code>构造函数，用来生成<code>Touch</code>实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> touch = <span class="keyword">new</span> Touch(touchOptions);</span><br></pre></td></tr></table></figure>

<p><code>Touch</code>构造函数接受一个配置对象作为参数，它有以下属性。</p>
<ul>
<li><code>identifier</code>：必需，类型为整数，表示触摸点的唯一 ID。</li>
<li><code>target</code>：必需，类型为元素节点，表示触摸点开始时所在的网页元素。</li>
<li><code>clientX</code>：可选，类型为数值，表示触摸点相对于浏览器窗口左上角的水平距离，默认为 0。</li>
<li><code>clientY</code>：可选，类型为数值，表示触摸点相对于浏览器窗口左上角的垂直距离，默认为 0。</li>
<li><code>screenX</code>：可选，类型为数值，表示触摸点相对于屏幕左上角的水平距离，默认为 0。</li>
<li><code>screenY</code>：可选，类型为数值，表示触摸点相对于屏幕左上角的垂直距离，默认为 0。</li>
<li><code>pageX</code>：可选，类型为数值，表示触摸点相对于网页左上角的水平位置（即包括页面的滚动距离），默认为 0。</li>
<li><code>pageY</code>：可选，类型为数值，表示触摸点相对于网页左上角的垂直位置（即包括页面的滚动距离），默认为 0。</li>
<li><code>radiusX</code>：可选，类型为数值，表示触摸点周围受到影响的椭圆范围的 X 轴半径，默认为 0。</li>
<li><code>radiusY</code>：可选：类型为数值，表示触摸点周围受到影响的椭圆范围的 Y 轴半径，默认为 0。</li>
<li><code>rotationAngle</code>：可选，类型为数值，表示触摸区域的椭圆的旋转角度，单位为度数，在 0 到 90 度之间，默认值为 0。</li>
<li><code>force</code>：可选，类型为数值，范围在<code>0</code>到<code>1</code>之间，表示触摸压力。<code>0</code>代表没有压力，<code>1</code>代表硬件所能识别的最大压力，默认为<code>0</code>。</li>
</ul>
<h2 id="Touch-接口的实例属性"><a href="#Touch-接口的实例属性" class="headerlink" title="Touch 接口的实例属性"></a>Touch 接口的实例属性</h2><p><strong>（1）Touch.identifier</strong></p>
<p><code>Touch.identifier</code>属性返回一个整数，表示触摸点的唯一 ID。这个值在整个触摸过程保持不变，直到触摸事件结束。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">someElement.addEventListener(</span><br><span class="line">  <span class="string">&quot;touchmove&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.changedTouches.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.changedTouches[i].identifier);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>（2）Touch.screenX，Touch.screenY，Touch.clientX，Touch.clientY，pageX，pageY</strong></p>
<p><code>Touch.screenX</code>属性和<code>Touch.screenY</code>属性，分别表示触摸点相对于屏幕左上角的横坐标和纵坐标，与页面是否滚动无关。</p>
<p><code>Touch.clientX</code>属性和<code>Touch.clientY</code>属性，分别表示触摸点相对于浏览器视口左上角的横坐标和纵坐标，与页面是否滚动无关。</p>
<p><code>Touch.pageX</code>属性和<code>Touch.pageY</code>属性，分别表示触摸点相对于当前页面左上角的横坐标和纵坐标，包含了页面滚动带来的位移。</p>
<p><strong>（3）Touch.radiusX，Touch.radiusY，Touch.rotationAngle</strong></p>
<p><code>Touch.radiusX</code>属性和<code>Touch.radiusY</code>属性，分别返回触摸点周围受到影响的椭圆范围的 X 轴半径和 Y 轴半径，单位为像素。乘以 2 就可以得到触摸范围的宽度和高度。</p>
<p><code>Touch.rotationAngle</code>属性表示触摸区域的椭圆的旋转角度，单位为度数，在<code>0</code>到<code>90</code>度之间。</p>
<p>上面这三个属性共同定义了用户与屏幕接触的区域，对于描述手指这一类非精确的触摸，很有帮助。指尖接触屏幕，触摸范围会形成一个椭圆，这三个属性就用来描述这个椭圆区域。</p>
<p>下面是一个示例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&quot;touchstart&quot;</span>, rotate);</span><br><span class="line">div.addEventListener(<span class="string">&quot;touchmove&quot;</span>, rotate);</span><br><span class="line">div.addEventListener(<span class="string">&quot;touchend&quot;</span>, rotate);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotate</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> touch = e.changedTouches.item(<span class="number">0</span>);</span><br><span class="line">  e.preventDefault();</span><br><span class="line"></span><br><span class="line">  src.style.width = touch.radiusX * <span class="number">2</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  src.style.height = touch.radiusY * <span class="number">2</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  src.style.transform = <span class="string">&quot;rotate(&quot;</span> + touch.rotationAngle + <span class="string">&quot;deg)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（4）Touch.force</strong></p>
<p><code>Touch.force</code>属性返回一个<code>0</code>到<code>1</code>之间的数值，表示触摸压力。<code>0</code>代表没有压力，<code>1</code>代表硬件所能识别的最大压力。</p>
<p><strong>（5）Touch.target</strong></p>
<p><code>Touch.target</code>属性返回一个元素节点，代表触摸发生时所在的那个元素节点。即使触摸点已经离开了这个节点，该属性依然不变。</p>
<h1 id="TouchList-接口"><a href="#TouchList-接口" class="headerlink" title="TouchList 接口"></a>TouchList 接口</h1><p><code>TouchList</code>接口表示一组触摸点的集合。它的实例是一个类似数组的对象，成员是<code>Touch</code>的实例对象，表示所有触摸点。用户用三根手指触摸，产生的<code>TouchList</code>实例就会包含三个成员，每根手指的触摸点对应一个<code>Touch</code>实例对象。</p>
<p>它的实例主要通过触摸事件的<code>TouchEvent.touches</code>、<code>TouchEvent.changedTouches</code>、<code>TouchEvent.targetTouches</code>这几个属性获取。</p>
<p>它的实例属性和实例方法只有两个。</p>
<ul>
<li><code>TouchList.length</code>：数值，表示成员数量（即触摸点的数量）。</li>
<li><code>TouchList.item()</code>：返回指定位置的成员，它的参数是该成员的位置编号（从零开始）。</li>
</ul>
<h1 id="TouchEvent-接口"><a href="#TouchEvent-接口" class="headerlink" title="TouchEvent 接口"></a>TouchEvent 接口</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>TouchEvent 接口继承了 Event 接口，表示由触摸引发的事件实例，通常来自触摸屏或轨迹板。除了被继承的属性以外，它还有一些自己的属性。</p>
<p>浏览器原生提供<code>TouchEvent()</code>构造函数，用来生成触摸事件的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> TouchEvent(type, options);</span><br></pre></td></tr></table></figure>

<p><code>TouchEvent()</code>构造函数可以接受两个参数，第一个参数是字符串，表示事件类型；第二个参数是事件的配置对象，该参数是可选的，对象的所有属性也是可选的。除了<code>Event</code>接口的配置属性，该接口还有一些自己的配置属性。</p>
<ul>
<li><code>touches</code>：<code>TouchList</code>实例，代表所有的当前处于活跃状态的触摸点，默认值是一个空数组<code>[]</code>。</li>
<li><code>targetTouches</code>：<code>TouchList</code>实例，代表所有处在触摸的目标元素节点内部、且仍然处于活动状态的触摸点，默认值是一个空数组<code>[]</code>。</li>
<li><code>changedTouches</code>：<code>TouchList</code>实例，代表本次触摸事件的相关触摸点，默认值是一个空数组<code>[]</code>。</li>
<li><code>ctrlKey</code>：布尔值，表示 Ctrl 键是否同时按下，默认值为<code>false</code>。</li>
<li><code>shiftKey</code>：布尔值，表示 Shift 键是否同时按下，默认值为<code>false</code>。</li>
<li><code>altKey</code>：布尔值，表示 Alt 键是否同时按下，默认值为<code>false</code>。</li>
<li><code>metaKey</code>：布尔值，表示 Meta 键（或 Windows 键）是否同时按下，默认值为<code>false</code>。</li>
</ul>
<h2 id="实例属性-1"><a href="#实例属性-1" class="headerlink" title="实例属性"></a>实例属性</h2><p>TouchEvent 接口的实例具有<code>Event</code>实例的所有属性和方法，此外还有一些它自己的实例属性，这些属性全部都是只读。</p>
<p><strong>（1）TouchEvent.altKey，TouchEvent.ctrlKey，TouchEvent.shiftKey，TouchEvent.metaKey</strong></p>
<ul>
<li><code>TouchEvent.altKey</code>：布尔值，表示触摸时是否按下了 Alt 键。</li>
<li><code>TouchEvent.ctrlKey</code>：布尔值，表示触摸时是否按下了 Ctrl 键。</li>
<li><code>TouchEvent.shiftKey</code>：布尔值：表示触摸时是否按下了 Shift 键。</li>
<li><code>TouchEvent.metaKey</code>：布尔值，表示触摸时是否按下了 Meta 键（或 Windows 键）。</li>
</ul>
<p>下面是一个示例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">someElement.addEventListener(</span><br><span class="line">  <span class="string">&quot;touchstart&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;altKey = &quot;</span> + e.altKey);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;ctrlKey = &quot;</span> + e.ctrlKey);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;metaKey = &quot;</span> + e.metaKey);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;shiftKey = &quot;</span> + e.shiftKey);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>（2）TouchEvent.changedTouches</strong></p>
<p><code>TouchEvent.changedTouches</code>属性返回一个<code>TouchList</code>实例，成员是一组<code>Touch</code>实例对象，表示本次触摸事件的相关触摸点。</p>
<p>对于不同的时间，该属性的含义有所不同。</p>
<ul>
<li><code>touchstart</code>事件：被激活的触摸点</li>
<li><code>touchmove</code>事件：发生变化的触摸点</li>
<li><code>touchend</code>事件：消失的触摸点（即不再被触碰的点）</li>
</ul>
<p>下面是一个示例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">someElement.addEventListener(</span><br><span class="line">  <span class="string">&quot;touchmove&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.changedTouches.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.changedTouches[i].identifier);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>（3）TouchEvent.touches</strong></p>
<p><code>TouchEvent.touches</code>属性返回一个<code>TouchList</code>实例，成员是所有仍然处于活动状态（即触摸中）的触摸点。一般来说，一个手指就是一个触摸点。</p>
<p>下面是一个示例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">someElement.addEventListener(</span><br><span class="line">  <span class="string">&quot;touchstart&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.touches.length) &#123;</span><br><span class="line">      <span class="comment">// 一根手指触摸</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        handle_one_touch(e);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// 两根手指触摸</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        handle_two_touches(e);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// 三根手指触摸</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        handle_three_touches(e);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// 其他情况</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Not supported&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>（4）TouchEvent.targetTouches</strong></p>
<p><code>TouchEvent.targetTouches</code>属性返回一个<code>TouchList</code>实例，成员是触摸事件的目标元素节点内部、所有仍然处于活动状态（即触摸中）的触摸点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">touches_in_target</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ev.touches.length === ev.targetTouches.length ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码用来判断，是否所有触摸点都在目标元素内。</p>
<h1 id="触摸事件的种类"><a href="#触摸事件的种类" class="headerlink" title="触摸事件的种类"></a>触摸事件的种类</h1><p>触摸引发的事件，有以下几种。可以通过<code>TouchEvent.type</code>属性，查看到底发生的是哪一种事件。</p>
<ul>
<li><code>touchstart</code>：用户开始触摸时触发，它的<code>target</code>属性返回发生触摸的元素节点。</li>
<li><code>touchend</code>：用户不再接触触摸屏时（或者移出屏幕边缘时）触发，它的<code>target</code>属性与<code>touchstart</code>事件一致的，就是开始触摸时所在的元素节点。它的<code>changedTouches</code>属性返回一个<code>TouchList</code>实例，包含所有不再触摸的触摸点（即<code>Touch</code>实例对象）。</li>
<li><code>touchmove</code>：用户移动触摸点时触发，它的<code>target</code>属性与<code>touchstart</code>事件一致。如果触摸的半径、角度、力度发生变化，也会触发该事件。</li>
<li><code>touchcancel</code>：触摸点取消时触发，比如在触摸区域跳出一个情态窗口（modal window）、触摸点离开了文档区域（进入浏览器菜单栏）、用户的触摸点太多，超过了支持的上限（自动取消早先的触摸点）。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;canvas&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">el.addEventListener(<span class="string">&quot;touchstart&quot;</span>, handleStart, <span class="literal">false</span>);</span><br><span class="line">el.addEventListener(<span class="string">&quot;touchmove&quot;</span>, handleMove, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleStart</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  evt.preventDefault();</span><br><span class="line">  <span class="keyword">var</span> touches = evt.changedTouches;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; touches.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(touches[i].pageX, touches[i].pageY);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMove</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  evt.preventDefault();</span><br><span class="line">  <span class="keyword">var</span> touches = evt.changedTouches;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; touches.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> touch = touches[i];</span><br><span class="line">    <span class="built_in">console</span>.log(touch.pageX, touch.pageY);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="表单事件的种类"><a href="#表单事件的种类" class="headerlink" title="表单事件的种类"></a>表单事件的种类</h1><h2 id="input-事件"><a href="#input-事件" class="headerlink" title="input 事件"></a>input 事件</h2><p><code>input</code>事件当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>的值发生变化时触发。对于复选框（<code>&lt;input type=checkbox&gt;</code>）或单选框（<code>&lt;input type=radio&gt;</code>），用户改变选项时，也会触发这个事件。另外，对于打开<code>contenteditable</code>属性的元素，只要值发生变化，也会触发<code>input</code>事件。</p>
<p><code>input</code>事件的一个特点，就是会连续触发，比如用户每按下一次按键，就会触发一次<code>input</code>事件。</p>
<p><code>input</code>事件对象继承了<code>InputEvent</code>接口。</p>
<h2 id="select-事件"><a href="#select-事件" class="headerlink" title="select 事件"></a>select 事件</h2><p><code>select</code>事件当在<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>里面选中文本时触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;input id=&quot;test&quot; type=&quot;text&quot; value=&quot;Select me!&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">elem.addEventListener(</span><br><span class="line">  <span class="string">&quot;select&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.type); <span class="comment">// &quot;select&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>选中的文本可以通过<code>event.target</code>元素的<code>selectionDirection</code>、<code>selectionEnd</code>、<code>selectionStart</code>和<code>value</code>属性拿到。</p>
<h2 id="Change-事件"><a href="#Change-事件" class="headerlink" title="Change 事件"></a>Change 事件</h2><p><code>Change</code>事件当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>的值发生变化时触发。它与<code>input</code>事件的最大不同，就是不会连续触发，只有当全部修改完成时才会触发，另一方面<code>input</code>事件必然伴随<code>change</code>事件。具体来说，分成以下几种情况。</p>
<ul>
<li>激活单选框（radio）或复选框（checkbox）时触发。</li>
<li>用户提交时触发。比如，从下列列表（select）完成选择，在日期或文件输入框完成选择。</li>
<li>当文本框或<code>&lt;textarea&gt;</code>元素的值发生改变，并且丧失焦点时触发。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;select size=&quot;1&quot; onchange=&quot;changeEventHandler(event);&quot;&gt;</span></span><br><span class="line"><span class="comment">//   &lt;option&gt;chocolate&lt;/option&gt;</span></span><br><span class="line"><span class="comment">//   &lt;option&gt;strawberry&lt;/option&gt;</span></span><br><span class="line"><span class="comment">//   &lt;option&gt;vanilla&lt;/option&gt;</span></span><br><span class="line"><span class="comment">// &lt;/select&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeEventHandler</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.target.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="invalid-事件"><a href="#invalid-事件" class="headerlink" title="invalid 事件"></a>invalid 事件</h2><p>用户提交表单时，如果表单元素的值不满足校验条件，就会触发<code>invalid</code>事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span> <span class="attr">oninvalid</span>=<span class="string">&quot;console.log(&#x27;invalid input&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，输入框是必填的。如果不填，用户点击按钮提交时，就会触发输入框的<code>invalid</code>事件，导致提交被取消。</p>
<h2 id="reset-事件，submit-事件"><a href="#reset-事件，submit-事件" class="headerlink" title="reset 事件，submit 事件"></a>reset 事件，submit 事件</h2><p>这两个事件发生在表单对象<code>&lt;form&gt;</code>上，而不是发生在表单的成员上。</p>
<p><code>reset</code>事件当表单重置（所有表单成员变回默认值）时触发。</p>
<p><code>submit</code>事件当表单数据向服务器提交时触发。注意，<code>submit</code>事件的发生对象是<code>&lt;form&gt;</code>元素，而不是<code>&lt;button&gt;</code>元素，因为提交的是表单，而不是按钮。</p>
<h1 id="资源事件"><a href="#资源事件" class="headerlink" title="资源事件"></a>资源事件</h1><h2 id="beforeunload-事件"><a href="#beforeunload-事件" class="headerlink" title="beforeunload 事件"></a>beforeunload 事件</h2><p><code>beforeunload</code>事件在窗口、文档、各种资源将要卸载前触发。它可以用来防止用户不小心卸载资源。</p>
<p>如果该事件对象的<code>returnValue</code>属性是一个非空字符串，那么浏览器就会弹出一个对话框，询问用户是否要卸载该资源。但是，用户指定的字符串可能无法显示，浏览器会展示预定义的字符串。如果用户点击“取消”按钮，资源就不会卸载。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;beforeunload&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.returnValue = <span class="string">&quot;你确定离开吗？&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，用户如果关闭窗口，浏览器会弹出一个窗口，要求用户确认。</p>
<p>浏览器对这个事件的行为很不一致，有的浏览器调用<code>event.preventDefault()</code>，也会弹出对话框。IE 浏览器需要显式返回一个非空的字符串，才会弹出对话框。而且，大多数浏览器在对话框中不显示指定文本，只显示默认文本。因此，可以采用下面的写法，取得最大的兼容性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;beforeunload&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> confirmationMessage = <span class="string">&quot;确认关闭窗口？&quot;</span>;</span><br><span class="line"></span><br><span class="line">  e.returnValue = confirmationMessage;</span><br><span class="line">  <span class="keyword">return</span> confirmationMessage;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意，许多手机浏览器默认忽略这个事件，桌面浏览器也有方法忽略这个事件。所以，它可能根本不会生效，不能依赖它来阻止用户关闭窗口。</p>
<h2 id="unload-事件"><a href="#unload-事件" class="headerlink" title="unload 事件"></a>unload 事件</h2><p><code>unload</code>事件在窗口关闭或者<code>document</code>对象将要卸载时触发。它的触发顺序排在<code>beforeunload</code>、<code>pagehide</code>事件后面。<code>unload</code>事件只在页面没有被浏览器缓存时才会触发，换言之，如果通过按下“前进/后退”导致页面卸载，并不会触发<code>unload</code>事件。</p>
<p><code>unload</code>事件发生时，文档处于一个特殊状态。所有资源依然存在，但是对用户来说都不可见，UI 互动全部无效。这个事件是无法取消的，即使在监听函数里面抛出错误，也不能停止文档的卸载。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;unload&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;文档将要卸载&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h2><p><code>load</code>事件在页面或某个资源加载成功时触发。注意，页面或资源从浏览器缓存加载，并不会触发<code>load</code>事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;所有资源都加载完成&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>error</code>事件是在页面或资源加载失败时触发。<code>abort</code>事件在用户取消加载时触发。</p>
<p>这三个事件实际上属于进度事件，不仅发生在<code>document</code>对象，还发生在各种外部资源上面。浏览网页就是一个加载各种资源的过程，图像（image）、样式表（style sheet）、脚本（script）、视频（video）、音频（audio）、Ajax 请求（XMLHttpRequest）等等。这些资源和<code>document</code>对象、<code>window</code>对象、XMLHttpRequestUpload 对象，都会触发<code>load</code>事件和<code>error</code>事件。</p>
<h1 id="session-历史事件"><a href="#session-历史事件" class="headerlink" title="session 历史事件"></a>session 历史事件</h1><h2 id="pageshow-事件，pagehide-事件"><a href="#pageshow-事件，pagehide-事件" class="headerlink" title="pageshow 事件，pagehide 事件"></a>pageshow 事件，pagehide 事件</h2><p>默认情况下，浏览器会在当前会话（session）缓存页面，当用户点击“前进/后退”按钮时，浏览器就会从缓存中加载页面。</p>
<p>pageshow 事件在页面加载时触发，包括第一次加载和从缓存加载两种情况。如果要指定页面每次加载（不管是不是从浏览器缓存）时都运行的代码，可以放在这个事件的监听函数。</p>
<p>第一次加载时，它的触发顺序排在<code>load</code>事件后面。从缓存加载时，<code>load</code>事件不会触发，因为网页在缓存中的样子通常是<code>load</code>事件的监听函数运行后的样子，所以不必重复执行。同理，如果是从缓存中加载页面，网页内初始化的 JavaScript 脚本（比如 DOMContentLoaded 事件的监听函数）也不会执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;pageshow&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;pageshow: &quot;</span>, event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>pageshow 事件有一个<code>persisted</code>属性，返回一个布尔值。页面第一次加载时，这个属性是<code>false</code>；当页面从缓存加载时，这个属性是<code>true</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;pageshow&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.persisted) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>pagehide</code>事件与<code>pageshow</code>事件类似，当用户通过“前进/后退”按钮，离开当前页面时触发。它与 unload 事件的区别在于，如果在 window 对象上定义<code>unload</code>事件的监听函数之后，页面不会保存在缓存中，而使用<code>pagehide</code>事件，页面会保存在缓存中。</p>
<p><code>pagehide</code>事件实例也有一个<code>persisted</code>属性，将这个属性设为<code>true</code>，就表示页面要保存在缓存中；设为<code>false</code>，表示网页不保存在缓存中，这时如果设置了 unload 事件的监听函数，该函数将在 pagehide 事件后立即运行。</p>
<p>如果页面包含<code>&lt;frame&gt;</code>或<code>&lt;iframe&gt;</code>元素，则<code>&lt;frame&gt;</code>页面的<code>pageshow</code>事件和<code>pagehide</code>事件，都会在主页面之前触发。</p>
<h2 id="popstate-事件"><a href="#popstate-事件" class="headerlink" title="popstate 事件"></a>popstate 事件</h2><p><code>popstate</code>事件在浏览器的<code>history</code>对象的当前记录发生显式切换时触发。注意，调用<code>history.pushState()</code>或<code>history.replaceState()</code>，并不会触发<code>popstate</code>事件。该事件只在用户在<code>history</code>记录之间显式切换时触发，比如鼠标点击“后退/前进”按钮，或者在脚本中调用<code>history.back()</code>、<code>history.forward()</code>、<code>history.go()</code>时触发。</p>
<p>该事件对象有一个<code>state</code>属性，保存<code>history.pushState</code>方法和<code>history.replaceState</code>方法为当前记录添加的<code>state</code>对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;state: &quot;</span> + event.state);</span><br><span class="line">&#125;;</span><br><span class="line">history.pushState(&#123; <span class="attr">page</span>: <span class="number">1</span> &#125;, <span class="string">&quot;title 1&quot;</span>, <span class="string">&quot;?page=1&quot;</span>);</span><br><span class="line">history.pushState(&#123; <span class="attr">page</span>: <span class="number">2</span> &#125;, <span class="string">&quot;title 2&quot;</span>, <span class="string">&quot;?page=2&quot;</span>);</span><br><span class="line">history.replaceState(&#123; <span class="attr">page</span>: <span class="number">3</span> &#125;, <span class="string">&quot;title 3&quot;</span>, <span class="string">&quot;?page=3&quot;</span>);</span><br><span class="line">history.back(); <span class="comment">// state: &#123;&quot;page&quot;:1&#125;</span></span><br><span class="line">history.back(); <span class="comment">// state: null</span></span><br><span class="line">history.go(<span class="number">2</span>); <span class="comment">// state: &#123;&quot;page&quot;:3&#125;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>pushState</code>方法向<code>history</code>添加了两条记录，然后<code>replaceState</code>方法替换掉当前记录。因此，连续两次<code>back</code>方法，会让当前条目退回到原始网址，它没有附带<code>state</code>对象，所以事件的<code>state</code>属性为<code>null</code>，然后前进两条记录，又回到<code>replaceState</code>方法添加的记录。</p>
<p>浏览器对于页面首次加载，是否触发<code>popstate</code>事件，处理不一样，Firefox 不触发该事件。</p>
<h2 id="hashchange-事件"><a href="#hashchange-事件" class="headerlink" title="hashchange 事件"></a>hashchange 事件</h2><p><code>hashchange</code>事件在 URL 的 hash 部分（即<code>#</code>号后面的部分，包括<code>#</code>号）发生变化时触发。该事件一般在<code>window</code>对象上监听。</p>
<p><code>hashchange</code>的事件实例具有两个特有属性：<code>oldURL</code>属性和<code>newURL</code>属性，分别表示变化前后的完整 URL。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// URL 是 http://www.example.com/</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;hashchange&quot;</span>, myFunction);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.oldURL);</span><br><span class="line">  <span class="built_in">console</span>.log(e.newURL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location.hash = <span class="string">&quot;part2&quot;</span>;</span><br><span class="line"><span class="comment">// http://www.example.com/</span></span><br><span class="line"><span class="comment">// http://www.example.com/#part2</span></span><br></pre></td></tr></table></figure>

<h1 id="网页状态事件"><a href="#网页状态事件" class="headerlink" title="网页状态事件"></a>网页状态事件</h1><h2 id="DOMContentLoaded-事件"><a href="#DOMContentLoaded-事件" class="headerlink" title="DOMContentLoaded 事件"></a>DOMContentLoaded 事件</h2><p>网页下载并解析完成以后，浏览器就会在<code>document</code>对象上触发 DOMContentLoaded 事件。这时，仅仅完成了网页的解析（整张页面的 DOM 生成了），所有外部资源（样式表、脚本、iframe 等等）可能还没有下载结束。也就是说，这个事件比<code>load</code>事件，发生时间早得多。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;DOM生成&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意，网页的 JavaScript 脚本是同步执行的，脚本一旦发生堵塞，将推迟触发<code>DOMContentLoaded</code>事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;DOM 生成&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段代码会推迟触发 DOMContentLoaded 事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="readystatechange-事件"><a href="#readystatechange-事件" class="headerlink" title="readystatechange 事件"></a>readystatechange 事件</h2><p><code>readystatechange</code>事件当 Document 对象和 XMLHttpRequest 对象的<code>readyState</code>属性发生变化时触发。<code>document.readyState</code>有三个可能的值：<code>loading</code>（网页正在加载）、<code>interactive</code>（网页已经解析完成，但是外部资源仍然处在加载状态）和<code>complete</code>（网页和所有外部资源已经结束加载，<code>load</code>事件即将触发）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState === <span class="string">&quot;interactive&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这个事件可以看作<code>DOMContentLoaded</code>事件的另一种实现方法。</p>
<h1 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h1><h2 id="scroll-事件"><a href="#scroll-事件" class="headerlink" title="scroll 事件"></a>scroll 事件</h2><p><code>scroll</code>事件在文档或文档元素滚动时触发，主要出现在用户拖动滚动条。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, callback);</span><br></pre></td></tr></table></figure>

<p>该事件会连续地大量触发，所以它的监听函数之中不应该有非常耗费计算的操作。推荐的做法是使用<code>requestAnimationFrame</code>或<code>setTimeout</code>控制该事件的触发频率，然后可以结合<code>customEvent</code>抛出一个新事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">type, name, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = obj || <span class="built_in">window</span>;</span><br><span class="line">    <span class="keyword">var</span> running = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (running) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      running = <span class="literal">true</span>;</span><br><span class="line">      requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        obj.dispatchEvent(<span class="keyword">new</span> CustomEvent(name));</span><br><span class="line">        running = <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    obj.addEventListener(type, func);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 scroll 事件重定义为 optimizedScroll 事件</span></span><br><span class="line">  throttle(<span class="string">&quot;scroll&quot;</span>, <span class="string">&quot;optimizedScroll&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;optimizedScroll&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Resource conscious scroll callback!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>throttle</code>函数用于控制事件触发频率，<code>requestAnimationFrame</code>方法保证每次页面重绘（每秒 60 次），只会触发一次<code>scroll</code>事件的监听函数。也就是说，上面方法将<code>scroll</code>事件的触发频率，限制在每秒 60 次。具体来说，就是<code>scroll</code>事件只要频率低于每秒 60 次，就会触发<code>optimizedScroll</code>事件，从而执行<code>optimizedScroll</code>事件的监听函数。</p>
<p>改用<code>setTimeout</code>方法，可以放置更大的时间间隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, scrollThrottler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> scrollTimeout;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">scrollThrottler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!scrollTimeout) &#123;</span><br><span class="line">      scrollTimeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        scrollTimeout = <span class="literal">null</span>;</span><br><span class="line">        actualScrollHandler();</span><br><span class="line">      &#125;, <span class="number">66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">actualScrollHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>上面代码中，每次<code>scroll</code>事件都会执行<code>scrollThrottler</code>函数。该函数里面有一个定时器<code>setTimeout</code>，每 66 毫秒触发一次（每秒 15 次）真正执行的任务<code>actualScrollHandler</code>。</p>
<p>下面是一个更一般的<code>throttle</code>函数的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> time = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (time + wait - <span class="built_in">Date</span>.now() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      fn();</span><br><span class="line">      time = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, throttle(callback, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>

<p>上面的代码将<code>scroll</code>事件的触发频率，限制在一秒一次。</p>
<p><code>lodash</code>函数库提供了现成的<code>throttle</code>函数，可以直接使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, _.throttle(callback, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>

<h2 id="resize-事件"><a href="#resize-事件" class="headerlink" title="resize 事件"></a>resize 事件</h2><p><code>resize</code>事件在改变浏览器窗口大小时触发，主要发生在<code>window</code>对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> resizeMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.body.clientWidth &lt; <span class="number">768</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;移动设备的视口&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, resizeMethod, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>该事件也会连续地大量触发，所以最好像上面的<code>scroll</code>事件一样，通过<code>throttle</code>函数控制事件触发频率。</p>
<h2 id="fullscreenchange-事件，fullscreenerror-事件"><a href="#fullscreenchange-事件，fullscreenerror-事件" class="headerlink" title="fullscreenchange 事件，fullscreenerror 事件"></a>fullscreenchange 事件，fullscreenerror 事件</h2><p><code>fullscreenchange</code>事件在进入或推出全屏状态时触发，该事件发生在<code>document</code>对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;fullscreenchange&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">document</span>.fullscreenElement);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>fullscreenerror</code>事件在浏览器无法切换到全屏状态时触发。</p>
<h1 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h1><p>以下三个事件属于剪贴板操作的相关事件。</p>
<ul>
<li><code>cut</code>：将选中的内容从文档中移除，加入剪贴板时触发。</li>
<li><code>copy</code>：进行复制动作时触发。</li>
<li><code>paste</code>：剪贴板内容粘贴到文档后触发。</li>
</ul>
<p>这三个事件都是<code>ClipboardEvent</code>接口的实例。<code>ClipboardEvent</code>有一个实例属性<code>clipboardData</code>，是一个 DataTransfer 对象，存放剪贴的数据。具体的 API 接口和操作方法，请参见《触摸事件》的 DataTransfer 对象部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;copy&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.clipboardData.setData(<span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  e.clipboardData.setData(<span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;&lt;b&gt;Hello, world!&lt;/b&gt;&quot;</span>);</span><br><span class="line">  e.preventDefault();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的代码使得复制进入剪贴板的，都是开发者指定的数据，而不是用户想要拷贝的数据。</p>
<h1 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h1><p>焦点事件发生在元素节点和<code>document</code>对象上面，与获得或失去焦点相关。它主要包括以下四个事件。</p>
<ul>
<li><code>focus</code>：元素节点获得焦点后触发，该事件不会冒泡。</li>
<li><code>blur</code>：元素节点失去焦点后触发，该事件不会冒泡。</li>
<li><code>focusin</code>：元素节点将要获得焦点时触发，发生在<code>focus</code>事件之前。该事件会冒泡。</li>
<li><code>focusout</code>：元素节点将要失去焦点时触发，发生在<code>blur</code>事件之前。该事件会冒泡。</li>
</ul>
<p>这四个事件都继承了<code>FocusEvent</code>接口。<code>FocusEvent</code>实例具有以下属性。</p>
<ul>
<li><code>FocusEvent.target</code>：事件的目标节点。</li>
<li><code>FocusEvent.relatedTarget</code>：对于<code>focusin</code>事件，返回失去焦点的节点；对于<code>focusout</code>事件，返回将要接受焦点的节点；对于<code>focus</code>和<code>blur</code>事件，返回<code>null</code>。</li>
</ul>
<p>由于<code>focus</code>和<code>blur</code>事件不会冒泡，只能在捕获阶段触发，所以<code>addEventListener</code>方法的第三个参数需要设为<code>true</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">form.addEventListener(</span><br><span class="line">  <span class="string">&quot;focus&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.target.style.background = <span class="string">&quot;pink&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">form.addEventListener(</span><br><span class="line">  <span class="string">&quot;blur&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.target.style.background = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面代码针对表单的文本输入框，接受焦点时设置背景色，失去焦点时去除背景色。</p>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令</title>
    <url>/2021/06/07/linux/cmd/</url>
    <content><![CDATA[<h1 id="命令的基本格式"><a href="#命令的基本格式" class="headerlink" title="命令的基本格式"></a>命令的基本格式</h1><h2 id="命令的提示符"><a href="#命令的提示符" class="headerlink" title="命令的提示符"></a>命令的提示符</h2><p>[root@localhost ~]#</p>
<ul>
<li><code>[]</code> 这是提示符的分隔符号，没有特殊含义。</li>
<li><code>root</code> 显示的是当前的登录用户， 目前使用的是 root 用户登录。</li>
<li><code>@</code> 分隔符号，没有特殊含义。</li>
<li><code>localhost</code> 当前系统的简写主机名（完整主机名是 localhost.localdomain）。</li>
<li><code>~</code> 代表用户当前所在的目录，此例中用户当前所在的目录是家目录。</li>
<li><code>#</code> 命令提示符。超级用户是#，普通用户是$</li>
</ul>
<h2 id="命令的基本格式-1"><a href="#命令的基本格式-1" class="headerlink" title="命令的基本格式"></a>命令的基本格式</h2><p>[root@localhost ~]# 命令 [选项] [参数]</p>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>用于调整命令的功能的</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>命令的操作对象</p>
<h1 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h1><h2 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h2><p>ls 是最常见的目录操作命令，主要作用是显示目录下的内容</p>
<ul>
<li>命令名称：ls</li>
<li>英文原意：list</li>
<li>所在路径：/bin/ls</li>
<li>执行权限：所有用户</li>
<li>功能描述：显示目录下的内容</li>
</ul>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>ls [选项] [目录名]</code></p>
<h4 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-a</code> 显示所有文件</li>
<li><code>--color=when</code> 支持颜色输出，when 的值默认是 always(总显示颜色)，也可以是 never(从不显示颜色)和 auto(自动)</li>
<li><code>-d</code> 显示目录信息，而不是目录下的文件</li>
<li><code>-h</code> 人性化显示，按照我们习惯的单位显示文件大小</li>
<li><code>-i</code> 显示文件的节点号</li>
<li><code>-l</code> 长格式显示</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls -l</span></span><br><span class="line"><span class="comment">#权限 引用计数 所有者 所属组 大小 文件修改时间 文件名</span></span><br><span class="line">-rw-------. 1 root root  1446 12月 19 16:15 anaconda-ks.cfg</span><br></pre></td></tr></table></figure>

<details>
<summary>“-l” 选项用于显示文件的详细信息，那么“-l”选项显示的这 7 列分别是什么含义？</summary>

<ol>
<li>第一列：权限。</li>
<li>第二列：引用计数。文件的引用计数代表该文件的硬链接个数，而目录的引用计数代表该目录</li>
<li>有多少个一级子目录。</li>
<li>第三列：所有者，也就是这个文件属于哪个用户。默认所有者是文件的建立用户</li>
<li>第四列：所属组。默认所属组是文件建立用户的有效组，一般情况下就是建立用户的所在组。</li>
<li>第五列：大小。默认单位是字节。</li>
<li>第六列：文件修改时间。文件状态修改时间或文件数据修改时间都会更改这个时间，注意这个</li>
<li>时间不是文件的创建时间。</li>
<li>第七列：文件名。</li>
</ol>
</details>

<h2 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h2><p>cd 是切换所在目录的命令</p>
<h3 id="基本信息如下"><a href="#基本信息如下" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：cd</li>
<li>英文原意：change directory</li>
<li>所在路径：shell 内置命令</li>
<li>执行权限：所有用户</li>
<li>功能描述：切换所在目录</li>
</ul>
<h3 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>cd [-L|-P] [dir]</code></p>
<h4 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-L</code>（默认值）如果要切换到的目标目录是一个符号连接，那么切换到符号连接的目录。</li>
<li><code>-P</code> 如果要切换到的目标目录是一个符号连接，那么切换到它指向的物理位置目录。</li>
</ul>
<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul>
<li>可以是绝对路径(以根目录为参照物)或相对路径(以当前目录为参照物)</li>
</ul>
<h3 id="简化用法"><a href="#简化用法" class="headerlink" title="简化用法"></a>简化用法</h3><ol>
<li><code>cd ~</code> 当前用户的加目录</li>
<li><code>cd -</code> 上一次所在目录</li>
<li><code>cd .</code> 当前目录</li>
<li><code>cd ..</code> 上级目录</li>
</ol>
<h2 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a>pwd 命令</h2><p>pwd 命令是查询所在目录的命令，</p>
<h3 id="基本信息如下-1"><a href="#基本信息如下-1" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：pwd</li>
<li>英文原意：print name of current/working directory</li>
<li>所在路径：/bin/pwd</li>
<li>执行权限：所有用户</li>
<li>功能描述：查询当前所在目录</li>
</ul>
<h2 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h2><ul>
<li>命令名称：mkdir</li>
<li>英文原意：make directories</li>
<li>所在路径：/bin/mkdir</li>
<li>执行权限：所有用户</li>
<li>功能描述：创建空目录</li>
</ul>
<h3 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>mkdir [选项] 目录名</code></p>
<h4 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-p</code> 递归建立所需目录</li>
<li><code>-m 权限</code> 建立目录的同时设置目录的权限</li>
</ul>
<h2 id="rmdir-命令"><a href="#rmdir-命令" class="headerlink" title="rmdir 命令"></a>rmdir 命令</h2><p>rmdir 命令删除空目录，</p>
<h3 id="基本信息如下-2"><a href="#基本信息如下-2" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：rmdir</li>
<li>英文原意：remove empty directories</li>
<li>所在路径：/bin/rmdir</li>
<li>执行权限：所有用户</li>
<li>功能描述：删除空目录</li>
</ul>
<h3 id="命令格式-3"><a href="#命令格式-3" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>rmdir [选项] 目录名</code></p>
<h4 id="选项-4"><a href="#选项-4" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-p</code> 递归删除目录</li>
<li><code>rmdir</code> 命令的作用十分有限，只能删除空目录，一旦目录中有内容就会报错。所以一般不论删除的是文件还是目录，都会使用 rm 命令</li>
</ul>
<h1 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h1><h2 id="touch-命令"><a href="#touch-命令" class="headerlink" title="touch 命令"></a>touch 命令</h2><p>touch 命令创建空文件或修改文件时间，</p>
<h3 id="基本信息如下-3"><a href="#基本信息如下-3" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：touch</li>
<li>英文原意：change file timestamps</li>
<li>所在路径：/bin/touch</li>
<li>执行权限：所有用户</li>
<li>功能描述：创建文件或改文件时间戳</li>
</ul>
<h3 id="命令格式-4"><a href="#命令格式-4" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>touch [选项] 文件名</code></p>
<h4 id="选项-5"><a href="#选项-5" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-a</code> 或–time=atime 或–time=access 或–time=use 更改存取时间为当前时间(access time)</li>
<li><code>-m</code> 或–time=mtime 或–time=modify 更该变动时间为当前时间(modify time)</li>
<li><code>-t</code> 日期时间: 使用指定的日期时间(格式：[[CC]YY]MMDDhhmm[.ss])，而非现在的时间</li>
<li><code>-r</code> 参考文件或目录: 把指定文件或目录的日期时间统统设成参考文件或目录的日期时间</li>
</ul>
<h2 id="cat-命令"><a href="#cat-命令" class="headerlink" title="cat 命令"></a>cat 命令</h2><p>cat 命令用来查看文件内容，进本信息如下：</p>
<ul>
<li>命令名称：cat</li>
<li>英文原意：concatenate files and print on the standard output</li>
<li>所在路径：/bin/cat</li>
<li>执行权限：所有用户</li>
<li>功能描述：合并文件并打印输出到标准输出</li>
</ul>
<h3 id="命令格式-5"><a href="#命令格式-5" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>cat [选项] 文件名</code></p>
<h4 id="选项-6"><a href="#选项-6" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-E</code> 列出每行结尾的回车符$</li>
<li><code>-n</code> 显示行号</li>
<li><code>-T</code> 把 Tab 键用^I 显示出来</li>
<li><code>-v</code> 列出特殊字符</li>
<li><code>-A</code> 相当于-vET 选项的整合，用于列出所有隐藏符号</li>
</ul>
<h2 id="more-命令"><a href="#more-命令" class="headerlink" title="more 命令"></a>more 命令</h2><p>more 是分屏显示文件的命令，</p>
<h3 id="基本信息如下-4"><a href="#基本信息如下-4" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：more</li>
<li>英文原意：file perusal filter for crt viewin</li>
<li>所在路径：/bin/more</li>
<li>执行权限：所有用户</li>
<li>功能描述：分屏显示文件内容</li>
</ul>
<h3 id="命令格式-6"><a href="#命令格式-6" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>more [选项] 文件名</code></p>
<h4 id="选项-7"><a href="#选项-7" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-d</code> 显示“[press space to continue,’q’ to quit.]”和“[Press ‘h’ for instructions]”；</li>
<li><code>-c</code> 不进行滚屏操作。每次刷新这个屏幕</li>
<li><code>-s</code> 将多个空行压缩成一行显示</li>
<li><code>-u</code> 禁止下划线</li>
<li><code>-数字</code> 指定每屏显示的行数</li>
<li><code>+数字</code> 从指定数字的行开始显示</li>
</ul>
<p>more 命令比较简单，一般不用什么选项，命令会打开一个交互界面，可以识别一些交互命令。常用的交互命令如下：</p>
<ul>
<li><code>空格键</code> 向下翻页</li>
<li><code>B 键</code> 向上翻页</li>
<li><code>/字符串</code> 搜索指定的字符串</li>
<li><code>q</code> 退出</li>
</ul>
<h2 id="less-命令"><a href="#less-命令" class="headerlink" title="less 命令"></a>less 命令</h2><p>less 命令和 more 命令类似，只是 more 命令是分屏显示，而 less 是分行显示命名，less 命令允许用户向前(PageUp 键)或向后(PageDown 键)浏览文件，</p>
<h3 id="基本信息如下-5"><a href="#基本信息如下-5" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：less</li>
<li>英文原意：opposite of more</li>
<li>所在路径：/usr/bin/more</li>
<li>执行权限：所有用户</li>
<li>功能描述：分行显示文件内容</li>
</ul>
<h3 id="命令格式-7"><a href="#命令格式-7" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>less [选项] 文件名</code></p>
<ul>
<li><code>-e</code> 文件内容显示完毕后，自动退出</li>
<li><code>-f</code> 强制显示文件</li>
<li><code>-g</code> 不加亮显示搜索到的所有关键词，仅显示当前显示的关键字，以提高显示速度</li>
<li><code>-l</code> 搜索时忽略大小写的差异</li>
<li><code>-N</code> 每一行行首显示行号</li>
<li><code>-s</code> 将连续多个空行压缩成一行显示</li>
<li><code>-S</code> 在单行显示较长的内容，而不换行显示</li>
<li><code>-x数字</code> 将 TAB 字符显示为指定个数的空格字符</li>
</ul>
<h2 id="head-命令"><a href="#head-命令" class="headerlink" title="head 命令"></a>head 命令</h2><p>head 命令是用来显示文件开头内容的命令，</p>
<h3 id="基本信息如下-6"><a href="#基本信息如下-6" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：head</li>
<li>英文原意：output the first part files</li>
<li>所在路径：/usr/bin/head</li>
<li>执行权限：所有用户</li>
<li>功能描述：显示文件开头的内容</li>
</ul>
<h3 id="命令格式-8"><a href="#命令格式-8" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>head [选项] 文件名</code></p>
<ul>
<li><code>-n</code> 从文件开头开始，显示指定行数</li>
<li><code>-v</code> 显示文件名</li>
</ul>
<h2 id="tail-命令"><a href="#tail-命令" class="headerlink" title="tail 命令"></a>tail 命令</h2><p>tail 命令是用来显示文件结尾内容的命令</p>
<ul>
<li>命令名称：tail</li>
<li>英文原意：output the last part files</li>
<li>所在路径：/usr/bin/tail</li>
<li>执行权限：所有用户</li>
<li>功能描述：显示文件结尾的内容</li>
</ul>
<h3 id="命令格式-9"><a href="#命令格式-9" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>tail [选项] 文件名</code></p>
<ul>
<li><code>-n</code> 行数：从文件结尾开始，显示指定行数</li>
<li><code>-v</code> 显示文件名</li>
<li><code>-f</code> 监听文件新增内容</li>
</ul>
<h2 id="ln-命令"><a href="#ln-命令" class="headerlink" title="ln 命令"></a>ln 命令</h2><p>ln 命令用来为文件创件链接，连接类型分为硬连接和符号连接(软链接)两种，</p>
<h3 id="基本信息如下-7"><a href="#基本信息如下-7" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：ln</li>
<li>英文原意：make links between file</li>
<li>所在路径：/bin/tail</li>
<li>执行权限：所有用户</li>
<li>功能描述：在文件之间建立链接</li>
</ul>
<h3 id="命令格式-10"><a href="#命令格式-10" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>ln [选项] 源文件 [目标文件]</code></p>
<h4 id="选项-8"><a href="#选项-8" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-s</code> 建立软链接文件。如果不加’-s’选项，则建立硬链接文件</li>
<li><code>-f</code> 强行删除已存在的链接文件。如果链接文件已存在，则删除目标文件后再建立链接文件</li>
</ul>
<h4 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h4><p>指定链接的源文件。如果使用-s 选项创建软链接，则“源文件”可以是文件或者目录，创建硬链接时，则“源文件”参数只能是文件。（源文件最好用绝对路径名，这样可以在任何工作目录下进行符号链接，而当源文件用相对路径时，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接）</p>
<h4 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h4><p>指定源文件的目标链接文件，省略则在当前目录下新建与源文件名称相同的链接文件</p>
<details>
<summary>拓展：硬链接与软链接的特征</summary>

<p><strong>硬链接特征：</strong></p>
<blockquote>
<p>硬链接和源文件实际上是同一个文件，不会创建新的文件（类似于 Java 中，一个对象有多个引用）；而软链接会创建一个新文件来保存源文件的路径，从而间接读取或修改源文件内容</p>
</blockquote>
<ol>
<li>源文件和硬链接文件拥有相同的 Indoe 和 Block</li>
<li>修改任意一个文件，另一个都改变</li>
<li>删除任意一个文件，另一个都能使用</li>
<li>硬链接建立或删除，原文件连接数相应加一或减一</li>
<li>硬链接不能链接目录</li>
<li>硬链接不能跨分区</li>
<li>硬链接标记不清，很难确认硬链接文件位置，不建议使用</li>
</ol>
<p><strong>软链接特征：</strong></p>
<ol>
<li>软链接和源文件拥有不同的 Inode 和 Block</li>
<li>两个文件修改任意一个，另一个都改变</li>
<li>删除软链接，源文件不受影响；删除源文件，软链接不能使用</li>
<li>软链接建立或删除，原文件链接数不变</li>
<li>软链接可以链接目录</li>
<li>软链接可以跨分区</li>
<li>软链接特征明显，建议使用软链接</li>
<li>软链接没有实际数据，只是保存源文件的 Inode，不论源文件多大，软链接大小不变</li>
<li>软链接的权限是最大权限 lrwxrwxrwx.，但是由于没有实际数据，最终访问时需要参考源文件权限</li>
</ol>
</details>

<h1 id="文件和目录都能操作的命令"><a href="#文件和目录都能操作的命令" class="headerlink" title="文件和目录都能操作的命令"></a>文件和目录都能操作的命令</h1><h2 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h2><p>rm 是最强大的删除命令，不仅可以删除文件，也可以删除目录，</p>
<h3 id="基本信息如下-8"><a href="#基本信息如下-8" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：rm</li>
<li>英文原意：remove files or directories</li>
<li>所在路径：/bin/rm</li>
<li>执行权限：所有用户</li>
<li>功能描述：删除文件或目录</li>
</ul>
<h3 id="命令格式-11"><a href="#命令格式-11" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>rm [选项] 文件或目录</code></p>
<h4 id="选项-9"><a href="#选项-9" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-f</code> 强制删除</li>
<li><code>-i</code> 交互删除，在删除之前会询问用户</li>
<li><code>-r</code> 递归删除，可以删除目录</li>
</ul>
<h2 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h2><p>cp 命令用于复制文件或目录，基本信息入下：</p>
<ul>
<li>命令名称：cp</li>
<li>英文原意：copy files and directories</li>
<li>所在路径：/bin/cp</li>
<li>执行权限：所有用户</li>
<li>功能描述：复制文件或目录</li>
</ul>
<h3 id="命令格式-12"><a href="#命令格式-12" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>cp [选项] 源文件 目标文件</code></p>
<h4 id="选项-10"><a href="#选项-10" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-d</code> 如果文件为软链接(对硬链接无效)，则复制出的目标文件也为软链接</li>
<li><code>-i</code> 询问，如果目标文件已经存在，则会询问是否覆盖</li>
<li><code>-p</code> 复制后目标文件保留源文件的属性(包括所有者、所有组、权限和时间)</li>
<li><code>-r</code> 递归复制，用于复制目录</li>
<li><code>-a</code> 相当于-dpr 选项的集合</li>
</ul>
<h2 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h2><p>mv 命令用来剪贴文件或目录，</p>
<h3 id="基本信息如下-9"><a href="#基本信息如下-9" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：mv</li>
<li>英文原意：move(rename) files</li>
<li>所在路径：/bin/mv</li>
<li>执行权限：所有用户</li>
<li>功能描述：移动文件或目录</li>
</ul>
<h3 id="命令格式-13"><a href="#命令格式-13" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>cp [选项] 源文件 目标文件</code></p>
<h4 id="选项-11"><a href="#选项-11" class="headerlink" title="选项"></a>选项</h4><p><code>-f</code> 强制覆盖，如果目标文件已经存在，则不询问直接强制覆盖<br><code>-i</code> 交互模式，如果目标文件已经存在，则询问用户是否覆盖（默认选项）<br><code>-v</code> 显示详细信息</p>
<h2 id="stat-命令"><a href="#stat-命令" class="headerlink" title="stat 命令"></a>stat 命令</h2><p>stat 命令是查看文件详细的命令，</p>
<h3 id="基本信息如下-10"><a href="#基本信息如下-10" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：stat</li>
<li>英文原意：display file or file system status</li>
<li>所在路径：/usr/bin/stat</li>
<li>执行权限：所有用户</li>
<li>功能描述：显示文件或文件系统的详细信息</li>
</ul>
<h3 id="命令格式-14"><a href="#命令格式-14" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>stat [选项] 文件名</code></p>
<h4 id="选项-12"><a href="#选项-12" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-f</code> 显示文件系统状态而非文件状态</li>
<li><code>-t</code> 以简洁方式输出信息</li>
</ul>
<h1 id="基本权限管理"><a href="#基本权限管理" class="headerlink" title="基本权限管理"></a>基本权限管理</h1><h2 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h2><p>使用 ls 命令时，长格式显示的第一列就是文件的权限，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls -l install.log</span></span><br><span class="line">-rw-r--r--. 1 root root 28425 11 月 30 18:50 install.log</span><br></pre></td></tr></table></figure>

<p>第一列的权限位(-rw-r–r–.)如果不计最后的 “.” (这个点代表受 SELinux 安全上下文保护，这里暂时忽略不做介绍)，则共 10 位，这 10 位权限位的含义如下图所示：<br><img src="/images/source-img/linux-cmd.png"></p>
<ul>
<li>第 1 位：代表文件类型。Linux 不像 Windows 使用扩展名表示文件类型，而是使用权限位的第一位表示文件类型。虽然 Linux 文件的种类不像 Windows 中那么多，但是分类也不少，详细情况可以使用“info ls” 命令查看。这里列出一些常见的文件类型：<ul>
<li><code>-</code> 普通文件</li>
<li><code>d</code> 目录文件。Linux 中一切皆文件，所以目录也是文件的一种</li>
<li><code>l</code> 软链接文件</li>
<li><code>b</code> 块设备文件。这是一种特殊设备文件，存储设备都是这种文件，如分区文件/dev/sda1 就是这种文件</li>
<li><code>c</code> 字符设备文件。这也是特殊设备文件，输入设备一般都是这种文件，如鼠标、键盘等</li>
<li><code>p</code> 管道符文件。这是一种非常少见的特殊设备文件。</li>
<li><code>s</code> 套接字文件。这也是一种特殊设备文件，一些服务支持 socket 访问就会产生这样的文件</li>
</ul>
</li>
<li>第 2~4 位：代表文件所有者的权限<ul>
<li><code>r</code> 代表 read，是读取权限</li>
<li><code>w</code> 代表 write，是写权限</li>
<li><code>x</code> 代表 execute，是执行权限</li>
</ul>
</li>
<li>第 5~7 位：代表文件所属组的权限，同样拥有“rwx”权限</li>
<li>第 8~10 位：代表文件其他人的权限，同样拥有“rwx”权限</li>
</ul>
<details>
<summary>权限含义的解释</summary>

<p>读、写、执行权限对文件和目录的作用是不同的。</p>
<ul>
<li><p>权限对文件的作用</p>
<ul>
<li>读(r)：对文件有读权限，代表可以读取文件中的数据。如果把权限对应到命令上，那么一旦对文件有读权限，就可以对文件执行 cat、more、less、head、tail 等文件查看命令</li>
<li>写(w)：对文件有写权限，代表可以修改文件中的数据。如果把权限对应到命令上，那么一旦对文件有写权限，就可以对文件执行 vim、echo 等修改文件数据的命令。注意：对文件有写权限，是不能删除文件本身的，只能修改文件中的数据，如果想要删除文件，则需要对文件的上级目录拥有写权限。</li>
<li>执行(x)：对文件有执行权限，代表文件可以运行。在 Linux 中，只要文件有执行权限，这个文件就是执行文件了，只是这个文件到底能不能正确执行，不仅需要看执行权限，还要看文件的代码是不是正确的语言代码。对文件来说，执行权限是最高权限</li>
</ul>
</li>
<li><p>权限对目录的作用</p>
<ul>
<li>读(r)：对目录有读权限，代表可以查看目录下的内容，也就是可以查看目录下有哪些文件和子目录。如果包权限对应到命令上，那么一旦对目录拥有了读权限，就可以在目录下执行 ls 命令查看目录下的内容了</li>
<li>写(w)：对目录有写权限，代表可以修改目录下的数据，也就是可以在目录中新建、删除、复制、剪贴子文件或子目录。如果把权限对应到命令上，那么一旦对目录拥有了写权限，就可以在目录下执行 touch、rm、cp、mv 等命令。对目录来说，写权限是最高权限</li>
<li>执行(x)：目录是不能运行的，那么对目录拥有执行权限，代表可以进入目录。如果把权限对应到命令上，那么一旦对目录拥有了执行权限，就可以对目录执行 cd 命令进入目录</li>
</ul>
</li>
</ul>
</details>

<h2 id="chmod-命令"><a href="#chmod-命令" class="headerlink" title="chmod 命令"></a>chmod 命令</h2><p>chmod 用来修改文件的权限，</p>
<h3 id="基本信息如下-11"><a href="#基本信息如下-11" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：chmod</li>
<li>英文原意：change file mode bits</li>
<li>所在路径：/bin/chmod</li>
<li>执行权限：所有用户</li>
<li>功能描述：修改文件的权限模式</li>
</ul>
<h3 id="命令格式-15"><a href="#命令格式-15" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>chmod [选项] 权限模式 文件或目录</code></p>
<h4 id="选项-13"><a href="#选项-13" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-R</code> 递归设置权限，也就是给予目录中的所有文件设定权限</li>
<li><code>--reference=RFILE</code> 使用参考文件或参考目录 RFILE 的权限来设置目标文件或目录的权限。</li>
</ul>
<blockquote>
<p>chmod 命令的权限模式分为符号组合和八进制数组合<br>符号组合的格式是[ugoa][+-=][permission]]，也就是[用户身份][赋予方式][权限]]的格式。</p>
</blockquote>
<ul>
<li>用户身份<ul>
<li><code>u</code> 代表所有者(user)</li>
<li><code>g</code> 代表所属组(group)</li>
<li><code>o</code> 代表其他人(other)</li>
<li><code>a</code> 代表全部身份(all)</li>
</ul>
</li>
<li>赋予方式<ul>
<li><code>+</code> 加入权限 -：减去权限</li>
<li><code>=</code> 设置权限</li>
</ul>
</li>
<li>权限<ul>
<li><code>r</code> 读取权限(read)</li>
<li><code>w</code> 写权限(write)</li>
<li><code>x</code> 执行权限(execute)</li>
</ul>
</li>
</ul>
<p>八进制数组合的格式是[0-7][0-7][0-7]三位数字组成(每一位数字都是权限之和)，第一位是所有者权限，第二位是所属组权限，第三位其他人权限</p>
<ul>
<li><code>r</code> 读取权限对应的数字是 4</li>
<li><code>w</code> 写权限对应的数字是 2</li>
<li><code>x</code> 执行权限对应的数字是 1</li>
</ul>
<p>例如读写权限 rw 八进制数表示 6</p>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加组用户的写权限。</span></span><br><span class="line">chmod g+w ./test.log</span><br><span class="line"><span class="comment"># 删除其他用户的所有权限。</span></span><br><span class="line">chmod o= ./test.log</span><br><span class="line"><span class="comment"># 使得所有用户都没有写权限。</span></span><br><span class="line">chmod a-w ./test.log</span><br><span class="line"><span class="comment"># 当前用户具有所有权限，组用户有读写权限，其他用户只有读权限。</span></span><br><span class="line">chmod u=rwx, g=rw, o=r ./test.log (等价的八进制数表示:chmod 754 ./test.log )</span><br><span class="line"><span class="comment"># 将目录以及目录下的文件都设置为所有用户拥有读写权限。注意，使用&#x27;-R&#x27;选项一定要保留当前用户的执行和读取权限，否则会报错！</span></span><br><span class="line">chmod -R a=rw ./testdir/</span><br><span class="line"><span class="comment"># 根据其他文件的权限设置文件权限。</span></span><br><span class="line">chmod --reference=./1.log ./test.log</span><br></pre></td></tr></table></figure>

<h2 id="chown-命令"><a href="#chown-命令" class="headerlink" title="chown 命令"></a>chown 命令</h2><p>chown 命令用来修改文件和目录的所有者和所属组，</p>
<h3 id="基本信息如下-12"><a href="#基本信息如下-12" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：chown</li>
<li>英文原意：change file owner and group</li>
<li>所在路径：/bin/chown</li>
<li>执行权限：所有用户</li>
<li>功能描述：修改文件和目录的所有者和所属组</li>
</ul>
<h3 id="命令格式-16"><a href="#命令格式-16" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>chown [选项] 所有者[:所属组] 文件或目录</code></p>
<h4 id="选项-14"><a href="#选项-14" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-R</code> 递归设置权限，也就是给予子目录的所有文件设置权限</li>
<li>当省略 “:所属组” ，仅改变文件所有者</li>
</ul>
<blockquote>
<p>注意：普通用户不能修改文件的所有者，哪怕自己是这个文件的所有者也不行。普通用户可以修改所有者是自己的文件权限。</p>
</blockquote>
<h2 id="umask-命令"><a href="#umask-命令" class="headerlink" title="umask 命令"></a>umask 命令</h2><p>umask 命令用来显示或设置创建文件或目录的权限掩码。</p>
<p>我们需要先了解一下新建文件和目录的默认最大权限，对于文件来讲，新建文件的默认最大权限是 666，没有执行权限，只是因为执行权限对文件来讲比较危险，不能再新建文件的时候默认赋予，而必须通过用户手工赋予；对于目录来讲，新建目录的默认最大权限是 777，这是因为对目录而言，执行权限仅仅代表进入目录，所以即使新建目录时直接默认赋予也没有什么危险。</p>
<p>按照官方的标准算法，umask 默认权限需要使用二进制进行逻辑与和逻辑非联合运算才可以得到正确的新建文件和目录的默认权限，这种方法既不好计算也不好理解，不推荐。我们这里按照权限字母来讲解 umask 权限的计算方。我们就按照默认的 umask 值是 0022(等效于 022)分别来计算一下新建文件和目录的默认权限，</p>
<ul>
<li>文件的默认权限最大只能是 666，而 umask 的值是 022，则 rw-rw-rw- 减去 —-w–w-等于 rw-r–r–，所以新建文件的默认权限是 rw-r–r–</li>
<li>目录的默认权限最大是 777，而 umask 的值是 022，则 rwxrwxrwx 减去 —-w–w-等于 rwxr-xr-x，所以新建目录的默认权限是 rwxr-xr-x</li>
<li>同理，如果 umask 的值是 033，新建文件的默认权限为 rw-rw-rw- 减去 —-wx-wx 等于 rw-r–r–</li>
</ul>
<h3 id="命令格式-17"><a href="#命令格式-17" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>umask [选项] [模式]</code></p>
<h4 id="选项-15"><a href="#选项-15" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-p</code> 输出的权限掩码可直接作为指令来执行</li>
<li><code>-S</code> 以符号组合的方式输出权限掩码，不使用该选项时以八进制数的形式输出</li>
</ul>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以八进制数的形式输出权限掩码</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># umask</span></span><br><span class="line">0022</span><br><span class="line"><span class="comment"># 以八进制数的形式输出权限掩码，并作为指令来执行</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># umask -p</span></span><br><span class="line"><span class="built_in">umask</span> 0022</span><br><span class="line"><span class="comment"># 以符号组合的方式输出权限掩码。</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># umask -S</span></span><br><span class="line">u=rwx,g=rx,o=rx</span><br><span class="line"></span><br><span class="line"><span class="comment">#上条命令以符号组合的方式输出权限掩码，输出的结果u=rwx,g=rx,o=rx转化为八进制数等于0755，</span></span><br><span class="line"><span class="comment">#用八进制数来设置同样的权限，umask需要额外的执行减法&quot;0777 - 0755&quot;即0022</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># umask 0022</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为组用户添加写权限</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># umask g+w</span></span><br><span class="line"><span class="comment"># 删除其他用户的写、执行权限</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># umask o-wx</span></span><br><span class="line"><span class="comment"># 赋值全部用户所有权限，等价于umask u=rwx,g=rwx,o=rwx</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># umask a=rwx</span></span><br><span class="line"><span class="comment">#清除其他用户的读、写、执行权限</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># umask o=</span></span><br></pre></td></tr></table></figure>

<h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><h2 id="man-命令"><a href="#man-命令" class="headerlink" title="man 命令"></a>man 命令</h2><p>man 命令是最常见的帮助命令，也是 Linux 最主要的帮助命令，</p>
<h3 id="基本信息如下-13"><a href="#基本信息如下-13" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：man</li>
<li>英文原意：format and display the on-line manual pages</li>
<li>所在路径：/usr/bin/chown</li>
<li>执行权限：所有用户</li>
<li>功能描述：显示连机帮助手册</li>
</ul>
<h3 id="命令格式-18"><a href="#命令格式-18" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>man [选项] [章节] 命令</code></p>
<h4 id="选项-16"><a href="#选项-16" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-f</code> 查看命令有哪些章节的帮助和简短描述信息，等价于 whatis 指令</li>
<li><code>-k</code> 查看和命令相关的所有帮助</li>
</ul>
<h4 id="man命令交互快捷键"><a href="#man命令交互快捷键" class="headerlink" title="man命令交互快捷键"></a><code>man</code>命令交互快捷键</h4><ul>
<li><code>上箭头</code> 向上移动一行</li>
<li><code>下箭头</code> 向下移动一行</li>
<li><code>PgUP</code> 向上翻一页</li>
<li><code>PgDn</code> 向下翻一页</li>
<li><code>g</code> 移动到第一页</li>
<li><code>G</code> 移动到最后一页</li>
<li><code>q</code> 退出</li>
<li><code>/字符串</code> 从当前向下搜索字符串</li>
<li><code>?字符串</code> 从当前向上搜索字符串</li>
<li><code>n</code> 当搜索字符串时，可以用 n 键找到下一个字符串</li>
<li><code>N</code> 当搜索字符串时，使用 N 键反向查询字符串。也就是说，如果使用“/字符串”方式搜索，则 N 键表示向上搜索字符串；如果使用“?字符串”方式搜索，则 N 键表示向下搜索字符串</li>
</ul>
<h4 id="man手册章节"><a href="#man手册章节" class="headerlink" title="man手册章节"></a><code>man</code>手册章节</h4><ul>
<li><code>1</code> 用户在 shell 环境可操作的命令或执行文件</li>
<li><code>2</code> 系统内核可调用的函数与工具等</li>
<li><code>3</code> 一些常用的函数(function)与函数库(library)，大部分为 C 的函数库(libc)</li>
<li><code>4</code> 设备文件说明，通常在/dev 下的文件</li>
<li><code>5</code> 配置文件或某些文件格式</li>
<li><code>6</code> 游戏帮助(个人版的 Linux 中是有游戏的)</li>
<li><code>7</code> 惯例与协议等，如 Linux 文件系统，网络协议，ASCII code 等说明</li>
<li><code>8</code> 系统管理员可用的管理命令</li>
<li><code>9</code> 跟 kernel 有关的文件</li>
</ul>
<h4 id="man手册的格式"><a href="#man手册的格式" class="headerlink" title="man手册的格式"></a><code>man</code>手册的格式</h4><ul>
<li><code>NAME</code> 命令名称及功能简要说明</li>
<li><code>SYNOPSIS</code> 用法说明，包括可用的选项<ul>
<li><code>[]</code> 可选内容</li>
<li><code>&lt;&gt;</code> 必选内容</li>
<li><code>a|b</code> 二选一</li>
<li><code>&#123;&#125;</code> 分组</li>
<li><code>...</code> 同意内容可出现多次</li>
</ul>
</li>
<li><code>DESCRIPTION</code> 命令功能的详细说明，可能包括每一个选项的意义</li>
<li><code>OPTIONS</code> 说明每一项的意义</li>
<li><code>EXAMPLES</code> 使用示例</li>
</ul>
<p><code>* FILES</code> 此命令相关的配置文件<br><code>* AUTHOR</code> 作者<br><code>* COPYRIGHT</code> 版本信息<br><code>* REPORTTING BUGS</code> bug 信息</p>
<ul>
<li>SEE ALSO：参考其他帮助</li>
</ul>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>我们输入 <code>man ls</code>，它会在最左上角显示“LS（1）”，在这里，“LS”表示手册名称，而“（1）”表示该手册位于第一节章，同样，我们输 man ifconfig 它会在最左上角显示“IFCONFIG（8）”。也可以这样输入命令：“man [章节号] 手册名称”。</p>
<p><code>man</code> 是按照手册的章节号的顺序进行搜索的，比如：<code>man sleep</code> 只会显示 sleep 命令的手册，如果想查看库函数 sleep，就要输入：<code>man 3 sleep</code></p>
<h2 id="info-命令"><a href="#info-命令" class="headerlink" title="info 命令"></a>info 命令</h2><p>info 命令的帮助信息是一套完整的资料，每个单独命令的 man 帮助信息只是这套完整资料的某一个区段(节点)，</p>
<h3 id="基本信息如下-14"><a href="#基本信息如下-14" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：info</li>
<li>英文原意：info</li>
<li>所在路径：/usr/bin/info</li>
<li>执行权限：所有用户</li>
<li>功能描述：显示一套完整的帮助信息资料</li>
</ul>
<h3 id="命令格式-19"><a href="#命令格式-19" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>info [选项] 参数</code></p>
<h4 id="选项："><a href="#选项：" class="headerlink" title="选项："></a>选项：</h4><p><code>-d</code> 添加包含 info 格式帮助文档的目录<br><code>-f</code> 指定要读取的 info 格式的帮助文档<br><code>-n</code> 指定首先访问的 info 帮助文件的节点<br><code>-o</code> 输出被选择的节点内容到指定文件</p>
<ul>
<li>参数：指定需要获得帮助的主题，可以是指令、函数以及配置文件</li>
</ul>
<p>info 命令交互快捷键</p>
<ul>
<li><code>上箭头</code> 向上移动一行</li>
<li><code>下箭头</code> 向下移动一行</li>
<li><code>PgUP</code> 向上翻一页</li>
<li><code>PgDn</code> 向下翻一页</li>
<li><code>Tab</code> 在有“*”符号的节点间切换</li>
<li><code>回车</code> 进入有“*” 符号的子页面，查看详细帮助信息</li>
<li><code>u</code> 进入上一层信息(回车是进入下一层信息)</li>
<li><code>q</code> 退出 info 帮助信息</li>
<li><code>n</code> 进入下一小节信息</li>
<li><code>p</code> 进入上一下节信息</li>
<li><code>?</code> 查看帮助信息</li>
</ul>
<h2 id="help-命令"><a href="#help-命令" class="headerlink" title="help 命令"></a>help 命令</h2><p>help 命令只能获取 shell 内置命令的帮助，</p>
<h3 id="基本信息如下-15"><a href="#基本信息如下-15" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：help</li>
<li>英文原意：help</li>
<li>所在路径：shell 内置命令</li>
<li>执行权限：所有用户</li>
<li>功能描述：显示 shell 内置命令的帮助。可以使用 shell 内置命令 type 来区分内置命令与外部命令，对于外部命令的帮助信息只能使用 man 或者 info 命令查看</li>
</ul>
<h3 id="命令格式-20"><a href="#命令格式-20" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>help [选项] 内置命令</code></p>
<h4 id="选项-17"><a href="#选项-17" class="headerlink" title="选项"></a>选项</h4><ul>
<li>-d：显示内建命令的简要描述。</li>
<li>-m：按照 man 手册的格式输出内置命令的帮助信息。</li>
<li>-s：仅输出内建命令的命令格式。</li>
</ul>
<h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以man手册的格式查看内置命令type的帮助信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># help -m type</span></span><br><span class="line">NAME</span><br><span class="line">    <span class="built_in">type</span> - Display information about <span class="built_in">command</span> <span class="built_in">type</span>.</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">    <span class="built_in">type</span> [-afptP] name [name ...]</span><br><span class="line"> (省略。。。)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ls、help命令是否是内置命令</span></span><br><span class="line">[root@localhost ~]<span class="comment"># type ls</span></span><br><span class="line">ls is aliased to `ls --color=auto<span class="string">&#x27;</span></span><br><span class="line"><span class="string">[root@localhost ~]# type help</span></span><br><span class="line"><span class="string">help is a shell builtin</span></span><br></pre></td></tr></table></figure>

<h2 id="help-选项"><a href="#help-选项" class="headerlink" title="--help 选项"></a>--help 选项</h2><p>绝大多数命令都可以使用–help 选项来查看帮助，者也是一种获取帮助的方法。例如 ls –help，这种方法非常简单，输出的帮助信息基本上是 man 命令的信息简要版</p>
<h1 id="搜索命令"><a href="#搜索命令" class="headerlink" title="搜索命令"></a>搜索命令</h1><h2 id="whereis-命令"><a href="#whereis-命令" class="headerlink" title="whereis 命令"></a>whereis 命令</h2><p>whereis 是搜索命令的命令，也就是说 whereis 不能搜索普通文件，而只能搜索系统命令，</p>
<h3 id="基本信息如下-16"><a href="#基本信息如下-16" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：whereis</li>
<li>英文原意：locate the binary,source,and manual page files for a command</li>
<li>所在路径：/usr/bin/whereis</li>
<li>执行权限：所有用户</li>
<li>功能描述：查找二进制命令、源文件和帮助文档的路径</li>
</ul>
<h3 id="命令格式-21"><a href="#命令格式-21" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>whereis [选项] 参数</code></p>
<h4 id="选项-18"><a href="#选项-18" class="headerlink" title="选项"></a>选项</h4><p><code>-b</code> 只查找二进制文件<br><code>-B 目录</code> 只在设置的目录下查找二进制文件<br><code>-m</code> 只查找说明文件<br><code>-M 目录</code> 只在设置的目录下查找说明文件<br><code>-s</code> 只查找原始代码文件<br><code>-S 目录</code> 只在设置的目录下查找原始代码文件<br><code>-f</code> 不显示文件名前的路径名称</p>
<h2 id="which-命令"><a href="#which-命令" class="headerlink" title="which 命令"></a>which 命令</h2><p>which 也是搜索系统命令的命令，和 whereis 的区别在于，whereis 命令可以在查找二进制命令的同时，查找帮助文档的位置，而 which 命令在查找到二进制命令的同时，如果这个命令有别名，则还可以查到别名命令。</p>
<h3 id="基本信息如下-17"><a href="#基本信息如下-17" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：which</li>
<li>英文原意：shows the full path of (shell) commands</li>
<li>所在路径：/usr/bin/which</li>
<li>执行权限：所有用户</li>
<li>功能描述：列出二进制命令路径和别名。which 只会在环境变量$PATH 设置的目录里查找符合条件的命令</li>
</ul>
<h3 id="命令格式-22"><a href="#命令格式-22" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>which [选项] 参数</code></p>
<h2 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a>find 命令</h2><p>find 命令用来在指定目录下查找文件，</p>
<h3 id="基本信息如下-18"><a href="#基本信息如下-18" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：find</li>
<li>英文原意：search for files in a directory hierarchy</li>
<li>所在路径：/bin/find</li>
<li>执行权限：所有用户</li>
<li>功能描述：在指定目录中搜索文件</li>
</ul>
<h3 id="命令格式-23"><a href="#命令格式-23" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>find [搜索路径] [选项]</code></p>
<ul>
<li>搜索路径：省略则默认为当目录，相当于 “find .”</li>
</ul>
<h4 id="选项-19"><a href="#选项-19" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-name 范本样式</code> 按照文件名称搜索，支持通配符模糊查询</li>
<li><code>-iname 范本样式</code> 此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别</li>
<li><code>-inum inode 编号</code> 查找符合指定的 inode 编号的文件或目录</li>
<li><code>-path 范本样式</code> 查找路径包含范本样式的文件或目录</li>
<li><code>-regex 范本样式</code> 正则表达式搜索</li>
<li><code>-iregex 范本样式</code> 同”-regex”，忽略大小写</li>
<li><code>-size [+|-]文件大小[cwbkMG] </code> 查找符合指定的文件大小的文件<ul>
<li>“+” 的意思是搜索比指定大小还要大的文件，”-“ 的意思是搜索比指定大小还要小的文件</li>
<li>“cwbkMG”是单位，c——字节，w——字(2 字节)，b——块(512 字节)，k——千字节，M——兆字节，G——吉字节。如果不写单位默认是 b</li>
</ul>
</li>
<li><code>-atime [+|-]天数</code> 按照文件最后一次访问时间搜索，单位每天<ul>
<li>“+”、”-“的含义，例如”5”表示恰好 5 天前的那一天，”+5”超过 5 天前的时间，”-5”5 天内的时间。(以下按时间搜索选项中”+”、”-“含义相同)</li>
</ul>
</li>
<li><code>-mtime [+|-]天数</code> 按照文件数据最后一次修改时间搜索，单位每天</li>
<li><code>-ctime [+|-]天数</code> 按照文件元数据(如权限等)最后一次修改时间搜索，单位每天</li>
<li><code>-amin [+|-]分钟数</code> 按照文件最后一次访问时间搜索，单位每分钟</li>
<li><code>-mmin [+|-]分钟数</code> 按照文件数据最后一次修改时间搜索，单位每分钟</li>
<li><code>-cmin [+|-]分钟数</code> 按照文件元数据(如权限等)最后一次修改时间搜索，单位每分钟</li>
<li><code>-perm [+|-]权限数值</code> 查找符合指定的权限数值的文件或目录。例如，权限数值为”766”表示权限恰好等于 766，”-766”表示文件权限必须全部包含- 766，”+766”表示文件权限包含 766 任意一个权限</li>
<li><code>-uid 用户 ID</code> 查找所有者是指定用户 ID 的文件</li>
<li><code>-user 用户名</code> 查找所有者是指定用户名的文件</li>
<li><code>-gid 组 ID</code> 查找所有组是指定组 ID 的文件</li>
<li><code>-group 组名</code> 查找所有组是指定组名的文件</li>
<li><code>-nouser</code> 查找没有所有者的文件<ul>
<li>按照所有者和所有组搜索时，”-nouser”选项比较常用，主要用于查找垃圾文件。没有所有者的文件比较少见，那就是外来文件，比如光盘和 U 盘的文件是由 Windows 复制的，在 Linux 中查看就是没有所有者的文件，再比如手工源码包安装的文件也可能没有所有者</li>
</ul>
</li>
<li><code>-type 文件类型</code> 只寻找符合指定的文件类型的文件<ul>
<li>f——普通文件，l——符号连接，d——目录，c——字符设备，b——块设备，s——套接字，p——Fifo</li>
</ul>
</li>
<li><code>-empty</code> 查找文件大小为 0 的文件</li>
<li><code>-maxdepth 目录层级数</code> 设置搜索的最大目录层级</li>
<li><code>-mindepth 目录层级</code> 设置搜索的最小目录层级</li>
<li><code>-exec 执行指令</code> 把 find 命令查找结果交由”-exec”调用的命令来处理<ul>
<li>格式 find [搜索路径] [选项] -exec 命令 {} ;, 其中”{}”代表 find 命令的查询结果</li>
</ul>
</li>
<li><code>-ok 执行指令</code> 此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户是否执行</li>
<li><code>-prune</code> 不寻找字符串作为寻找文件或目录的范本样式</li>
<li><code>-a</code> and 逻辑与</li>
<li><code>-o</code> or 逻辑或</li>
<li><code>-not</code> not 逻辑非</li>
</ul>
<h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#==================根据文件名或者正则表达式进行匹配=====================</span></span><br><span class="line"><span class="comment">#列出当前目录及子目录下所有文件和文件夹</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find .</span></span><br><span class="line"><span class="comment">#在`/home`目录下查找以.txt结尾的文件名</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -name &quot;*.txt&quot;</span></span><br><span class="line"><span class="comment">#同上，但忽略大小写</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /home -iname &quot;*.txt&quot;</span></span><br><span class="line"><span class="comment">#当前目录及子目录下查找所有以.txt和.pdf结尾的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . \( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \)</span></span><br><span class="line">或</span><br><span class="line">[root@localhost ~]<span class="comment"># find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot;</span></span><br><span class="line"><span class="comment">#查找路径包含local的文件或者目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /usr/ -path &quot;*local*&quot;</span></span><br><span class="line"><span class="comment">#基于正则表达式匹配文件路径</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -regex &quot;.*\(\.txt\|\.pdf\)$&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#=====================借助`-exec`选项与其他命令结合使用==================</span></span><br><span class="line"><span class="comment">#找出当前目录下所有root的文件，并把所有权更改为用户tom</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find .-type f -user root -exec chown tom &#123;&#125; \;</span></span><br><span class="line"><span class="comment">#找出自己家目录下所有的.txt文件并删除，删除前先询问</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find $HOME/. -name &quot;*.txt&quot; -ok rm &#123;&#125; \;</span></span><br><span class="line"><span class="comment">#查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -type f -name &quot;*.txt&quot; -exec cat &#123;&#125; \;&gt; all.txt</span></span><br><span class="line"><span class="comment">#将30天前的.log文件移动到old目录中</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -type f -mtime +30 -name &quot;*.log&quot; -exec cp &#123;&#125; old \;</span></span><br><span class="line"><span class="comment">#找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -type f -name &quot;*.txt&quot; -exec printf &quot;File: %s\n&quot; &#123;&#125; \;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#========================逻辑运算符==========================</span></span><br><span class="line"><span class="comment">#查找文件大小超过2k并且是普通文件类型的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -size +2k -a -type f</span></span><br><span class="line"><span class="comment">#找出/home下不是以.txt结尾的文件</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># find . -not -name &quot;*.txt&quot;</span></span><br><span class="line">或</span><br><span class="line">[root@localhost ~]<span class="comment"># find /home ! -name &quot;*.txt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#======================搜索但跳出指定的目录===================</span></span><br><span class="line"><span class="comment">#查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk</span></span><br><span class="line">[root@localhost ~]<span class="comment"># find . -path &quot;./sk&quot; -prune -o -name &quot;*.txt&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="locate-命令"><a href="#locate-命令" class="headerlink" title="locate 命令"></a>locate 命令</h2><p>locate 命令其实是 <code>find -name</code> 的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录(find 是去硬盘找)，而是搜索一个数据库<code>/var/lib/mlocate/mlocate.db</code>，这个数据库中含有本地所有文件信息。Linux 系统自动创建这个数据库，并且每天自动更新一次，所以使用 locate 命令查不到最新变动过的文件，为了避免这种情况，可以在使用 <code>locate</code> 之前，先使用 <code>updatedb</code> 命令手动更新数据库。locate 命令</p>
<h3 id="基本信息如下-19"><a href="#基本信息如下-19" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：locate</li>
<li>英文原意：find files by name</li>
<li>所在路径：/usr/bin/locate</li>
<li>执行权限：所有用户</li>
<li>功能描述：按照文件名搜索文件</li>
</ul>
<h3 id="命令格式-24"><a href="#命令格式-24" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>locate [选项] 文件名</code></p>
<h4 id="选项-20"><a href="#选项-20" class="headerlink" title="选项"></a>选项</h4><ul>
<li>-d 指定资料库的路径。默认是/var/lib/mlocate/mlocate.db</li>
<li>-n 至多显示 n 个输出</li>
</ul>
<p>数据库配置文件(/etc/updatedb.conf)内容说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/updatedb.conf</span></span><br><span class="line"><span class="comment">#开启搜索限制，也就是让这个文件生效</span></span><br><span class="line">PRUNE_BIND_MOUNTS = <span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="comment">#在locate执行搜索时，禁止搜索这些文件类型</span></span><br><span class="line">PRUNEFS = <span class="string">&quot;9p afs anon_inodefs auto autofs bdev binfmt_misc cgroup cifs coda configfs cpuset debugfs devpts ecryptfs exofs fuse fusectl gfs gfs2 gpfs hugetlbfs inotifyfs iso9660 jffs2 lustre mqueue ncpfs nfs nfs4 nfsd pipefs proc ramfs rootfs rpc_pipefs securityfs selinuxfs sfs sockfs sysfs tmpfs ubifs udf usbfs&quot;</span></span><br><span class="line"><span class="comment">#在locate执行搜索时，禁止搜索这些扩展名的文件</span></span><br><span class="line">PRUNENAMES = <span class="string">&quot;.git .hg .svn&quot;</span></span><br><span class="line"><span class="comment">##在locate执行搜索时，禁止搜索这些系统目录</span></span><br><span class="line">PRUNEPATHS = <span class="string">&quot;/afs /media /net /sfs /tmp /udev /var/cache/ccache /var/spool/cups /var/spool/squid /var/tmp&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>locate 优缺点：</strong><br>优点：按照数据库搜索，搜索速度快，消耗资源小<br>缺点：只能按照文件名来搜索文件，而不能执行更复杂的搜索，比如按照权限、大小、修改时间等</p>
<h2 id="grep-命令"><a href="#grep-命令" class="headerlink" title="grep 命令"></a>grep 命令</h2><p>grep 命令的作用是在文件中提取和匹配符合条件的字符串行，是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>
<h3 id="基本信息如下-20"><a href="#基本信息如下-20" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：grep</li>
<li>英文原意：global search regular expression(RE) and print out the line</li>
<li>所在路径：/usr/bin/grep</li>
<li>执行权限：所有用户</li>
<li>功能描述：全面搜索正则表达式并把行打印出来</li>
</ul>
<h3 id="命令格式-25"><a href="#命令格式-25" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>grep [选项] 搜索内容 文件名</code></p>
<h4 id="选项-21"><a href="#选项-21" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-i</code> 忽略大小写</li>
<li><code>-n</code> 输出行号</li>
<li><code>-v</code> 反向查找</li>
<li><code>-d 动作</code> 当指定要查找的是目录而非文件时，必须使用这项参数，否则 grep 指令将回报信息并停止动作。动作包含：read、recurse、skip</li>
<li><code>-R 或-r</code> 此参数的效果和指定“-d recurse”参数相同，递归查找目录下的所有文件内容</li>
<li><code>--color=auto</code> 搜素出的关键字用颜色高亮显示</li>
</ul>
<h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在文件中搜索一个单词，命令会返回一个包含“match_pattern”的文本行：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep match_pattern file_name</span></span><br><span class="line">或</span><br><span class="line">[root@localhost ~]<span class="comment"># grep &quot;match_pattern&quot; file_name</span></span><br><span class="line"><span class="comment">#在多个文件中查找：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep &quot;match_pattern&quot; file_1 file_2 file_3</span></span><br><span class="line"><span class="comment">#标记匹配颜色 --color=auto 选项：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep &quot;match_pattern&quot; file_name --color=auto</span></span><br><span class="line"><span class="comment">#在当前目录中对文本进行递归搜索</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -r &quot;match_pattern&quot; .</span></span><br><span class="line"><span class="comment">#正则匹配输出以数字开头的所有行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep &quot;^[0-9].*&quot; file_name</span></span><br></pre></td></tr></table></figure>

<details>
<summary>find也是搜索命令，那么find与grep命令有什么区别呢？</summary>

<p><strong>find：</strong>find 命令用于在系统中搜索符合条件的文件名，如果需要模糊查询，则使用通配符进行匹配，通配符是完全匹配。(find 命令也可以通过”-regex”选项，把匹配规则转为正则表达式规则)<br><strong>grep：</strong>grep 命令用于在文件中搜索符合条件的字符串，如果需要模糊查询，则使用正则表达式进行匹配，正则表达式是包含匹配。</p>
</details>

<details>
<summary>通配符与正则表达式的区别</summary>

<p><strong>通配符：一般用于匹配文件名，完全匹配</strong></p>
<ol>
<li>?：匹配一个任意字符</li>
<li>*：匹配 0 个或多个任意字符，也就是可以匹配任何内容</li>
<li>[]：匹配中括号里任意一个字符。例如，[abc]代表一定匹配一个字符，或是 a，或是 b，或是 c</li>
<li>[-]：匹配中括号里任意一个字符，”-“代表一个范围。例如，[a-z]代表匹配一个小写字母</li>
<li>[^]：逻辑非，表示匹配不是中括号里的一个字符。例如，[^0-9]代表匹配一个不是数字的字符</li>
</ol>
<p><strong>正则表达式：一般用于匹配字符串</strong></p>
<ol>
<li>?：匹配前一个字符重复 0 次或 1 次</li>
<li>*：匹配前一个字符重复 0 次或多次</li>
<li>[]：匹配中括号里任意一个字符。例如，[abc]代表一定匹配一个字符，或是 a，或是 b，或是 c</li>
<li>[-]：匹配中括号里任意一个字符，”-“代表一个范围。例如，[a-z]代表匹配一个小写字母</li>
<li>[^]：逻辑非，表示匹配不是中括号里的一个字符。例如，[^0-9]代表匹配一个不是数字的字符</li>
<li>^：匹配行首</li>
<li>$：匹配行尾</li>
</ol>
</details>

<h2 id="管道符"><a href="#管道符" class="headerlink" title="| 管道符"></a>| 管道符</h2><h3 id="命令格式-26"><a href="#命令格式-26" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>命令 1 | 命令 2</code><br>“|”管道符的作用是把命令 1 的正确输出作为命令 2 的操作对象</p>
<h3 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h3><h4 id="把”ll”命令的输出作为”more”命令的操作对象"><a href="#把”ll”命令的输出作为”more”命令的操作对象" class="headerlink" title="把”ll”命令的输出作为”more”命令的操作对象"></a>把”ll”命令的输出作为”more”命令的操作对象</h4><p>我们经常使用 “ll” 命令查看文件的长格式，不过在有些目录中文件很多，不如/etc/目录使用 “ll” 命令显示的内容就非常多，只能看到最后的内容而不能看到前面输出的内容，这时我们马上想到 “more” 命令可以分屏显示文件内容，一种笨方法是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用输出重定向，把&quot;ll&quot;命令的输出保存到/root/testfile</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll -a /etc/ &gt; /root/testfile</span></span><br><span class="line"><span class="comment"># 然后用 more 分屏显示</span></span><br><span class="line">[root@localhost ~]<span class="comment"># more /root/testfile</span></span><br></pre></td></tr></table></figure>

<p>这样操作实在是不方便，这时可以利用管道符，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把&quot;ll&quot;命令的输出作为&quot;more&quot;命令的操作对象</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll -a /etc/ | more</span></span><br></pre></td></tr></table></figure>

<h4 id="在”ll”命令输出内容中搜索-yum-的文件名"><a href="#在”ll”命令输出内容中搜索-yum-的文件名" class="headerlink" title="在”ll”命令输出内容中搜索 yum 的文件名"></a>在”ll”命令输出内容中搜索 yum 的文件名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在&quot;ll&quot;命令输出内容中搜索 yum 的文件名</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll -a /etc/ | grep yum</span></span><br></pre></td></tr></table></figure>

<h4 id="统计具体的网络连接数量（”grep”命令筛选，”wc”命令统计）"><a href="#统计具体的网络连接数量（”grep”命令筛选，”wc”命令统计）" class="headerlink" title="统计具体的网络连接数量（”grep”命令筛选，”wc”命令统计）"></a>统计具体的网络连接数量（”grep”命令筛选，”wc”命令统计）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#统计具体的网络连接数量（&quot;grep&quot;命令筛选，&quot;wc&quot;命令统计）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># netstat -an | grep -i &quot;ESTABLISHED&quot; | wc -l</span></span><br></pre></td></tr></table></figure>

<h2 id="alias-命令"><a href="#alias-命令" class="headerlink" title="alias 命令"></a>alias 命令</h2><p>alias 命令用来设置指令的别名，我们可以使用该命令可以将一些较长的命令进行简化。</p>
<h3 id="alias-基本使用方法"><a href="#alias-基本使用方法" class="headerlink" title="alias 基本使用方法"></a>alias 基本使用方法</h3><ul>
<li>打印已经设置的命令别名<ul>
<li>alias 或 alias -p</li>
</ul>
</li>
<li>给命令设置别名<ul>
<li>格式：alias 新的命令=’实际命令’。必须使用单引号’’实际命令引起来，防止特殊字符导致错误</li>
<li>例如：alias l=’ls -lsh’，现在只用输入 “l” 就可以列出目录了，相当于输入”ls -lsh”；alias ser=’service network restart’，现在输入”ser”就可以重启网络服务了</li>
</ul>
</li>
</ul>
<blockquote>
<p>直接在 shell 里设定的命令别名，在终端关闭或者系统重新启动后都会失效，如何才能永久有效呢？</p>
<p>使用编辑器打开~/.bashrc，在文件中加入别名设置，如：alias rm=’rm -i’，保存后执行 source ~/.bashrc，这样就可以永久保存命令的别名了。因为修改的是当前用户目录下的~/.bashrc 文件，所以这样的方式只对当前用户有用。如果要对所有用户都有效，修改/etc/bashrc 文件就可以了。</p>
</blockquote>
<h1 id="压缩和解压缩命令"><a href="#压缩和解压缩命令" class="headerlink" title="压缩和解压缩命令"></a>压缩和解压缩命令</h1><p>在 Linux 中可以识别的常见压缩格式有十几种，比如”.zip”、”.gz”、”.bz2”、”.tar”、”.tar.gz”、”.tar.bz2”等。减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间</p>
<h2 id="“-zip”-格式"><a href="#“-zip”-格式" class="headerlink" title="“.zip” 格式"></a>“.zip” 格式</h2><p>“.zip”是 Windows 中最常见的压缩格式，Liunx 也可以正确识别”.zip”格式，这可以方便地和 Windows 系统通用压缩文件。</p>
<h3 id="zip-命令"><a href="#zip-命令" class="headerlink" title="zip 命令"></a>zip 命令</h3><p>zip 命令就是”.zip”格式的压缩命令，</p>
<h4 id="基本信息如下-21"><a href="#基本信息如下-21" class="headerlink" title="基本信息如下"></a>基本信息如下</h4><ul>
<li>命令名称：zip</li>
<li>英文原意：package and compress(archive) files</li>
<li>所在路径：/usr/bin/zip</li>
<li>执行权限：所有用户</li>
<li>功能描述：压缩文件和目录</li>
</ul>
<h4 id="命令格式-27"><a href="#命令格式-27" class="headerlink" title="命令格式"></a>命令格式</h4><p><code>zip [选项] 压缩包名 源文件或目录</code></p>
<h5 id="选项-22"><a href="#选项-22" class="headerlink" title="选项"></a>选项</h5><ul>
<li><code>-r</code> 压缩目录递归处理，将指定目录下的所有文件和子目录一并处理</li>
</ul>
<h3 id="unzip-命令"><a href="#unzip-命令" class="headerlink" title="unzip 命令"></a>unzip 命令</h3><p>unzip 命令就是”.zip”格式的解压缩命令，</p>
<h4 id="基本信息如下-22"><a href="#基本信息如下-22" class="headerlink" title="基本信息如下"></a>基本信息如下</h4><ul>
<li>命令名称：unzip</li>
<li>英文原意：list, test and extract compressed files in a zip archive</li>
<li>所在路径：/usr/bin/unzip</li>
<li>执行权限：所有用户</li>
<li>功能描述：列表、测试和提取压缩文件中的文件</li>
</ul>
<h4 id="命令格式-28"><a href="#命令格式-28" class="headerlink" title="命令格式"></a>命令格式</h4><p><code>unzip [选项] 压缩包名</code></p>
<h5 id="选项-23"><a href="#选项-23" class="headerlink" title="选项"></a>选项</h5><ul>
<li><code>-d</code> 指定解压的位置</li>
</ul>
<h2 id="“-gz”-格式"><a href="#“-gz”-格式" class="headerlink" title="“.gz” 格式"></a>“.gz” 格式</h2><p>“.gz”格式是 Linux 中最常见的压缩格式。</p>
<h3 id="gzip-命令"><a href="#gzip-命令" class="headerlink" title="gzip 命令"></a>gzip 命令</h3><p>gzip 命令是”.gz”格式的压缩和解压缩命令，既方便又好用。gzip 不仅可以用来压缩大的、较少使用的文件以节省磁盘空间，还可以和 tar 命令一起构成 Linux 操作系统中比较流行的压缩文件格式。据统计，gzip 命令对文本文件有 60%～ 70%的压缩率。</p>
<blockquote>
<p><strong>注意：</strong>gzip 不会打包文件，压缩的过程源文件会对应变为”.gz”格式的压缩文件(源文件被删除)，解压缩的过程将”.gz”格式的压缩文件再恢复成对应的源文件。</p>
</blockquote>
<h4 id="基本信息如下-23"><a href="#基本信息如下-23" class="headerlink" title="基本信息如下"></a>基本信息如下</h4><ul>
<li>命令名称：gzip</li>
<li>英文原意：compress or expand files</li>
<li>所在路径：/bin/gzip</li>
<li>执行权限：所有用户</li>
<li>功能描述：压缩或解压缩 “.gz” 格式的文件或目录</li>
</ul>
<h4 id="命令格式-29"><a href="#命令格式-29" class="headerlink" title="命令格式"></a>命令格式</h4><p><code>gzip [选项] 源文件</code></p>
<h5 id="选项-24"><a href="#选项-24" class="headerlink" title="选项"></a>选项</h5><ul>
<li><code>-d</code> 执行解压缩</li>
<li><code>-r</code> 递归处理，将指定目录下的所有文件及子目录一并处理</li>
<li><code>-c</code> 将压缩数据输出到标准输出中，可以保留源文件<ul>
<li>使用”-c”选项，压缩数据会直接输出到屏幕上，为了不让压缩数据输出到屏幕上而是重定向到压缩文件中，并且同时保留源文件，命令可以这样写：gzip -c abc &gt; abc.gz</li>
</ul>
</li>
<li><code>-l</code> 列出压缩文件的相关信息</li>
</ul>
<h3 id="gunzip-命令"><a href="#gunzip-命令" class="headerlink" title="gunzip 命令"></a>gunzip 命令</h3><p>gunzip 命令用来解压缩 “.gz” 格式的文件(即使用 “gzip” 命令压缩的文件)，作用相当于 “gzip -d 压缩文件”，因此不论是压缩或解压缩，都可通过 “gzip” 指令单独完成。</p>
<h4 id="基本信息如下-24"><a href="#基本信息如下-24" class="headerlink" title="基本信息如下"></a>基本信息如下</h4><ul>
<li>命令名称：gunzip</li>
<li>英文原意：expand files</li>
<li>所在路径：/bin/gunzip</li>
<li>执行权限：所有用户</li>
<li>功能描述：解压缩”.gz” 格式的文件或目录</li>
</ul>
<h4 id="命令格式-30"><a href="#命令格式-30" class="headerlink" title="命令格式"></a>命令格式</h4><p><code>gunzip [选项] 压缩文件</code></p>
<h5 id="选项-25"><a href="#选项-25" class="headerlink" title="选项"></a>选项</h5><ul>
<li><code>-r</code> 递归处理，将指定目录下的所有文件及子目录一并处理</li>
<li><code>-c</code> 把解压后的文件数据输出到标准输出中，可以保留压缩文件</li>
<li><code>-l</code> 列出压缩文件的相关信息</li>
</ul>
<h2 id="“-bz2”-格式"><a href="#“-bz2”-格式" class="headerlink" title="“.bz2” 格式"></a>“.bz2” 格式</h2><p>“.bz2” 格式是 Linux 的另一种压缩格式，从理论上来讲，”.bz2” 格式的算法更新进、压缩比更好；而 “.gz” 格式相对来讲压缩的时间更快</p>
<h3 id="bzip2-命令"><a href="#bzip2-命令" class="headerlink" title="bzip2 命令"></a>bzip2 命令</h3><p>bzip2 命令是 “.bz2” 格式文件的压缩和解压缩命令。注意：”bzip2”不能用来压缩目录。</p>
<h4 id="基本信息如下-25"><a href="#基本信息如下-25" class="headerlink" title="基本信息如下"></a>基本信息如下</h4><ul>
<li>命令名称：bzip2</li>
<li>英文原意：a block-sorting file compressor</li>
<li>所在路径：/usr/bin/bzip2</li>
<li>执行权限：所有用户</li>
<li>功能描述：压缩或解压缩 “.bz2” 格式的文件</li>
</ul>
<h4 id="命令格式-31"><a href="#命令格式-31" class="headerlink" title="命令格式"></a>命令格式</h4><p><code>bzip2 [选项] 源文件</code></p>
<p>-选项</p>
<ul>
<li><code>-d</code> 执行解压缩</li>
<li><code>-k</code> 压缩或解压缩后，会删除原始文件，若要保留原始文件，请使用此参数</li>
<li><code>-f</code> 在压缩或解压缩时，若输出文件与现有文件同名，强制覆盖现有文件</li>
<li><code>-c</code> 将压缩与解压缩的数据输出到标准输出中</li>
</ul>
<h3 id="bunzip2-命令"><a href="#bunzip2-命令" class="headerlink" title="bunzip2 命令"></a>bunzip2 命令</h3><p>bunzip2 命令用来解压缩 “.bz2” 格式的文件(即使用 “bzip2” 命令压缩的文件)，作用相当于 “bzip2 -d 压缩文件”，因此不论是压缩或解压缩，都可通过 “bzip2” 指令单独完成。</p>
<h4 id="基本信息如下-26"><a href="#基本信息如下-26" class="headerlink" title="基本信息如下"></a>基本信息如下</h4><ul>
<li>命令名称：bunzip2</li>
<li>英文原意：a block-sorting file compressor</li>
<li>所在路径：/usr/bin/bunzip2</li>
<li>执行权限：所有用户</li>
<li>功能描述：解压缩 “.bz2” 格式的文件</li>
</ul>
<h4 id="命令格式-32"><a href="#命令格式-32" class="headerlink" title="命令格式"></a>命令格式</h4><p><code>bunzip2 [选项] 压缩文件</code></p>
<h5 id="选项-26"><a href="#选项-26" class="headerlink" title="选项"></a>选项</h5><ul>
<li><code>-k</code> bzip2 在解压缩后，会删除原始压缩文件，若要保留原始压缩文件，请使用此参数</li>
<li><code>-f</code> 解压缩时，若输出的文件与现有文件同名时，强制覆盖现有的文件</li>
<li><code>-c</code> 将解压缩的数据输出到标准输出中</li>
</ul>
<h2 id="“-tar”、”-tar-gz”、”-tar-bz2”-格式"><a href="#“-tar”、”-tar-gz”、”-tar-bz2”-格式" class="headerlink" title="“.tar”、”.tar.gz”、”.tar.bz2” 格式"></a>“.tar”、”.tar.gz”、”.tar.bz2” 格式</h2><p>tar 命令可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p>
<blockquote>
<p><strong>注意：</strong>打包和压缩是两个不同的概念，打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。<br>为什么要区分这两个概念呢？这源于 Linux 中很多压缩程序(gzip、bzip2)只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar），然后再用压缩程序进行压缩。tar 命令</p>
</blockquote>
<h3 id="基本信息如下-27"><a href="#基本信息如下-27" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：tar</li>
<li>英文原意：tar</li>
<li>所在路径：/usr/bin/tar</li>
<li>执行权限：所有用户</li>
<li>功能描述：打包与解打包文件</li>
</ul>
<h3 id="命令格式-33"><a href="#命令格式-33" class="headerlink" title="命令格式"></a>命令格式</h3><p>打包：<code>tar -c [选项] [-f 包文件名] 源文件或目录</code><br>解打包：<code>tar -x [选项] -f 包文件名</code></p>
<h4 id="选项-27"><a href="#选项-27" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-c</code> 执行打包</li>
<li><code>-x</code> 执行解打包</li>
<li><code>-z</code> 支持压缩和解压缩 “.tar.gz” 格式文件</li>
<li><code>-j</code> 支持压缩和解压缩 “.tar.bz2” 格式文件</li>
<li><code>-C</code> 目录路径 指定解打包位置</li>
<li><code>-f</code> 包文件名 指定打包文件名(.tar)或压缩包文件名(.tar.gz、.tar.bz2)。（执行打包时不写此选项，会默认把打包数据输出到屏幕）</li>
<li><code>-v</code> 显示打包或解打包过程</li>
<li><code>-t</code> 测试，就是不解打包，只是查看包中有哪些文件</li>
</ul>
<h3 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#=======================&quot;.tar&quot;格式=========================</span></span><br><span class="line"><span class="comment">#打包不会压缩</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -cvf anaconda-ks.cfg.tar anaconda-ks.cfg</span></span><br><span class="line"><span class="comment">#解打包到当前目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -xvf anaconda-ks.cfg.tar</span></span><br><span class="line"><span class="comment">#解打包到指定目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -xvf anaconda-ks.cfg.tar -C /testdir/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=====================&quot;.tar.gz&quot;格式=====================</span></span><br><span class="line"><span class="comment">#把/tmp/目录直接打包并压缩为&quot;.tar.gz&quot;格式</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -zcvf tmp.tar.gz /tmp/</span></span><br><span class="line"><span class="comment">#解压缩并解打包&quot;.tar.gz&quot;格式文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -zxvf tmp.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=====================&quot;.tar.bz2&quot;格式=====================</span></span><br><span class="line"><span class="comment">#把/tmp/目录直接打包并压缩为&quot;.tar.bz2&quot;格式</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -jcvf tmp.tar.gz /tmp/</span></span><br><span class="line"><span class="comment">#解压缩并解打包&quot;.tar.bz2&quot;格式文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -jxvf tmp.tar.gz</span></span><br></pre></td></tr></table></figure>

<h1 id="关机和重启命令"><a href="#关机和重启命令" class="headerlink" title="关机和重启命令"></a>关机和重启命令</h1><h2 id="sync-数据同步"><a href="#sync-数据同步" class="headerlink" title="sync 数据同步"></a>sync 数据同步</h2><p>sync 命令用于强制被改变的内容立刻写入磁盘。在 Linux/Unix 系统中，在文件或数据处理过程中一般先放到内存缓冲区中，等到适当的时候再写入磁盘，以提高系统的运行效率。sync 命令则可用来强制将内存缓冲区中的数据立即写入磁盘中。用户通常不需执行 sync 命令，系统会自动执行 update 或 bdflush 操作，将缓冲区的数据写入磁盘。只有在 update 或 bdflush 无法执行或用户需要非正常关机时，才需手动执行 sync 命令。</p>
<h3 id="基本信息如下-28"><a href="#基本信息如下-28" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：sync</li>
<li>英文原意：flush file system buffers</li>
<li>所在路径：/bin/sync</li>
<li>执行权限：所有用户</li>
<li>功能描述：刷新文件系统缓冲区</li>
</ul>
<h3 id="命令格式-34"><a href="#命令格式-34" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>sync [选项]</code></p>
<h2 id="shutdown-命令"><a href="#shutdown-命令" class="headerlink" title="shutdown 命令"></a>shutdown 命令</h2><p>shutdown 命令用来系统关机。shutdown 指令可以关闭所有程序，并依用户的需要，进行重新开机或关机的动作。基本信息如下：</p>
<ul>
<li>命令名称：shutdown</li>
<li>英文原意：bring the system down</li>
<li>所在路径：/sbin/shutdown</li>
<li>执行权限：超级用户</li>
<li>功能描述：关机和重启</li>
</ul>
<h3 id="命令格式-35"><a href="#命令格式-35" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>shutdown [选项] 时间 [警告信息]</code></p>
<h4 id="选项-28"><a href="#选项-28" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-c</code> 取消将要执行的 shutdown 命令</li>
<li><code>-h</code> 系统关机</li>
<li><code>-r</code> 系统重启</li>
</ul>
<h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>now 立即执；hh:mm 指定确定时间点执行；+分钟数 延迟指定分钟后执行</p>
<h3 id="警告信息"><a href="#警告信息" class="headerlink" title="警告信息"></a>警告信息</h3><p>执行指令时，同时送出警告信息给登入用户</p>
<h3 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#立即关机</span></span><br><span class="line">[root@localhost ~]<span class="comment"># shutdown -h now</span></span><br><span class="line"><span class="comment">#指定5分钟后关机，同时送出警告信息给登入用户：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># shutdown +5 &quot;System will shutdown after 5 minutes&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="reboot-命令"><a href="#reboot-命令" class="headerlink" title="reboot 命令"></a>reboot 命令</h2><p>reboot 命令用来重新系统，命令也是安全的，而且不需要过多的选项</p>
<ul>
<li>命令名称：reboot</li>
<li>英文原意：reboot</li>
<li>所在路径：/sbin/reboot</li>
<li>执行权限：超级用户</li>
<li>功能描述：重启系统</li>
</ul>
<h3 id="命令格式-36"><a href="#命令格式-36" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>reboot [选项]</code></p>
<h4 id="选项-29"><a href="#选项-29" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-d</code> 重新开机时不把数据写入记录文件/var/tmp/wtmp。本参数具有“-n”参数效果；</li>
<li><code>-f</code> 强制重新开机，不调用 shutdown 指令的功能；</li>
<li><code>-i</code> 在重开机之前，先关闭所有网络界面；</li>
<li><code>-n</code> 重开机之前不检查是否有未结束的程序；</li>
<li><code>-w</code> 仅做测试，并不真正将系统重新开机，只会把重开机的数据写入/var/log 目录下的 wtmp 记录文件。</li>
</ul>
<h2 id="halt-和-poweroff-命令"><a href="#halt-和-poweroff-命令" class="headerlink" title="halt 和 poweroff 命令"></a>halt 和 poweroff 命令</h2><p>halt 和 poweroff 这两都是系统关机命令，直接执行即可。但是两个命令不会完整关闭和保存系统的服务，不建议使用。</p>
<h2 id="init-命令"><a href="#init-命令" class="headerlink" title="init 命令"></a>init 命令</h2><p>init 命令是修改 Linux 运行级别的命令，是 Linux 下的进程初始化工具，init 进程是所有 Linux 进程的父进程，它的进程号为 1。也可以用于关机和重启，这个命令并不安全，不建议使用</p>
<h3 id="命令格式-37"><a href="#命令格式-37" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>init [选项] 系统运行级别</code></p>
<h4 id="选项-30"><a href="#选项-30" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-b</code> 不执行相关脚本而直接进入单用户模式</li>
<li><code>-s</code> 切换到单用户模式</li>
</ul>
<h3 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关机，也就是调用系统的0级别</span></span><br><span class="line">[root@localhost ~]<span class="comment"># init 0</span></span><br><span class="line"><span class="comment">#重启，也就是调用系统的6级别</span></span><br><span class="line">[root@localhost ~]<span class="comment"># init 6</span></span><br></pre></td></tr></table></figure>

<details>
<summary>Linux 有 7 个系统运行级别</summary>

<table>
<thead>
<tr>
<th>运行级别</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>关机</td>
</tr>
<tr>
<td>1</td>
<td>单用户模式，可以想象为 Windows 的安全模式，主要用于系统修复</td>
</tr>
<tr>
<td>2</td>
<td>不完全的命令模式，不含 NFS 服务</td>
</tr>
<tr>
<td>3</td>
<td>完全的命令模式，就是标准字符界面</td>
</tr>
<tr>
<td>4</td>
<td>系统保留，没有用到</td>
</tr>
<tr>
<td>5</td>
<td>图形模式</td>
</tr>
<tr>
<td>6</td>
<td>重启动</td>
</tr>
</tbody></table>
<blockquote>
<p><code>runlevel</code> 命令可查看当前系统运行级别</p>
</blockquote>
</details>

<h1 id="常用网络命令"><a href="#常用网络命令" class="headerlink" title="常用网络命令"></a>常用网络命令</h1><h2 id="配置-IP-地址"><a href="#配置-IP-地址" class="headerlink" title="配置 IP 地址"></a>配置 IP 地址</h2><p>IP 地址是计算机在互联网中唯一的地址编码，每台计算机如果需要接入网络和其他计算机进行数据通信，就必须配置唯一的 IP 地址</p>
<h3 id="IP-地址的配置有两种方法"><a href="#IP-地址的配置有两种方法" class="headerlink" title="IP 地址的配置有两种方法"></a>IP 地址的配置有两种方法</h3><h4 id="setup-工具"><a href="#setup-工具" class="headerlink" title="setup 工具"></a>setup 工具</h4><h4 id="手工修改网卡配置文件"><a href="#手工修改网卡配置文件" class="headerlink" title="手工修改网卡配置文件"></a>手工修改网卡配置文件</h4><ol>
<li><p>编辑网卡文件，vi /etc/sysconfig/network-scripts/ifcfg-eth0，”ifcfg-eth0”是第一块网卡，第二块网卡则为”ifcfg-eth1”，以此类推。</p>
<details>
<summary>网卡文件内容配置项如下</summary>

<ul>
<li>DEVICE=eth0 #网卡设备名</li>
<li>BOOTPROTO=static #[none|static|bootp|dhcp]（引导时不使用协议|静态分配|BOOTP 协议|DHCP 协议）</li>
<li>HWADDR=00:15:5D:00:46:83 #MAC 地址</li>
<li>UUID=5753e2ed-add1-4d1c-8a69-21a89647b050 # 唯一识别码</li>
<li>NM_CONTROLLED=yes #是否可以由 Network Manager 图形管理工具托管</li>
<li>ONBOOT=yes #[yes|no]，是否随网络服务启动，如果配置”no”，使用”ifconfig”命令时看不到该网卡</li>
<li>TYPE=Ethernet # 网络类型</li>
<li>IPADDR=192.168.1.10 #IP 地址</li>
<li>NETMASK=255.255.255.0 #子网掩码</li>
<li>NETWORK=192.168.1.0 #网络地址</li>
<li>BROADCAST=192.168.1.255 #广播地址</li>
<li>GATEWAY=192.168.1.1 #网关地址</li>
<li>DNS1=202.109.14.5 #首选 DNS 服务地址</li>
<li>DNS2=219.141.136.10 #备用 DNS 服务地址</li>
<li>USERCTL=no #[yes|no]（非 root 用户是否可以控制该设备）</li>
</ul>
</details>
</li>
<li><p>查看 DNS 服务配置文件，vim /etc/resolv.conf，里面的内容是系统自动生成的，一般不需要修改</p>
</li>
<li><p>重启网络服务，service network restart 或 /etc/init.d/network restart</p>
</li>
</ol>
<p><strong>注意：</strong>使用虚拟机克隆时，UUID 可能复制的是一样的，导致网络服务启动失败，需要重置 UUID 值：</p>
<ol>
<li>编辑网卡文件，删除 UUID 和 MAC 地址</li>
<li>删除 MAC 地址和 UUID 绑定文件，rm -rf /etc/udev/rules.d/70-persistent-net.rules</li>
<li>重启系统</li>
</ol>
<h2 id="ifconfig-命令"><a href="#ifconfig-命令" class="headerlink" title="ifconfig 命令"></a>ifconfig 命令</h2><p>ifconfig 被用于配置和显示 Linux 内核中网络接口的网络参数。用 ifconfig 命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在，要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。</p>
<h3 id="基本信息如下-29"><a href="#基本信息如下-29" class="headerlink" title="基本信息如下"></a>基本信息如下</h3><ul>
<li>命令名称：ifconfig</li>
<li>英文原意：configure a network interface</li>
<li>所在路径：/sbin/ifconfig</li>
<li>执行权限：超级用户</li>
<li>功能描述：配置网络接口</li>
</ul>
<h3 id="命令格式-38"><a href="#命令格式-38" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>ifconfig [参数]</code></p>
<h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><ul>
<li><code>add 地址</code> 设置网络设备 IPv6 的 ip 地址；</li>
<li><code>del 地址</code> 删除网络设备 IPv6 的 IP 地址；</li>
<li><code>down</code> 关闭指定的网络设备；</li>
<li><code>&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt;</code> 设置网络设备的类型与硬件地址；</li>
<li><code>io_addr I/O 地址</code> 设置网络设备的 I/O 地址；</li>
<li><code>irq IRQ 地址</code> 设置网络设备的 IRQ；</li>
<li><code>media 网络媒介类型</code> 设置网络设备的媒介类型；</li>
<li><code>mem_start 内存地址</code> 设置网络设备在主内存所占用的起始地址；</li>
<li><code>metric 数目</code> 指定在计算数据包的转送次数时，所要加上的数目；</li>
<li><code>mtu 字节</code> 设置网络设备的 MTU；</li>
<li><code>netmask 子网掩码</code> 设置网络设备的子网掩码；</li>
<li><code>tunnel 地址</code> 建立 IPv4 与 IPv6 之间的隧道通信地址；</li>
<li><code>up</code> 启动指定的网络设备；</li>
<li><code>IP 地址</code> 指定网络设备的 IP 地址；</li>
<li><code>网络设备</code> 指定网络设备的名称。</li>
</ul>
<p>ifconfig 命令最主要的作用就是查看 IP 地址的信息，直接输入 ifconfig 命令即可显示激活状态的网络设备信息:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:16:3E:00:1E:51</span><br><span class="line">          inet addr:10.160.7.81  Bcast:10.160.15.255  Mask:255.255.240.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:61430830 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:88534 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:3607197869 (3.3 GiB)  TX bytes:6115042 (5.8 MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:56103 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:56103 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:5079451 (4.8 MiB)  TX bytes:5079451 (4.8 MiB)</span><br></pre></td></tr></table></figure>

<p><strong>内容说明：</strong></p>
<ul>
<li>eth0 表示第一块网卡，其中 HWaddr 表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC 地址）是 00:16:3E:00:1E:51</li>
<li>inet addr 用来表示网卡的 IP 地址，此网卡的 IP 地址是 10.160.7.81，广播地址 Bcast:10.160.15.255，掩码地址 Mask:255.255.240.0</li>
<li>lo 是表示主机的回环地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 httpd 服务器的指定到回环地址，在浏览器输入 127.0.0.1 就能看到你所架 WEB 网站了，但只是本机能看得到，局域网的其它主机或用户无从知道<ul>
<li>第一行：连接类型：Ethernet（以太网）HWaddr（硬件 mac 地址）</li>
<li>第二行：网卡的 IP 地址、子网、掩码</li>
<li>第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500 字节</li>
<li>第四、五行：接收、发送数据包情况统计</li>
<li>第七行：接收、发送数据字节数统计信息</li>
</ul>
</li>
</ul>
<h3 id="示例-11"><a href="#示例-11" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动和关闭网卡eth0。关闭网卡eth0，ssh登陆linux服务器操作要小心，关闭了就不能开启了，除非你有多网卡</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 up</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 down</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为网卡eth0配置IPv6地址</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 add 33ffe:3240:800:1005::2/64</span></span><br><span class="line"> <span class="comment">#为网卡eth0删除IPv6地址</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 del 33ffe:3240:800:1005::2/64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用ifconfig修改MAC地址</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 hw ether 00:AA:BB:CC:dd:EE</span></span><br><span class="line"><span class="comment">#ifconfig配置IP地址</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 192.168.2.10</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启用和关闭arp协议</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 arp</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 -arp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置最大传输单元，这里设置能通过的最大数据包大小为 1500 bytes</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 mtu 1500</span></span><br></pre></td></tr></table></figure>

<h2 id="ping-命令"><a href="#ping-命令" class="headerlink" title="ping 命令"></a>ping 命令</h2><p>ping 命令是常用的网络命令，主要通过 ICMP 协议进行网络探测，测试网络中主机的通信情况。基本信息如下：</p>
<ul>
<li>命令名称：ping</li>
<li>英文原意：send ICMP ECHO_REQUEST to network hosts</li>
<li>所在路径：/bin/ping</li>
<li>执行权限：所有用户</li>
<li>功能描述：向网络主机发送 ICMP 请求</li>
</ul>
<h3 id="命令格式-39"><a href="#命令格式-39" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>ping [选项] IP</code></p>
<h4 id="选项-31"><a href="#选项-31" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-b</code> 用于对整个网段进行探测。IP 需要为广播地址</li>
<li><code>-c 次数</code> 设置完成要求回应的次数</li>
<li><code>-s 字节数</code> 设置数据包的大小</li>
</ul>
<h3 id="示例-12"><a href="#示例-12" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#探测整个网段中有多少主机是可以和本机通信的，而不是一个一个IP地址地进行探测</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ping -b -c 3 192.168.199.255</span></span><br><span class="line">WARNING: pinging broadcast address</span><br><span class="line">PING 192.168.199.255 (192.168.199.255) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.199.216: icmp_seq=1 ttl=64 time=77.7 ms</span><br><span class="line">64 bytes from 192.168.199.131: icmp_seq=2 ttl=64 time=102 ms</span><br><span class="line">64 bytes from 192.168.199.216: icmp_seq=3 ttl=64 time=19.5 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.199.255 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2023ms</span><br><span class="line">rtt min/avg/max/mdev = 19.515/66.701/102.798/34.892 ms</span><br></pre></td></tr></table></figure>

<h2 id="netstat-命令"><a href="#netstat-命令" class="headerlink" title="netstat 命令"></a>netstat 命令</h2><p>netstat 是网络状态查看命令，既可以查看到本机开启的端口，也可以查看哪些客户端连接。在 CentOS 7.x 中 netstat 命令默认没有安装，如果需要使用，需要先安装 “net-snmp” 和 “net-tools” 软件包。基本信息如下：</p>
<ul>
<li>命令名称：network</li>
<li>英文原意：print network connections, routing tables, interface statistics, masquerade connections, and mulicast memberships</li>
<li>所在路径：/bin/netstat</li>
<li>执行权限：所有用户</li>
<li>功能描述：打印网络连接、路由表、接口统计信息、伪装连接和多播成员身份</li>
</ul>
<h3 id="命令格式-40"><a href="#命令格式-40" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>netstat [选项]</code></p>
<h4 id="选项-32"><a href="#选项-32" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-a</code> 列出所有网络状态，包括 Socket 程序</li>
<li><code>-c 秒数</code> 制定每隔几秒刷一次网络状态</li>
<li><code>-n</code> 使用 IP 地址和端口号显示，不使用域名与服务名</li>
<li><code>-p</code> 显示 PID 和程序</li>
<li><code>-t</code> 显示使用 TCP 协议端口的连接情况</li>
<li><code>-u</code> 显示使用 UDP 协议端口的连接情况</li>
<li><code>-l</code> 仅显示监听状态的连接</li>
<li><code>-r</code> 显示路由表</li>
</ul>
<h3 id="示例-13"><a href="#示例-13" class="headerlink" title="示例"></a>示例</h3><h4 id="查看本机开启的端口"><a href="#查看本机开启的端口" class="headerlink" title="查看本机开启的端口"></a>查看本机开启的端口</h4><p>这是本机最常用的方式，使用”-tuln”选项。因为使用了”-l”选项，所以只能看到监听状态的连接，而不能看到已经建立连接状态的连接，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># netstat -tuln</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State</span><br><span class="line">tcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN</span><br><span class="line">tcp        0      0 0.0.0.0:11211               0.0.0.0:*                   LISTEN</span><br><span class="line">tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN</span><br><span class="line">tcp        0      0 :::11211                    :::*                        LISTEN</span><br><span class="line">tcp        0      0 :::80                       :::*                        LISTEN</span><br><span class="line">tcp        0      0 :::22                       :::*                        LISTEN</span><br><span class="line">udp        0      0 0.0.0.0:11211               0.0.0.0:*</span><br><span class="line">udp        0      0 :::11211                    :::*</span><br></pre></td></tr></table></figure>

<p>这个命令输出内容较多，下面对每列进行说明：</p>
<ul>
<li>Proto：网络连接的协议，一般就是 TCP 协议或者 UDP 协议</li>
<li>Recv-Q：接收队列。表示接收到的数据，已经在本地的缓冲中，但是还没有被进程取走</li>
<li>Send-Q：发送队列。表示从本机发送，对方还没有收到的数据，依然在本地的缓冲中，一般是不具备 ACK 标志的数据包</li>
<li>Local Address：本机的 IP 地址和端口号。</li>
<li>Foreign Address：远程主机的 IP 地址和端口号。</li>
<li>State：状态。常见的状态主要有以下几种：<ul>
<li>LISTEN：监听状态，只有 TCP 协议需要监听，而 UDP 协议不需要监听</li>
<li>ESTABLISHED：已经建立连接的状态。如果使用“-l”选项，则看不到已经建立连接的状态</li>
<li>SYN_SENT：SYN 发起包，就是主动发起连接的数据包</li>
<li>SYN_RECV：接收到主动连接的数据包</li>
<li>FIN_WAIT1：正在中断的连接</li>
<li>FIN_WAIT2：已经中断的连接，但是正在等待对方主机进行确认</li>
<li>TIME_WAIT：连接已经中断，但是套接字依然在网络中等待结束</li>
<li>CLOSED：套接字没有被使用</li>
<li>在这些状态中，我们最常用的就是 LISTEN 和 ESTABLISHED 状态，一种代表正在监听，另一种代表已经建立连接</li>
</ul>
</li>
</ul>
<h4 id="查看本机有哪些程序开启的端口"><a href="#查看本机有哪些程序开启的端口" class="headerlink" title="查看本机有哪些程序开启的端口"></a>查看本机有哪些程序开启的端口</h4><p>如果使用“-p”选项，查询结果会多出一列”PID/Program name”，则可以查看到是哪个程序占用了端口，并且可以知道这个程序的 PID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># netstat -tulnp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address      Foreign Address     State      PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:3306       0.0.0.0:*           LISTEN     2359/mysqld</span><br><span class="line">tcp        0      0 0.0.0.0:11211      0.0.0.0:*           LISTEN     1563/memcached</span><br><span class="line">tcp        0      0 0.0.0.0:22         0.0.0.0:*           LISTEN     1490/sshd</span><br><span class="line">tcp        0      0 :::11211           :::*                LISTEN     1563/memcached</span><br><span class="line">tcp        0      0 :::80              :::*                LISTEN     21025/httpd</span><br><span class="line">tcp        0      0 :::22              :::*                LISTEN     1490/sshd</span><br><span class="line">udp        0      0 0.0.0.0:11211      0.0.0.0:*                      1563/memcached</span><br><span class="line">udp        0      0 :::11211           :::*                           1563/memcached</span><br></pre></td></tr></table></figure>

<h4 id="查看所有连接"><a href="#查看所有连接" class="headerlink" title="查看所有连接"></a>查看所有连接</h4><p>使用选项“-an”可以查看所有连接，包括监听状态的连接（LISTEN）、已经建立连接状态的<br>连接（ESTABLISHED）、Socket 程序连接等。因为连接较多，所以输出的内容有很多</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># netstat -an</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State</span><br><span class="line">tcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN</span><br><span class="line">tcp        0      0 0.0.0.0:11211               0.0.0.0:*                   LISTEN</span><br><span class="line">tcp        0      0 117.79.130.170:80           78.46.174.55:58815          SYN_RECV</span><br><span class="line">tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN</span><br><span class="line">tcp        0      0 117.79.130.170:22           124.205.129.99:10379        ESTABLISHED</span><br><span class="line">tcp        0      0 117.79.130.170:22           124.205.129.99:11811        ESTABLISHED</span><br><span class="line"><span class="comment"># ...省略部分内容...</span></span><br><span class="line">udp        0      0 0.0.0.0:11211               0.0.0.0:*</span><br><span class="line">udp        0      0 :::11211                    :::*</span><br><span class="line">Active UNIX domain sockets (servers and established)</span><br><span class="line">Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     12668  /var/run/mcelog-client</span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     12193  @/var/run/hald/dbus-ZeYsMXZ7Uf</span><br><span class="line"><span class="comment"># ...省略部分内容...</span></span><br></pre></td></tr></table></figure>

<p>从 “Active UNIX domain sockets” 开始，之后的内容就是 Socket 程序产生的连接，之前的内容都是网<br>络服务产生的连接。我们可以在“-an”选项的输出中看到各种网络连接状态，而之前的“-tuln”选项则只能看到监听状态的连接</p>
<h2 id="write-命令"><a href="#write-命令" class="headerlink" title="write 命令"></a>write 命令</h2><p>write 命令用于向指定登录用户终端上发送信息。通过 write 命令可传递信息给另一位登入系统的用户，当输入完毕后，键入 “回车” 表示发送，键入 “Ctrl+C” 表示信息结束。如果接收信息的用户不只登入本地主机一次，你可以指定接收信息的终端机编号。基本信息：</p>
<ul>
<li>命令名称：write</li>
<li>英文原意：send a message to another user</li>
<li>所在路径：/usr/bin/write</li>
<li>执行权限：所有用户</li>
<li>功能描述：向其他用户发送消息</li>
</ul>
<h3 id="命令格式-41"><a href="#命令格式-41" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>write 用户名 [终端编号]</code></p>
<ul>
<li><code>用户名</code> 指定要接受信息的登录用户</li>
<li><code>终端编号</code> 指定接收信息的用户的登录终端，如果省略，且用户在多个终端登录，会发送给其中一个终端</li>
</ul>
<h2 id="wall-命令"><a href="#wall-命令" class="headerlink" title="wall 命令"></a>wall 命令</h2><p>wall 命令用于向系统当前所有打开的终端上输出信息，而 “write” 命令用于给指定用户发送消息。</p>
<h3 id="命令格式-42"><a href="#命令格式-42" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>wall 消息</code></p>
<h3 id="示例-14"><a href="#示例-14" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wall &quot;I will be in 5 minutes to restart, please save your data&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="系统痕迹命令"><a href="#系统痕迹命令" class="headerlink" title="系统痕迹命令"></a>系统痕迹命令</h1><p>系统中有一些重要的痕迹日志文件，如 /var/log/wtmp、 /var/run/utmp、 /var/log/btmp、/var/log/lastlog 等日志文件，如果你用 vim 打开这些文件，你会发现这些文件是二进制乱码。这是由于这些日志中保存的是系统的重要登录痕迹，包括某个用户何时登录了系统，何时退出了系统，错误登录等重要的系统信息。这些信息要是可以通过 vim 打开，就能编辑，这样痕迹信息就不准确，所以这些重要的痕迹日志，只能通过对应的命令来进行查看。</p>
<h2 id="w-命令"><a href="#w-命令" class="headerlink" title="w 命令"></a>w 命令</h2><p>w 命令是显示系统中正在登录的用户信息的命令，这个命令查看的痕迹日志是 “/var/run/utmp”。基础信息如下：</p>
<ul>
<li>命令名称：w</li>
<li>英文原意：show who is logged on and what they are doing</li>
<li>所在路径：/usr/bin/w</li>
<li>执行权限：所有用户</li>
<li>功能描述：显示登录用户和他们正在做什么</li>
</ul>
<h3 id="命令格式-43"><a href="#命令格式-43" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>w [选项] [用户名]</code></p>
<h4 id="选项-33"><a href="#选项-33" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-h</code> 不打印头信息；</li>
<li><code>-u</code> 当显示当前进程和 cpu 时间时忽略用户名；</li>
<li><code>-s</code> 使用短输出格式；</li>
<li><code>-f</code> 显示用户从哪登录；</li>
<li><code>用户</code> 仅显示指定用户</li>
</ul>
<h3 id="示例-15"><a href="#示例-15" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># w</span></span><br><span class="line"> 18:31:08 up 1 day, 16 min,  3 users,  load average: 0.00, 0.00, 0.00</span><br><span class="line">USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     tty1     -                Sat18   49:23   0.07s  0.07s -bash</span><br><span class="line">root     pts/0    192.168.199.119  18:22    8:17   0.02s  0.02s -bash</span><br><span class="line">root     pts/1    192.168.199.119  18:22    0.00s  0.03s  0.00s w</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>第一行内容：<ul>
<li>18:31:08：系统当前时间</li>
<li>up 1 day, 16 min：系统的运行时间</li>
<li>3 users：当前登录终端数量</li>
<li>load average: 0.00, 0.00, 0.00：系统在之前 1 分钟、5 分钟、15 分钟的平均负载。如果 CPU 是单核的，则这个数据超过 1 就是高负载；如果 CPU 是四核的，则这个数值超过 4 就是高负载</li>
</ul>
</li>
<li>第二行内容：<ul>
<li><code>USER</code> 当前登录的用户</li>
<li><code>TTY</code> 登录的终端。tty1-6: 本地字符终端(alt+F1-6 切换)，tty7: 本地图形终端(ctrl+F7 切换，必须安装启动图形界面)，pts/0-255: 远程终端</li>
<li><code>FROM</code> 登录的 IP 地址，如果是本地终端，则是空</li>
<li><code>LOGIN@</code> 登录时间</li>
<li><code>IDLE</code> 用户空闲时间</li>
<li><code>JCPU</code> 所有的进程占用的 CPU 时间</li>
<li><code>PCPU</code> 当前进程占用的 CPU 时间</li>
<li><code>WHAT</code> 用户正在进行的操作</li>
</ul>
</li>
</ul>
<h2 id="who-命令"><a href="#who-命令" class="headerlink" title="who 命令"></a>who 命令</h2><p>who 命令和 w 命令类似，用于查看正在登录的用户，但显示的内容更加简单，也是查看 “/var/run/utmp” 日志。</p>
<h3 id="命令格式-44"><a href="#命令格式-44" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>who [选项] [查询文件]</code></p>
<h4 id="选项-34"><a href="#选项-34" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-H</code> 显示各栏位的标题信息列</li>
<li><code>-q</code> 只显示登入系统的帐号名称和总人数</li>
<li><code>-w</code> 显示用户的信息状态栏</li>
<li><code>-u</code> 显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成”.”号，如果该用户已超过 24 小时没有任何动作，则标示出”old”字符串</li>
<li><code>查询文件</code> 指定要查询的文件，默认是/var/run/utmp</li>
</ul>
<h2 id="last-命令"><a href="#last-命令" class="headerlink" title="last 命令"></a>last 命令</h2><p>last 命令查看系统所有登录过的用户信息，包括正在登录的用户和之前登录的用户，这个命令查看的是 “/var/log/wtmp” 痕迹日志文件</p>
<h3 id="命令格式-45"><a href="#命令格式-45" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>last [选项] [用户|终端]</code></p>
<h4 id="选项-35"><a href="#选项-35" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-a</code> 把从何处登入系统的主机名称或 ip 地址，显示在最后一行</li>
<li><code>-d</code> 将 IP 地址转换成主机名称</li>
<li><code>-f 记录文件</code> 指定记录文件</li>
<li><code>-n 显示列数或-显示列数</code> 设置列出名单的显示列数</li>
<li><code>-R</code> 不显示登入系统的主机名称或 IP 地址</li>
<li><code>-x</code> 显示系统关机，重新开机，以及执行等级的改变等信息</li>
<li><code>用户|终端</code> 显示指定的用户或终端</li>
</ul>
<h2 id="lastlog-命令"><a href="#lastlog-命令" class="headerlink" title="lastlog 命令"></a>lastlog 命令</h2><p>lastlog 命令是查看系统中所有用户最好一次的登录时间的命令，这个命令查看的是 “/var/log/lastlog” 痕迹日志文件</p>
<h3 id="命令格式-46"><a href="#命令格式-46" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>lastlog [选项]</code></p>
<h4 id="选项-36"><a href="#选项-36" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-b 天数</code> 显示指定天数前的登录信息</li>
<li><code>-t 天数</code> 显示指定天数以来的登录信息</li>
<li><code>-u 用户名</code> 显示指定用户的最近登录信息</li>
</ul>
<h2 id="lostb-命令"><a href="#lostb-命令" class="headerlink" title="lostb 命令"></a>lostb 命令</h2><p>lastb 命令是查看错误登录的信息的，查看的是 “/var/log/btmp” 痕迹日志</p>
<h3 id="命令格式-47"><a href="#命令格式-47" class="headerlink" title="命令格式"></a>命令格式</h3><p><code>lostb [选项] [用户|终端]</code></p>
<h4 id="选项-37"><a href="#选项-37" class="headerlink" title="选项"></a>选项</h4><ul>
<li><code>-a</code> 把从何处登入系统的主机名称或 ip 地址显示在最后一行</li>
<li><code>-d</code> 将 IP 地址转换成主机名称</li>
<li><code>-f 记录文件</code> 指定记录文件</li>
<li><code>-n 显示列数或-显示列数</code> 设置列出名单的显示列数</li>
<li><code>-R</code> 不显示登入系统的主机名称或 IP 地址</li>
<li><code>-x</code> 显示系统关机，重新开机，以及执行等级的改变等信息</li>
<li><code>用户|终端</code> 显示指定的用户或终端</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
